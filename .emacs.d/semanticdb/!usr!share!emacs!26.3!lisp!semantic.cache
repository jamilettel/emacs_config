;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4902])
            ("setq-local" function (:arguments ("var" "val")) nil [4904 5151])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5153 5594])
            ("push" function (:arguments ("newelt" "place")) nil [5596 6190])
            ("pop" function (:arguments ("place")) nil [6192 7049])
            ("when" function (:arguments ("cond" "body")) nil [7051 7339])
            ("unless" function (:arguments ("cond" "body")) nil [7341 7627])
            ("dolist" function (:arguments ("spec" "body")) nil [7629 9089])
            ("dotimes" function (:arguments ("spec" "body")) nil [9091 10556])
            ("declare" function (:arguments ("_specs")) nil [10558 11133])
            ("ignore-errors" function (:arguments ("body")) nil [11135 11442])
            ("gensym-counter" variable nil nil [11473 11576])
            ("gensym" function (:arguments ("prefix")) nil [11578 11898])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11900 12048])
            ("error" function (:arguments ("args")) nil [12105 12621])
            ("user-error" function (:arguments ("format" "args")) nil [12623 13283])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13285 14198])
            ("frame-configuration-p" function (:arguments ("object")) nil [14312 14567])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14569 14946])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15140 15720])
            ("caar" function (:arguments ("x")) nil [15722 15849])
            ("cadr" function (:arguments ("x")) nil [15851 15978])
            ("cdar" function (:arguments ("x")) nil [15980 16107])
            ("cddr" function (:arguments ("x")) nil [16109 16236])
            ("caaar" function (:arguments ("x")) nil [16238 16389])
            ("caadr" function (:arguments ("x")) nil [16391 16542])
            ("cadar" function (:arguments ("x")) nil [16544 16695])
            ("caddr" function (:arguments ("x")) nil [16697 16848])
            ("cdaar" function (:arguments ("x")) nil [16850 17001])
            ("cdadr" function (:arguments ("x")) nil [17003 17154])
            ("cddar" function (:arguments ("x")) nil [17156 17307])
            ("cdddr" function (:arguments ("x")) nil [17309 17460])
            ("caaaar" function (:arguments ("x")) nil [17462 17633])
            ("caaadr" function (:arguments ("x")) nil [17635 17806])
            ("caadar" function (:arguments ("x")) nil [17808 17979])
            ("caaddr" function (:arguments ("x")) nil [17981 18152])
            ("cadaar" function (:arguments ("x")) nil [18154 18325])
            ("cadadr" function (:arguments ("x")) nil [18327 18498])
            ("caddar" function (:arguments ("x")) nil [18500 18671])
            ("cadddr" function (:arguments ("x")) nil [18673 18844])
            ("cdaaar" function (:arguments ("x")) nil [18846 19017])
            ("cdaadr" function (:arguments ("x")) nil [19019 19190])
            ("cdadar" function (:arguments ("x")) nil [19192 19363])
            ("cdaddr" function (:arguments ("x")) nil [19365 19536])
            ("cddaar" function (:arguments ("x")) nil [19538 19709])
            ("cddadr" function (:arguments ("x")) nil [19711 19882])
            ("cdddar" function (:arguments ("x")) nil [19884 20055])
            ("cddddr" function (:arguments ("x")) nil [20057 20228])
            ("last" function (:arguments ("list" "n")) nil [20230 20647])
            ("butlast" function (:arguments ("list" "n")) nil [20649 20877])
            ("nbutlast" function (:arguments ("list" "n")) nil [20879 21156])
            ("zerop" function (:arguments ("number")) nil [21158 21388])
            ("delete-dups" function (:arguments ("list")) nil [21390 22177])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22244 22702])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22704 24711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24713 25530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25570 26370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26372 26694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26696 26964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26966 27401])
            ("assoc-delete-all" function (:arguments ("key" "alist")) nil [27403 27897])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27899 28383])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [28385 28878])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28880 29493])
            ("remove" function (:arguments ("elt" "seq")) nil [29495 29848])
            ("remq" function (:arguments ("elt" "list")) nil [29850 30181])
            ("kbd" function (:arguments ("keys")) nil [30206 30646])
            ("put" code nil nil [30647 30665])
            ("undefined" function (:user-visible-flag t) nil [30667 31195])
            ("put" code nil nil [31290 31325])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [31327 31891])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31893 32545])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [32547 34608])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34610 35290])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [35292 35762])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35816 36416])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [36418 36884])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36886 38755])
            ("put" code nil nil [38757 38814])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38816 39191])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39222 40142])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [40144 40948])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40950 41146])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [41148 41377])
            ("key-substitution-in-progress" variable nil nil [41433 41526])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [41528 42910])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42912 44575])
            ("global-map" variable nil nil [44724 44898])
            ("esc-map" variable nil nil [44900 45040])
            ("ctl-x-map" variable nil nil [45042 45177])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [45179 45257])
            ("defalias" code nil nil [45258 45296])
            ("define-key" code nil nil [45297 45339])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [45341 45413])
            ("defalias" code nil nil [45414 45452])
            ("define-key" code nil nil [45453 45495])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [45535 45590])
            ("listify-key-sequence" function (:arguments ("key")) nil [45592 45830])
            ("eventp" function (:arguments ("obj")) nil [45832 46033])
            ("event-modifiers" function (:arguments ("event")) nil [46035 47329])
            ("event-basic-type" function (:arguments ("event")) nil [47331 48099])
            ("mouse-movement-p" function (:arguments ("object")) nil [48101 48234])
            ("mouse-event-p" function (:arguments ("object")) nil [48236 48454])
            ("event-start" function (:arguments ("event")) nil [48456 49616])
            ("event-end" function (:arguments ("event")) nil [49618 49936])
            ("event-click-count" function (:arguments ("event")) nil [49938 50148])
            ("event-line-count" function (:arguments ("event")) nil [50150 50349])
            ("posnp" function (:arguments ("obj")) nil [50406 51054])
            ("posn-window" function (:arguments ("position")) nil [51088 51270])
            ("posn-area" function (:arguments ("position")) nil [51272 51596])
            ("posn-point" function (:arguments ("position")) nil [51598 52064])
            ("posn-set-point" function (:arguments ("position")) nil [52066 52386])
            ("posn-x-y" function (:arguments ("position")) nil [52388 52641])
            ("declare-function" code nil nil [52643 52709])
            ("posn-col-row" function (:arguments ("position")) nil [52711 54529])
            ("posn-actual-col-row" function (:arguments ("position")) nil [54531 55119])
            ("posn-timestamp" function (:arguments ("position")) nil [55121 55309])
            ("posn-string" function (:arguments ("position")) nil [55311 55670])
            ("posn-image" function (:arguments ("position")) nil [55672 55912])
            ("posn-object" function (:arguments ("position")) nil [55914 56283])
            ("posn-object-x-y" function (:arguments ("position")) nil [56285 56572])
            ("posn-object-width-height" function (:arguments ("position")) nil [56574 56834])
            ("make-obsolete" code nil nil [56877 56943])
            ("make-obsolete" code nil nil [56944 56993])
            ("make-obsolete" code nil nil [57008 57081])
            ("make-obsolete" code nil nil [57082 57155])
            ("make-obsolete" code nil nil [57156 57231])
            ("make-obsolete" code nil nil [57232 57305])
            ("make-obsolete" code nil nil [57306 57379])
            ("make-obsolete" code nil nil [57380 57455])
            ("log10" function (:arguments ("x")) nil [57457 57566])
            ("defalias" code nil nil [57614 57648])
            ("make-obsolete" code nil nil [57649 57703])
            ("defalias" code nil nil [57704 57740])
            ("make-obsolete" code nil nil [57741 57797])
            ("set-advertised-calling-convention" code nil nil [57799 57900])
            ("set-advertised-calling-convention" code nil nil [57901 57969])
            ("set-advertised-calling-convention" code nil nil [57970 58041])
            ("set-advertised-calling-convention" code nil nil [58042 58127])
            ("make-obsolete-variable" code nil nil [58190 58254])
            ("make-obsolete-variable" code nil nil [58255 58338])
            ("make-obsolete-variable" code nil nil [58339 58411])
            ("make-obsolete-variable" code nil nil [58412 58488])
            ("make-obsolete-variable" code nil nil [58489 58546])
            ("make-obsolete" code nil nil [58547 58603])
            ("make-obsolete" code nil nil [58604 58664])
            ("make-obsolete" code nil nil [58666 58720])
            ("make-obsolete" code nil nil [58721 58777])
            ("make-obsolete-variable" code nil nil [58779 58903])
            ("define-obsolete-variable-alias" code nil nil [58942 59029])
            ("define-obsolete-variable-alias" code nil nil [59031 59124])
            ("define-obsolete-variable-alias" code nil nil [59125 59218])
            ("make-obsolete-variable" code nil nil [59464 59528])
            ("make-obsolete-variable" code nil nil [59530 59588])
            ("defvaralias" code nil nil [59590 59647])
            ("defalias" code nil nil [59720 59764])
            ("defalias" code nil nil [59765 59809])
            ("defalias" code nil nil [59810 59843])
            ("defalias" code nil nil [59844 59877])
            ("defalias" code nil nil [59878 59914])
            ("defalias" code nil nil [59915 59950])
            ("defalias" code nil nil [59951 59977])
            ("defalias" code nil nil [59978 60004])
            ("defalias" code nil nil [60005 60027])
            ("defalias" code nil nil [60053 60092])
            ("defalias" code nil nil [60093 60147])
            ("defalias" code nil nil [60148 60218])
            ("defalias" code nil nil [60219 60291])
            ("defalias" code nil nil [60292 60335])
            ("defalias" code nil nil [60336 60380])
            ("defalias" code nil nil [60381 60414])
            ("defalias" code nil nil [60415 60448])
            ("defalias" code nil nil [60480 60523])
            ("defalias" code nil nil [60524 60573])
            ("defalias" code nil nil [60575 60628])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60667 62796])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62798 64466])
            ("letrec" function (:arguments ("binders" "body")) nil [64468 65097])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [65099 66509])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [66511 68350])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [68352 71719])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71722 73041])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [73043 74351])
            ("delay-mode-hooks" variable nil nil [74373 74467])
            ("delayed-mode-hooks" variable nil nil [74468 74549])
            ("make-variable-buffer-local" code nil nil [74550 74598])
            ("put" code nil nil [74599 74641])
            ("delayed-after-hook-functions" variable nil nil [74643 74786])
            ("make-variable-buffer-local" code nil nil [74787 74845])
            ("change-major-mode-after-body-hook" variable nil nil [74847 74961])
            ("after-change-major-mode-hook" variable nil nil [74963 75065])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [75067 76420])
            ("delay-mode-hooks" function (:arguments ("body")) nil [76422 76821])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76882 77223])
            ("derived-mode-p" function (:arguments ("modes")) nil [77225 77456])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77647 77840])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77842 80527])
            ("autoloadp" function (:arguments ("object")) nil [80549 80651])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [81135 81898])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81900 83396])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [83398 84804])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84829 86154])
            ("process-lines" function (:arguments ("program" "args")) nil [86156 86761])
            ("process-live-p" function (:arguments ("process")) nil [86763 87076])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [87096 87566])
            ("process-kill-buffer-query-function" function nil nil [87568 87987])
            ("add-hook" code nil nil [87989 88064])
            ("process-get" function (:arguments ("process" "propname")) nil [88095 88307])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [88309 88548])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88588 88638])
            ("read-key-delay" variable (:default-value 0.01) nil [88640 88668])
            ("read-key" function (:arguments ("prompt")) nil [88717 91941])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91943 92280])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [92282 95018])
            ("read-number" function (:arguments ("prompt" "default")) nil [95020 96090])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [96092 97831])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97833 101167])
            ("declare-function" code nil nil [101207 101286])
            ("y-or-n-p" function (:arguments ("prompt")) nil [101288 104849])
            ("atomic-change-group" function (:arguments ("body")) nil [104880 106086])
            ("prepare-change-group" function (:arguments ("buffer")) nil [106088 107564])
            ("activate-change-group" function (:arguments ("handle")) nil [107566 107804])
            ("accept-change-group" function (:arguments ("handle")) nil [107806 108097])
            ("cancel-change-group" function (:arguments ("handle")) nil [108099 109490])
            ("define-obsolete-function-alias" code nil nil [109548 109630])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109632 111184])
            ("copy-overlay" function (:arguments ("o")) nil [111213 111787])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111789 112797])
            ("suspend-hook" variable nil nil [112819 112903])
            ("suspend-resume-hook" variable nil nil [112905 113003])
            ("temp-buffer-show-hook" variable nil nil [113005 113221])
            ("temp-buffer-setup-hook" variable nil nil [113223 113454])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [113456 113831])
            ("buffer-narrowed-p" function nil nil [113864 113998])
            ("find-tag-default-bounds" function nil nil [114000 114254])
            ("find-tag-default" function nil nil [114256 114522])
            ("find-tag-default-as-regexp" function nil nil [114524 114959])
            ("find-tag-default-as-symbol-regexp" function nil nil [114961 115520])
            ("play-sound" function (:arguments ("sound")) nil [115522 116341])
            ("declare-function" code nil nil [116343 116399])
            ("shell-quote-argument" function (:arguments ("argument")) nil [116401 118735])
            ("string-to-list" function (:arguments ("string")) nil [118737 118836])
            ("string-to-vector" function (:arguments ("string")) nil [118838 118938])
            ("string-or-null-p" function (:arguments ("object")) nil [118940 119077])
            ("booleanp" function (:arguments ("object")) nil [119079 119237])
            ("special-form-p" function (:arguments ("object")) nil [119239 119482])
            ("macrop" function (:arguments ("object")) nil [119484 119714])
            ("field-at-pos" function (:arguments ("pos")) nil [119716 119986])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119988 120351])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [120353 121163])
            ("yank-handled-properties" variable nil nil [121270 121302])
            ("yank-excluded-properties" variable nil nil [121303 121336])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [121338 122211])
            ("yank-undo-function" variable nil nil [122213 122240])
            ("insert-for-yank" function (:arguments ("string")) nil [122242 122723])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122725 123757])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123759 124244])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [124246 124932])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124934 125246])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [125375 125813])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125851 126835])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126837 127329])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [127331 128972])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128974 129523])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [129525 130715])
            ("track-mouse" function (:arguments ("body")) nil [130770 131076])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [131078 131466])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [131468 131988])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131990 132550])
            ("with-selected-window" function (:arguments ("window" "body")) nil [132552 133690])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133692 134433])
            ("save-window-excursion" function (:arguments ("body")) nil [134435 135254])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [135256 136651])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136704 139157])
            ("with-temp-file" function (:arguments ("file" "body")) nil [139159 139854])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139856 140783])
            ("with-temp-buffer" function (:arguments ("body")) nil [140785 141344])
            ("with-silent-modifications" function (:arguments ("body")) nil [141346 142336])
            ("with-output-to-string" function (:arguments ("body")) nil [142338 142783])
            ("with-local-quit" function (:arguments ("body")) nil [142785 143540])
            ("setq" code nil nil [143602 143748])
            ("while-no-input" function (:arguments ("body")) nil [143750 144250])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [144252 144805])
            ("define-obsolete-function-alias" code nil nil [144807 144902])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144904 145841])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145843 146538])
            ("with-case-table" function (:arguments ("table" "body")) nil [146540 147061])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [147063 147488])
            ("save-match-data-internal" variable nil nil [147522 147555])
            ("save-match-data" function (:arguments ("body")) nil [147813 148493])
            ("match-string" function (:arguments ("num" "string")) nil [148495 149140])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [149142 149866])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149869 150518])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [150521 151792])
            ("looking-at-p" function (:arguments ("regexp")) nil [151794 151972])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151974 152194])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [152196 154106])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [154128 154481])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154743 157859])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157861 158541])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [158543 159179])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [159213 159617])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159619 162300])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [162303 162698])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162700 163109])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [163111 163894])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163896 164131])
            ("load-history-regexp" function (:arguments ("file")) nil [164172 164808])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164810 165246])
            ("put" code nil nil [165248 165294])
            ("eval-after-load" function (:arguments ("file" "form")) nil [165295 169177])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [169179 169554])
            ("after-load-functions" variable nil nil [169556 169729])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169731 171298])
            ("eval-next-after-load" function (:arguments ("file")) nil [171300 171600])
            ("display-delayed-warnings" function nil nil [171604 171871])
            ("collapse-delayed-warnings" function nil nil [171873 172552])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172672 173012])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [173014 173269])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [173298 173641])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173643 173888])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173912 174548])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [174550 174870])
            ("syntax-after" function (:arguments ("pos")) nil [174872 175245])
            ("syntax-class" function (:arguments ("syntax")) nil [175247 175599])
            ("word-move-empty-char-table" variable nil nil [175630 175800])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175802 176540])
            ("backward-word-strictly" function (:arguments ("arg")) nil [176542 177124])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177142 177725])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177740 178289])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [178310 178792])
            ("text-clone--maintaining" variable nil nil [178814 178850])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178852 180918])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180920 183168])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [183276 184854])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184858 185254])
            ("backtrace" function nil nil [185256 185527])
            ("backtrace-frames" function (:arguments ("base")) nil [185529 185882])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185884 186684])
            ("called-interactively-p-functions" variable nil nil [186688 187105])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [187107 187192])
            ("called-interactively-p" function (:arguments ("kind")) nil [187194 191375])
            ("interactive-p" function nil nil [191377 192460])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [192462 192807])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192809 193117])
            ("define-obsolete-function-alias" code nil nil [193119 193206])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [193208 195984])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [196567 197334])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [197336 199075])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [199077 199576])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [199578 199695])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199697 201373])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [201375 201530])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [201532 202636])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202673 202832])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202835 204369])
            ("version-to-list" function (:arguments ("ver")) nil [204372 207155])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [207157 207988])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207991 208790])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208793 209578])
            ("version-list-not-zero" function (:arguments ("lst")) nil [209580 209890])
            ("version<" function (:arguments ("v1" "v2")) nil [209893 210397])
            ("version<=" function (:arguments ("v1" "v2")) nil [210399 210917])
            ("version=" function (:arguments ("v1" "v2")) nil [210919 211413])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [211415 211792])
            ("package--description-file" function (:arguments ("dir")) nil [211794 212125])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [212150 212500])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [212515 213216])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [213218 213440])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [213442 213504])
            ("when" code nil nil [213656 213781])
            ("unmsys--file-name" function (:arguments ("file")) nil [213914 214401]))          
      :file "subr.el.gz"
      :pointmax 214426
      :fsize 62887
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cus-face" include nil nil [4464 4483])
            ("wid-edit" include nil nil [4484 4503])
            ("custom-versions-load-alist" variable nil nil [4505 4540])
            ("recentf-exclude" variable nil nil [4557 4581])
            ("condition-case" code nil nil [4602 4660])
            ("condition-case" code nil nil [4662 4721])
            ("put" code nil nil [4723 4767])
            ("put" code nil nil [4768 4816])
            ("custom-add-to-group" code nil nil [4817 4886])
            ("emacs" customgroup (:user-visible-flag t) nil [4915 5015])
            ("editing" customgroup (:user-visible-flag t) nil [5070 5143])
            ("convenience" customgroup (:user-visible-flag t) nil [5145 5232])
            ("files" customgroup (:user-visible-flag t) nil [5234 5301])
            ("wp" customgroup (:user-visible-flag t) nil [5303 5434])
            ("text" customgroup (:user-visible-flag t) nil [5436 5582])
            ("data" customgroup (:user-visible-flag t) nil [5584 5662])
            ("abbrev" customgroup (:user-visible-flag t) nil [5664 5783])
            ("matching" customgroup (:user-visible-flag t) nil [5785 5871])
            ("emulations" customgroup (:user-visible-flag t) nil [5873 5993])
            ("external" customgroup (:user-visible-flag t) nil [5995 6073])
            ("comm" customgroup (:user-visible-flag t) nil [6075 6193])
            ("processes" customgroup (:user-visible-flag t) nil [6195 6299])
            ("programming" customgroup (:user-visible-flag t) nil [6301 6391])
            ("languages" customgroup (:user-visible-flag t) nil [6393 6484])
            ("lisp" customgroup (:user-visible-flag t) nil [6486 6661])
            ("c" customgroup (:user-visible-flag t) nil [6663 6863])
            ("tools" customgroup (:user-visible-flag t) nil [6865 6930])
            ("applications" customgroup (:user-visible-flag t) nil [6932 7010])
            ("calendar" customgroup (:user-visible-flag t) nil [7012 7100])
            ("mail" customgroup (:user-visible-flag t) nil [7102 7184])
            ("news" customgroup (:user-visible-flag t) nil [7186 7301])
            ("games" customgroup (:user-visible-flag t) nil [7303 7379])
            ("development" customgroup (:user-visible-flag t) nil [7381 7469])
            ("docs" customgroup (:user-visible-flag t) nil [7471 7549])
            ("extensions" customgroup (:user-visible-flag t) nil [7551 7634])
            ("internal" customgroup (:user-visible-flag t) nil [7636 7736])
            ("maint" customgroup (:user-visible-flag t) nil [7738 7855])
            ("environment" customgroup (:user-visible-flag t) nil [7857 7939])
            ("hardware" customgroup (:user-visible-flag t) nil [7941 8043])
            ("terminals" customgroup (:user-visible-flag t) nil [8045 8123])
            ("unix" customgroup (:user-visible-flag t) nil [8125 8227])
            ("i18n" customgroup (:user-visible-flag t) nil [8229 8398])
            ("x" customgroup (:user-visible-flag t) nil [8400 8463])
            ("frames" customgroup (:user-visible-flag t) nil [8465 8557])
            ("tex" customgroup (:user-visible-flag t) nil [8559 8705])
            ("faces" customgroup (:user-visible-flag t) nil [8707 8775])
            ("help" customgroup (:user-visible-flag t) nil [8777 8848])
            ("multimedia" customgroup (:user-visible-flag t) nil [8850 8947])
            ("local" customgroup (:user-visible-flag t) nil [8949 9014])
            ("customize" customgroup
               (:user-visible-flag t
                :value (quote ((widgets custom-group))))
                nil [9016 9145])
            ("custom-faces" customgroup (:user-visible-flag t) nil [9147 9239])
            ("custom-browse" customgroup (:user-visible-flag t) nil [9241 9340])
            ("custom-buffer" customgroup (:user-visible-flag t) nil [9342 9441])
            ("custom-menu" customgroup (:user-visible-flag t) nil [9443 9538])
            ("alloc" customgroup (:user-visible-flag t) nil [9540 9669])
            ("undo" customgroup (:user-visible-flag t) nil [9671 9779])
            ("mode-line" customgroup (:user-visible-flag t) nil [9781 9858])
            ("editing-basics" customgroup (:user-visible-flag t) nil [9860 9942])
            ("display" customgroup (:user-visible-flag t) nil [9944 10033])
            ("execute" customgroup (:user-visible-flag t) nil [10035 10110])
            ("installation" customgroup (:user-visible-flag t) nil [10112 10189])
            ("dired" customgroup (:user-visible-flag t) nil [10191 10256])
            ("limits" customgroup (:user-visible-flag t) nil [10258 10325])
            ("debug" customgroup (:user-visible-flag t) nil [10327 10397])
            ("keyboard" customgroup (:user-visible-flag t) nil [10399 10473])
            ("menu" customgroup (:user-visible-flag t) nil [10475 10542])
            ("dnd" customgroup (:user-visible-flag t) nil [10544 10622])
            ("auto-save" customgroup (:user-visible-flag t) nil [10624 10704])
            ("processes-basics" customgroup (:user-visible-flag t) nil [10706 10797])
            ("mule" customgroup (:user-visible-flag t) nil [10799 10870])
            ("windows" customgroup (:user-visible-flag t) nil [10872 10986])
            ("custom-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map widget-keymap) (define-key map [remap self-insert-command] (quote Custom-no-edit)) (define-key map "" (quote Custom-newline)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) (define-key map "q" (quote Custom-buffer-done)) (define-key map "u" (quote Custom-goto-parent)) (define-key map "n" (quote widget-forward)) (define-key map "p" (quote widget-backward)) map)) nil [11013 11661])
            ("custom-mode-link-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map custom-mode-map) (define-key map [down-mouse-2] nil) (define-key map [down-mouse-1] (quote mouse-drag-region)) (define-key map [mouse-2] (quote widget-move-and-invoke)) map)) nil [11663 11969])
            ("custom-field-keymap" variable (:default-value (let ((map (copy-keymap widget-field-keymap))) (define-key map "" (quote Custom-set)) (define-key map "" (quote Custom-save)) map)) nil [11971 12211])
            ("widget-put" code nil nil [12213 12288])
            ("custom-split-regexp-maybe" function (:arguments ("regexp")) nil [12306 12618])
            ("custom-variable-prompt" function nil nil [12620 13179])
            ("custom-menu-filter" function (:arguments ("menu" "widget")) nil [13181 13732])
            ("custom-prefix-list" variable nil nil [13750 13848])
            ("custom-unlispify-menu-entries" variable (:default-value t) nil [13850 13997])
            ("custom-unlispify-remove-prefixes" variable nil nil [13999 14355])
            ("custom-unlispify-menu-entry" function (:arguments ("symbol" "no-suffix")) nil [14357 15339])
            ("custom-unlispify-tag-names" variable (:default-value t) nil [15341 15484])
            ("custom-unlispify-tag-name" function (:arguments ("symbol")) nil [15486 15678])
            ("custom-prefix-add" function (:arguments ("symbol" "prefixes")) nil [15680 15858])
            ("custom-guess-name-alist" variable (:default-value (quote (("-p\\'" boolean) ("-flag\\'" boolean) ("-hook\\'" hook) ("-face\\'" face) ("-file\\'" file) ("-function\\'" function) ("-functions\\'" (repeat function)) ("-list\\'" (repeat sexp)) ("-alist\\'" (alist :key-type sexp :value-type sexp))))) nil [15872 16594])
            ("custom-guess-doc-alist" variable (:default-value (quote (("\\`\\*?Non-nil " boolean)))) nil [16596 17109])
            ("custom-guess-type" function (:arguments ("symbol")) nil [17111 17913])
            ("custom-browse-sort-alphabetically" variable nil nil [17944 18110])
            ("custom-browse-order-groups" variable nil nil [18112 18408])
            ("custom-browse-only-groups" variable nil nil [18410 18565])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [18582 18762])
            ("custom-buffer-order-groups" variable (:default-value (quote last)) nil [18764 19062])
            ("custom-menu-sort-alphabetically" variable nil nil [19079 19236])
            ("custom-menu-order-groups" variable (:default-value (quote first)) nil [19238 19533])
            ("custom-sort-items" function (:arguments ("items" "sort-alphabetically" "order-groups")) nil [19535 20634])
            ("custom-commands" variable (:default-value (quote ((" Apply " Custom-set t "Apply settings (for the current session only)." "index" "Apply") (" Apply and Save " Custom-save (or custom-file user-init-file) "Apply settings and save for future sessions." "save" "Save") (" Undo Edits " Custom-reset-current t "Restore customization buffer to reflect existing settings." "refresh" "Undo") (" Reset Customizations " Custom-reset-saved t "Undo any settings applied only for the current session." "undo" "Reset") (" Erase Customizations " Custom-reset-standard (or custom-file user-init-file) "Un-customize settings in this and future sessions." "delete" "Uncustomize") (" Help for Customize " Custom-help t "Get help for using Customize." "help" "Help") (" Exit " Custom-buffer-done t "Exit Customize." "exit" "Exit")))) nil [20809 21723])
            ("Custom-help" function (:user-visible-flag t) nil [21725 21861])
            ("custom-reset-menu" variable (:default-value (quote (("Undo Edits in Customization Buffer" . Custom-reset-current) ("Revert This Session's Customizations" . Custom-reset-saved) ("Erase Customizations" . Custom-reset-standard)))) nil [21863 22284])
            ("custom-options" variable nil nil [22286 22362])
            ("custom-command-apply" function (:arguments ("fun" "query" "strong-query")) nil [22364 22986])
            ("Custom-set" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [22988 23294])
            ("Custom-save" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [23296 23928])
            ("custom-reset" function (:arguments ("_widget" "event")) nil [23930 24157])
            ("Custom-reset-current" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24159 24518])
            ("Custom-reset-saved" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [24520 24945])
            ("custom-reset-standard-variables-list" variable nil nil [25367 25416])
            ("custom-reset-standard-faces-list" variable nil nil [25417 25462])
            ("custom-reset-standard-save-and-update" function nil nil [25716 26884])
            ("Custom-reset-standard" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [26886 27801])
            ("custom-prompt-variable" function (:arguments ("prompt-var" "prompt-val" "comment")) nil [27831 29611])
            ("customize-set-value" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [29628 30398])
            ("customize-set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [30415 31661])
            ("customize-save-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [31678 33157])
            ("customize-push-and-save" function (:arguments ("list-var" "elts")) nil [33442 34108])
            ("customize" function (:user-visible-flag t) nil [34125 34437])
            ("customize-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [34454 35120])
            ("customize-read-group" function nil nil [35122 35522])
            ("customize-group" function
               (:user-visible-flag t
                :arguments ("group" "other-window"))
                nil [35539 36339])
            ("customize-group-other-window" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [36356 36561])
            ("defalias" code nil nil [36578 36626])
            ("customize-option" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [36643 37108])
            ("defalias" code nil nil [37125 37199])
            ("customize-option-other-window" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [37216 37762])
            ("customize-changed-options-previous-release" variable (:default-value "25.3") nil [37764 37895])
            ("customize-package-emacs-version-alist" variable nil nil [37973 39313])
            ("defalias" code nil nil [39330 39386])
            ("customize-changed-options" function
               (:user-visible-flag t
                :arguments ("since-version"))
                nil [39403 41755])
            ("customize-package-emacs-version" function (:arguments ("symbol" "package-version")) nil [41757 43024])
            ("customize-version-lessp" function (:arguments ("version1" "version2")) nil [43026 43885])
            ("customize-face" function
               (:user-visible-flag t
                :arguments ("face" "other-window"))
                nil [43902 45191])
            ("customize-face-other-window" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [45208 45671])
            ("custom-unsaved-options" function nil nil [45673 46271])
            ("defalias" code nil nil [46273 46324])
            ("customize-unsaved" function (:user-visible-flag t) nil [46341 46657])
            ("customize-rogue" function (:user-visible-flag t) nil [46674 47350])
            ("customize-saved" function (:user-visible-flag t) nil [47366 47958])
            ("declare-function" code nil nil [47960 48020])
            ("apropos-regexp" variable nil nil [48021 48044])
            ("customize-apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "type"))
                nil [48061 49813])
            ("customize-apropos-options" function
               (:user-visible-flag t
                :arguments ("regexp" "ignored"))
                nil [49830 50047])
            ("customize-apropos-faces" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50064 50242])
            ("customize-apropos-groups" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [50259 50441])
            ("custom-prompt-customize-unsaved-options" function nil nil [50458 50805])
            ("custom-buffer-style" variable (:default-value (quote links)) nil [50820 51207])
            ("custom-buffer-done-kill" variable nil nil [51209 51365])
            ("custom-buffer-indent" variable (:default-value 3) nil [51367 51488])
            ("custom-get-fresh-buffer" function (:arguments ("name")) nil [51490 52404])
            ("custom-buffer-create" function (:arguments ("options" "name" "_description")) nil [52421 52869])
            ("custom-buffer-create-other-window" function (:arguments ("options" "name" "_description")) nil [52886 53448])
            ("custom-reset-button-menu" variable (:default-value t) nil [53450 53679])
            ("custom-buffer-verbose-help" variable (:default-value t) nil [53681 53832])
            ("Custom-buffer-done" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [53834 54003])
            ("custom-button" variable nil nil [54005 54083])
            ("custom-button-mouse" variable nil nil [54085 54175])
            ("custom-button-pressed" variable nil nil [54177 54271])
            ("custom-search-field" variable (:default-value t) nil [54273 54420])
            ("custom-raised-buttons" variable (:default-value (not (equal (face-valid-attribute-values :box) (quote (("unspecified" . unspecified)))))) nil [54422 55041])
            ("custom-buffer-create-internal" function (:arguments ("options" "_description")) nil [55043 59334])
            ("customize-browse" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [59374 60706])
            ("define-widget" code nil nil [60708 60882])
            ("custom-browse-visibility-action" function (:arguments ("widget" "_ignore")) nil [60884 61018])
            ("define-widget" code nil nil [61020 61206])
            ("custom-browse-group-tag-action" function (:arguments ("widget" "_ignore")) nil [61208 61373])
            ("define-widget" code nil nil [61375 61568])
            ("custom-browse-variable-tag-action" function (:arguments ("widget" "_ignore")) nil [61570 61741])
            ("define-widget" code nil nil [61743 61924])
            ("custom-browse-face-tag-action" function (:arguments ("widget" "_ignore")) nil [61926 62089])
            ("custom-browse-alist" variable
               (:constant-flag t
                :default-value (quote (("   " "space") (" | " "vertical") ("-\\ " "top") (" |-" "middle") (" `-" "bottom"))))
                nil [62091 62244])
            ("custom-browse-insert-prefix" function (:arguments ("prefix")) nil [62246 62853])
            ("widget-put" code nil nil [63177 63229])
            ("widget-put" code nil nil [63230 63467])
            ("widget-put" code nil nil [63468 63527])
            ("define-widget" code nil nil [63562 63871])
            ("custom-magic-faces" customgroup (:user-visible-flag t) nil [63905 64021])
            ("custom-invalid" variable
               (:default-value (quote ((((class color)) :foreground "yellow1" :background "red1") (t :weight bold :slant italic :underline t)))
                :type "face")
                nil [64023 64243])
            ("custom-rogue" variable
               (:default-value (quote ((((class color)) :foreground "pink" :background "black") (t :underline t)))
                :type "face")
                nil [64245 64452])
            ("custom-modified" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [64454 64743])
            ("custom-set" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "blue1" :background "white") (((class color)) :foreground "blue" :background "white") (t :slant italic)))
                :type "face")
                nil [64745 65032])
            ("custom-changed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [65034 65317])
            ("custom-themed" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic)))
                :type "face")
                nil [65319 65604])
            ("custom-saved" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [65606 65731])
            ("custom-magic-alist" variable
               (:constant-flag t
                :default-value (quote ((nil "#" underline "UNINITIALIZED, you should not see this.") (unknown "?" italic "UNKNOWN, you should not see this.") (hidden "-" default "HIDDEN, invoke \"Show\" in the previous line to show." "group now hidden, invoke \"Show\", above, to show contents.") (invalid "x" custom-invalid "INVALID, the displayed value cannot be set.") (modified "*" custom-modified "EDITED, shown value does not take effect until you set or save it." "something in this group has been edited but not set.") (set "+" custom-set "SET for current session only." "something in this group has been set but not saved.") (changed ":" custom-changed "CHANGED outside Customize." "something in this group has been changed outside customize.") (saved "!" custom-saved "SAVED and set." "something in this group has been set and saved.") (themed "o" custom-themed "THEMED." "visible group members are set by enabled themes.") (rogue "@" custom-rogue "NO CUSTOMIZATION DATA; not intended to be customized." "something in this group is not prepared for customization.") (standard " " nil "STANDARD." "visible group members are all at standard values."))))
                nil [65733 68158])
            ("custom-magic-show" variable (:default-value (quote long)) nil [68160 68420])
            ("custom-magic-show-hidden" variable (:default-value (quote (option face))) nil [68422 68770])
            ("custom-magic-show-button" variable nil nil [68772 68932])
            ("define-widget" code nil nil [68934 69205])
            ("widget-magic-mouse-down-action" function (:arguments ("widget" "_event")) nil [69207 69409])
            ("custom-magic-value-create" function (:arguments ("widget")) nil [69411 71939])
            ("custom-magic-reset" function (:arguments ("widget")) nil [71941 72146])
            ("custom-button" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "lightgrey" :foreground "black")))
                :type "face")
                nil [72174 72474])
            ("custom-button-mouse" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "grey90" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [72476 72956])
            ("custom-button-unraised" variable
               (:default-value (quote ((t :inherit underline)))
                :type "face")
                nil [72958 73129])
            ("setq" code nil nil [73131 73223])
            ("setq" code nil nil [73225 73316])
            ("custom-button-pressed" variable
               (:default-value (quote ((((type x w32 ns) (class color)) :box (:line-width 2 :style pressed-button) :background "lightgrey" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [73318 73626])
            ("custom-button-pressed-unraised" variable
               (:default-value (quote ((default :inherit custom-button-unraised) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [73628 73952])
            ("setq" code nil nil [73954 74076])
            ("custom-documentation" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [74078 74208])
            ("custom-state" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "lime green") (((class color) (background light)) :foreground "dark green")))
                :type "face")
                nil [74210 74454])
            ("custom-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [74456 74584])
            ("define-widget" code nil nil [74586 75067])
            ("custom-convert-widget" function (:arguments ("widget")) nil [75069 75430])
            ("custom-notify" function (:arguments ("widget" "args")) nil [75432 75764])
            ("custom-redraw" function (:arguments ("widget")) nil [75766 76361])
            ("custom-redraw-magic" function (:arguments ("widget")) nil [76363 76737])
            ("custom-show" function (:arguments ("widget" "value")) nil [76739 77023])
            ("custom-load-widget" function (:arguments ("widget")) nil [77025 77143])
            ("custom-unloaded-symbol-p" function (:arguments ("symbol")) nil [77145 77623])
            ("custom-unloaded-widget-p" function (:arguments ("widget")) nil [77625 77792])
            ("custom-toggle-hide" function (:arguments ("widget")) nil [77794 78253])
            ("custom-toggle-parent" function (:arguments ("widget" "_ignore")) nil [78255 78400])
            ("custom-add-see-also" function (:arguments ("widget" "prefix")) nil [78402 79304])
            ("custom-add-parent-links" function (:arguments ("widget" "initial-string" "_doc-initial-string")) nil [79306 80182])
            ("custom-comment" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [80245 80634])
            ("custom-comment-tag" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "gray80") (((class color) (background light)) :foreground "blue4") (((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (t :weight bold)))
                :type "face")
                nil [80667 81118])
            ("define-widget" code nil nil [81120 81341])
            ("custom-comment-create" function (:arguments ("widget")) nil [81343 81754])
            ("custom-comment-hide" function (:arguments ("widget")) nil [81756 81854])
            ("custom-comment-show" function (:arguments ("widget")) nil [81957 82074])
            ("custom-comment-invisible-p" function (:arguments ("widget")) nil [82076 82254])
            ("custom-variable-tag" variable
               (:default-value (\` ((((class color) (background dark)) :foreground "light blue" :weight bold) (((min-colors 88) (class color) (background light)) :foreground "blue1" :weight bold) (((class color) (background light)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [82291 82665])
            ("custom-variable-button" variable
               (:default-value (quote ((t :underline t :weight bold)))
                :type "face")
                nil [82667 82797])
            ("custom-variable-default-form" variable (:default-value (quote edit)) nil [82799 82982])
            ("custom-variable-documentation" function (:arguments ("variable")) nil [82984 83617])
            ("define-widget" code nil nil [83619 85189])
            ("custom-variable-type" function (:arguments ("symbol")) nil [85191 86016])
            ("custom-variable-value-create" function (:arguments ("widget")) nil [86018 91506])
            ("custom-toggle-hide-variable" function (:arguments ("visibility-widget" "_ignore")) nil [91508 92601])
            ("custom-tag-action" function (:arguments ("widget" "args")) nil [92603 92796])
            ("custom-tag-mouse-down-action" function (:arguments ("widget" "args")) nil [92798 93024])
            ("custom-variable-state" function (:arguments ("symbol" "val")) nil [93026 94682])
            ("custom-variable-state-set" function (:arguments ("widget" "state")) nil [94684 94986])
            ("custom-variable-standard-value" function (:arguments ("widget")) nil [94988 95081])
            ("custom-variable-menu" variable (:default-value (\` (("Set for Current Session" custom-variable-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-variable-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))))))) ("Undo Edits" custom-redraw (lambda (widget) (and (default-boundp (widget-value widget)) (memq (widget-get widget :custom-state) (quote (modified changed)))))) ("Revert This Session's Customization" custom-variable-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed rogue))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-variable-reset-standard (lambda (widget) (and (get (widget-value widget) (quote standard-value)) (memq (widget-get widget :custom-state) (quote (modified set changed saved rogue)))))))))) ("Set to Backup Value" custom-variable-reset-backup (lambda (widget) (get (widget-value widget) (quote backup-value)))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("Show Current Value" custom-variable-edit (lambda (widget) (eq (widget-get widget :custom-form) (quote lisp)))) ("Show Saved Lisp Expression" custom-variable-edit-lisp (lambda (widget) (eq (widget-get widget :custom-form) (quote edit))))))) nil [95083 97275])
            ("custom-variable-action" function (:arguments ("widget" "event")) nil [97277 97937])
            ("custom-variable-edit" function (:arguments ("widget")) nil [97939 98113])
            ("custom-variable-edit-lisp" function (:arguments ("widget")) nil [98115 98325])
            ("custom-variable-set" function (:arguments ("widget")) nil [98327 100094])
            ("custom-variable-mark-to-save" function (:arguments ("widget")) nil [100096 101815])
            ("custom-variable-state-set-and-redraw" function (:arguments ("widget")) nil [101817 102015])
            ("custom-variable-save" function (:arguments ("widget")) nil [102017 102214])
            ("custom-variable-reset-saved" function (:arguments ("widget")) nil [102216 103361])
            ("custom-variable-mark-to-reset-standard" function (:arguments ("widget")) nil [103363 104812])
            ("custom-variable-reset-standard" function (:arguments ("widget")) nil [104814 105258])
            ("custom-variable-backup-value" function (:arguments ("widget")) nil [105260 105730])
            ("custom-variable-reset-backup" function (:arguments ("widget")) nil [105732 106768])
            ("define-widget" code nil nil [106806 107047])
            ("custom-visibility" variable
               (:default-value (quote ((t :height 0.8 :inherit link)))
                :type "face")
                nil [107049 107197])
            ("define-widget" code nil nil [107235 108128])
            ("custom-face-edit-value-create" function (:arguments ("widget")) nil [108130 109575])
            ("custom-face-edit-value-visibility-action" function (:arguments ("widget" "_ignore")) nil [109577 109855])
            ("custom-face-edit-fix-value" function (:arguments ("_widget" "value")) nil [109857 110053])
            ("custom-face-edit-convert-widget" function (:arguments ("widget")) nil [110055 110402])
            ("custom-face-edit" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-edit)))
                nil [110404 110522])
            ("custom-face-edit-deactivate" function (:arguments ("widget")) nil [110524 111078])
            ("custom-face-edit-activate" function (:arguments ("widget")) nil [111080 111554])
            ("custom-face-edit-delete" function (:arguments ("widget")) nil [111556 112118])
            ("custom-face-edit-attribute-tag" function (:arguments ("widget")) nil [112121 112476])
            ("define-widget" code nil nil [112512 114877])
            ("custom-face-tag" variable
               (:default-value (quote ((t :inherit custom-variable-tag)))
                :type "face")
                nil [114910 115025])
            ("custom-face-default-form" variable (:default-value (quote selected)) nil [115027 115229])
            ("define-widget" code nil nil [115231 116773])
            ("define-widget" code nil nil [116775 117203])
            ("custom-face-all" variable
               (:constant-flag t
                :default-value (widget-convert (quote custom-face-all)))
                nil [117205 117320])
            ("custom-filter-face-spec" function (:arguments ("spec" "filter-index" "default-filter")) nil [117322 118449])
            ("custom-pre-filter-face-spec" function (:arguments ("spec")) nil [118451 118642])
            ("custom-post-filter-face-spec" function (:arguments ("spec")) nil [118644 118794])
            ("custom-face-widget-to-spec" function (:arguments ("widget")) nil [118796 119208])
            ("custom-face-get-current-spec" function (:arguments ("face")) nil [119210 119734])
            ("custom-toggle-hide-face" function (:arguments ("visibility-widget" "_ignore")) nil [119736 120779])
            ("custom-face-value-create" function (:arguments ("widget")) nil [120781 125205])
            ("custom-face-menu" variable (:default-value (\` (("Set for Current Session" custom-face-set) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-face-save))))) ("Undo Edits" custom-redraw (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified changed))))) ("Revert This Session's Customization" custom-face-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set changed))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-face-reset-standard (lambda (widget) (get (widget-value widget) (quote face-defface-spec)))))))) ("---" ignore ignore) ("Add Comment" custom-comment-show custom-comment-invisible-p) ("---" ignore ignore) ("For Current Display" custom-face-edit-selected (lambda (widget) (not (eq (widget-get widget :custom-form) (quote selected))))) ("For All Kinds of Displays" custom-face-edit-all (lambda (widget) (not (eq (widget-get widget :custom-form) (quote all))))) ("Show Lisp Expression" custom-face-edit-lisp (lambda (widget) (not (eq (widget-get widget :custom-form) (quote lisp)))))))) nil [125207 126745])
            ("custom-face-edit-selected" function (:arguments ("widget")) nil [126747 126957])
            ("custom-face-edit-all" function (:arguments ("widget")) nil [126959 127154])
            ("custom-face-edit-lisp" function (:arguments ("widget")) nil [127156 127362])
            ("custom-face-state" function (:arguments ("face")) nil [127364 128383])
            ("custom-face-state-set" function (:arguments ("widget")) nil [128385 128537])
            ("custom-face-action" function (:arguments ("widget" "event")) nil [128539 129063])
            ("custom-face-set" function (:arguments ("widget")) nil [129065 129758])
            ("custom-face-mark-to-save" function (:arguments ("widget")) nil [129760 130508])
            ("custom-face-state-set-and-redraw" function (:arguments ("widget")) nil [130510 130696])
            ("custom-face-save" function (:arguments ("widget")) nil [130698 130867])
            ("define-obsolete-function-alias" code nil nil [130900 130985])
            ("custom-face-reset-saved" function (:arguments ("widget")) nil [130987 131840])
            ("custom-face-standard-value" function (:arguments ("widget")) nil [131842 131934])
            ("custom-face-mark-to-reset-standard" function (:arguments ("widget")) nil [131936 133534])
            ("custom-face-reset-standard" function (:arguments ("widget")) nil [133536 133859])
            ("widget-face-prompt-value-history" variable nil nil [133885 133982])
            ("define-widget" code nil nil [133984 134620])
            ("widget-face-sample-face-get" function (:arguments ("widget")) nil [134622 134751])
            ("widget-face-notify" function (:arguments ("widget" "child" "event")) nil [134753 135006])
            ("define-widget" code nil nil [135033 135614])
            ("custom-hook-convert-widget" function (:arguments ("widget")) nil [135616 136044])
            ("define-widget" code nil nil [136083 136404])
            ("custom-group-link-action" function (:arguments ("widget" "_ignore")) nil [136406 136503])
            ("custom-group-tag-faces" variable nil nil [136537 136795])
            ("custom-group-tag-1" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "pink") (((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red")))
                :type "face")
                nil [136797 137131])
            ("custom-group-tag" variable
               (:default-value (quote ((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :weight bold)))
                :type "face")
                nil [137133 137504])
            ("custom-group-subtitle" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [137506 137642])
            ("custom-group-doc-align-col" variable (:default-value 20) nil [137644 137682])
            ("define-widget" code nil nil [137684 138421])
            ("custom-group-sample-face-get" function (:arguments ("widget")) nil [138423 138590])
            ("define-widget" code nil nil [138592 138746])
            ("custom-group-visibility-create" function (:arguments ("widget")) nil [138748 138908])
            ("custom-group-members" function (:arguments ("symbol" "groups-only")) nil [138910 139289])
            ("custom-group-value-create" function (:arguments ("widget")) nil [139291 147475])
            ("custom-group-menu" variable (:default-value (\` (("Set for Current Session" custom-group-set (lambda (widget) (eq (widget-get widget :custom-state) (quote modified)))) (\,@ (when (or custom-file init-file-user) (quote (("Save for Future Sessions" custom-group-save (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))))))) ("Undo Edits" custom-group-reset-current (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified))))) ("Revert This Session's Customizations" custom-group-reset-saved (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set))))) (\,@ (when (or custom-file init-file-user) (quote (("Erase Customization" custom-group-reset-standard (lambda (widget) (memq (widget-get widget :custom-state) (quote (modified set saved)))))))))))) nil [147477 148678])
            ("custom-group-action" function (:arguments ("widget" "event")) nil [148680 149195])
            ("custom-group-set" function (:arguments ("widget")) nil [149197 149424])
            ("custom-group-mark-to-save" function (:arguments ("widget")) nil [149426 149680])
            ("custom-group-state-set-and-redraw" function (:arguments ("widget")) nil [149682 149978])
            ("custom-group-save" function (:arguments ("widget")) nil [149980 150153])
            ("custom-group-reset-current" function (:arguments ("widget")) nil [150155 150393])
            ("custom-group-reset-saved" function (:arguments ("widget")) nil [150395 150644])
            ("custom-group-reset-standard" function (:arguments ("widget")) nil [150646 150931])
            ("custom-group-mark-to-reset-standard" function (:arguments ("widget")) nil [150933 151228])
            ("custom-group-state-update" function (:arguments ("widget")) nil [151230 151823])
            ("custom-file" variable nil nil [151883 153721])
            ("custom-file" function (:arguments ("no-error")) nil [153723 154225])
            ("declare-function" code nil nil [154275 154335])
            ("custom-save-all" function nil nil [154352 155766])
            ("customize-save-customized" function (:user-visible-flag t) nil [155783 156782])
            ("custom-save-delete" function (:arguments ("symbol")) nil [156835 158138])
            ("sort-fold-case" variable nil nil [158140 158163])
            ("custom-save-variables" function nil nil [158186 161111])
            ("custom-save-faces" function nil nil [161113 162961])
            ("custom-menu-nesting" variable (:default-value 2) nil [163007 163116])
            ("custom-face-menu-create" function (:arguments ("_widget" "symbol")) nil [163118 163321])
            ("custom-variable-menu-create" function (:arguments ("_widget" "symbol")) nil [163323 163741])
            ("widget-put" code nil nil [163790 164012])
            ("custom-group-menu-create" function (:arguments ("_widget" "symbol")) nil [164014 164308])
            ("custom-menu-create" function (:arguments ("symbol")) nil [164325 165285])
            ("customize-menu-create" function (:arguments ("symbol" "name")) nil [165302 165755])
            ("easy-menu-define" code nil nil [165790 166198])
            ("tool-bar-map" variable nil nil [166200 166221])
            ("custom-tool-bar-map" variable nil nil [166409 166480])
            ("Custom-no-edit" function
               (:user-visible-flag t
                :arguments ("_pos" "_event"))
                nil [166504 166700])
            ("Custom-newline" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [166702 167298])
            ("Custom-goto-parent" function (:user-visible-flag t) nil [167300 167698])
            ("define-obsolete-variable-alias" code nil nil [167700 167775])
            ("Custom-mode-hook" variable nil nil [167777 167890])
            ("custom-state-buffer-message" function (:arguments ("widget")) nil [167892 168098])
            ("custom--initialize-widget-variables" function nil nil [168100 169017])
            ("define-derived-mode" code nil nil [169019 170598])
            ("put" code nil nil [170600 170639])
            ("define-obsolete-function-alias" code nil nil [170641 170706])
            ("cus-edit" package nil nil [170722 170741]))          
      :file "cus-edit.el.gz"
      :pointmax 170769
      :fsize 40045
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1312 1329])
            ("dired" include nil nil [1419 1435])
            ("dired-create-files-failures" variable nil nil [1437 1676])
            ("dired-star-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\*\\([ 	]\\|$\\)")
                nil [1739 1809])
            ("dired-quark-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\?\\([ 	]\\|$\\)")
                nil [1810 1881])
            ("make-obsolete-variable" code nil nil [1882 1942])
            ("make-obsolete-variable" code nil nil [1943 2004])
            ("dired-isolated-string-re" function (:arguments ("string")) nil [2006 2386])
            ("dired--star-or-qmark-p" function (:arguments ("string" "match" "keep")) nil [2388 3304])
            ("dired-diff" function
               (:user-visible-flag t
                :arguments ("file" "switches"))
                nil [3321 7008])
            ("dired-backup-diff" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [7025 7619])
            ("dired-compare-directories" function
               (:user-visible-flag t
                :arguments ("dir2" "predicate"))
                nil [7636 10480])
            ("dired-file-set-difference" function (:arguments ("list1" "list2" "predicate")) nil [10482 12038])
            ("dired-files-attributes" function (:arguments ("dir")) nil [12040 12422])
            ("dired-do-chxxx" function (:arguments ("attribute-name" "program" "op-symbol" "arg")) nil [12453 14941])
            ("dired-do-chmod" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14958 16334])
            ("dired-do-chgrp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16351 16688])
            ("dired-do-chown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16705 17054])
            ("dired-do-touch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17071 17348])
            ("dired-bunch-files" function (:arguments ("max" "function" "args" "files")) nil [17603 18969])
            ("lpr-printer-switch" variable nil nil [18971 18998])
            ("dired-do-print" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19015 19767])
            ("dired-mark-read-string" function (:arguments ("prompt" "initial" "op-symbol" "arg" "files" "default-value" "collection")) nil [19769 20677])
            ("dired-file-version-alist" variable nil nil [20743 20776])
            ("dired-clean-directory" function
               (:user-visible-flag t
                :arguments ("keep"))
                nil [20793 22535])
            ("dired-map-dired-file-lines" function (:arguments ("fun")) nil [22580 23071])
            ("backup-extract-version-start" variable nil nil [23073 23110])
            ("dired-collect-file-versions" function (:arguments ("fn")) nil [23146 23966])
            ("dired-trample-file-versions" function (:arguments ("fn")) nil [23968 24471])
            ("declare-function" code nil nil [24494 24560])
            ("dired-aux-files" variable nil nil [24562 24586])
            ("minibuffer-default-add-dired-shell-commands" function (:user-visible-flag t) nil [24588 25126])
            ("dired-read-shell-command" function (:arguments ("prompt" "arg" "files")) nil [25207 26165])
            ("dired-do-async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [26182 27333])
            ("dired-do-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [27350 31668])
            ("dired-mark-prefix" variable nil nil [31704 31788])
            ("dired-mark-postfix" variable nil nil [31789 31873])
            ("dired-mark-separator" variable (:default-value " ") nil [31874 31959])
            ("dired-shell-stuff-it" function (:arguments ("command" "file-list" "on-each" "_raw-arg")) nil [31961 35088])
            ("dired-run-shell-command" function (:arguments ("command")) nil [35175 35478])
            ("dired-check-process" function (:arguments ("msg" "program" "arguments")) nil [35482 36449])
            ("dired-shell-command" function (:arguments ("cmd")) nil [36451 37089])
            ("dired-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [37156 37863])
            ("dired-do-kill-lines" function
               (:user-visible-flag t
                :arguments ("arg" "fmt"))
                nil [37880 39074])
            ("dired-compress" function nil nil [39134 39716])
            ("dired-compress-file-suffixes" variable (:default-value (quote (("\\.tar\\.gz\\'" "" "gzip -dc %i | tar -xf -") ("\\.tgz\\'" "" "gzip -dc %i | tar -xf -") ("\\.gz\\'" "" "gunzip") ("\\.Z\\'" "" "uncompress") ("\\.z\\'" "" "gunzip") ("\\.dz\\'" "" "dictunzip") ("\\.tbz\\'" ".tar" "bunzip2") ("\\.bz2\\'" "" "bunzip2") ("\\.xz\\'" "" "unxz") ("\\.zip\\'" "" "unzip -o -d %o %i") ("\\.7z\\'" "" "7z x -aoa -o%o %i") ("\\.tar\\'" ".tgz" nil) (":" ".tar.gz" "tar -cf - %i | gzip -c9 > %o")))) nil [39718 41314])
            ("dired-compress-files-alist" variable (:default-value (quote (("\\.tar\\.gz\\'" . "tar -cf - %i | gzip -c9 > %o") ("\\.tar\\.bz2\\'" . "tar -cf - %i | bzip2 -c9 > %o") ("\\.tar\\.xz\\'" . "tar -cf - %i | xz -c9 > %o") ("\\.zip\\'" . "zip %o -r --filesync %i")))) nil [41316 41900])
            ("declare-function" code nil nil [41902 41972])
            ("dired-do-compress-to" function (:user-visible-flag t) nil [41989 43579])
            ("dired-compress-file" function (:arguments ("file")) nil [43596 47362])
            ("dired-mark-confirm" function (:arguments ("op-symbol" "arg")) nil [47365 48279])
            ("dired-map-over-marks-check" function (:arguments ("fun" "arg" "op-symbol" "show-progress")) nil [48281 49642])
            ("dired-query" function (:arguments ("sym" "prompt" "args")) nil [49659 50701])
            ("dired-do-compress" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50720 51152])
            ("dired-byte-compile" function nil nil [51212 51853])
            ("dired-do-byte-compile" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51870 52063])
            ("dired-load" function nil nil [52065 52392])
            ("dired-do-load" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52409 52574])
            ("dired-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [52591 54321])
            ("dired-reset-subdir-switches" function (:user-visible-flag t) nil [54323 54492])
            ("dired-update-file-line" function (:arguments ("file")) nil [54495 55332])
            ("dired-add-file" function (:arguments ("filename" "marker-char")) nil [55349 55543])
            ("dired-omit-mode" variable nil nil [55545 55569])
            ("declare-function" code nil nil [55570 55619])
            ("dired-omit-localp" variable nil nil [55620 55646])
            ("dired-add-entry" function (:arguments ("filename" "marker-char" "relative")) nil [55648 59775])
            ("dired-after-subdir-garbage" function (:arguments ("dir")) nil [59777 60223])
            ("dired-remove-file" function (:arguments ("file")) nil [60240 60390])
            ("dired-remove-entry" function (:arguments ("file")) nil [60392 60593])
            ("dired-relist-file" function (:arguments ("file")) nil [60610 60848])
            ("dired-relist-entry" function (:arguments ("file")) nil [60850 61494])
            ("dired-backup-overwrite" variable nil nil [61552 61832])
            ("dired-overwrite-confirmed" variable nil nil [62000 62034])
            ("dired-handle-overwrite" function (:arguments ("to")) nil [62036 62626])
            ("dired-copy-file" function (:arguments ("from" "to" "ok-flag")) nil [62643 62818])
            ("declare-function" code nil nil [62820 62868])
            ("dired-copy-file-recursive" function (:arguments ("from" "to" "ok-flag" "preserve-time" "top" "recursive")) nil [62870 63714])
            ("dired-rename-file" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [63731 64230])
            ("dired-rename-subdir" function (:arguments ("from-dir" "to-dir")) nil [64232 65013])
            ("dired-rename-subdir-1" function (:arguments ("dir" "to")) nil [65015 66484])
            ("dired-rename-subdir-2" function (:arguments ("elt" "dir" "to")) nil [66486 67617])
            ("overwrite-query" variable nil nil [67651 67675])
            ("overwrite-backup-query" variable nil nil [67676 67707])
            ("dired-create-files" function (:arguments ("file-creator" "operation" "fn-list" "name-constructor" "marker-char")) nil [67778 73358])
            ("dired-do-create-files" function (:arguments ("op-symbol" "file-creator" "operation" "arg" "marker-char" "op1" "how-to")) nil [73361 77736])
            ("dired-mark-read-file-name" function (:arguments ("prompt" "dir" "op-symbol" "arg" "files" "default")) nil [78260 78476])
            ("dired-dwim-target-directory" function nil nil [78478 79294])
            ("dired-dwim-target-defaults" function (:arguments ("fn-list" "target-dir")) nil [79296 81443])
            ("dired-create-directory" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [81462 82241])
            ("dired-into-dir-with-symlinks" function (:arguments ("target")) nil [82243 82359])
            ("dired-copy-how-to-fn" variable nil nil [82978 83134])
            ("dired-do-copy" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83151 84167])
            ("dired-do-symlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84184 84814])
            ("dired-do-hardlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84831 85404])
            ("dired-hardlink" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [85406 85656])
            ("dired-do-rename" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85673 86190])
            ("rename-regexp-query" variable nil nil [86246 86274])
            ("dired-do-create-files-regexp" function (:arguments ("file-creator" "operation" "arg" "regexp" "newname" "whole-name" "marker-char")) nil [86276 88467])
            ("dired-mark-read-regexp" function (:arguments ("operation")) nil [88469 89012])
            ("dired-do-rename-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [89029 89903])
            ("dired-do-copy-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [89920 90384])
            ("dired-do-hardlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [90401 90771])
            ("dired-do-symlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [90788 91155])
            ("rename-non-directory-query" variable nil nil [91157 91192])
            ("dired-create-files-non-directory" function (:arguments ("file-creator" "basename-constructor" "operation" "arg")) nil [91194 92206])
            ("dired-rename-non-directory" function (:arguments ("basename-constructor" "operation" "arg")) nil [92208 92377])
            ("dired-upcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [92394 92567])
            ("dired-downcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [92584 92763])
            ("dired-maybe-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [92838 94557])
            ("dired-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [94574 97156])
            ("dired-insert-subdir-validate" function (:arguments ("dirname" "switches")) nil [97158 97880])
            ("dired-alist-add" function (:arguments ("dir" "new-marker")) nil [97882 98025])
            ("dired-alist-sort" function nil nil [98027 98251])
            ("dired-kill-tree" function
               (:user-visible-flag t
                :arguments ("dirname" "remember-marks" "kill-root"))
                nil [98253 99111])
            ("dired-insert-subdir-newpos" function (:arguments ("new-dir")) nil [99113 99647])
            ("dired-insert-subdir-del" function (:arguments ("element")) nil [99649 100194])
            ("dired-insert-subdir-doinsert" function (:arguments ("dirname" "switches")) nil [100196 100833])
            ("dired-insert-subdir-doupdate" function (:arguments ("dirname" "elt" "beg-end")) nil [100835 101663])
            ("dired-tree-lessp" function (:arguments ("dir1" "dir2")) nil [101665 102865])
            ("dired-split" function (:arguments ("pat" "str" "limit")) nil [102935 103838])
            ("dired-prev-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [103886 104354])
            ("dired-subdir-min" function nil nil [104356 104485])
            ("dired-goto-subdir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [104502 105321])
            ("dired-mark-subdir-files" function (:user-visible-flag t) nil [105339 105670])
            ("dired-kill-subdir" function
               (:user-visible-flag t
                :arguments ("remember-marks"))
                nil [105687 106527])
            ("dired-unsubdir" function (:arguments ("dir")) nil [106529 106674])
            ("dired-tree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [106691 107052])
            ("dired-tree-down" function (:user-visible-flag t) nil [107069 107549])
            ("dired-unhide-subdir" function nil nil [107564 107694])
            ("dired-hide-check" function nil nil [107696 107819])
            ("dired-subdir-hidden-p" function (:arguments ("dir")) nil [107821 107959])
            ("dired-hide-subdir" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [107976 108807])
            ("dired-hide-all" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [108824 109885])
            ("dired-isearch-filenames" variable nil nil [109964 110465])
            ("define-minor-mode" code nil nil [110467 111167])
            ("dired-isearch-filenames-setup" function nil nil [111184 111640])
            ("dired-isearch-filenames-end" function nil nil [111642 111898])
            ("dired-isearch-filter-filenames" function (:arguments ("beg" "end")) nil [111900 112250])
            ("dired-isearch-filenames" function (:user-visible-flag t) nil [112267 112461])
            ("dired-isearch-filenames-regexp" function (:user-visible-flag t) nil [112478 112686])
            ("dired-do-isearch" function (:user-visible-flag t) nil [112767 112956])
            ("dired-do-isearch-regexp" function (:user-visible-flag t) nil [112973 113176])
            ("dired-do-search" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [113193 113517])
            ("dired-do-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("from" "to" "delimited"))
                nil [113534 114375])
            ("declare-function" code nil nil [114377 114419])
            ("declare-function" code nil nil [114420 114475])
            ("dired-do-find-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [114492 115619])
            ("dired-do-find-regexp-and-replace" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [115636 116309])
            ("dired-nondirectory-p" function (:arguments ("file")) nil [116311 116378])
            ("dired-show-file-type" function
               (:user-visible-flag t
                :arguments ("file" "deref-symlinks"))
                nil [116396 116970])
            ("dired-aux" package nil nil [116972 116992]))          
      :file "dired-aux.el.gz"
      :pointmax 117125
      :fsize 32628
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [4060 4080])
            ("thingatpt" include nil nil [4081 4101])
            ("define-obsolete-variable-alias" code nil nil [4103 4171])
            ("ffap" customgroup (:user-visible-flag t) nil [4173 4363])
            ("ffap-symbol-value" function (:arguments ("sym" "default")) nil [4518 4678])
            ("ffap-shell-prompt-regexp" variable (:default-value "[$%><]*") nil [4680 5142])
            ("ffap-ftp-regexp" variable (:default-value "\\`/[^/:]+:") nil [5144 5418])
            ("ffap-url-unwrap-local" variable (:default-value t) nil [5420 5710])
            ("ffap-url-unwrap-remote" variable (:default-value (quote ("ftp"))) nil [5712 6025])
            ("ffap-lax-url" variable (:default-value t) nil [6027 6380])
            ("ffap-ftp-default-user" variable (:default-value "anonymous") nil [6414 6668])
            ("ffap-rfs-regexp" variable (:default-value "\\`/\\(afs\\|net\\)/.") nil [6670 6949])
            ("ffap-url-regexp" variable (:default-value (concat "\\(" "news\\(post\\)?:\\|mailto:\\|file:" "\\|" "\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\)://" "\\)")) nil [6951 7251])
            ("ffap-foo-at-bar-prefix" variable (:default-value "mailto") nil [7253 7559])
            ("ffap-max-region-length" variable (:default-value 1024) nil [7561 7733])
            ("ffap-dired-wildcards" variable (:default-value "[*?][^/]*\\'") nil [8080 8902])
            ("ffap-pass-wildcards-to-dired" variable nil nil [8904 9053])
            ("ffap-newfile-prompt" variable nil nil [9055 9314])
            ("ffap-require-prefix" variable nil nil [9316 9583])
            ("ffap-file-finder" variable (:default-value (quote find-file)) nil [9585 9731])
            ("ffap-directory-finder" variable (:default-value (quote dired)) nil [9733 9881])
            ("ffap-url-fetcher" variable (:default-value (quote browse-url)) nil [9883 10106])
            ("ffap-next-regexp" variable (:default-value "[/:.~[:alpha:]]/\\|@[[:alpha:]][-[:alnum:]]*\\.") nil [10108 10579])
            ("dired-at-point-require-prefix" variable nil nil [10581 10833])
            ("ffap-mouse-event" function nil nil [11063 11175])
            ("ffap-event-buffer" function (:arguments ("event")) nil [11176 11253])
            ("ffap-next-guess" variable nil nil [11505 11579])
            ("ffap-string-at-point-region" variable (:default-value (quote (1 1))) nil [11581 11705])
            ("ffap-next-guess" function (:arguments ("back" "lim")) nil [11707 12416])
            ("ffap-next" function
               (:user-visible-flag t
                :arguments ("back" "wrap"))
                nil [12433 13378])
            ("ffap-next-url" function
               (:user-visible-flag t
                :arguments ("back" "wrap"))
                nil [13380 13649])
            ("ffap-machine-p-local" variable (:default-value (quote reject)) nil [13880 14155])
            ("ffap-machine-p-known" variable (:default-value (quote ping)) nil [14156 14483])
            ("ffap-machine-p-unknown" variable (:default-value (quote reject)) nil [14484 14790])
            ("ffap-what-domain" function (:arguments ("domain")) nil [14792 15104])
            ("ffap-machine-p" function (:arguments ("host" "service" "quiet" "strategy")) nil [15106 17946])
            ("ffap-replace-file-component" function (:arguments ("fullname" "name")) nil [17982 18342])
            ("ffap-file-suffix" function (:arguments ("file")) nil [18409 18589])
            ("ffap-compression-suffixes" variable (:default-value (quote (".gz" ".Z"))) nil [18591 18716])
            ("ffap-file-exists-string" function (:arguments ("file" "nomodify")) nil [18718 19809])
            ("ffap-file-remote-p" function (:arguments ("filename")) nil [19811 20567])
            ("ffap-machine-at-point" function nil nil [20569 20742])
            ("ffap-host-to-filename" function (:arguments ("host")) nil [20744 21254])
            ("ffap-fixup-machine" function (:arguments ("mach")) nil [21256 21735])
            ("defvaralias" code nil nil [21737 21806])
            ("defvaralias" code nil nil [21807 21875])
            ("defalias" code nil nil [21876 21932])
            ("ffap-url-p" function (:arguments ("string")) nil [21934 22237])
            ("ffap-url-unwrap-local" function (:arguments ("url")) nil [22306 22823])
            ("ffap-url-unwrap-remote" function (:arguments ("url")) nil [22825 23500])
            ("ffap-fixup-url" function (:arguments ("url")) nil [23502 23756])
            ("ffap-list-env" function (:arguments ("env" "empty")) nil [24273 25426])
            ("ffap-reduce-path" function (:arguments ("path")) nil [25428 25773])
            ("ffap-all-subdirs" function (:arguments ("dir" "depth")) nil [25775 26141])
            ("ffap-all-subdirs-loop" function (:arguments ("dir" "depth")) nil [26143 26506])
            ("ffap-kpathsea-depth" variable (:default-value 1) nil [26508 26666])
            ("ffap-kpathsea-expand-path" function (:arguments ("path")) nil [26668 27161])
            ("ffap-locate-file" function (:arguments ("file" "nosuffix" "path")) nil [27163 28486])
            ("ffap-alist" variable (:default-value (quote (("" . ffap-completable) ("\\.info\\'" . ffap-info) ("\\`info/" . ffap-info-2) ("\\`[-[:lower:]]+\\'" . ffap-info-3) ("\\.elc?\\'" . ffap-el) (emacs-lisp-mode . ffap-el-mode) (finder-mode . ffap-el-mode) (help-mode . ffap-el-mode) (c++-mode . ffap-c++-mode) (cc-mode . ffap-c-mode) ("\\.\\([chCH]\\|cc\\|hh\\)\\'" . ffap-c-mode) (fortran-mode . ffap-fortran-mode) ("\\.[fF]\\'" . ffap-fortran-mode) (tex-mode . ffap-tex-mode) (latex-mode . ffap-latex-mode) ("\\.\\(tex\\|sty\\|doc\\|cls\\)\\'" . ffap-tex) ("\\.bib\\'" . ffap-bib) ("\\`\\." . ffap-home) ("\\`~/" . ffap-lcd) ("\\`[Rr][Ff][Cc][-#]?\\([0-9]+\\)" . ffap-rfc) (dired-mode . ffap-dired)))) nil [28789 30811])
            ("put" code nil nil [30813 30854])
            ("ffap-completable" function (:arguments ("name")) nil [31408 31602])
            ("ffap-home" function (:arguments ("name")) nil [31604 31661])
            ("ffap-info" function (:arguments ("name")) nil [31663 31843])
            ("ffap-info-2" function (:arguments ("name")) nil [31845 31902])
            ("ffap-info-3" function (:arguments ("name")) nil [31904 32053])
            ("ffap-el" function (:arguments ("name")) nil [32055 32113])
            ("ffap-el-mode" function (:arguments ("name")) nil [32115 32368])
            ("ffap-c-path" variable (:default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil (quote (t nil)) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base (quote ("/usr/include" "/usr/local/include")))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include")))))) nil [32613 33170])
            ("ffap-c-mode" function (:arguments ("name")) nil [33172 33238])
            ("ffap-c++-path" variable (:default-value (let ((c++-include-dir (with-temp-buffer (when (eq 0 (ignore-errors (call-process "g++" nil t nil "-v"))) (goto-char (point-min)) (if (re-search-forward "--with-gxx-include-dir=\\([^[:space:]]+\\)" nil (quote noerror)) (match-string 1) (when (re-search-forward "gcc version \\([[:digit:]]+.[[:digit:]]+.[[:digit:]]+\\)" nil (quote noerror)) (expand-file-name (match-string 1) "/usr/include/c++/"))))))) (if c++-include-dir (cons c++-include-dir ffap-c-path) ffap-c-path))) nil [33240 34176])
            ("ffap-c++-mode" function (:arguments ("name")) nil [34178 34248])
            ("ffap-fortran-path" variable (:default-value (quote ("../include" "/usr/include"))) nil [34250 34307])
            ("ffap-fortran-mode" function (:arguments ("name")) nil [34309 34387])
            ("ffap-tex-path" variable (:default-value t) nil [34389 34551])
            ("ffap-latex-guess-rules" variable (:default-value (quote (("" . ".sty") ("" . ".cls") ("" . ".ltx") ("" . ".tex") ("" . "") ("beamertheme" . ".sty") ("beamercolortheme" . ".sty") ("beamerfonttheme" . ".sty") ("beamerinnertheme" . ".sty") ("beameroutertheme" . ".sty") ("" . ".ldf")))) nil [34553 35443])
            ("ffap-tex-init" function nil nil [35445 35950])
            ("ffap-tex-mode" function (:arguments ("name")) nil [35952 36051])
            ("ffap-latex-mode" function (:arguments ("name")) nil [36053 38825])
            ("ffap-tex" function (:arguments ("name")) nil [38827 38910])
            ("ffap-bib-path" variable (:default-value (ffap-list-env "BIBINPUTS" (ffap-reduce-path (quote ("/usr/local/lib/tex/macros/bib" "/usr/lib/texmf/bibtex/bib"))))) nil [38912 39134])
            ("ffap-bib" function (:arguments ("name")) nil [39136 39201])
            ("ffap-dired" function (:arguments ("name")) nil [39203 39625])
            ("ffap-lcd" function (:arguments ("name")) nil [39671 40315])
            ("ffap-rfc-path" variable (:default-value (concat (ffap-host-to-filename "ftp.rfc-editor.org") "/in-notes/rfc%s.txt")) nil [40317 40682])
            ("ffap-rfc-directories" variable nil nil [40684 40893])
            ("ffap-rfc" function (:arguments ("name")) nil [40895 41067])
            ("ffap-string-at-point-mode-alist" variable (:default-value (quote ((file "--:\\\\${}+<>@-Z_[:alpha:]~*?" "<@" "@>;.,!:") (url "--:=&?$+@-Z_[:alpha:]~#,%;*()!'" "^[0-9a-zA-Z]" ":;.,!?") (nocolon "--9$+<>@-Z_[:alpha:]~" "<@" "@>;.,!?") (machine "-[:alnum:]." "" ".") (math-mode ",-:$+<>@-Z_[:lower:]~`" "<" "@>;.,!?`:") (latex-mode "--:\\\\$+<>@-Z_[:alpha:]~*?" "<@" "@>;.,!:") (tex-mode "--:\\\\$+<>@-Z_[:alpha:]~*?" "<@" "@>;.,!:")))) nil [41096 42357])
            ("ffap-string-at-point" variable nil nil [42359 42517])
            ("ffap-string-at-point" function (:arguments ("mode")) nil [42519 45379])
            ("ffap-string-around" function nil nil [45381 45836])
            ("ffap-copy-string-as-kill" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [45838 46263])
            ("declare-function" code nil nil [46278 46342])
            ("ffap-url-at-point" function nil nil [46344 47307])
            ("ffap-gopher-regexp" variable (:default-value "\\<\\(Type\\|Name\\|Path\\|Host\\|Port\\) *= *") nil [47309 47484])
            ("ffap--gopher-var-on-line" function nil nil [47486 47936])
            ("ffap-gopher-at-point" function nil nil [47938 49250])
            ("ffap-ftp-sans-slash-regexp" variable (:default-value (and ffap-ftp-regexp "\\`\\([^:@]+@[^:@]+:\\|[^@.:]+\\.[^@:]+:\\|[^:]+:[~/]\\)\\([^:]\\|\\'\\)")) nil [49252 49691])
            ("ffap-file-at-point" function nil nil [49693 54605])
            ("ffap-read-file-or-url" function (:arguments ("prompt" "guess")) nil [54973 56687])
            ("ffap-read-url-internal" function (:arguments ("string" "pred" "action")) nil [56689 57165])
            ("ffap-read-file-or-url-internal" function (:arguments ("string" "pred" "action")) nil [57167 57391])
            ("ffap-highlight" variable (:default-value t) nil [57669 57756])
            ("ffap" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [57758 57890])
            ("ffap-highlight-overlay" variable nil nil [57892 57974])
            ("ffap-highlight" function (:arguments ("remove")) nil [57976 58732])
            ("ffap-guesser" function nil nil [58789 59079])
            ("ffap-prompter" function (:arguments ("guess")) nil [59081 59893])
            ("find-file-at-point" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [59910 61776])
            ("defalias" code nil nil [61861 61897])
            ("ffap-menu-regexp" variable nil nil [61934 62199])
            ("ffap-menu-alist" variable nil nil [62201 62286])
            ("make-variable-buffer-local" code nil nil [62287 62332])
            ("ffap-menu-text-plist" variable (:default-value (cond ((display-mouse-p) (quote (face bold mouse-face highlight))) (t nil))) nil [62334 62590])
            ("ffap-menu" function
               (:user-visible-flag t
                :arguments ("rescan"))
                nil [62607 63461])
            ("ffap-menu-cont" function (:arguments ("choice")) nil [63463 63830])
            ("ffap-menu-ask" function (:arguments ("title" "alist" "cont")) nil [63832 65261])
            ("ffap-menu-rescan" function (:user-visible-flag t) nil [65263 66843])
            ("ffap-at-mouse-fallback" variable nil nil [66946 67144])
            ("put" code nil nil [67145 67198])
            ("ffap-at-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [67215 68329])
            ("ffap-other-window" function (:user-visible-flag t) nil [68604 68900])
            ("ffap-other-frame" function (:user-visible-flag t) nil [68902 69523])
            ("ffap--toggle-read-only" function (:arguments ("buffer-or-list")) nil [69525 69729])
            ("ffap-read-only" function (:user-visible-flag t) nil [69731 70041])
            ("ffap-read-only-other-window" function (:user-visible-flag t) nil [70043 70288])
            ("ffap-read-only-other-frame" function (:user-visible-flag t) nil [70290 70532])
            ("ffap-alternate-file" function (:user-visible-flag t) nil [70534 70739])
            ("ffap-alternate-file-other-window" function (:user-visible-flag t) nil [70741 70985])
            ("ffap-literally" function (:user-visible-flag t) nil [70987 71195])
            ("defalias" code nil nil [71197 71253])
            ("define-obsolete-function-alias" code nil nil [71276 71343])
            ("define-obsolete-function-alias" code nil nil [71344 71418])
            ("ffap-ro-mode-hook" function nil nil [71554 71713])
            ("ffap-gnus-hook" function nil nil [71715 72010])
            ("gnus-summary-buffer" variable nil nil [72012 72040])
            ("gnus-article-buffer" variable nil nil [72041 72069])
            ("declare-function" code nil nil [72105 72225])
            ("declare-function" code nil nil [72227 72323])
            ("ffap-gnus-wrapper" function (:arguments ("form")) nil [72325 73031])
            ("ffap-gnus-next" function (:user-visible-flag t) nil [73033 73161])
            ("ffap-gnus-menu" function (:user-visible-flag t) nil [73163 73285])
            ("dired-at-point" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [73305 74606])
            ("dired-at-point-prompter" function (:arguments ("guess")) nil [74608 75562])
            ("ffap-dired-other-window" function (:user-visible-flag t) nil [75620 75938])
            ("ffap-dired-other-frame" function (:user-visible-flag t) nil [75940 76486])
            ("ffap-list-directory" function (:user-visible-flag t) nil [76488 76708])
            ("ffap-guess-file-name-at-point" function nil nil [76780 77379])
            ("ffap-bindings" variable (:default-value (quote ((global-set-key [S-mouse-3] (quote ffap-at-mouse)) (global-set-key [C-S-mouse-3] (quote ffap-menu)) (global-set-key "" (quote find-file-at-point)) (global-set-key "" (quote ffap-read-only)) (global-set-key "" (quote ffap-alternate-file)) (global-set-key "4f" (quote ffap-other-window)) (global-set-key "5f" (quote ffap-other-frame)) (global-set-key "4r" (quote ffap-read-only-other-window)) (global-set-key "5r" (quote ffap-read-only-other-frame)) (global-set-key "d" (quote dired-at-point)) (global-set-key "4d" (quote ffap-dired-other-window)) (global-set-key "5d" (quote ffap-dired-other-frame)) (global-set-key "" (quote ffap-list-directory)) (add-hook (quote gnus-summary-mode-hook) (quote ffap-gnus-hook)) (add-hook (quote gnus-article-mode-hook) (quote ffap-gnus-hook)) (add-hook (quote vm-mode-hook) (quote ffap-ro-mode-hook)) (add-hook (quote rmail-mode-hook) (quote ffap-ro-mode-hook))))) nil [77436 78580])
            ("ffap-bindings" function (:user-visible-flag t) nil [78597 78726])
            ("ffap" package nil nil [78730 78745]))          
      :file "ffap.el.gz"
      :pointmax 78769
      :fsize 24212
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("shell-command-dont-erase-buffer" variable nil nil [1268 1938])
            ("shell-command-saved-pos" variable nil nil [1940 2294])
            ("idle-update-delay" variable (:default-value 0.5) nil [2296 2593])
            ("killing" customgroup (:user-visible-flag t) nil [2595 2669])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2671 2773])
            ("next-error" customgroup (:user-visible-flag t) nil [2810 2911])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [2913 3044])
            ("next-error-highlight" variable (:default-value 0.5) nil [3046 3801])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3803 4496])
            ("next-error-recenter" variable nil nil [4498 4860])
            ("next-error-hook" variable nil nil [4862 5003])
            ("next-error-highlight-timer" variable nil nil [5005 5044])
            ("next-error-overlay-arrow-position" variable nil nil [5046 5092])
            ("put" code nil nil [5093 5171])
            ("add-to-list" code nil nil [5172 5249])
            ("next-error-last-buffer" variable nil nil [5251 5478])
            ("next-error-function" variable nil nil [5480 5938])
            ("make-variable-buffer-local" code nil nil [5939 5988])
            ("next-error-move-function" variable nil nil [5990 6303])
            ("make-variable-buffer-local" code nil nil [6304 6358])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6360 7442])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7444 9726])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [9728 11497])
            ("next-error-internal" function nil nil [11499 11920])
            ("defalias" code nil nil [11922 11961])
            ("defalias" code nil nil [11962 11996])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11998 12315])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12317 12585])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12587 13039])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13041 13419])
            ("next-error-follow-last-line" variable nil nil [13490 13530])
            ("define-minor-mode" code nil nil [13532 14240])
            ("next-error-follow-mode-post-command-hook" function nil nil [14356 14689])
            ("fundamental-mode" function (:user-visible-flag t) nil [14698 14907])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [14985 15469])
            ("put" code nil nil [15471 15511])
            ("define-derived-mode" code nil nil [15512 15657])
            ("self-insert-uses-region-functions" variable nil nil [15690 16550])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [16552 16685])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [16687 19491])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [19493 19841])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19843 20620])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20622 21423])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21425 22138])
            ("defalias" code nil nil [22140 22182])
            ("delete-blank-lines" function (:user-visible-flag t) nil [22201 23628])
            ("delete-trailing-lines" variable (:default-value t) nil [23630 23916])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [23918 24140])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [24142 26114])
            ("newline-and-indent" function (:user-visible-flag t) nil [26116 26549])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [26551 27777])
            ("read-quoted-char-radix" variable (:default-value 8) nil [27779 28000])
            ("read-quoted-char" function (:arguments ("prompt")) nil [28002 30851])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30853 32882])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32884 33077])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33079 33278])
            ("back-to-indentation" function (:user-visible-flag t) nil [33280 33570])
            ("fixup-whitespace" function (:user-visible-flag t) nil [33572 33915])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [33917 34355])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [34357 34617])
            ("cycle-spacing--context" variable nil nil [34619 34874])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [34876 37325])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [37328 38251])
            ("end-of-buffer" function (:arguments ("arg")) nil [38253 39500])
            ("delete-active-region" variable (:default-value t) nil [39502 40039])
            ("region-extract-function" variable (:default-value (lambda (method) (when (region-beginning) (cond ((eq method (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq method (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method)))))) nil [40041 41007])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [41009 41355])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [41357 42994])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [42996 44139])
            ("mark-whole-buffer" function nil nil [44141 44700])
            ("goto-line" function (:arguments ("line" "buffer")) nil [44744 47021])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [47023 47705])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [47707 48500])
            ("count-words--buffer-message" function nil nil [48502 48655])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [48657 48982])
            ("define-obsolete-function-alias" code nil nil [48984 49063])
            ("what-line" function (:user-visible-flag t) nil [49065 49416])
            ("count-lines" function (:arguments ("start" "end")) nil [49418 50255])
            ("line-number-at-pos" function (:arguments ("pos" "absolute")) nil [50257 50924])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [50926 55437])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [55502 55817])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [55819 56342])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [56344 56801])
            ("minibuffer-completing-symbol" variable nil nil [56803 56906])
            ("make-obsolete-variable" code nil nil [56907 56977])
            ("minibuffer-default" variable nil nil [56979 57172])
            ("eval-expression-print-level" variable (:default-value 4) nil [57174 57404])
            ("eval-expression-print-length" variable (:default-value 12) nil [57406 57639])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [57641 57850])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [57852 58101])
            ("eval-expression-print-format" function (:arguments ("value")) nil [58103 58785])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [58787 58901])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [58903 59587])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [59589 60206])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [60336 62864])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [62866 63793])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63795 65463])
            ("extended-command-history" variable nil nil [65466 65503])
            ("execute-extended-command--last-typed" variable nil nil [65504 65553])
            ("read-extended-command" function nil nil [65555 67739])
            ("suggest-key-bindings" variable (:default-value t) nil [67741 68107])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [68109 68274])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [68276 68738])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [68740 69650])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [69652 73455])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [73457 76066])
            ("minibuffer-history" variable nil nil [76069 76322])
            ("minibuffer-history-sexp-flag" variable nil nil [76323 76638])
            ("setq" code nil nil [76639 76693])
            ("setq" code nil nil [76694 76732])
            ("minibuffer-history-search-history" variable nil nil [76758 76804])
            ("minibuffer-text-before-history" variable nil nil [76806 77006])
            ("add-hook" code nil nil [77008 77072])
            ("minibuffer-history-initialize" function nil nil [77074 77158])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [77160 77375])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [77377 77767])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77769 80613])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80615 81669])
            ("minibuffer-temporary-goal-position" variable nil nil [81671 81718])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [81720 82360])
            ("minibuffer-default-add-done" variable nil nil [82362 82685])
            ("make-variable-buffer-local" code nil nil [82687 82744])
            ("minibuffer-default-add-completions" function nil nil [82746 83200])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [83202 85490])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85492 85743])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85745 86003])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86005 87733])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87735 89917])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [89919 90575])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90577 90862])
            ("minibuffer-prompt-width" function nil nil [90921 91210])
            ("add-hook" code nil nil [91243 91310])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [91312 91363])
            ("make-variable-buffer-local" code nil nil [91364 91436])
            ("minibuffer-history-isearch-setup" function nil nil [91438 92078])
            ("minibuffer-history-isearch-end" function nil nil [92080 92310])
            ("minibuffer-history-isearch-search" function nil nil [92312 94217])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [94219 95616])
            ("minibuffer-history-isearch-wrap" function nil nil [95618 96235])
            ("minibuffer-history-isearch-push-state" function nil nil [96237 96568])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [96570 96782])
            ("define-obsolete-function-alias" code nil nil [96860 96922])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [96924 97167])
            ("undo-in-region" variable nil nil [97169 97273])
            ("undo-no-redo" variable nil nil [97275 97350])
            ("pending-undo-list" variable nil nil [97352 97503])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97505 102126])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [102128 102409])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [102411 102673])
            ("undo-in-progress" variable nil nil [102675 102806])
            ("undo-more" function (:arguments ("n")) nil [102808 103503])
            ("primitive-undo" function (:arguments ("n" "list")) nil [103505 110139])
            ("undo-copy-list" function (:arguments ("list")) nil [110164 110262])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [110264 110373])
            ("undo-start" function (:arguments ("beg" "end")) nil [110375 110963])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [113961 116247])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [116249 117288])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [117290 117832])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [117834 118599])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [119490 119795])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [119797 120269])
            ("undo-delta" function (:arguments ("undo-elt")) nil [120440 120773])
            ("defvar-local" code nil nil [120969 121690])
            ("undo-auto-current-boundary-timer" variable nil nil [121692 121867])
            ("undo-auto--this-command-amalgamating" variable nil nil [121869 122065])
            ("undo-auto--needs-boundary-p" function nil nil [122067 122207])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [122209 122513])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [122515 123143])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [123145 123814])
            ("undo-auto--boundary-timer" function nil nil [123816 123993])
            ("undo-auto--boundary-ensure-timer" function nil nil [123995 124248])
            ("undo-auto--undoably-changed-buffers" variable nil nil [124250 124487])
            ("undo-auto--add-boundary" function nil nil [124489 124768])
            ("undo-auto-amalgamate" function nil nil [124770 126099])
            ("undo-auto--undoable-change" function nil nil [126101 126292])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [126323 127912])
            ("undo-ask-before-discard" variable nil nil [127915 128681])
            ("undo-extra-outer-limit" variable nil nil [128683 128959])
            ("make-variable-buffer-local" code nil nil [128960 129012])
            ("setq" code nil nil [129297 129356])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [129357 131148])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [131151 132540])
            ("shell-command-history" variable nil nil [132542 132732])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [132734 132848])
            ("shell-command-default-error-buffer" variable nil nil [132850 133165])
            ("declare-function" code nil nil [133167 133233])
            ("declare-function" code nil nil [133234 133320])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [133322 134026])
            ("declare-function" code nil nil [134028 134079])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [134081 134326])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [134328 134957])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [134959 136212])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [136214 136540])
            ("shell-command--save-pos-or-erase" function nil nil [136542 137273])
            ("shell-command--set-point-after-cmd" function (:arguments ("buffer")) nil [137275 138520])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [138522 139823])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [139825 148653])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [148655 151051])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [151236 151523])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [151525 161100])
            ("shell-command-to-string" function (:arguments ("command")) nil [161102 161362])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [161364 162947])
            ("process-file-side-effects" variable (:default-value t) nil [162949 163371])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [163373 164419])
            ("tabulated-list-format" variable nil nil [164441 164471])
            ("tabulated-list-entries" variable nil nil [164472 164503])
            ("tabulated-list-sort-key" variable nil nil [164504 164536])
            ("declare-function" code nil nil [164537 164603])
            ("declare-function" code nil nil [164604 164710])
            ("process-menu-query-only" variable nil nil [164712 164748])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [164750 164880])
            ("define-derived-mode" code nil nil [164882 165374])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [165376 165681])
            ("list-processes--refresh" function nil nil [165683 167430])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [167432 167529])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [167531 168494])
            ("setq" code nil nil [168519 168558])
            ("setq" code nil nil [168559 168595])
            ("internal-echo-keystrokes-prefix" function nil nil [168597 169202])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [169204 169410])
            ("prefix-command-update" function nil nil [169412 169579])
            ("prefix-command-preserve-state-hook" variable nil nil [169581 169693])
            ("prefix-command-preserve-state" function nil nil [169695 170188])
            ("reset-this-command-lengths" function nil nil [170190 170293])
            ("add-hook" code nil nil [170389 170485])
            ("universal-argument--description" function nil nil [170486 170945])
            ("add-hook" code nil nil [170947 171034])
            ("universal-argument--preserve" function nil nil [171035 171113])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [171115 172731])
            ("universal-argument--mode" function nil nil [172733 172843])
            ("universal-argument" function (:user-visible-flag t) nil [172845 173588])
            ("universal-argument-more" function (:arguments ("arg")) nil [173590 174062])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174064 174438])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174440 175208])
            ("filter-buffer-substring-functions" variable nil nil [175212 175389])
            ("make-obsolete-variable" code nil nil [175390 175514])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [175516 175922])
            ("buffer-substring-filters" variable nil nil [175924 176405])
            ("make-obsolete-variable" code nil nil [176406 176521])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [176523 177384])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [177386 178305])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [178349 178900])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [178902 180341])
            ("kill-ring" variable nil nil [180382 180837])
            ("kill-ring-max" variable (:default-value 60) nil [180839 180974])
            ("kill-ring-yank-pointer" variable nil nil [180976 181077])
            ("save-interprogram-paste-before-kill" variable nil nil [181079 181475])
            ("kill-do-not-save-duplicates" variable nil nil [181477 181713])
            ("kill-new" function (:arguments ("string" "replace")) nil [181715 183740])
            ("kill-append-merge-undo" variable nil nil [183921 184191])
            ("kill-append" function (:arguments ("string" "before-p")) nil [184193 185057])
            ("yank-pop-change-selection" variable nil nil [185059 185407])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [185409 187067])
            ("kill-read-only-ok" variable nil nil [187118 187254])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [187256 190132])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190326 191459])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [191461 192750])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [192752 194334])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [194336 195156])
            ("bidi-directional-controls-chars" variable (:default-value "\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [195158 195303])
            ("bidi-directional-non-controls-chars" variable (:default-value "^\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [195305 195455])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [195457 196563])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [196565 197666])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [197668 199594])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [199596 200899])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [200915 201740])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [201813 202276])
            ("yank-window-start" variable nil nil [202278 202308])
            ("yank-undo-function" variable nil nil [202309 202640])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [202642 204358])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [204360 207100])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207102 207292])
            ("kill-forward-chars" function (:arguments ("arg")) nil [207357 207502])
            ("kill-backward-chars" function (:arguments ("arg")) nil [207551 207697])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [207699 208174])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [208176 209528])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [209530 210147])
            ("kill-whole-line" variable nil nil [210184 210329])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [210331 212545])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [212547 214176])
            ("forward-visible-line" function (:arguments ("arg")) nil [214178 216668])
            ("end-of-visible-line" function nil nil [216670 217436])
            ("kill-current-buffer" function (:user-visible-flag t) nil [217438 217943])
            ("insert-buffer" function (:arguments ("buffer")) nil [217947 218500])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [218502 219518])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219520 220178])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [220180 220865])
            ("define-error" code nil nil [220868 220937])
            ("activate-mark-hook" variable nil nil [220939 221128])
            ("deactivate-mark-hook" variable nil nil [221130 221208])
            ("mark" function (:arguments ("force")) nil [221210 221834])
            ("deactivate-mark" function (:arguments ("force")) nil [221869 223959])
            ("activate-mark" function (:arguments ("no-tmm")) nil [223961 224352])
            ("set-mark" function (:arguments ("pos")) nil [224354 225578])
            ("save-mark-and-excursion--save" function nil nil [225580 225729])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [225731 226681])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [226683 227138])
            ("use-empty-active-region" variable nil nil [227140 227639])
            ("use-region-p" function nil nil [227641 228247])
            ("region-active-p" function nil nil [228249 228938])
            ("region-bounds" function nil nil [228940 229251])
            ("region-noncontiguous-p" function nil nil [229253 229476])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [229478 229584])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [229586 230457])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [230459 231295])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [231297 231613])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [231615 232080])
            ("add-function" code nil nil [232082 232178])
            ("defvar-local" code nil nil [232181 232280])
            ("put" code nil nil [232281 232316])
            ("mark-ring-max" variable (:default-value 16) nil [232318 232463])
            ("global-mark-ring" variable nil nil [232465 232549])
            ("global-mark-ring-max" variable (:default-value 16) nil [232551 232712])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [232714 233027])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [233029 233440])
            ("set-mark-command-repeat-pop" variable nil nil [233442 233901])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [233903 236222])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [236224 237778])
            ("pop-mark" function nil nil [237780 238199])
            ("define-obsolete-function-alias" code nil nil [238201 238290])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238291 239186])
            ("shift-select-mode" variable (:default-value t) nil [239188 239760])
            ("handle-shift-selection" function nil nil [239762 241087])
            ("define-minor-mode" code nil nil [241089 242463])
            ("widen-automatically" variable (:default-value t) nil [242465 242799])
            ("non-essential" variable nil nil [242801 243199])
            ("pop-global-mark" function (:user-visible-flag t) nil [243201 244016])
            ("next-line-add-newlines" variable nil nil [244019 244193])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [244195 246392])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [246394 248100])
            ("track-eol" variable nil nil [248102 248440])
            ("goal-column" variable nil nil [248442 248709])
            ("make-variable-buffer-local" code nil nil [248710 248751])
            ("temporary-goal-column" variable nil nil [248753 249270])
            ("line-move-ignore-invisible" variable (:default-value t) nil [249272 249923])
            ("line-move-visual" variable (:default-value t) nil [249925 250500])
            ("declare-function" code nil nil [250537 250597])
            ("default-font-height" function nil nil [250599 251233])
            ("default-font-width" function nil nil [251235 251956])
            ("default-line-height" function nil nil [251958 252420])
            ("window-screen-lines" function nil nil [252422 252992])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [253039 256813])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [257137 259094])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [259242 262245])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [262399 267072])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [267074 270575])
            ("line-move-to-column" function (:arguments ("col")) nil [270577 272159])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272161 273516])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273518 275141])
            ("put" code nil nil [275271 275305])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [275307 276340])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276408 276972])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276974 277663])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277665 279087])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [279089 279458])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [279460 279839])
            ("visual-line" customgroup (:user-visible-flag t) nil [279841 279942])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [279944 280432])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [280434 281621])
            ("visual-line--saved-state" variable nil nil [281623 281660])
            ("define-minor-mode" code nil nil [281662 283488])
            ("turn-on-visual-line-mode" function nil nil [283490 283548])
            ("define-globalized-minor-mode" code nil nil [283550 283648])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283652 284166])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284168 284612])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284614 286368])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286370 286977])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [287128 288385])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [288387 289391])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289394 290050])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [290052 290804])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290806 291018])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [291020 291211])
            ("current-word" function (:arguments ("strict" "really-word")) nil [291213 292821])
            ("fill-prefix" variable nil nil [292824 292990])
            ("make-variable-buffer-local" code nil nil [292991 293032])
            ("put" code nil nil [293033 293090])
            ("auto-fill-inhibit-regexp" variable nil nil [293092 293258])
            ("do-auto-fill" function nil nil [293260 296616])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [296618 296944])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [296946 298053])
            ("internal-auto-fill" function nil nil [298055 298309])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [298311 298467])
            ("put" code nil nil [298469 298531])
            ("put" code nil nil [298705 298757])
            ("define-minor-mode" code nil nil [298759 299665])
            ("auto-fill-function" function nil nil [299732 299839])
            ("turn-on-auto-fill" function nil nil [299841 299934])
            ("turn-off-auto-fill" function nil nil [299936 300032])
            ("custom-add-option" code nil nil [300034 300088])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300090 300928])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300931 301721])
            ("defvaralias" code nil nil [301723 301781])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301783 302563])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302565 303109])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [303111 303228])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [303229 303356])
            ("define-minor-mode" code nil nil [303358 304091])
            ("define-minor-mode" code nil nil [304093 305021])
            ("define-minor-mode" code nil nil [305023 305499])
            ("define-minor-mode" code nil nil [305501 305805])
            ("define-minor-mode" code nil nil [305807 306115])
            ("define-minor-mode" code nil nil [306117 307113])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [307116 307247])
            ("blink-matching-paren" variable (:default-value t) nil [307249 307847])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [307849 308265])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [308267 308592])
            ("blink-matching-delay" variable (:default-value 1) nil [308594 308730])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [308732 309000])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [309002 309987])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [309989 310355])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [310357 310567])
            ("blink-matching-open" function (:user-visible-flag t) nil [310569 315133])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [315135 315324])
            ("blink-paren-post-self-insert-function" function nil nil [315326 315973])
            ("put" code nil nil [315975 316033])
            ("add-hook" code nil nil [316035 316414])
            ("keyboard-quit" function (:user-visible-flag t) nil [316601 317319])
            ("buffer-quit-function" variable nil nil [317321 317571])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [317573 318399])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [318401 318796])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [318800 319317])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [319319 320863])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [320865 321190])
            ("rfc822-goto-eoh" function nil nil [321192 321608])
            ("mail-encode-mml" variable nil nil [321650 321789])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [321791 324485])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324487 324878])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324880 325268])
            ("set-variable-value-history" variable nil nil [325272 325457])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [325459 328557])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-current-buffer)) map)) nil [328612 329248])
            ("put" code nil nil [329316 329364])
            ("completion-reference-buffer" variable nil nil [329366 329595])
            ("completion-no-auto-exit" variable nil nil [329597 329778])
            ("completion-base-position" variable nil nil [329780 330150])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [330152 330451])
            ("completion-base-size" variable nil nil [330453 330908])
            ("make-obsolete-variable" code nil nil [330909 330988])
            ("delete-completion-window" function (:user-visible-flag t) nil [330990 331364])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331366 331497])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331499 332749])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [332751 334710])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [334794 335632])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [335634 335826])
            ("choose-completion-string-functions" variable nil nil [335828 336573])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [336575 339985])
            ("define-derived-mode" code nil nil [339987 340359])
            ("completion-list-mode-finish" function nil nil [340361 340557])
            ("add-hook" code nil nil [340559 340621])
            ("completion-show-help" variable (:default-value t) nil [340685 340836])
            ("completion-setup-function" function nil nil [340967 342949])
            ("add-hook" code nil nil [342951 343011])
            ("define-key" code nil nil [343013 343088])
            ("define-key" code nil nil [343089 343164])
            ("switch-to-completions" function (:user-visible-flag t) nil [343166 343707])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [343869 344112])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [344113 344366])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [344367 344620])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [344621 344874])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [344875 345132])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [345133 345381])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [345383 346447])
            ("define-key" code nil nil [346449 346520])
            ("define-key" code nil nil [346521 346592])
            ("define-key" code nil nil [346593 346663])
            ("define-key" code nil nil [346664 346733])
            ("define-key" code nil nil [346734 346805])
            ("define-key" code nil nil [346806 346879])
            ("mapc" code nil nil [347169 347764])
            ("clone-buffer-hook" variable nil nil [347816 347917])
            ("clone-indirect-buffer-hook" variable nil nil [347919 348038])
            ("clone-process" function (:arguments ("process" "newname")) nil [348040 349549])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [349652 352615])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [352618 354258])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [354261 354744])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [354792 356333])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [356335 357410])
            ("define-minor-mode" code nil nil [357412 360907])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [360910 361033])
            ("define-minor-mode" code nil nil [361035 362188])
            ("define-minor-mode" code nil nil [362190 362960])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [362963 363146])
            ("define-derived-mode" code nil nil [363148 363264])
            ("messages-buffer" function nil nil [363266 363553])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [364502 365928])
            ("bad-package-check" function (:arguments ("package")) nil [365930 366435])
            ("dolist" code nil nil [366437 366559])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [367212 369836])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369902 370271])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370273 370660])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370662 371063])
            ("simple" package nil nil [371068 371085]))          
      :file "simple.el.gz"
      :pointmax 371111
      :fsize 100876
      :lastmodtime '(23900 21803 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1252 1269])
            ("dired-loaddefs" include nil nil [1332 1363])
            ("declare-function" code nil nil [1365 1449])
            ("dired" customgroup (:user-visible-flag t) nil [1479 1578])
            ("dired-mark" customgroup (:user-visible-flag t) nil [1580 1669])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [1687 2397])
            ("dired-subdir-switches" variable nil nil [2399 2673])
            ("dired-chown-program" variable (:default-value (purecopy (cond ((executable-find "chown") "chown") ((file-executable-p "/usr/sbin/chown") "/usr/sbin/chown") ((file-executable-p "/etc/chown") "/etc/chown") (t "chown")))) nil [2675 3009])
            ("dired-use-ls-dired" variable (:default-value (quote unspecified)) nil [3011 4254])
            ("dired-chmod-program" variable (:default-value "chmod") nil [4256 4370])
            ("dired-touch-program" variable (:default-value "touch") nil [4372 4488])
            ("dired-ls-F-marks-symlinks" variable nil nil [4490 5173])
            ("dired-trivial-filenames" variable (:default-value (purecopy "\\`\\.\\.?\\'\\|\\`#")) nil [5175 5509])
            ("dired-keep-marker-rename" variable (:default-value t) nil [5511 6112])
            ("dired-keep-marker-copy" variable (:default-value 67) nil [6114 6433])
            ("dired-keep-marker-hardlink" variable (:default-value 72) nil [6435 6750])
            ("dired-keep-marker-symlink" variable (:default-value 89) nil [6752 7070])
            ("dired-dwim-target" variable nil nil [7072 7410])
            ("dired-copy-preserve-time" variable (:default-value t) nil [7412 7590])
            ("defvaralias" code nil nil [7711 7780])
            ("defvaralias" code nil nil [7781 7844])
            ("dired-load-hook" variable nil nil [7866 8017])
            ("dired-mode-hook" variable nil nil [8019 8121])
            ("dired-before-readin-hook" variable nil nil [8123 8270])
            ("dired-after-readin-hook" variable nil nil [8272 8509])
            ("dired-initial-position-hook" variable nil nil [8648 8836])
            ("dired-dnd-protocol-alist" variable (:default-value (quote (("^file:///" . dired-dnd-handle-local-file) ("^file://" . dired-dnd-handle-file) ("^file:" . dired-dnd-handle-local-file)))) nil [8838 9362])
            ("dired-hide-details-hide-symlink-targets" variable (:default-value t) nil [9364 9541])
            ("dired-hide-details-hide-information-lines" variable (:default-value t) nil [9543 9730])
            ("dired-always-read-filesystem" variable nil nil [9732 10289])
            ("dired-marker-char" variable (:default-value 42) nil [10314 10849])
            ("dired-del-marker" variable (:default-value 68) nil [10851 10926])
            ("dired-shrink-to-fit" variable (:default-value t) nil [10928 11119])
            ("make-obsolete-variable" code nil nil [11120 11370])
            ("dired-file-version-alist" variable nil nil [11372 11405])
            ("dired-directory" variable nil nil [11422 11725])
            ("dired-safe-switches-p" function (:arguments ("switches")) nil [11772 12049])
            ("dired-actual-switches" variable nil nil [12051 12160])
            ("put" code nil nil [12162 12234])
            ("dired-re-inode-size" variable (:default-value "[0-9  	]*[.,0-9]*[BkKMGTPEZY]?[ 	]*") nil [12236 12379])
            ("dired-re-mark" variable (:default-value "^[^ 
]") nil [12578 12610])
            ("dired-re-maybe-mark" variable (:default-value "^. ") nil [12699 12733])
            ("dired-re-dir" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "d[^:]")) nil [12873 12951])
            ("dired-re-sym" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "l[^:]")) nil [12952 13030])
            ("dired-re-exe" variable (:default-value (mapconcat (lambda (x) (concat dired-re-maybe-mark dired-re-inode-size x)) (quote ("-[-r][-w][xs][-r][-w].[-r][-w]." "-[-r][-w].[-r][-w][xs][-r][-w]." "-[-r][-w].[-r][-w].[-r][-w][xst]")) "\\|")) nil [13031 13323])
            ("dired-re-perms" variable (:default-value "[-bcdlps][-r][-w].[-r][-w].[-r][-w].") nil [13324 13386])
            ("dired-re-dot" variable (:default-value "^.* \\.\\.?/?$") nil [13387 13425])
            ("dired-subdir-alist" variable nil nil [13489 13760])
            ("defvar-local" code nil nil [13762 13921])
            ("defvaralias" code nil nil [13923 14011])
            ("dired-subdir-regexp" variable (:default-value "^. \\([^
]+\\)\\(:\\)[
]") nil [14013 14359])
            ("dired-faces" customgroup (:user-visible-flag t) nil [14361 14444])
            ("dired-header" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [14446 14585])
            ("dired-header-face" variable (:default-value (quote dired-header)) nil [14586 14668])
            ("dired-mark" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face))))
                :type "face")
                nil [14670 14805])
            ("dired-mark-face" variable (:default-value (quote dired-mark)) nil [14806 14878])
            ("dired-marked" variable
               (:default-value (quote ((t (:inherit warning))))
                :type "face")
                nil [14880 15002])
            ("dired-marked-face" variable (:default-value (quote dired-marked)) nil [15003 15080])
            ("dired-flagged" variable
               (:default-value (quote ((t (:inherit error))))
                :type "face")
                nil [15082 15217])
            ("dired-flagged-face" variable (:default-value (quote dired-flagged)) nil [15218 15311])
            ("dired-warning" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [15313 15610])
            ("dired-warning-face" variable (:default-value (quote dired-warning)) nil [15611 15722])
            ("dired-perm-write" variable
               (:default-value (quote ((((type w32 pc)) :inherit default) (t (:inherit font-lock-comment-delimiter-face))))
                :type "face")
                nil [15724 16120])
            ("dired-perm-write-face" variable (:default-value (quote dired-perm-write)) nil [16121 16240])
            ("dired-directory" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [16242 16390])
            ("dired-directory-face" variable (:default-value (quote dired-directory)) nil [16391 16476])
            ("dired-symlink" variable
               (:default-value (quote ((t (:inherit font-lock-keyword-face))))
                :type "face")
                nil [16478 16618])
            ("dired-symlink-face" variable (:default-value (quote dired-symlink)) nil [16619 16700])
            ("dired-ignored" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [16702 16863])
            ("dired-ignored-face" variable (:default-value (quote dired-ignored)) nil [16864 16982])
            ("dired-font-lock-keywords" variable (:default-value (list (list dired-re-mark (quote (0 dired-mark-face))) (list (concat "^[" (char-to-string dired-marker-char) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-marked-face)))) (list (concat "^[" (char-to-string dired-del-marker) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-flagged-face)))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]....\\(w\\)....") (quote (1 dired-perm-write-face))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].......\\(w\\).") (quote (1 dired-perm-write-face))) (list dired-re-dir (quote (".+" (dired-move-to-filename) nil (0 dired-directory-face)))) (list dired-re-sym (quote (".+" (dired-move-to-filename) nil (0 dired-symlink-face)))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$") (quote (".+" (dired-move-to-filename) nil (0 dired-ignored-face))))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)[*=|]$") (quote (".+" (progn (end-of-line) (unless (get-text-property (1- (point)) (quote mouse-face)) (dired-move-to-filename))) nil (0 dired-ignored-face))))) (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$") (quote (".+" (dired-move-to-filename) nil (0 (quote default))))) (list dired-subdir-regexp (quote (1 dired-header-face))))) nil [16984 20374])
            ("dnd-protocol-alist" variable nil nil [20376 20403])
            ("dired-mark-if" function (:arguments ("predicate" "msg")) nil [20479 21784])
            ("dired-map-over-marks" function (:arguments ("body" "arg" "show-progress" "distinguish-one-marked")) nil [21786 24594])
            ("dired-get-marked-files" function (:arguments ("localp" "arg" "filter" "distinguish-one-marked")) nil [24596 26030])
            ("dired-read-dir-and-switches" function (:arguments ("str")) nil [26055 26826])
            ("dired-file-name-at-point" function nil nil [29615 30079])
            ("dired" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [30145 31309])
            ("dired-other-window" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [31390 31655])
            ("dired-other-frame" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [31735 31989])
            ("dired-noselect" function (:arguments ("dir-or-list" "switches")) nil [32006 33285])
            ("dired-directory-changed-p" function (:arguments ("dirname")) nil [33492 33728])
            ("dired-buffer-stale-p" function (:arguments ("noconfirm")) nil [33730 34329])
            ("dired-auto-revert-buffer" variable nil nil [34331 35096])
            ("dired--need-align-p" function nil nil [35098 35838])
            ("dired--align-all-files" function nil nil [35840 36744])
            ("dired-internal-noselect" function (:arguments ("dir-or-list" "switches" "mode")) nil [36746 40116])
            ("dired-buffers" variable nil nil [40118 40365])
            ("dired-find-subdir" variable nil nil [40367 40393])
            ("dired-find-buffer-nocreate" function (:arguments ("dirname" "mode")) nil [40455 42215])
            ("dired-readin" function nil nil [42250 44214])
            ("dired-readin-insert" function nil nil [44248 45212])
            ("dired-align-file" function (:arguments ("beg" "end")) nil [45214 49810])
            ("ls-lisp-use-insert-directory-program" variable nil nil [49813 49858])
            ("dired-check-switches" function (:arguments ("switches" "short" "long")) nil [49860 50170])
            ("dired-switches-escape-p" function (:arguments ("switches")) nil [50172 50401])
            ("dired-switches-recursive-p" function (:arguments ("switches")) nil [50403 50568])
            ("dired-insert-directory" function (:arguments ("dir" "switches" "file-list" "wildcard" "hdr")) nil [50570 56659])
            ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [56661 57607])
            ("dired-revert" function (:arguments ("_arg" "_noconfirm")) nil [57639 59602])
            ("dired-save-positions" function nil nil [59691 60615])
            ("dired-restore-positions" function (:arguments ("positions")) nil [60617 61399])
            ("dired-remember-marks" function (:arguments ("beg" "end")) nil [61401 61881])
            ("dired-mark-remembered" function (:arguments ("alist")) nil [61883 62256])
            ("dired-remember-hidden" function nil nil [62258 62617])
            ("dired-insert-old-subdirs" function (:arguments ("old-subdir-alist")) nil [62619 63065])
            ("dired-uncache" function (:arguments ("dir")) nil [63067 63264])
            ("dired-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote dired-mouse-find-file-other-window)) (define-key map [follow-link] (quote mouse-face)) (define-key map "#" (quote dired-flag-auto-save-files)) (define-key map "." (quote dired-clean-directory)) (define-key map "~" (quote dired-flag-backup-files)) (define-key map "A" (quote dired-do-find-regexp)) (define-key map "C" (quote dired-do-copy)) (define-key map "B" (quote dired-do-byte-compile)) (define-key map "D" (quote dired-do-delete)) (define-key map "G" (quote dired-do-chgrp)) (define-key map "H" (quote dired-do-hardlink)) (define-key map "L" (quote dired-do-load)) (define-key map "M" (quote dired-do-chmod)) (define-key map "O" (quote dired-do-chown)) (define-key map "P" (quote dired-do-print)) (define-key map "Q" (quote dired-do-find-regexp-and-replace)) (define-key map "R" (quote dired-do-rename)) (define-key map "S" (quote dired-do-symlink)) (define-key map "T" (quote dired-do-touch)) (define-key map "X" (quote dired-do-shell-command)) (define-key map "Z" (quote dired-do-compress)) (define-key map "c" (quote dired-do-compress-to)) (define-key map "!" (quote dired-do-shell-command)) (define-key map "&" (quote dired-do-async-shell-command)) (define-key map "=" (quote dired-diff)) (define-key map "\377" (quote dired-unmark-all-files)) (define-key map "\204" (quote dired-tree-down)) (define-key map "\225" (quote dired-tree-up)) (define-key map "\216" (quote dired-next-subdir)) (define-key map "\220" (quote dired-prev-subdir)) (define-key map "\373" (quote dired-prev-marked-file)) (define-key map "\375" (quote dired-next-marked-file)) (define-key map "%" nil) (define-key map "%u" (quote dired-upcase)) (define-key map "%l" (quote dired-downcase)) (define-key map "%d" (quote dired-flag-files-regexp)) (define-key map "%g" (quote dired-mark-files-containing-regexp)) (define-key map "%m" (quote dired-mark-files-regexp)) (define-key map "%r" (quote dired-do-rename-regexp)) (define-key map "%C" (quote dired-do-copy-regexp)) (define-key map "%H" (quote dired-do-hardlink-regexp)) (define-key map "%R" (quote dired-do-rename-regexp)) (define-key map "%S" (quote dired-do-symlink-regexp)) (define-key map "%&" (quote dired-flag-garbage-files)) (define-key map "*" nil) (define-key map "**" (quote dired-mark-executables)) (define-key map "*/" (quote dired-mark-directories)) (define-key map "*@" (quote dired-mark-symlinks)) (define-key map "*%" (quote dired-mark-files-regexp)) (define-key map "*c" (quote dired-change-marks)) (define-key map "*s" (quote dired-mark-subdir-files)) (define-key map "*m" (quote dired-mark)) (define-key map "*u" (quote dired-unmark)) (define-key map "*?" (quote dired-unmark-all-files)) (define-key map "*!" (quote dired-unmark-all-marks)) (define-key map "U" (quote dired-unmark-all-marks)) (define-key map "*" (quote dired-unmark-backward)) (define-key map "*" (quote dired-next-marked-file)) (define-key map "*" (quote dired-prev-marked-file)) (define-key map "*t" (quote dired-toggle-marks)) (define-key map "a" (quote dired-find-alternate-file)) (define-key map "d" (quote dired-flag-file-deletion)) (define-key map "e" (quote dired-find-file)) (define-key map "f" (quote dired-find-file)) (define-key map "" (quote dired-find-file)) (put (quote dired-find-file) :advertised-binding "") (define-key map "g" (quote revert-buffer)) (define-key map "i" (quote dired-maybe-insert-subdir)) (define-key map "j" (quote dired-goto-file)) (define-key map "k" (quote dired-do-kill-lines)) (define-key map "l" (quote dired-do-redisplay)) (define-key map "m" (quote dired-mark)) (define-key map "n" (quote dired-next-line)) (define-key map "o" (quote dired-find-file-other-window)) (define-key map "" (quote dired-display-file)) (define-key map "p" (quote dired-previous-line)) (define-key map "s" (quote dired-sort-toggle-or-edit)) (define-key map "t" (quote dired-toggle-marks)) (define-key map "u" (quote dired-unmark)) (define-key map "v" (quote dired-view-file)) (define-key map "w" (quote dired-copy-filename-as-kill)) (define-key map "W" (quote browse-url-of-dired-file)) (define-key map "x" (quote dired-do-flagged-delete)) (define-key map "y" (quote dired-show-file-type)) (define-key map "+" (quote dired-create-directory)) (define-key map "<" (quote dired-prev-dirline)) (define-key map ">" (quote dired-next-dirline)) (define-key map "^" (quote dired-up-directory)) (define-key map " " (quote dired-next-line)) (define-key map [33554464] (quote dired-previous-line)) (define-key map [remap next-line] (quote dired-next-line)) (define-key map [remap previous-line] (quote dired-previous-line)) (define-key map "$" (quote dired-hide-subdir)) (define-key map "\244" (quote dired-hide-all)) (define-key map "(" (quote dired-hide-details-mode)) (define-key map (kbd "M-s a C-s") (quote dired-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote dired-do-isearch-regexp)) (define-key map (kbd "M-s f C-s") (quote dired-isearch-filenames)) (define-key map (kbd "M-s f M-C-s") (quote dired-isearch-filenames-regexp)) (define-key map [remap read-only-mode] (quote dired-toggle-read-only)) (define-key map [remap toggle-read-only] (quote dired-toggle-read-only)) (define-key map "?" (quote dired-summary)) (define-key map "" (quote dired-unmark-backward)) (define-key map [remap undo] (quote dired-undo)) (define-key map [remap advertised-undo] (quote dired-undo)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map "t" (quote image-dired-tag-files)) (define-key map "r" (quote image-dired-delete-tag)) (define-key map "j" (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (define-key map "" (quote image-dired-dired-toggle-marked-thumbs)) (define-key map "e" (quote image-dired-dired-edit-comment-and-tags)) (define-key map ":d" (quote epa-dired-do-decrypt)) (define-key map ":v" (quote epa-dired-do-verify)) (define-key map ":s" (quote epa-dired-do-sign)) (define-key map ":e" (quote epa-dired-do-encrypt)) (define-key map [menu-bar subdir] (cons "Subdir" (make-sparse-keymap "Subdir"))) (define-key map [menu-bar subdir hide-all] (quote (menu-item "Hide All" dired-hide-all :help "Hide all subdirectories, leave only header lines"))) (define-key map [menu-bar subdir hide-subdir] (quote (menu-item "Hide/UnHide Subdir" dired-hide-subdir :help "Hide or unhide current directory listing"))) (define-key map [menu-bar subdir tree-down] (quote (menu-item "Tree Down" dired-tree-down :help "Go to first subdirectory header down the tree"))) (define-key map [menu-bar subdir tree-up] (quote (menu-item "Tree Up" dired-tree-up :help "Go to first subdirectory header up the tree"))) (define-key map [menu-bar subdir up] (quote (menu-item "Up Directory" dired-up-directory :help "Edit the parent directory"))) (define-key map [menu-bar subdir prev-subdir] (quote (menu-item "Prev Subdir" dired-prev-subdir :help "Go to previous subdirectory header line"))) (define-key map [menu-bar subdir next-subdir] (quote (menu-item "Next Subdir" dired-next-subdir :help "Go to next subdirectory header line"))) (define-key map [menu-bar subdir prev-dirline] (quote (menu-item "Prev Dirline" dired-prev-dirline :help "Move to next directory-file line"))) (define-key map [menu-bar subdir next-dirline] (quote (menu-item "Next Dirline" dired-next-dirline :help "Move to previous directory-file line"))) (define-key map [menu-bar subdir insert] (quote (menu-item "Insert This Subdir" dired-maybe-insert-subdir :help "Insert contents of subdirectory" :enable (let ((f (dired-get-filename nil t))) (and f (file-directory-p f)))))) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate image-dired-dired-display-external] (quote (menu-item "Display Image Externally" image-dired-dired-display-external :help "Display image in external viewer"))) (define-key map [menu-bar immediate image-dired-dired-display-image] (quote (menu-item "Display Image" image-dired-dired-display-image :help "Display sized image in a separate window"))) (define-key map [menu-bar immediate image-dired-dired-toggle-marked-thumbs] (quote (menu-item "Toggle Image Thumbnails in This Buffer" image-dired-dired-toggle-marked-thumbs :help "Add or remove image thumbnails in front of marked file names"))) (define-key map [menu-bar immediate hide-details] (quote (menu-item "Hide Details" dired-hide-details-mode :help "Hide details in buffer" :button (:toggle . dired-hide-details-mode)))) (define-key map [menu-bar immediate revert-buffer] (quote (menu-item "Refresh" revert-buffer :help "Update contents of shown directories"))) (define-key map [menu-bar immediate dashes] (quote ("--"))) (define-key map [menu-bar immediate isearch-filenames-regexp] (quote (menu-item "Isearch Regexp in File Names..." dired-isearch-filenames-regexp :help "Incrementally search for regexp in file names only"))) (define-key map [menu-bar immediate isearch-filenames] (quote (menu-item "Isearch in File Names..." dired-isearch-filenames :help "Incrementally search for string in file names only."))) (define-key map [menu-bar immediate compare-directories] (quote (menu-item "Compare Directories..." dired-compare-directories :help "Mark files with different attributes in two Dired buffers"))) (define-key map [menu-bar immediate backup-diff] (quote (menu-item "Compare with Backup" dired-backup-diff :help "Diff file at cursor with its latest backup"))) (define-key map [menu-bar immediate diff] (quote (menu-item "Diff..." dired-diff :help "Compare file at cursor with another file"))) (define-key map [menu-bar immediate view] (quote (menu-item "View This File" dired-view-file :help "Examine file at cursor in read-only mode"))) (define-key map [menu-bar immediate display] (quote (menu-item "Display in Other Window" dired-display-file :help "Display file at cursor in other window"))) (define-key map [menu-bar immediate find-file-other-window] (quote (menu-item "Find in Other Window" dired-find-file-other-window :help "Edit file at cursor in other window"))) (define-key map [menu-bar immediate find-file] (quote (menu-item "Find This File" dired-find-file :help "Edit file at cursor"))) (define-key map [menu-bar immediate create-directory] (quote (menu-item "Create Directory..." dired-create-directory :help "Create a directory"))) (define-key map [menu-bar immediate wdired-mode] (quote (menu-item "Edit File Names" wdired-change-to-wdired-mode :help "Put a Dired buffer in a mode in which filenames are editable" :keys "C-x C-q" :filter (lambda (x) (if (eq major-mode (quote dired-mode)) x))))) (define-key map [menu-bar regexp] (cons "Regexp" (make-sparse-keymap "Regexp"))) (define-key map [menu-bar regexp image-dired-mark-tagged-files] (quote (menu-item "Mark From Image Tag..." image-dired-mark-tagged-files :help "Mark files whose image tags matches regexp"))) (define-key map [menu-bar regexp dashes-1] (quote ("--"))) (define-key map [menu-bar regexp downcase] (quote (menu-item "Downcase" dired-downcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to lower-case name"))) (define-key map [menu-bar regexp upcase] (quote (menu-item "Upcase" dired-upcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to upper-case name"))) (define-key map [menu-bar regexp hardlink] (quote (menu-item "Hardlink..." dired-do-hardlink-regexp :help "Make hard links for files matching regexp"))) (define-key map [menu-bar regexp symlink] (quote (menu-item "Symlink..." dired-do-symlink-regexp :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for files matching regexp"))) (define-key map [menu-bar regexp rename] (quote (menu-item "Rename..." dired-do-rename-regexp :help "Rename marked files matching regexp"))) (define-key map [menu-bar regexp copy] (quote (menu-item "Copy..." dired-do-copy-regexp :help "Copy marked files matching regexp"))) (define-key map [menu-bar regexp flag] (quote (menu-item "Flag..." dired-flag-files-regexp :help "Flag files matching regexp for deletion"))) (define-key map [menu-bar regexp mark] (quote (menu-item "Mark..." dired-mark-files-regexp :help "Mark files matching regexp for future operations"))) (define-key map [menu-bar regexp mark-cont] (quote (menu-item "Mark Containing..." dired-mark-files-containing-regexp :help "Mark files whose contents matches regexp"))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark prev] (quote (menu-item "Previous Marked" dired-prev-marked-file :help "Move to previous marked file"))) (define-key map [menu-bar mark next] (quote (menu-item "Next Marked" dired-next-marked-file :help "Move to next marked file"))) (define-key map [menu-bar mark marks] (quote (menu-item "Change Marks..." dired-change-marks :help "Replace marker with another character"))) (define-key map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" dired-unmark-all-marks))) (define-key map [menu-bar mark symlinks] (quote (menu-item "Mark Symlinks" dired-mark-symlinks :visible (fboundp (quote make-symbolic-link)) :help "Mark all symbolic links"))) (define-key map [menu-bar mark directories] (quote (menu-item "Mark Directories" dired-mark-directories :help "Mark all directories except `.' and `..'"))) (define-key map [menu-bar mark directory] (quote (menu-item "Mark Old Backups" dired-clean-directory :help "Flag old numbered backups for deletion"))) (define-key map [menu-bar mark executables] (quote (menu-item "Mark Executables" dired-mark-executables :help "Mark all executable files"))) (define-key map [menu-bar mark garbage-files] (quote (menu-item "Flag Garbage Files" dired-flag-garbage-files :help "Flag unneeded files for deletion"))) (define-key map [menu-bar mark backup-files] (quote (menu-item "Flag Backup Files" dired-flag-backup-files :help "Flag all backup files for deletion"))) (define-key map [menu-bar mark auto-save-files] (quote (menu-item "Flag Auto-save Files" dired-flag-auto-save-files :help "Flag auto-save files for deletion"))) (define-key map [menu-bar mark deletion] (quote (menu-item "Flag" dired-flag-file-deletion :help "Flag current line's file for deletion"))) (define-key map [menu-bar mark unmark] (quote (menu-item "Unmark" dired-unmark :help "Unmark or unflag current line's file"))) (define-key map [menu-bar mark mark] (quote (menu-item "Mark" dired-mark :help "Mark current line's file for future operations"))) (define-key map [menu-bar mark toggle-marks] (quote (menu-item "Toggle Marks" dired-toggle-marks :help "Mark unmarked files, unmark marked ones"))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate image-dired-delete-tag] (quote (menu-item "Delete Image Tag..." image-dired-delete-tag :help "Delete image tag from current or marked files"))) (define-key map [menu-bar operate image-dired-tag-files] (quote (menu-item "Add Image Tags..." image-dired-tag-files :help "Add image tags to current or marked files"))) (define-key map [menu-bar operate image-dired-dired-comment-files] (quote (menu-item "Add Image Comment..." image-dired-dired-comment-files :help "Add image comment to current or marked files"))) (define-key map [menu-bar operate image-dired-display-thumbs] (quote (menu-item "Display Image Thumbnails" image-dired-display-thumbs :help "Display image thumbnails for current or marked image files"))) (define-key map [menu-bar operate dashes-4] (quote ("--"))) (define-key map [menu-bar operate epa-dired-do-decrypt] (quote (menu-item "Decrypt..." epa-dired-do-decrypt :help "Decrypt current or marked files"))) (define-key map [menu-bar operate epa-dired-do-verify] (quote (menu-item "Verify" epa-dired-do-verify :help "Verify digital signature of current or marked files"))) (define-key map [menu-bar operate epa-dired-do-sign] (quote (menu-item "Sign..." epa-dired-do-sign :help "Create digital signature of current or marked files"))) (define-key map [menu-bar operate epa-dired-do-encrypt] (quote (menu-item "Encrypt..." epa-dired-do-encrypt :help "Encrypt current or marked files"))) (define-key map [menu-bar operate dashes-3] (quote ("--"))) (define-key map [menu-bar operate query-replace] (quote (menu-item "Query Replace in Files..." dired-do-find-regexp-and-replace :help "Replace regexp matches in marked files"))) (define-key map [menu-bar operate search] (quote (menu-item "Search Files..." dired-do-find-regexp :help "Search marked files for matches of regexp"))) (define-key map [menu-bar operate isearch-regexp] (quote (menu-item "Isearch Regexp Files..." dired-do-isearch-regexp :help "Incrementally search marked files for regexp"))) (define-key map [menu-bar operate isearch] (quote (menu-item "Isearch Files..." dired-do-isearch :help "Incrementally search marked files for string"))) (define-key map [menu-bar operate chown] (quote (menu-item "Change Owner..." dired-do-chown :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the owner of marked files"))) (define-key map [menu-bar operate chgrp] (quote (menu-item "Change Group..." dired-do-chgrp :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the group of marked files"))) (define-key map [menu-bar operate chmod] (quote (menu-item "Change Mode..." dired-do-chmod :help "Change mode (attributes) of marked files"))) (define-key map [menu-bar operate touch] (quote (menu-item "Change Timestamp..." dired-do-touch :help "Change timestamp of marked files"))) (define-key map [menu-bar operate load] (quote (menu-item "Load" dired-do-load :help "Load marked Emacs Lisp files"))) (define-key map [menu-bar operate compile] (quote (menu-item "Byte-compile" dired-do-byte-compile :help "Byte-compile marked Emacs Lisp files"))) (define-key map [menu-bar operate compress] (quote (menu-item "Compress" dired-do-compress :help "Compress/uncompress marked files"))) (define-key map [menu-bar operate print] (quote (menu-item "Print..." dired-do-print :help "Ask for print command and print marked files"))) (define-key map [menu-bar operate hardlink] (quote (menu-item "Hardlink to..." dired-do-hardlink :help "Make hard links for current or marked files"))) (define-key map [menu-bar operate symlink] (quote (menu-item "Symlink to..." dired-do-symlink :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for current or marked files"))) (define-key map [menu-bar operate async-command] (quote (menu-item "Asynchronous Shell Command..." dired-do-async-shell-command :help "Run a shell command asynchronously on current or marked files"))) (define-key map [menu-bar operate command] (quote (menu-item "Shell Command..." dired-do-shell-command :help "Run a shell command on current or marked files"))) (define-key map [menu-bar operate delete] (quote (menu-item "Delete" dired-do-delete :help "Delete current file or all marked files"))) (define-key map [menu-bar operate rename] (quote (menu-item "Rename to..." dired-do-rename :help "Rename current file or move marked files"))) (define-key map [menu-bar operate copy] (quote (menu-item "Copy to..." dired-do-copy :help "Copy current file or all marked files"))) map)) nil [63314 84757])
            ("put" code nil nil [84821 84859])
            ("dired-mode" function (:arguments ("dirname" "switches")) nil [84916 89690])
            ("dired-summary" function (:user-visible-flag t) nil [89754 90052])
            ("dired-undo" function (:user-visible-flag t) nil [90054 90423])
            ("dired-toggle-read-only" function (:user-visible-flag t) nil [90425 90794])
            ("dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [90796 91252])
            ("dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [91254 91458])
            ("dired-next-dirline" function
               (:user-visible-flag t
                :arguments ("arg" "opoint"))
                nil [91460 91863])
            ("dired-prev-dirline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [91865 91993])
            ("dired-up-directory" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [91995 92689])
            ("dired-get-file-for-visit" function (:user-visible-flag t) nil [92691 93257])
            ("define-obsolete-function-alias" code nil nil [93323 93407])
            ("dired-find-file" function (:user-visible-flag t) nil [93408 94149])
            ("dired-find-alternate-file" function (:user-visible-flag t) nil [94151 94444])
            ("dired-mouse-find-file" function
               (:user-visible-flag t
                :arguments ("event" "find-file-func" "find-dir-func"))
                nil [94549 95604])
            ("dired-mouse-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [95606 95831])
            ("dired-mouse-find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [95833 96054])
            ("dired-view-file" function (:user-visible-flag t) nil [96056 96463])
            ("dired-find-file-other-window" function (:user-visible-flag t) nil [96465 96636])
            ("dired-display-file" function (:user-visible-flag t) nil [96638 96820])
            ("dired-get-filename" function (:arguments ("localp" "no-error-if-not-filep")) nil [96899 100849])
            ("dired-string-replace-match" function (:arguments ("regexp" "string" "newtext" "literal" "global")) nil [100851 101561])
            ("dired-make-absolute" function (:arguments ("file" "dir")) nil [101563 101991])
            ("dired-make-relative" function (:arguments ("file" "dir")) nil [101993 102550])
            ("define-minor-mode" code nil nil [102553 103223])
            ("dired-hide-details-update-invisibility-spec" function nil nil [103225 103859])
            ("dired-permission-flags-regexp" variable (:default-value "\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)") nil [103927 104099])
            ("dired-move-to-filename" function (:arguments ("raise-error" "eol")) nil [104214 105148])
            ("dired-move-to-end-of-filename" function (:arguments ("no-error")) nil [105150 107537])
            ("dired-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [107589 108927])
            ("dired-buffers-for-dir" function (:arguments ("dir" "file")) nil [109005 110132])
            ("dired-glob-regexp" function (:arguments ("pattern")) nil [110134 111329])
            ("dired-advertise" function nil nil [111333 111773])
            ("dired-unadvertise" function (:arguments ("dir")) nil [111775 112165])
            ("dired-in-this-tree" function (:arguments ("file" "dir")) nil [112206 112386])
            ("dired-normalize-subdir" function (:arguments ("dir")) nil [112388 112707])
            ("dired-get-subdir" function nil nil [112709 113108])
            ("defalias" code nil nil [113189 113226])
            ("dired-get-subdir-max" function (:arguments ("elt")) nil [113228 113347])
            ("dired-clear-alist" function nil nil [113349 113530])
            ("dired-subdir-index" function (:arguments ("dir")) nil [113532 113868])
            ("dired-next-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [113870 114678])
            ("dired-build-subdir-alist" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [114680 117387])
            ("dired-alist-add-1" function (:arguments ("dir" "new-marker")) nil [117389 117585])
            ("dired-goto-next-nontrivial-file" function nil nil [117587 118041])
            ("dired-goto-next-file" function nil nil [118043 118202])
            ("dired-goto-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [118204 120138])
            ("dired-goto-file-1" function (:arguments ("file" "full-name" "limit")) nil [120140 121570])
            ("dired-find-subdir" variable nil nil [121572 121598])
            ("dired-initial-position" function (:arguments ("dirname")) nil [121645 122053])
            ("dired-current-directory" function (:arguments ("localp")) nil [122489 123342])
            ("dired-subdir-max" function nil nil [123482 123633])
            ("dired-recursive-deletes" variable (:default-value (quote top)) nil [123655 124339])
            ("dired-re-no-dot" variable (:default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*") nil [124377 124440])
            ("dired-delete-file" function (:arguments ("file" "recursive" "trash")) nil [124637 126601])
            ("dired-do-flagged-delete" function
               (:user-visible-flag t
                :arguments ("nomessage"))
                nil [126603 127327])
            ("dired-do-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [127329 127789])
            ("dired-deletion-confirmer" variable (:default-value (quote yes-or-no-p)) nil [127791 127837])
            ("dired-internal-do-deletions" function (:arguments ("l" "arg" "trash")) nil [127854 130231])
            ("dired-fun-in-all-buffers" function (:arguments ("directory" "file" "fun" "args")) nil [130233 130841])
            ("dired-delete-entry" function (:arguments ("file")) nil [130877 131136])
            ("dired-clean-up-buffers-too" variable nil nil [131138 131173])
            ("dired-clean-confirm-killing-deleted-buffers" variable nil nil [131174 131226])
            ("dired-clean-up-after-deletion" function (:arguments ("fn")) nil [131228 132536])
            ("dired-marker-regexp" function nil nil [132557 132652])
            ("dired-plural-s" function (:arguments ("count")) nil [132654 132710])
            ("dired-mark-prompt" function (:arguments ("arg" "files")) nil [132712 133503])
            ("dired-pop-to-buffer" function (:arguments ("buf")) nil [133505 134391])
            ("dired-no-confirm" variable nil nil [134393 135058])
            ("dired-mark-pop-up" function (:arguments ("buffer-or-name" "op-symbol" "files" "function" "args")) nil [135060 137179])
            ("dired-format-columns-of-files" function (:arguments ("files")) nil [137181 137341])
            ("dired-repeat-over-lines" function (:arguments ("arg" "function")) nil [137406 138279])
            ("dired-between-files" function nil nil [138281 138543])
            ("dired-next-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap" "opoint"))
                nil [138545 139528])
            ("dired-prev-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap"))
                nil [139530 139912])
            ("dired-file-marker" function (:arguments ("file")) nil [139914 140150])
            ("dired-mark-files-in-region" function (:arguments ("start" "end")) nil [140152 140679])
            ("dired-mark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [140681 141767])
            ("dired-unmark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [141769 142257])
            ("dired-flag-file-deletion" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [142259 142772])
            ("dired-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [142774 143092])
            ("dired-toggle-marks" function (:user-visible-flag t) nil [143094 143985])
            ("dired-regexp-history" variable nil nil [144065 144162])
            ("dired-read-regexp" function (:arguments ("prompt" "default" "history")) nil [144164 144371])
            ("dired-mark-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [144373 145673])
            ("dired-mark-files-containing-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [145675 147188])
            ("dired-flag-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [147190 147649])
            ("dired-mark-symlinks" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [147651 147926])
            ("dired-mark-directories" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [147928 148281])
            ("dired-mark-executables" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [148283 148565])
            ("dired-flag-auto-save-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [148676 149860])
            ("dired-garbage-files-regexp" variable (:default-value (concat (regexp-opt (quote (".log" ".toc" ".dvi" ".bak" ".orig" ".rej" ".aux"))) "\\'")) nil [149862 150212])
            ("dired-flag-garbage-files" function (:user-visible-flag t) nil [150214 150393])
            ("dired-flag-backup-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [150395 151327])
            ("dired-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [151329 152057])
            ("dired-unmark-all-marks" function (:user-visible-flag t) nil [152059 152196])
            ("dired-unmark-all-files-query" variable nil nil [152233 152270])
            ("dired-unmark-all-files" function
               (:user-visible-flag t
                :arguments ("mark" "arg"))
                nil [152272 153429])
            ("dired-log-buffer" variable (:default-value "*Dired log*") nil [153498 153537])
            ("dired-why" function (:user-visible-flag t) nil [153539 154092])
            ("dired-log" function (:arguments ("log" "args")) nil [154094 155028])
            ("dired-log-summary" function (:arguments ("string" "failures")) nil [155030 155736])
            ("dired-ls-sorting-switches" variable (:default-value "SXU") nil [155961 156399])
            ("dired-sort-by-date-regexp" variable (:default-value (concat "\\(\\`\\| \\)-[^- ]*t" "[^ " dired-ls-sorting-switches "]*" "\\(\\(\\`\\| +\\)\\(--[^ ]+\\|-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [156401 156707])
            ("dired-sort-by-name-regexp" variable (:default-value (concat "\\`\\(\\(\\`\\| +\\)\\(--[^ ]+\\|" "-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [156709 156897])
            ("dired-sort-inhibit" variable nil nil [156899 157049])
            ("dired-sort-set-mode-line" function nil nil [157051 157684])
            ("define-obsolete-function-alias" code nil nil [157686 157778])
            ("dired-sort-toggle-or-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [157780 158183])
            ("dired-sort-toggle" function nil nil [158185 159571])
            ("dired-replace-in-string" function (:arguments ("regexp" "newtext" "string")) nil [159680 160147])
            ("dired-sort-other" function (:arguments ("switches" "no-revert")) nil [160149 160617])
            ("defvar-local" code nil nil [160619 160720])
            ("dired-sort-R-check" function (:arguments ("switches")) nil [160722 161965])
            ("dired-recursive-copies" variable (:default-value (quote top)) nil [161998 162525])
            ("dired-dnd-popup-notice" function nil nil [162527 162672])
            ("declare-function" code nil nil [162674 162730])
            ("dired-dnd-do-ask-action" function (:arguments ("uri")) nil [162732 163158])
            ("declare-function" code nil nil [163160 163216])
            ("declare-function" code nil nil [163217 163265])
            ("declare-function" code nil nil [163302 163377])
            ("declare-function" code nil nil [163378 163431])
            ("dired-overwrite-confirmed" variable nil nil [163433 163467])
            ("dired-dnd-handle-local-file" function (:arguments ("uri" "action")) nil [163497 165328])
            ("dired-dnd-handle-file" function (:arguments ("uri" "action")) nil [165330 165774])
            ("desktop" include nil nil [165820 165838])
            ("declare-function" code nil nil [165840 165905])
            ("dired-desktop-buffer-misc-data" function (:arguments ("dirname")) nil [165907 166513])
            ("dired-restore-desktop-buffer" function (:arguments ("_file-name" "_buffer-name" "misc-data")) nil [166515 167481])
            ("add-to-list" code nil nil [167483 167577])
            ("dired" package nil nil [167579 167595])
            ("run-hooks" code nil nil [167597 167625]))          
      :file "dired.el.gz"
      :pointmax 167677
      :fsize 46776
      :lastmodtime '(23624 29139 0 0)
      :unmatched-syntax '((close-paren 165838 . 165839) (symbol 165802 . 165819) (open-paren 165801 . 165802) (close-paren 1269 . 1270) (symbol 1234 . 1251) (open-paren 1233 . 1234)))
    (semanticdb-table "semanticdb-table"
      :file "dired-loaddefs.el"
      :fsize 21836
      :lastmodtime '(24047 52239 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("columns" customgroup (:user-visible-flag t) nil [3810 3967])
            ("delimit-columns-str-before" variable nil nil [3969 4128])
            ("delimit-columns-str-separator" variable (:default-value ", ") nil [4130 4296])
            ("delimit-columns-str-after" variable nil nil [4298 4454])
            ("delimit-columns-before" variable nil nil [4456 4611])
            ("delimit-columns-after" variable nil nil [4613 4765])
            ("delimit-columns-separator" variable (:default-value "	") nil [4767 4919])
            ("delimit-columns-format" variable (:default-value t) nil [4921 6357])
            ("delimit-columns-extra" variable (:default-value t) nil [6359 6615])
            ("delimit-columns-start" variable nil nil [6617 7169])
            ("delimit-columns-end" variable (:default-value 1000000) nil [7171 7725])
            ("delimit-columns-max" variable nil nil [7854 7886])
            ("delimit-columns-limit" variable nil nil [7887 7921])
            ("delimit-columns-customize" function (:user-visible-flag t) nil [7939 8058])
            ("delimit-columns-str" function (:arguments ("str")) nil [8061 8128])
            ("delimit-columns-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [8146 9611])
            ("rect" include nil nil [9614 9629])
            ("delimit-columns-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9647 11016])
            ("delimit-columns-rectangle-max" function (:arguments ("startpos" "_ignore1" "_ignore2")) nil [11133 12232])
            ("delimit-columns-rectangle-line" function (:arguments ("startpos" "_ignore1" "_ignore2")) nil [12235 14237])
            ("delimit-columns-format" function (:arguments ("spaces")) nil [14240 14807])
            ("delim-col" package nil nil [14887 14907]))          
      :file "delim-col.el.gz"
      :pointmax 14937
      :fsize 3628
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [990 2023])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [2025 2322])
            ("save-selected-window" function (:arguments ("body")) nil [2324 3362])
            ("temp-buffer-window-setup-hook" variable nil nil [3364 3565])
            ("temp-buffer-window-show-hook" variable nil nil [3567 3788])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3790 4404])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4406 5650])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5652 8234])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8236 9126])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9128 11457])
            ("window-right" function (:arguments ("window")) nil [11764 11976])
            ("window-left" function (:arguments ("window")) nil [11978 12188])
            ("window-child" function (:arguments ("window")) nil [12190 12345])
            ("window-child-count" function (:arguments ("window")) nil [12347 12643])
            ("window-last-child" function (:arguments ("window")) nil [12645 12912])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12914 13686])
            ("window-normalize-frame" function (:arguments ("frame")) nil [13688 14118])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [14120 14827])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [14866 15638])
            ("ignore-window-parameters" variable nil nil [15640 15984])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [16034 16158])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [16160 16356])
            ("window-min-height" variable (:default-value 4) nil [16358 17061])
            ("window-min-pixel-height" function (:arguments ("window")) nil [17063 17250])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [17300 17423])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [17425 17620])
            ("window-min-width" variable (:default-value 10) nil [17622 18321])
            ("window-min-pixel-width" function (:arguments ("window")) nil [18323 18508])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18510 18827])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18829 19113])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [19115 19747])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [19749 20175])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [20177 21284])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [21286 21998])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [22000 23223])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [23225 23876])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [23878 24836])
            ("window-atom-root" function (:arguments ("window")) nil [24858 25278])
            ("window-make-atom" function (:arguments ("window")) nil [25280 25668])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [25670 28136])
            ("window--atom-check-1" function (:arguments ("window")) nil [28138 29026])
            ("window--atom-check" function (:arguments ("frame")) nil [29028 29416])
            ("window-sides-vertical" variable nil nil [29435 29731])
            ("window-sides-reversed" variable nil nil [29733 30634])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [30636 32285])
            ("defvar-local" code nil nil [32287 32736])
            ("window--sides-inhibit-check" variable nil nil [32738 32832])
            ("window--sides-reverse-on-frame-p" function (:arguments ("frame")) nil [32834 34403])
            ("window-main-window" function (:arguments ("frame")) nil [34405 35393])
            ("window--make-major-side-window-next-to" function (:arguments ("side")) nil [35395 37236])
            ("window--make-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [37238 39446])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [39448 45944])
            ("window-toggle-side-windows" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [45946 47456])
            ("window--sides-reverse-all" function nil nil [47458 47655])
            ("window--sides-reverse-frame" function (:arguments ("frame")) nil [47657 48114])
            ("window--sides-reverse-side" function (:arguments ("frame" "side")) nil [48116 49048])
            ("window--sides-reverse" function (:arguments ("symbol" "value")) nil [49050 49631])
            ("window--sides-verticalize-frame" function (:arguments ("frame")) nil [49633 50963])
            ("window--sides-verticalize" function (:arguments ("symbol" "value")) nil [50965 51179])
            ("window--sides-check-failed" function (:arguments ("frame")) nil [51181 52883])
            ("window--sides-check" function (:arguments ("frame")) nil [52885 53821])
            ("window--check" function (:arguments ("frame")) nil [53823 54003])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [54039 55883])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [55885 57506])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [57526 58474])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [58476 59280])
            ("window-size-fixed" variable nil nil [59282 59719])
            ("make-variable-buffer-local" code nil nil [59720 59767])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [59769 60195])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [60197 61601])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [61603 62141])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [62143 62503])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [62505 63210])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63212 63780])
            ("window--min-size-ignore-p" function (:arguments ("window" "ignore")) nil [63782 64002])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [64004 67795])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [67797 69167])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69169 69674])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [69676 71001])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [71003 71651])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [71653 72995])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [72997 74780])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [74782 75391])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [75393 76693])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [76695 78141])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [78189 79998])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [80000 80658])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [80660 82172])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [82174 82730])
            ("defalias" code nil nil [82777 82823])
            ("defalias" code nil nil [82824 82867])
            ("window-full-height-p" function (:arguments ("window")) nil [82869 83407])
            ("window-full-width-p" function (:arguments ("window")) nil [83409 83841])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [83843 84374])
            ("declare-function" code nil nil [84376 84436])
            ("window-font-width" function (:arguments ("window" "face")) nil [84438 85068])
            ("window-font-height" function (:arguments ("window" "face")) nil [85070 85633])
            ("overflow-newline-into-fringe" variable nil nil [85635 85672])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [85674 87188])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [87190 88161])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [88163 90045])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [90047 90624])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [90626 91144])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [91146 91536])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [91831 97329])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [97331 98952])
            ("defalias" code nil nil [98954 99004])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [99006 100657])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [100659 101929])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [101931 103224])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [103226 104794])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [104796 104975])
            ("count-windows" function (:arguments ("minibuf")) nil [104977 105270])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [105295 106245])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [106247 107871])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [107873 109788])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [109790 110226])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [110228 110750])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [110752 111976])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [111978 112384])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [112386 116294])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [116296 116773])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [116775 116952])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [116954 120472])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [120474 127086])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [127088 130884])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [130886 132789])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [132791 133624])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [133626 135547])
            ("window--sanitize-window-sizes" function (:arguments ("horizontal")) nil [135549 136514])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [136516 143773])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [143775 145609])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [145611 147462])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [147464 148060])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [148062 148672])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [148692 151744])
            ("window-body-edges" function (:arguments ("window")) nil [151746 151954])
            ("defalias" code nil nil [151955 152005])
            ("window-pixel-edges" function (:arguments ("window")) nil [152007 152228])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [152230 152471])
            ("defalias" code nil nil [152472 152534])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [152536 152763])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [152765 153017])
            ("defalias" code nil nil [153018 153098])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [153100 154000])
            ("frame-root-window-p" function (:arguments ("window")) nil [154003 154142])
            ("window--subtree" function (:arguments ("window" "next")) nil [154144 154867])
            ("window-tree" function (:arguments ("frame")) nil [154869 155764])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [155767 158398])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [158534 159807])
            ("window-deletable-p" function (:arguments ("window")) nil [159832 161408])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [161410 161713])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [161715 165259])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [165261 169036])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [169038 169664])
            ("record-window-buffer" function (:arguments ("window")) nil [171400 172819])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [172821 173320])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [173322 174249])
            ("switch-to-visible-buffer" variable (:default-value t) nil [174251 174706])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [174708 180556])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [180558 184383])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [184385 185381])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [185383 186110])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [186112 186698])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [186700 187682])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [187684 188817])
            ("unbury-buffer" function (:user-visible-flag t) nil [188819 188944])
            ("next-buffer" function (:user-visible-flag t) nil [188946 189248])
            ("previous-buffer" function (:user-visible-flag t) nil [189250 189560])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [189562 192154])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [192156 193188])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [193190 198033])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [198035 198635])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [198637 199601])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [199604 211395])
            ("split-window-no-error" function (:arguments ("window" "size" "side" "pixelwise")) nil [211397 211764])
            ("split-window-keep-point" variable (:default-value t) nil [211841 212215])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [212217 214471])
            ("defalias" code nil nil [214473 214528])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [214530 215738])
            ("defalias" code nil nil [215740 215797])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [216300 219068])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [219070 219496])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [219498 220755])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [220757 221187])
            ("window-area-factor" variable (:default-value 1) nil [221234 221403])
            ("make-variable-buffer-local" code nil nil [221404 221452])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [221454 222108])
            ("balance-windows-area" function (:user-visible-flag t) nil [222110 226466])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [226536 229568])
            ("window-state-get" function (:arguments ("window" "writable")) nil [229570 231659])
            ("window-state-put-list" variable nil nil [231661 231739])
            ("window-state-put-stale-windows" variable nil nil [231741 231828])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [231830 234548])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [234550 238590])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [238592 242776])
            ("window-swap-states" function
               (:user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [242778 246193])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [246196 248713])
            ("display-buffer-function" variable nil nil [248715 249271])
            ("make-obsolete-variable" code nil nil [249273 249354])
            ("pop-up-frame-alist" variable nil nil [249535 250151])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [250153 250482])
            ("special-display-buffer-names" variable nil nil [250484 253074])
            ("make-obsolete-variable" code nil nil [253075 253158])
            ("put" code nil nil [253159 253218])
            ("special-display-regexps" variable nil nil [253220 255862])
            ("make-obsolete-variable" code nil nil [255863 255941])
            ("put" code nil nil [255942 255996])
            ("special-display-p" function (:arguments ("buffer-name")) nil [255998 256893])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [256895 257513])
            ("make-obsolete-variable" code nil nil [257514 257596])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [257598 259618])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [259620 260418])
            ("make-obsolete-variable" code nil nil [260419 260498])
            ("same-window-buffer-names" variable nil nil [260500 261072])
            ("same-window-regexps" variable nil nil [261074 261662])
            ("same-window-p" function (:arguments ("buffer-name")) nil [261664 262627])
            ("pop-up-frames" variable nil nil [262629 263041])
            ("display-buffer-reuse-frames" variable nil nil [263043 263272])
            ("make-obsolete-variable" code nil nil [263274 263402])
            ("pop-up-windows" variable (:default-value t) nil [263404 263528])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [263530 264913])
            ("split-height-threshold" variable (:default-value 80) nil [264915 265478])
            ("split-width-threshold" variable (:default-value 160) nil [265480 265868])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [265870 268211])
            ("split-window-sensibly" function (:arguments ("window")) nil [268213 271084])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [271086 272196])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [272198 273140])
            ("even-window-sizes" variable (:default-value t) nil [273142 273665])
            ("defvaralias" code nil nil [273666 273719])
            ("window--even-window-sizes" function (:arguments ("window")) nil [273721 274726])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [274728 278240])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [278242 278822])
            ("display-buffer-mark-dedicated" variable nil nil [279161 279370])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [279372 280011])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [280013 280388])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [280390 281162])
            ("put" code nil nil [281163 281226])
            ("display-buffer-alist" variable nil nil [281228 282538])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [282540 283189])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [283191 283857])
            ("put" code nil nil [283858 283919])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [283921 284623])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [284625 284845])
            ("put" code nil nil [284846 284911])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [284913 285247])
            ("put" code nil nil [285248 285313])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [285315 292017])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [292019 292527])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [292569 293895])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [293897 294399])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [294401 294742])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [294744 296390])
            ("display-buffer-reuse-mode-window" function (:arguments ("buffer" "alist")) nil [296392 299241])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [299243 299989])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [299991 301011])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [301013 302328])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [302330 302915])
            ("display-buffer-in-child-frame" function (:arguments ("buffer" "alist")) nil [302917 304599])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [304601 305689])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [305691 307172])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [307174 309867])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [309869 311610])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [311612 312067])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [312103 313980])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [313982 314897])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [314899 316043])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [316045 316601])
            ("switch-to-buffer-preserve-window-point" variable (:default-value t) nil [316603 317490])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [317492 318282])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [318284 322105])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [322107 323211])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [323213 324297])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [324300 325273])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [325275 325490])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [325492 325711])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [325713 327114])
            ("window-buffer-height" function (:arguments ("window")) nil [327116 327594])
            ("fit-window-to-buffer-horizontally" variable nil nil [327659 328053])
            ("fit-frame-to-buffer" variable nil nil [328167 328616])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [328618 329832])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [329834 331123])
            ("declare-function" code nil nil [331125 331196])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [331198 331433])
            ("declare-function" code nil nil [331435 331507])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [331509 341521])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [341523 347998])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [348000 348381])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [348383 349491])
            ("window-largest-empty-rectangle--maximums-1" function (:arguments ("quad" "maximums")) nil [349493 349826])
            ("window-largest-empty-rectangle--maximums" function (:arguments ("quad" "maximums" "count")) nil [349828 350108])
            ("window-largest-empty-rectangle--disjoint-maximums" function (:arguments ("maximums" "count")) nil [350110 350879])
            ("window-largest-empty-rectangle" function (:arguments ("window" "count" "min-width" "min-height" "positions" "left")) nil [350881 355642])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [355645 356467])
            ("window-group-start-function" variable nil nil [356887 356927])
            ("make-variable-buffer-local" code nil nil [356928 356985])
            ("put" code nil nil [356986 357039])
            ("window-group-start" function (:arguments ("window")) nil [357040 357539])
            ("window-group-end-function" variable nil nil [357541 357579])
            ("make-variable-buffer-local" code nil nil [357580 357635])
            ("put" code nil nil [357636 357687])
            ("window-group-end" function (:arguments ("window" "update")) nil [357688 358494])
            ("set-window-group-start-function" variable nil nil [358496 358540])
            ("make-variable-buffer-local" code nil nil [358541 358602])
            ("put" code nil nil [358603 358660])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [358661 359302])
            ("recenter-window-group-function" variable nil nil [359304 359347])
            ("make-variable-buffer-local" code nil nil [359348 359408])
            ("put" code nil nil [359409 359465])
            ("recenter-window-group" function (:arguments ("arg")) nil [359466 360636])
            ("pos-visible-in-window-group-p-function" variable nil nil [360638 360689])
            ("make-variable-buffer-local" code nil nil [360690 360758])
            ("put" code nil nil [360759 360823])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [360824 362300])
            ("selected-window-group-function" variable nil nil [362302 362345])
            ("make-variable-buffer-local" code nil nil [362346 362406])
            ("put" code nil nil [362407 362463])
            ("selected-window-group" function nil nil [362464 362814])
            ("move-to-window-group-line-function" variable nil nil [362816 362863])
            ("make-variable-buffer-local" code nil nil [362864 362928])
            ("put" code nil nil [362929 362989])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [362990 363584])
            ("recenter-last-op" variable nil nil [363588 363813])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [363815 364675])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364677 365824])
            ("define-key" code nil nil [365826 365878])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365880 367014])
            ("define-key" code nil nil [367016 367079])
            ("scroll-error-top-bottom" variable nil nil [367249 367693])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367695 368758])
            ("put" code nil nil [368760 368802])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368804 369871])
            ("put" code nil nil [369873 369917])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369987 370270])
            ("put" code nil nil [370272 370311])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370313 370598])
            ("put" code nil nil [370600 370641])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [370645 371040])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [371042 371726])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [371728 372231])
            ("mouse-autoselect-window-timer" variable nil nil [372234 372324])
            ("mouse-autoselect-window-position-1" variable nil nil [372326 372440])
            ("mouse-autoselect-window-position" variable nil nil [372442 372553])
            ("mouse-autoselect-window-window" variable nil nil [372555 372656])
            ("mouse-autoselect-window-state" variable nil nil [372658 372955])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [372957 373728])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [373730 374558])
            ("mouse-autoselect-window-select" function nil nil [374560 378560])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [378562 381072])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [381074 381759])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [381828 383270])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "windows")) nil [383272 383881])
            ("window-adjust-process-window-size-smallest" function (:arguments ("_process" "windows")) nil [383883 384174])
            ("window-adjust-process-window-size-largest" function (:arguments ("_process" "windows")) nil [384176 384465])
            ("window--process-window-list" function nil nil [384467 385680])
            ("window--adjust-process-windows" function nil nil [385682 386378])
            ("add-hook" code nil nil [386480 386556])
            ("add-hook" code nil nil [386683 386816])
            ("define-key" code nil nil [386906 386947])
            ("define-key" code nil nil [386948 386996])
            ("define-key" code nil nil [386997 387043])
            ("define-key" code nil nil [387044 387090])
            ("define-key" code nil nil [387091 387131])
            ("define-key" code nil nil [387132 387174])
            ("define-key" code nil nil [387175 387230])
            ("define-key" code nil nil [387231 387285])
            ("define-key" code nil nil [387286 387349])
            ("define-key" code nil nil [387350 387393])
            ("define-key" code nil nil [387394 387446]))          
      :file "window.el.gz"
      :pointmax 387472
      :fsize 85552
      :lastmodtime '(23900 21803 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("display-time" customgroup (:user-visible-flag t) nil [1115 1226])
            ("display-time-mail-file" variable nil nil [1229 1595])
            ("display-time-mail-directory" variable nil nil [1597 1935])
            ("display-time-mail-function" variable nil nil [1937 2311])
            ("display-time-default-load-average" variable nil nil [2313 2884])
            ("display-time-load-average" variable nil nil [2886 3095])
            ("display-time-load-average-threshold" variable (:default-value 0.1) nil [3097 3261])
            ("display-time-day-and-date" variable nil nil [3278 3439])
            ("display-time-timer" variable nil nil [3441 3472])
            ("display-time-interval" variable (:default-value 60) nil [3474 3604])
            ("display-time-24hr-format" variable nil nil [3606 3823])
            ("display-time-string" variable nil nil [3825 3999])
            ("display-time-hook" variable nil nil [4066 4214])
            ("display-time-server-down-time" variable nil nil [4216 4376])
            ("zoneinfo-style-world-list" variable (:default-value (quote (("America/Los_Angeles" "Seattle") ("America/New_York" "New York") ("Europe/London" "London") ("Europe/Paris" "Paris") ("Asia/Calcutta" "Bangalore") ("Asia/Tokyo" "Tokyo")))) nil [4378 5076])
            ("legacy-style-world-list" variable (:default-value (quote (("PST8PDT" "Seattle") ("EST5EDT" "New York") ("GMT0BST" "London") ("CET-1CDT" "Paris") ("IST-5:30" "Bangalore") ("JST-9" "Tokyo")))) nil [5078 5756])
            ("display-time-world-list" variable (:default-value t) nil [5758 6526])
            ("time--display-world-list" function nil nil [6528 6987])
            ("display-time-world-time-format" variable (:default-value "%A %d %B %R %Z") nil [6989 7165])
            ("display-time-world-buffer-name" variable (:default-value "*wclock*") nil [7167 7313])
            ("display-time-world-timer-enable" variable (:default-value t) nil [7315 7471])
            ("display-time-world-timer-second" variable (:default-value 60) nil [7473 7631])
            ("display-time" function (:user-visible-flag t) nil [7648 7985])
            ("display-time-mail-face" variable nil nil [8211 8583])
            ("display-time-mail-icon" variable (:default-value (find-image (quote ((:type xpm :file "letter.xpm" :ascent center) (:type pbm :file "letter.pbm" :ascent center))))) nil [8585 8868])
            ("display-time-use-mail-icon" variable nil nil [8918 9203])
            ("display-time-mail-string" variable (:default-value "Mail") nil [9273 9663])
            ("display-time-format" variable nil nil [9665 10035])
            ("display-time-string-forms" variable (:default-value (quote ((if (and (not display-time-format) display-time-day-and-date) (format-time-string "%a %b %e " now) "") (propertize (format-time-string (or display-time-format (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now) (quote help-echo) (format-time-string "%a %b %e, %Y" now)) load (if mail (concat " " (propertize display-time-mail-string (quote display) (\` (when (and display-time-use-mail-icon (display-graphic-p)) (\,@ display-time-mail-icon) (\,@ (if (and display-time-mail-face (memq (plist-get (cdr display-time-mail-icon) :type) (quote (pbm xbm)))) (let ((bg (face-attribute display-time-mail-face :background))) (if (stringp bg) (list :background bg))))))) (quote face) display-time-mail-face (quote help-echo) "You have new mail; mouse-2: Read mail" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) read-mail-command))) "")))) nil [10037 11968])
            ("display-time-event-handler" function nil nil [11970 12893])
            ("display-time-next-load-average" function (:user-visible-flag t) nil [12895 13227])
            ("display-time-mail-check-directory" function nil nil [13229 13645])
            ("with-no-warnings" code nil nil [13647 14027])
            ("display-time-update" function nil nil [14029 17452])
            ("display-time-file-nonempty-p" function (:arguments ("file")) nil [17454 17657])
            ("define-minor-mode" code nil nil [17674 19122])
            ("define-derived-mode" code nil nil [19125 19330])
            ("display-time-world-display" function (:arguments ("alist")) nil [19332 20047])
            ("display-time-world" function (:user-visible-flag t) nil [20064 20748])
            ("display-time-world-timer" function nil nil [20750 21202])
            ("emacs-uptime" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [21219 21744])
            ("emacs-init-time" function (:user-visible-flag t) nil [21761 22067])
            ("time" package nil nil [22069 22084]))          
      :file "time.el.gz"
      :pointmax 22108
      :fsize 7013
      :lastmodtime '(23603 24959 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("display-line-numbers" customgroup (:user-visible-flag t) nil [1336 1451])
            ("display-line-numbers-type" variable (:default-value t) nil [1453 1851])
            ("display-line-numbers-grow-only" variable nil nil [1853 2014])
            ("display-line-numbers-width-start" variable nil nil [2016 2355])
            ("display-line-numbers-update-width" function nil nil [2357 2598])
            ("define-minor-mode" code nil nil [2615 3491])
            ("display-line-numbers--turn-on" function nil nil [3493 3631])
            ("define-globalized-minor-mode" code nil nil [3648 3769])
            ("display-line-numbers" package nil nil [3771 3802]))          
      :file "display-line-numbers.el.gz"
      :pointmax 3842
      :fsize 1353
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1050 1067])
            ("obarray" include nil nil [1069 1087])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1089 1203])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1205 1395])
            ("only-global-abbrevs" variable nil nil [1397 1648])
            ("define-minor-mode" code nil nil [1650 2078])
            ("put" code nil nil [2080 2129])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2133 2413])
            ("define-obsolete-variable-alias" code nil nil [2414 2496])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2498 2669])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2671 3009])
            ("insert-abbrevs" function (:user-visible-flag t) nil [3011 3297])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3299 3597])
            ("abbrev-table-name" function (:arguments ("table")) nil [3599 3885])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3887 4773])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4775 5791])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5793 5988])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5990 6988])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6990 7507])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7509 7834])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7836 9595])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9597 9917])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9919 10152])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10156 10696])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10698 11188])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11190 11783])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11785 12216])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12218 12561])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12563 13174])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13176 13837])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13839 14534])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14560 14713])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14715 14945])
            ("defalias" code nil nil [14947 15036])
            ("defalias" code nil nil [15038 15208])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15264 15405])
            ("make-abbrev-table" function (:arguments ("props")) nil [15407 16146])
            ("abbrev-table-p" function (:arguments ("object")) nil [16148 16318])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16320 16900])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16902 17149])
            ("abbrev-minor-mode-table-alist" variable nil nil [17151 17406])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17408 17683])
            ("abbrevs-changed" variable nil nil [17685 17833])
            ("abbrev-all-caps" variable nil nil [17835 17976])
            ("abbrev-start-location" variable nil nil [17978 18180])
            ("abbrev-start-location-buffer" variable nil nil [18182 18360])
            ("last-abbrev" variable nil nil [18362 18459])
            ("last-abbrev-text" variable nil nil [18461 18591])
            ("last-abbrev-location" variable nil nil [18593 18683])
            ("pre-abbrev-expand-hook" variable nil nil [18860 19135])
            ("make-obsolete-variable" code nil nil [19136 19215])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19217 19844])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19846 22987])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22989 23732])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23734 24092])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [24094 24516])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24518 25565])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25568 26516])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26518 27212])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27215 27475])
            ("abbrev--before-point" function nil nil [27478 30096])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [30098 33142])
            ("abbrev-expand-functions" variable nil nil [33144 33230])
            ("make-obsolete-variable" code nil nil [33231 33311])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33313 33516])
            ("expand-abbrev" function (:user-visible-flag t) nil [33518 34009])
            ("abbrev--default-expand" function nil nil [34011 35530])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35532 36430])
            ("abbrev--write" function (:arguments ("sym")) nil [36432 36887])
            ("abbrev--describe" function (:arguments ("sym")) nil [36889 37283])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [37285 38326])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38328 40617])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40619 41470])
            ("define-derived-mode" code nil nil [41565 41779])
            ("abbrev" package nil nil [41781 41798]))          
      :file "abbrev.el.gz"
      :pointmax 41824
      :fsize 12132
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1067 . 1068) (symbol 1032 . 1049) (open-paren 1031 . 1032)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dframe-version" variable (:default-value "1.3") nil [206 291])
            ("x-pointer-hand2" variable nil nil [4906 4930])
            ("x-pointer-top-left-arrow" variable nil nil [4931 4964])
            ("defalias" code nil nil [5009 5220])
            ("dframe" customgroup (:user-visible-flag t) nil [5241 5325])
            ("dframe-have-timer-flag" variable (:default-value (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) nil [5327 5589])
            ("dframe-update-speed" variable (:default-value (if (featurep (quote xemacs)) 2 1)) nil [5591 5901])
            ("dframe-activity-change-focus-flag" variable nil nil [5903 6178])
            ("dframe-after-select-attached-frame-hook" variable nil nil [6180 6325])
            ("dframe-track-mouse-function" variable nil nil [6327 6497])
            ("make-variable-buffer-local" code nil nil [6498 6555])
            ("dframe-help-echo-function" variable nil nil [6557 6732])
            ("make-variable-buffer-local" code nil nil [6733 6788])
            ("dframe-mouse-click-function" variable nil nil [6790 6926])
            ("make-variable-buffer-local" code nil nil [6927 6984])
            ("dframe-mouse-position-function" variable nil nil [6986 7094])
            ("make-variable-buffer-local" code nil nil [7095 7155])
            ("dframe-power-click" variable nil nil [7157 7258])
            ("dframe-timer" variable nil nil [7260 7336])
            ("make-variable-buffer-local" code nil nil [7337 7379])
            ("dframe-attached-frame" variable nil nil [7381 7548])
            ("make-variable-buffer-local" code nil nil [7549 7600])
            ("dframe-controlled" variable nil nil [7602 7746])
            ("make-variable-buffer-local" code nil nil [7747 7794])
            ("dframe-update-keymap" function (:arguments ("map")) nil [7796 9516])
            ("dframe-live-p" function (:arguments ("frame")) nil [9518 9658])
            ("x-sensitive-text-pointer-shape" variable nil nil [9660 9699])
            ("x-pointer-shape" variable nil nil [9700 9724])
            ("dframe-frame-mode" function (:arguments ("arg" "frame-var" "cache-var" "buffer-var" "frame-name" "local-mode-fn" "parameters" "delete-hook" "popup-hook" "create-hook")) nil [9726 16705])
            ("dframe-reposition-frame" function (:arguments ("new-frame" "parent-frame" "location")) nil [16707 17069])
            ("declare-function" code nil nil [17138 17208])
            ("declare-function" code nil nil [17209 17280])
            ("dframe-reposition-frame-emacs" function (:arguments ("new-frame" "parent-frame" "location")) nil [17282 20456])
            ("dframe-reposition-frame-xemacs" function (:arguments ("_new-frame" "_parent-frame" "_location")) nil [20458 20676])
            ("dframe-needed-height" function (:arguments ("frame")) nil [20703 21068])
            ("dframe-detach" function (:arguments ("frame-var" "cache-var" "buffer-var")) nil [21070 21599])
            ("dframe-setup-hook" variable nil nil [21633 21714])
            ("dframe-set-special-events" function nil nil [21716 22097])
            ("when" code nil nil [22099 22193])
            ("dframe-make-frame-visible-function" variable nil nil [22195 22341])
            ("dframe-iconify-frame-function" variable nil nil [22342 22480])
            ("dframe-delete-frame-function" variable nil nil [22481 22625])
            ("dframe-handle-make-frame-visible" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22627 23014])
            ("dframe-handle-iconify-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [23016 23380])
            ("dframe-handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [23382 23886])
            ("dframe-get-focus" function
               (:user-visible-flag t
                :arguments ("frame-var" "activator"))
                nil [23906 24557])
            ("dframe-close-frame" function (:user-visible-flag t) nil [24560 24762])
            ("dframe-current-frame" function (:arguments ("frame-var" "desired-major-mode")) nil [24764 25346])
            ("dframe-attached-frame" function (:arguments ("frame")) nil [25348 25620])
            ("dframe-select-attached-frame" function (:arguments ("frame")) nil [25622 26082])
            ("dframe-with-attached-buffer" function (:arguments ("forms")) nil [26084 26406])
            ("dframe-maybee-jump-to-attached-frame" function nil nil [26408 26733])
            ("dframe-suppress-message-flag" variable nil nil [26736 26846])
            ("dframe-message" function (:arguments ("fmt" "args")) nil [26848 27296])
            ("dframe-y-or-n-p" function (:arguments ("prompt")) nil [27298 27725])
            ("dframe-client-functions" variable nil nil [28155 28244])
            ("dframe-set-timer" function (:arguments ("timeout" "fn" "_null-on-error")) nil [28246 29252])
            ("dframe-set-timer-internal" function (:arguments ("timeout" "_null-on-error")) nil [29254 29724])
            ("dframe-timer-fn" function nil nil [29726 30003])
            ("dframe-pass-event-to-popup-mode-menu" variable
               (:constant-flag t
                :default-value (let (max-args) (and (fboundp (quote popup-mode-menu)) (fboundp (quote function-max-args)) (setq max-args (function-max-args (quote popup-mode-menu))) (not (zerop max-args)))))
                nil [30037 30344])
            ("defalias" code nil nil [30562 31937])
            ("defalias" code nil nil [31987 32304])
            ("dframe-track-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32306 32665])
            ("dframe-track-mouse-xemacs" function (:arguments ("event")) nil [32667 32969])
            ("dframe-help-echo" function (:arguments ("_window" "buffer" "position")) nil [32971 33463])
            ("dframe-mouse-set-point" function (:arguments ("e")) nil [33465 34126])
            ("dframe-quick-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34128 34411])
            ("dframe-power-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34413 34749])
            ("dframe-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34751 35079])
            ("dframe-double-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [35081 35556])
            ("dframe-temp-buffer-show-function" function (:arguments ("buffer")) nil [35734 36474])
            ("dframe-hack-buffer-menu" function
               (:user-visible-flag t
                :arguments ("_e"))
                nil [36476 37244])
            ("dframe-switch-buffer-attached-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [37246 37678])
            ("dframe-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [37825 38446])
            ("dframe" package nil nil [38448 38465]))          
      :file "dframe.el.gz"
      :pointmax 38491
      :fsize 11366
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable nil nil [1923 2370])
            ("display-format-alist" variable nil nil [2372 2624])
            ("initial-frame-alist" variable nil nil [2816 4049])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4051 4756])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5507 5803])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5805 6065])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6067 6317])
            ("frame-initial-frame" variable nil nil [6813 6845])
            ("frame-initial-frame-alist" variable nil nil [6924 6958])
            ("frame-initial-geometry-arguments" variable nil nil [6960 7005])
            ("frame-initialize" function nil nil [7194 8726])
            ("frame-notice-user-settings" variable (:default-value t) nil [8728 8837])
            ("declare-function" code nil nil [8839 8898])
            ("declare-function" code nil nil [8899 8971])
            ("defalias" code nil nil [8973 9023])
            ("frame-notice-user-settings" function nil nil [9220 20335])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [20337 20538])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20605 21780])
            ("get-other-frame" function nil nil [21782 22040])
            ("next-multiframe-window" function (:user-visible-flag t) nil [22042 22300])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [22302 22566])
            ("window-system-for-display" function (:arguments ("display")) nil [22568 23063])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [23065 23334])
            ("declare-function" code nil nil [23336 23393])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [23395 24747])
            ("make-frame-command" function (:user-visible-flag t) nil [24749 25059])
            ("before-make-frame-hook" variable nil nil [25061 25158])
            ("after-make-frame-functions" variable nil nil [25160 25326])
            ("after-setting-font-hook" variable nil nil [25328 25424])
            ("define-obsolete-function-alias" code nil nil [25454 25516])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [25518 25628])
            ("x-display-name" variable nil nil [25630 25653])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25655 29566])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29568 29867])
            ("minibuffer-frame-list" function nil nil [29869 30062])
            ("get-device-terminal" function (:arguments ("device")) nil [30114 30867])
            ("frames-on-display-list" function (:arguments ("device")) nil [30869 31311])
            ("framep-on-display" function (:arguments ("terminal")) nil [31313 31752])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31754 32615])
            ("declare-function" code nil nil [32617 32688])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32690 33800])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33802 34912])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34914 35144])
            ("suspend-frame" function (:user-visible-flag t) nil [35146 35623])
            ("make-frame-names-alist" function nil nil [35625 36031])
            ("frame-name-history" variable nil nil [36033 36064])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36065 36910])
            ("frame-background-mode" variable nil nil [36937 37613])
            ("declare-function" code nil nil [37615 37709])
            ("declare-function" code nil nil [37754 37824])
            ("inhibit-frame-set-background-mode" variable nil nil [37826 37872])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37874 40772])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [40774 41290])
            ("current-frame-configuration" function nil nil [41321 41917])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41919 43914])
            ("frame-height" function (:arguments ("frame")) nil [44009 44675])
            ("frame-width" function (:arguments ("frame")) nil [44677 44882])
            ("defalias" code nil nil [44884 44943])
            ("defalias" code nil nil [44944 44993])
            ("defalias" code nil nil [44994 45045])
            ("frame-inner-width" function (:arguments ("frame")) nil [45047 45297])
            ("frame-inner-height" function (:arguments ("frame")) nil [45299 45552])
            ("frame-outer-width" function (:arguments ("frame")) nil [45554 45811])
            ("frame-outer-height" function (:arguments ("frame")) nil [45813 46072])
            ("declare-function" code nil nil [46074 46179])
            ("define-obsolete-function-alias" code nil nil [46181 46254])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [46256 49572])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [49574 49825])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49827 50572])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50574 51319])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51321 51807])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51809 52275])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [52277 52659])
            ("define-minor-mode" code nil nil [52661 53541])
            ("define-minor-mode" code nil nil [53543 54384])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54386 54762])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [54764 55486])
            ("declare-function" code nil nil [55488 55550])
            ("declare-function" code nil nil [55551 55617])
            ("declare-function" code nil nil [55618 55682])
            ("frame-geometry" function (:arguments ("frame")) nil [55684 58163])
            ("frame--size-history" function (:arguments ("frame")) nil [58165 59075])
            ("declare-function" code nil nil [59077 59141])
            ("declare-function" code nil nil [59142 59210])
            ("declare-function" code nil nil [59211 59277])
            ("frame-edges" function (:arguments ("frame" "type")) nil [59279 60265])
            ("declare-function" code nil nil [60267 60330])
            ("declare-function" code nil nil [60331 60390])
            ("declare-function" code nil nil [60391 60452])
            ("mouse-absolute-pixel-position" function nil nil [60454 61004])
            ("declare-function" code nil nil [61006 61077])
            ("declare-function" code nil nil [61078 61151])
            ("declare-function" code nil nil [61152 61221])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [61223 61724])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [61726 62416])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [62418 63760])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [63762 64573])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [64575 65380])
            ("declare-function" code nil nil [65382 65450])
            ("declare-function" code nil nil [65451 65523])
            ("declare-function" code nil nil [65524 65594])
            ("frame-list-z-order" function (:arguments ("display")) nil [65596 66388])
            ("declare-function" code nil nil [66390 66465])
            ("declare-function" code nil nil [66466 66545])
            ("declare-function" code nil nil [66546 66623])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [66625 67986])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [67988 69150])
            ("declare-function" code nil nil [69637 69680])
            ("display-mouse-p" function (:arguments ("display")) nil [69682 70473])
            ("display-popup-menus-p" function (:arguments ("display")) nil [70475 70761])
            ("display-graphic-p" function (:arguments ("display")) nil [70763 71220])
            ("display-images-p" function (:arguments ("display")) nil [71222 71500])
            ("defalias" code nil nil [71502 71554])
            ("defalias" code nil nil [71555 71606])
            ("display-selections-p" function (:arguments ("display")) nil [71608 72236])
            ("declare-function" code nil nil [72238 72304])
            ("display-screens" function (:arguments ("display")) nil [72306 72695])
            ("declare-function" code nil nil [72697 72768])
            ("display-pixel-height" function (:arguments ("display")) nil [72770 73503])
            ("declare-function" code nil nil [73505 73575])
            ("display-pixel-width" function (:arguments ("display")) nil [73577 74305])
            ("display-mm-dimensions-alist" variable nil nil [74307 74925])
            ("declare-function" code nil nil [74927 74995])
            ("display-mm-height" function (:arguments ("display")) nil [74997 75876])
            ("declare-function" code nil nil [75878 75945])
            ("display-mm-width" function (:arguments ("display")) nil [75947 76822])
            ("declare-function" code nil nil [76824 76896])
            ("display-backing-store" function (:arguments ("display")) nil [77001 77519])
            ("declare-function" code nil nil [77521 77590])
            ("display-save-under" function (:arguments ("display")) nil [77592 77989])
            ("declare-function" code nil nil [77991 78056])
            ("display-planes" function (:arguments ("display")) nil [78058 78499])
            ("declare-function" code nil nil [78501 78571])
            ("display-color-cells" function (:arguments ("display")) nil [78573 79018])
            ("declare-function" code nil nil [79020 79091])
            ("display-visual-class" function (:arguments ("display")) nil [79093 79683])
            ("declare-function" code nil nil [79685 79771])
            ("declare-function" code nil nil [79772 79861])
            ("declare-function" code nil nil [79862 79950])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [79952 82477])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [82509 84379])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [84381 85637])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [85640 87269])
            ("define-obsolete-variable-alias" code nil nil [87314 87400])
            ("window-divider" customgroup (:user-visible-flag t) nil [87425 87528])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [87530 88394])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [88396 88526])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [88528 89178])
            ("window-divider-default-right-width" variable (:default-value 6) nil [89180 89821])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [89823 91115])
            ("define-minor-mode" code nil nil [91117 91697])
            ("blink-cursor-idle-timer" variable nil nil [91720 91895])
            ("blink-cursor-timer" variable nil nil [91897 92059])
            ("cursor" customgroup (:user-visible-flag t) nil [92061 92146])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [92148 92470])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [92472 92720])
            ("blink-cursor-blinks" variable (:default-value 10) nil [92722 92932])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [92934 93047])
            ("blink-cursor--start-idle-timer" function nil nil [93049 93597])
            ("blink-cursor--start-timer" function nil nil [93599 93884])
            ("blink-cursor-start" function nil nil [93886 94489])
            ("blink-cursor-timer-function" function nil nil [94491 95147])
            ("blink-cursor-end" function nil nil [95150 95545])
            ("blink-cursor-suspend" function nil nil [95547 95902])
            ("blink-cursor-check" function nil nil [95904 96239])
            ("define-obsolete-variable-alias" code nil nil [96241 96313])
            ("define-minor-mode" code nil nil [96315 97431])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [97470 98472])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [98474 99909])
            ("define-key" code nil nil [99931 99979])
            ("define-key" code nil nil [99980 100029])
            ("define-key" code nil nil [100030 100072])
            ("define-key" code nil nil [100073 100114])
            ("define-key" code nil nil [100115 100169])
            ("define-key" code nil nil [100170 100230])
            ("define-key" code nil nil [100231 100291])
            ("define-obsolete-variable-alias" code nil nil [100341 100423])
            ("make-variable-buffer-local" code nil nil [100425 100479])
            ("make-obsolete-variable" code nil nil [100506 100600])
            ("mapc" code nil nil [101001 101709])
            ("frame" package nil nil [101711 101727]))          
      :file "frame.el.gz"
      :pointmax 101752
      :fsize 25605
      :lastmodtime '(23866 1512 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [5853 5870])
            ("frameset" include nil nil [5871 5890])
            ("desktop-file-version" variable (:default-value "208") nil [5892 6026])
            ("desktop-native-file-version" variable
               (:constant-flag t
                :default-value 208)
                nil [6028 6133])
            ("desktop-io-file-version" variable nil nil [6134 6242])
            ("desktop" customgroup (:user-visible-flag t) nil [6642 6721])
            ("define-obsolete-variable-alias" code nil nil [6764 6838])
            ("define-minor-mode" code nil nil [6854 7875])
            ("desktop-save-mode-off" function nil nil [7877 7994])
            ("desktop-save" variable (:default-value (quote ask-if-new)) nil [7996 9031])
            ("desktop-auto-save-timeout" variable (:default-value auto-save-timeout) nil [9033 9738])
            ("desktop-load-locked-desktop" variable (:default-value (quote ask)) nil [9740 10224])
            ("define-obsolete-variable-alias" code nil nil [10226 10343])
            ("desktop-base-file-name" variable (:default-value (convert-standard-filename ".emacs.desktop")) nil [10345 10524])
            ("desktop-base-lock-name" variable (:default-value (convert-standard-filename ".emacs.desktop.lock")) nil [10526 10733])
            ("desktop-path" variable (:default-value (list user-emacs-directory "~")) nil [10735 10979])
            ("desktop-missing-file-warning" variable nil nil [11031 11350])
            ("desktop-no-desktop-file-hook" variable nil nil [11352 11608])
            ("desktop-not-loaded-hook" variable nil nil [11610 11943])
            ("desktop-after-read-hook" variable nil nil [11945 12151])
            ("desktop-save-hook" variable nil nil [12153 12433])
            ("desktop-globals-to-save" variable (:default-value (quote (desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history))) nil [12435 13040])
            ("desktop-globals-to-clear" variable (:default-value (quote (kill-ring kill-ring-yank-pointer search-ring search-ring-yank-pointer regexp-search-ring regexp-search-ring-yank-pointer))) nil [13042 13575])
            ("desktop-clear-preserve-buffers" variable (:default-value (quote ("\\*scratch\\*" "\\*Messages\\*" "\\*server\\*" "\\*tramp/.+\\*" "\\*Warnings\\*"))) nil [13577 13982])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [13999 14690])
            ("desktop-buffers-not-to-save" variable (:default-value "\\` ") nil [14692 15094])
            ("desktop-files-not-to-save" variable (:default-value "\\(^/[^/:]*:\\|(ftp)$\\)") nil [15129 15398])
            ("desktop-modes-not-to-save" variable (:default-value (quote (tags-table-mode))) nil [15470 15630])
            ("desktop-restore-frames" variable (:default-value t) nil [15632 15922])
            ("desktop-restore-in-current-display" variable (:default-value t) nil [15924 16420])
            ("desktop-restore-forces-onscreen" variable (:default-value t) nil [16422 17023])
            ("desktop-restore-reuses-frames" variable (:default-value t) nil [17025 17393])
            ("desktop-file-name-format" variable (:default-value (quote absolute)) nil [17395 17736])
            ("desktop-restore-eager" variable (:default-value t) nil [17738 18004])
            ("desktop-lazy-verbose" variable (:default-value t) nil [18006 18142])
            ("desktop-lazy-idle-delay" variable (:default-value 5) nil [18144 18313])
            ("defvar-local" code nil nil [18330 18926])
            ("make-obsolete-variable" code nil nil [18927 19033])
            ("make-obsolete-variable" code nil nil [19034 19141])
            ("desktop-buffer-mode-handlers" variable nil nil [19158 20466])
            ("put" code nil nil [20483 20542])
            ("make-obsolete-variable" code nil nil [20543 20653])
            ("desktop-minor-mode-table" variable (:default-value (quote ((auto-fill-function auto-fill-mode) (defining-kbd-macro nil) (isearch-mode nil) (vc-mode nil) (vc-dired-mode nil) (erc-track-minor-mode nil) (savehist-mode nil)))) nil [20655 21595])
            ("desktop-minor-mode-handlers" variable nil nil [21612 22927])
            ("put" code nil nil [22944 23002])
            ("desktop-dirname" variable nil nil [23084 23173])
            ("desktop-full-file-name" function (:arguments ("dirname")) nil [23175 23407])
            ("desktop-full-lock-name" function (:arguments ("dirname")) nil [23409 23646])
            ("desktop-header" variable
               (:constant-flag t
                :user-visible-flag t
                :default-value ";; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
")
                nil [23648 23894])
            ("desktop-delay-hook" variable nil nil [23896 23998])
            ("desktop-file-checksum" variable nil nil [24000 24161])
            ("desktop-saved-frameset" variable nil nil [24163 24300])
            ("desktop-file-modtime" variable nil nil [24417 24565])
            ("desktop-var-serdes-funs" variable (:default-value (list (list (quote mark-ring) (lambda (mr) (mapcar (function marker-position) mr)) (lambda (mr) (mapcar (function copy-marker) mr))))) nil [24567 24998])
            ("desktop-owner" function (:arguments ("dirname")) nil [25000 25518])
            ("desktop-claim-lock" function (:arguments ("dirname")) nil [25520 25780])
            ("desktop-release-lock" function (:arguments ("dirname")) nil [25782 26036])
            ("desktop-truncate" function (:arguments ("list" "n")) nil [26118 26292])
            ("desktop-clear" function (:user-visible-flag t) nil [26389 28505])
            ("unless" code nil nil [28587 28654])
            ("desktop-kill" function nil nil [28656 29926])
            ("desktop-list*" function (:arguments ("args")) nil [30008 30079])
            ("desktop-buffer-info" function (:arguments ("buffer")) nil [30161 32299])
            ("desktop--v2s" function (:arguments ("value")) nil [32381 34726])
            ("desktop-value-to-string" function (:arguments ("value")) nil [34808 35245])
            ("desktop-outvar" function (:arguments ("varspec")) nil [35327 36018])
            ("desktop-save-buffer-p" function (:arguments ("filename" "bufname" "mode" "_dummy")) nil [36100 37111])
            ("desktop-file-name" function (:arguments ("filename" "dirname")) nil [37193 37861])
            ("desktop--check-dont-save" function (:arguments ("frame")) nil [37944 38035])
            ("desktop--app-id" variable
               (:constant-flag t
                :default-value (\` (desktop \, desktop-file-version)))
                nil [38037 38098])
            ("desktop-save-frameset" function nil nil [38100 38483])
            ("desktop-save" function
               (:user-visible-flag t
                :arguments ("dirname" "release" "only-if-changed" "version"))
                nil [38500 45028])
            ("desktop-remove" function (:user-visible-flag t) nil [45125 45437])
            ("desktop-buffer-args-list" variable nil nil [45439 45522])
            ("desktop-lazy-timer" variable nil nil [45524 45555])
            ("desktop-restoring-frameset-p" function nil nil [45637 45825])
            ("desktop-restore-frameset" function nil nil [45827 46350])
            ("desktop-first-buffer" variable nil nil [46430 46459])
            ("desktop-buffer-ok-count" variable nil nil [46460 46492])
            ("desktop-buffer-fail-count" variable nil nil [46493 46527])
            ("desktop-read" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [46619 52003])
            ("desktop-load-default" function nil nil [52141 52420])
            ("desktop-change-dir" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [52517 52933])
            ("desktop-save-in-desktop-dir" function (:user-visible-flag t) nil [53030 53309])
            ("desktop-auto-save-timer" variable nil nil [53407 53443])
            ("desktop-auto-save-enable" function (:arguments ("timeout")) nil [53445 53691])
            ("desktop-auto-save-disable" function nil nil [53693 53843])
            ("desktop-auto-save" function nil nil [53845 54308])
            ("desktop-auto-save-set-timer" function nil nil [54310 54867])
            ("desktop-auto-save-cancel-timer" function nil nil [54869 55025])
            ("desktop-revert" function (:user-visible-flag t) nil [55122 55408])
            ("desktop-buffer-major-mode" variable nil nil [55410 55444])
            ("desktop-buffer-locals" variable nil nil [55445 55475])
            ("auto-insert" variable nil nil [55476 55496])
            ("desktop-restore-file-buffer" function (:arguments ("buffer-filename" "_buffer-name" "_buffer-misc")) nil [55599 56565])
            ("desktop-load-file" function (:arguments ("function")) nil [56567 57244])
            ("desktop-create-buffer" function (:arguments ("file-version" "buffer-filename" "buffer-name" "buffer-majormode" "buffer-minormodes" "buffer-point" "buffer-mark" "buffer-readonly" "buffer-misc" "buffer-locals" "compacted-vars" "_unsupported")) nil [57415 62508])
            ("desktop-buffer" function (:arguments ("buffer-filename" "buffer-name" "buffer-majormode" "mim" "pt" "mk" "ro" "tl" "fc" "cfs" "cr" "buffer-misc")) nil [62655 63071])
            ("desktop-append-buffer-args" function (:arguments ("args")) nil [63073 63459])
            ("desktop-lazy-create-buffer" function nil nil [63461 64344])
            ("desktop-idle-create-buffers" function nil nil [64346 64869])
            ("desktop-lazy-complete" function (:user-visible-flag t) nil [64871 65141])
            ("desktop-lazy-abort" function (:user-visible-flag t) nil [65143 65494])
            ("add-hook" code nil nil [65907 66209])
            ("desktop" package nil nil [66211 66229]))          
      :file "desktop.el.gz"
      :pointmax 66256
      :fsize 17920
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ezimage" include nil nil [1344 1362])
            ("speedbar-use-images" variable (:default-value ezimage-use-images) nil [1374 1524])
            ("defalias" code nil nil [1526 1567])
            ("speedbar-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("<M>" . ezimage-mail) ("<d>" . ezimage-document-tag) ("<i>" . ezimage-info-tag) (" =>" . ezimage-tag) (" +>" . ezimage-tag-gt) (" ->" . ezimage-tag-v) (">" . ezimage-tag) ("@" . ezimage-tag-type) ("  @" . ezimage-tag-type) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("//" . ezimage-label) ("%" . ezimage-lock)))) nil [1569 2368])
            ("speedbar-insert-image-button-maybe" function (:arguments ("start" "length")) nil [2370 2780])
            ("speedbar-image-dump" function (:user-visible-flag t) nil [2782 3580])
            ("sb-image" package nil nil [3582 3601]))          
      :file "sb-image.el.gz"
      :pointmax 3629
      :fsize 1569
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6390])
            ("make-variable-buffer-local" code nil nil [6391 6438])
            ("put" code nil nil [6439 6482])
            ("find-file-existing-other-name" variable (:default-value t) nil [6484 6777])
            ("find-file-visit-truename" variable nil nil [6779 7151])
            ("put" code nil nil [7152 7214])
            ("revert-without-query" variable nil nil [7216 7581])
            ("buffer-file-number" variable nil nil [7583 7852])
            ("make-variable-buffer-local" code nil nil [7853 7901])
            ("put" code nil nil [7902 7946])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7948 8093])
            ("buffer-file-read-only" variable nil nil [8095 8185])
            ("make-variable-buffer-local" code nil nil [8186 8237])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8239 8683])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8751 8820])
            ("declare-function" code nil nil [8822 8872])
            ("declare-function" code nil nil [8873 8922])
            ("declare-function" code nil nil [8923 9009])
            ("declare-function" code nil nil [9010 9077])
            ("declare-function" code nil nil [9078 9150])
            ("declare-function" code nil nil [9151 9207])
            ("declare-function" code nil nil [9208 9267])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9269 9942])
            ("file-precious-flag" variable nil nil [9944 10784])
            ("break-hardlink-on-save" variable nil nil [10786 11541])
            ("version-control" variable nil nil [11543 11900])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11902 12046])
            ("put" code nil nil [12048 12127])
            ("dired-kept-versions" variable (:default-value 2) nil [12129 12269])
            ("delete-old-versions" variable nil nil [12271 12537])
            ("kept-old-versions" variable (:default-value 2) nil [12539 12678])
            ("put" code nil nil [12679 12734])
            ("kept-new-versions" variable (:default-value 2) nil [12736 12925])
            ("put" code nil nil [12926 12981])
            ("require-final-newline" variable nil nil [12983 13754])
            ("mode-require-final-newline" variable (:default-value t) nil [13756 14891])
            ("auto-save-default" variable (:default-value t) nil [14893 15035])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [15037 16465])
            ("auto-save--timer" variable nil nil [16467 16534])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16536 17017])
            ("define-minor-mode" code nil nil [17019 17991])
            ("make-obsolete-variable" code nil nil [18186 18305])
            ("save-abbrevs" variable (:default-value t) nil [18307 18518])
            ("find-file-run-dired" variable (:default-value t) nil [18520 18717])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18719 19047])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [19108 19436])
            ("define-obsolete-variable-alias" code nil nil [19544 19645])
            ("find-file-not-found-functions" variable nil nil [19646 19947])
            ("define-obsolete-variable-alias" code nil nil [20045 20117])
            ("find-file-hook" variable nil nil [20118 20471])
            ("define-obsolete-variable-alias" code nil nil [20473 20552])
            ("write-file-functions" variable nil nil [20553 21357])
            ("put" code nil nil [21358 21404])
            ("local-write-file-hooks" variable nil nil [21406 21441])
            ("make-variable-buffer-local" code nil nil [21442 21494])
            ("put" code nil nil [21495 21543])
            ("make-obsolete-variable" code nil nil [21544 21621])
            ("define-obsolete-variable-alias" code nil nil [21623 21714])
            ("write-contents-functions" variable nil nil [21715 22602])
            ("make-variable-buffer-local" code nil nil [22603 22657])
            ("enable-local-variables" variable (:default-value t) nil [22659 23911])
            ("enable-dir-local-variables" variable (:default-value t) nil [23913 24134])
            ("local-enable-local-variables" variable (:default-value t) nil [25497 25974])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25976 26367])
            ("view-read-only" variable nil nil [26369 26719])
            ("file-name-history" variable nil nil [26721 26904])
            ("save-silently" variable nil nil [26906 27061])
            ("put" code nil nil [27065 27119])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [27120 27726])
            ("declare-function" code nil nil [27728 27800])
            ("declare-function" code nil nil [27801 27873])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27875 29031])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [29033 30154])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [30158 30426])
            ("cd-path" variable nil nil [30428 30558])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30560 31179])
            ("cd-absolute" function (:arguments ("dir")) nil [31181 32086])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [32088 34163])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [34165 35560])
            ("module-file-suffix" variable nil nil [35562 35589])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35591 36059])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [36061 37438])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [37440 40402])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [40404 40812])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40814 41418])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [41420 42778])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42780 42982])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42984 44670])
            ("executable-find" function (:arguments ("command")) nil [44673 44981])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44983 45678])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45680 47432])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47731 48450])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48452 49671])
            ("file-local-name" function (:arguments ("file")) nil [49673 50089])
            ("file-local-copy" function (:arguments ("file")) nil [50091 50480])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [50482 50763])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50765 51544])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [51546 56382])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [56384 57805])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57937 59054])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [59056 59487])
            ("temporary-file-directory" function nil nil [59489 60265])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [60267 61320])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [61322 62262])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [62264 63101])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [63103 65340])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [65343 65956])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65958 66399])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [66401 67644])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [67646 67760])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67762 69476])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69478 70860])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70862 72238])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [72240 72675])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72677 73102])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73104 73485])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73487 73938])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73940 74386])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74388 75337])
            ("kill-buffer-hook" variable nil nil [75398 75638])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [75640 78693])
            ("create-file-buffer" function (:arguments ("filename")) nil [78818 79498])
            ("generate-new-buffer" function (:arguments ("name")) nil [79500 79705])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79707 79859])
            ("make-obsolete-variable" code nil nil [79860 79937])
            ("abbreviated-home-dir" variable nil nil [79939 80113])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [80115 84173])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [84175 86102])
            ("find-file-wildcards" variable (:default-value t) nil [86105 86352])
            ("find-file-suppress-same-file-warnings" variable nil nil [86354 86680])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86682 86961])
            ("out-of-memory-warning-percentage" variable nil nil [86963 87346])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [87348 87840])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87842 88680])
            ("files--message" function (:arguments ("format" "args")) nil [88682 88949])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88951 96019])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [96021 98515])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [98518 99539])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [99541 100233])
            ("insert-file-literally" function (:arguments ("filename")) nil [100235 100718])
            ("find-file-literally" variable nil nil [100720 100927])
            ("put" code nil nil [100928 100973])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100975 102304])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [102307 105672])
            ("define-obsolete-function-alias" code nil nil [105674 105749])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105751 107743])
            ("auto-mode-case-fold" variable (:default-value t) nil [107745 108183])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [108185 119709])
            ("put" code nil nil [119710 119756])
            ("conf-mode-maybe" function nil nil [119758 120008])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [120010 121405])
            ("define-obsolete-variable-alias" code nil nil [121407 121520])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121719 122579])
            ("define-obsolete-variable-alias" code nil nil [122581 122691])
            ("inhibit-local-variables-suffixes" variable nil nil [122693 122969])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [123041 123147])
            ("inhibit-local-variables-p" function nil nil [123149 123959])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123961 124479])
            ("magic-mode-alist" variable nil nil [124481 125015])
            ("put" code nil nil [125016 125063])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [125065 126608])
            ("put" code nil nil [126609 126665])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [126667 126809])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126811 134182])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [134435 134842])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134844 135110])
            ("set-auto-mode-1" function nil nil [135112 136617])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [136655 136861])
            ("put" code nil nil [136862 136916])
            ("hack-local-variables-hook" variable nil nil [136918 137151])
            ("safe-local-variable-values" variable nil nil [137153 137413])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [137415 138077])
            ("mapc" code nil nil [138105 138722])
            ("dolist" code nil nil [139364 140117])
            ("put" code nil nil [140119 140233])
            ("put" code nil nil [140235 140281])
            ("file-local-variables-alist" variable nil nil [140283 140638])
            ("make-variable-buffer-local" code nil nil [140639 140695])
            ("put" code nil nil [140696 140748])
            ("dir-local-variables-alist" variable nil nil [140750 141132])
            ("make-variable-buffer-local" code nil nil [141133 141188])
            ("before-hack-local-variables-hook" variable nil nil [141190 141608])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [141610 144480])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [144482 144569])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [144571 147849])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147851 150337])
            ("hack-local-variables--warned-lexical" variable nil nil [150398 150447])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [150449 157069])
            ("hack-local-variables-apply" function nil nil [157071 157872])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157874 158562])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [158564 159467])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [159469 159573])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [159575 159763])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [159765 161585])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [161587 162019])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [162021 162934])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [163000 163115])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [163117 163693])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [163695 163828])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [163830 164475])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [164477 166648])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [166650 167414])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [167416 168791])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [168793 169491])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [169493 170423])
            ("dir-locals-find-file" function (:arguments ("file")) nil [170425 173552])
            ("dir-locals--get-sort-score" function (:arguments ("node")) nil [173554 174659])
            ("dir-locals--sort-variables" function (:arguments ("variables")) nil [174661 175226])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [175228 176592])
            ("define-obsolete-function-alias" code nil nil [176594 176688])
            ("enable-remote-dir-locals" variable nil nil [176690 176856])
            ("hack-dir-local-variables--warned-coding" variable nil nil [176858 176910])
            ("hack-dir-local-variables" function nil nil [176912 178529])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [178531 178837])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [178841 179276])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [179278 184367])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [184369 186509])
            ("file-extended-attributes" function (:arguments ("filename")) nil [186512 186826])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [186828 187430])
            ("backup-buffer" function nil nil [187433 191056])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [191058 192159])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [192161 192454])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [192456 193155])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [193157 194964])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [194966 195691])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [195693 196622])
            ("file-name-base" function (:arguments ("filename")) nil [196624 196868])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [196870 197618])
            ("backup-directory-alist" variable nil nil [197620 198657])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [198659 199955])
            ("make-backup-file-name" function (:arguments ("file")) nil [199957 200270])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [200272 201022])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [201024 203624])
            ("backup-file-name-p" function (:arguments ("file")) nil [203626 203887])
            ("backup-extract-version-start" variable nil nil [203889 203926])
            ("backup-extract-version" function (:arguments ("fn")) nil [204101 204553])
            ("find-backup-file-name" function (:arguments ("fn")) nil [204555 206694])
            ("file-nlinks" function (:arguments ("filename")) nil [206696 206813])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [206815 209570])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209573 212391])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [212393 212964])
            ("auto-save-hook" variable nil nil [212966 213038])
            ("before-save-hook" variable nil nil [213040 213238])
            ("after-save-hook" variable nil nil [213240 213459])
            ("save-buffer-coding-system" variable nil nil [213461 213833])
            ("make-variable-buffer-local" code nil nil [213835 213890])
            ("put" code nil nil [213891 213942])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [213944 218788])
            ("basic-save-buffer-1" function nil nil [219070 219373])
            ("basic-save-buffer-2" function nil nil [219462 223623])
            ("declare-function" code nil nil [223625 223711])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [223713 224879])
            ("put" code nil nil [224880 224941])
            ("buffer-save-without-query" variable nil nil [224943 225059])
            ("make-variable-buffer-local" code nil nil [225060 225115])
            ("save-some-buffers-default-predicate" variable nil nil [225117 225529])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [225531 229270])
            ("clear-visited-file-modtime" function nil nil [229273 229454])
            ("not-modified" function (:arguments ("arg")) nil [229456 229979])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [229981 230267])
            ("insert-file" function (:arguments ("filename")) nil [230269 230717])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [230719 231377])
            ("file-newest-backup" function (:arguments ("filename")) nil [231379 232302])
            ("rename-uniquely" function (:user-visible-flag t) nil [232304 233320])
            ("files--ensure-directory" function (:arguments ("dir")) nil [233322 233573])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [233575 235122])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [235124 235270])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [235272 235620])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [235622 238385])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [238387 238947])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [238949 240067])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [240069 243189])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [243237 243799])
            ("put" code nil nil [243803 243851])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [243852 244304])
            ("put" code nil nil [244306 244375])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [244376 244848])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [244850 245412])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [245414 246329])
            ("before-revert-hook" variable nil nil [246331 246534])
            ("after-revert-hook" variable nil nil [246536 246891])
            ("revert-buffer-in-progress-p" variable nil nil [246893 247007])
            ("revert-buffer-internal-hook" variable nil nil [247009 247045])
            ("revert-buffer-preserve-modes" variable nil nil [247235 247272])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [247274 249486])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [249488 252843])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [252845 255045])
            ("recover-this-file" function (:user-visible-flag t) nil [255047 255278])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [255280 257363])
            ("recover-session" function (:user-visible-flag t) nil [257365 259097])
            ("recover-session-finish" function (:user-visible-flag t) nil [259099 261502])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [261504 261755])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [261757 262360])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [262362 263019])
            ("rename-auto-save-file" function nil nil [263023 263587])
            ("make-auto-save-file-name" function nil nil [263589 267760])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [267762 267990])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [267993 270176])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [270179 270340])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [270342 270508])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [270510 272116])
            ("files" package nil nil [272190 272226])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [272228 273574])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [273576 275414])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [275417 275544])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [275546 276083])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [276085 276272])
            ("get-free-disk-space" function (:arguments ("dir")) nil [276274 278044])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [278116 280505])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [280507 280552])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [280554 281369])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [281371 283382])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [284456 293212])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [293214 293780])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [293782 294266])
            ("kill-emacs-query-functions" variable nil nil [294268 294631])
            ("confirm-kill-emacs" variable nil nil [294633 295073])
            ("confirm-kill-processes" variable (:default-value t) nil [295075 295438])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295440 297731])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [297733 298253])
            ("setq" code nil nil [298363 298484])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [298685 302372])
            ("file-name-quoted-p" function (:arguments ("name")) nil [302374 302566])
            ("file-name-quote" function (:arguments ("name")) nil [302568 302889])
            ("file-name-unquote" function (:arguments ("name")) nil [302891 303271])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [303314 303781])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [303783 304632])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [304634 305788])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [305790 306873])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [306875 307942])
            ("define-obsolete-variable-alias" code nil nil [307944 308026])
            ("trash-directory" variable nil nil [308050 308453])
            ("trash--hexify-table" variable nil nil [308455 308483])
            ("declare-function" code nil nil [308485 308551])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [308553 313547])
            ("file-attribute-type" function (:arguments ("attributes")) nil [313549 313765])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [313767 313914])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [313916 314183])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [314185 314453])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [314455 314678])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [314680 314972])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [314974 315312])
            ("file-attribute-size" function (:arguments ("attributes")) nil [315314 315520])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [315522 315706])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [315708 316149])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [316151 316606])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [316608 317463])
            ("define-key" code nil nil [317466 317506])
            ("define-key" code nil nil [317507 317557])
            ("define-key" code nil nil [317558 317608])
            ("define-key" code nil nil [317609 317651])
            ("define-key" code nil nil [317652 317697])
            ("define-key" code nil nil [317698 317739])
            ("define-key" code nil nil [317740 317779])
            ("define-key" code nil nil [317780 317818])
            ("define-key" code nil nil [317819 317864])
            ("define-key" code nil nil [317865 317922])
            ("define-key" code nil nil [317923 317968])
            ("define-key" code nil nil [317970 318022])
            ("define-key" code nil nil [318023 318085])
            ("define-key" code nil nil [318086 318141])
            ("define-key" code nil nil [318142 318201])
            ("define-key" code nil nil [318202 318249])
            ("define-key" code nil nil [318251 318309])
            ("define-key" code nil nil [318310 318361])
            ("define-key" code nil nil [318362 318416])
            ("define-key" code nil nil [318417 318478])
            ("define-key" code nil nil [318479 318538]))          
      :file "files.el.gz"
      :pointmax 318563
      :fsize 91223
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable nil nil [1170 1255])
            ("initialization" customgroup (:user-visible-flag t) nil [1257 1338])
            ("initial-buffer-choice" variable nil nil [1340 2311])
            ("inhibit-startup-screen" variable nil nil [2313 2566])
            ("defvaralias" code nil nil [2568 2628])
            ("defvaralias" code nil nil [2629 2691])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2693 2743])
            ("inhibit-startup-echo-area-message" variable nil nil [3043 4097])
            ("inhibit-default-init" variable nil nil [4099 4229])
            ("inhibit-startup-buffer-menu" variable nil nil [4231 4395])
            ("command-switch-alist" variable nil nil [4397 4665])
            ("command-line-args-left" variable nil nil [4667 4751])
            ("defvaralias" code nil nil [4753 4988])
            ("internal-make-var-non-special" code nil nil [4989 5026])
            ("argi" variable nil nil [5028 5080])
            ("internal-make-var-non-special" code nil nil [5081 5118])
            ("command-line-functions" variable nil nil [5120 5574])
            ("command-line-default-directory" variable nil nil [5576 5744])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5852 9036])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9038 11990])
            ("before-init-hook" variable nil nil [11993 12103])
            ("after-init-hook" variable nil nil [12105 12521])
            ("emacs-startup-hook" variable nil nil [12523 12630])
            ("term-setup-hook" variable nil nil [12632 12947])
            ("make-obsolete-variable" code nil nil [12949 13065])
            ("inhibit-startup-hooks" variable nil nil [13067 13266])
            ("keyboard-type" variable nil nil [13268 13489])
            ("window-setup-hook" variable nil nil [13491 13938])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13940 14109])
            ("init-file-user" variable nil nil [14111 14758])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14760 16031])
            ("make-obsolete-variable" code nil nil [16033 16105])
            ("mail-host-address" variable nil nil [16107 16305])
            ("user-mail-address" variable (:default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name))))) nil [16307 16729])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16731 17484])
            ("emacs-basic-display" variable nil nil [17486 17518])
            ("init-file-debug" variable nil nil [17520 17548])
            ("init-file-had-error" variable nil nil [17550 17646])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17648 17700])
            ("no-blinking-cursor" variable nil nil [17702 17733])
            ("pure-space-overflow" variable nil nil [17735 17820])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17822 17998])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18000 18236])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18238 19990])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19992 20761])
            ("normal-top-level" function nil nil [20763 31121])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [31229 31455])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [31457 31547])
            ("cl-defgeneric" code nil nil [31549 31890])
            ("cl-defmethod" code nil nil [31891 31987])
            ("cl-defgeneric" code nil nil [31989 32327])
            ("tty-handle-args" function (:arguments ("args")) nil [32329 35076])
            ("declare-function" code nil nil [35078 35172])
            ("declare-function" code nil nil [35173 35232])
            ("declare-function" code nil nil [35233 35277])
            ("server-name" variable nil nil [35279 35299])
            ("server-process" variable nil nil [35300 35323])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [35325 38300])
            ("command-line" function nil nil [38302 59821])
            ("x-apply-session-resources" function nil nil [59823 60902])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [60904 61312])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/thegnuproject.html"))) "Browse https://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [61487 64271])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [64273 67431])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [67434 67553])
            ("fancy-splash-image" variable nil nil [67555 67752])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [67755 68127])
            ("fancy-splash-insert" function (:arguments ("args")) nil [68198 69594])
            ("declare-function" code nil nil [69596 69665])
            ("fancy-splash-image-file" function nil nil [69667 70146])
            ("fancy-splash-head" function nil nil [70148 71166])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [71168 74307])
            ("exit-splash-screen" function (:user-visible-flag t) nil [74309 74418])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [74420 75851])
            ("fancy-about-screen" function nil nil [75853 76611])
            ("fancy-splash-frame" function nil nil [76613 77209])
            ("use-fancy-splash-screens-p" function nil nil [77211 78026])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [78029 80535])
            ("normal-mouse-startup-screen" function nil nil [80537 82343])
            ("normal-no-mouse-startup-screen" function nil nil [82345 86474])
            ("normal-about-screen" function nil nil [86476 87937])
            ("startup-echo-area-message" function nil nil [87939 88136])
            ("display-startup-echo-area-message" function nil nil [88138 89402])
            ("display-startup-screen" function (:arguments ("concise")) nil [89404 89856])
            ("display-about-screen" function (:user-visible-flag t) nil [89858 90104])
            ("defalias" code nil nil [90106 90151])
            ("defalias" code nil nil [90152 90209])
            ("command-line-1" function (:arguments ("args-left")) nil [90211 107383])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [107385 108117]))          
      :file "startup.el.gz"
      :pointmax 108144
      :fsize 29453
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1155 1917])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1919 3571])
            ("read-file-local-variable-mode" function nil nil [3573 4410])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4412 5507])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op" "interactive")) nil [5509 8837])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8854 9888])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9905 10198])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op" "interactive")) nil [10200 14745])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14762 15389])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [15406 15711])
            ("auto-insert" variable nil nil [15713 15733])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [15756 19315])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [19332 19740])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [19757 20062])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [20079 20347])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [20364 20578])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [20595 20817])
            ("enable-connection-local-variables" variable (:default-value t) nil [20869 20973])
            ("connection-local-variables-alist" variable nil nil [20975 21305])
            ("make-variable-buffer-local" code nil nil [21306 21368])
            ("setq" code nil nil [21369 21470])
            ("connection-local-profile-alist" variable (:default-value (quote nil)) nil [21472 21845])
            ("connection-local-criteria-alist" variable (:default-value (quote nil)) nil [21847 22391])
            ("connection-local-normalize-criteria" function (:arguments ("criteria")) nil [22393 22768])
            ("connection-local-get-profiles" function (:arguments ("criteria")) nil [22770 23503])
            ("connection-local-set-profiles" function (:arguments ("criteria" "profiles")) nil [23520 24660])
            ("connection-local-get-profile-variables" function (:arguments ("profile")) nil [24662 24834])
            ("connection-local-set-profile-variables" function (:arguments ("profile" "variables")) nil [24851 25544])
            ("hack-connection-local-variables" function (:arguments ("criteria")) nil [25546 26196])
            ("hack-connection-local-variables-apply" function (:arguments ("criteria")) nil [26213 26581])
            ("with-connection-local-profiles" function (:arguments ("profiles" "body")) nil [26598 27418])
            ("files-x" package nil nil [27423 27441]))          
      :file "files-x.el.gz"
      :pointmax 27468
      :fsize 6683
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1150 1171])
            ("add-hook" code nil nil [1242 1293])
            ("add-hook" code nil nil [1294 1345])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1766 1876])
            ("help-window-old-frame" variable nil nil [1878 1974])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "o" (quote describe-symbol)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1976 4265])
            ("define-key" code nil nil [4267 4331])
            ("define-key" code nil nil [4332 4376])
            ("define-key" code nil nil [4377 4419])
            ("fset" code nil nil [4420 4449])
            ("help-button-cache" variable nil nil [4518 4548])
            ("help-quit" function (:user-visible-flag t) nil [4552 4646])
            ("help-return-method" variable nil nil [4648 5017])
            ("define-obsolete-function-alias" code nil nil [5019 5112])
            ("help-print-return-message" function (:arguments ("function")) nil [5113 7408])
            ("fset" code nil nil [7468 7529])
            ("defalias" code nil nil [7531 7571])
            ("defalias" code nil nil [7604 7653])
            ("make-help-screen" code nil nil [7699 10813])
            ("function-called-at-point" function nil nil [10818 12550])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12581 12736])
            ("describe-distribution" function (:user-visible-flag t) nil [12738 12882])
            ("describe-copying" function (:user-visible-flag t) nil [12884 13022])
            ("describe-gnu-project" function (:user-visible-flag t) nil [13070 13227])
            ("define-obsolete-function-alias" code nil nil [13229 13308])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13310 13556])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13558 14064])
            ("setq" code nil nil [14155 14207])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [14209 16619])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16621 16740])
            ("define-obsolete-function-alias" code nil nil [16742 16809])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16812 17137])
            ("view-order-manuals" function (:user-visible-flag t) nil [17139 17317])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17319 17506])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17508 17656])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17658 17781])
            ("view-external-packages" function (:user-visible-flag t) nil [17850 18007])
            ("view-lossage" function (:user-visible-flag t) nil [18009 18978])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18999 19835])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19878 20612])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20614 22776])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22778 23138])
            ("help--analyze-key" function (:arguments ("key" "untranslated")) nil [23140 24670])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [24672 25532])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [25534 26596])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [26598 28303])
            ("help-read-key-sequence" function (:arguments ("no-mouse-movement")) nil [28305 32689])
            ("help-downify-mouse-event-type" function (:arguments ("base")) nil [32691 33409])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [33411 38329])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [38332 42253])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [42256 43143])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [43155 43369])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [43371 43715])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [43730 44047])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [44049 44598])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [44600 45390])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [45438 46207])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [46209 46973])
            ("define-minor-mode" code nil nil [46975 48131])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [48133 49890])
            ("help-window-select" variable nil nil [49910 50878])
            ("help-enable-auto-load" variable (:default-value t) nil [50880 51267])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [51269 52187])
            ("help-window-setup" function (:arguments ("window" "value")) nil [52189 54990])
            ("with-help-window" function (:arguments ("buffer-or-name" "body")) nil [55562 56601])
            ("help-form-show" function nil nil [56729 56919])
            ("help--docstring-quote" function (:arguments ("string")) nil [56923 57145])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [57370 58383])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [58385 59235])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [59237 61626])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [61628 62066])
            ("define-obsolete-function-alias" code nil nil [62068 62142])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [62144 62299])
            ("help" package nil nil [62303 62318]))          
      :file "help.el.gz"
      :pointmax 62342
      :fsize 18092
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1171 . 1172) (symbol 1132 . 1149) (open-paren 1131 . 1132)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [4415 4431])
            ("locate-current-filter" variable nil nil [4447 4481])
            ("locate-local-filter" variable nil nil [4482 4514])
            ("locate-local-search" variable nil nil [4515 4547])
            ("locate-local-prompt" variable nil nil [4548 4580])
            ("locate" customgroup (:user-visible-flag t) nil [4582 4679])
            ("locate-command" variable (:default-value "locate") nil [4681 5803])
            ("locate-post-command-hook" variable nil nil [5805 5942])
            ("locate-history-list" variable nil nil [5944 6029])
            ("locate-grep-history-list" variable nil nil [6031 6133])
            ("locate-make-command-line" variable (:default-value (quote locate-default-make-command-line)) nil [6135 6637])
            ("locate-buffer-name" variable (:default-value "*Locate*") nil [6639 6781])
            ("locate-fcodes-file" variable nil nil [6783 7321])
            ("locate-header-face" variable nil nil [7323 7467])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [7484 7737])
            ("locate-update-when-revert" variable nil nil [7739 8128])
            ("locate-update-command" variable (:default-value "updatedb") nil [8130 8270])
            ("locate-update-path" variable (:default-value "/") nil [8272 8707])
            ("locate-prompt-for-command" variable nil nil [8709 9043])
            ("locate-mode-hook" variable nil nil [9045 9181])
            ("locate-default-make-command-line" function (:arguments ("search-string")) nil [9197 9291])
            ("locate-word-at-point" function nil nil [9293 9579])
            ("locate-prompt-for-search-string" function nil nil [9630 10399])
            ("locate" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [10416 12821])
            ("locate-with-filter" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [12838 13778])
            ("locate-filter-output" function (:arguments ("filter")) nil [13780 13908])
            ("locate-mode-map" variable (:default-value (let ((map (copy-keymap dired-mode-map))) (define-key map [menu-bar Dired] (quote undefined)) (define-key map [menu-bar subdir] (quote undefined)) (define-key map [menu-bar mark executables] (quote undefined)) (define-key map [menu-bar mark directory] (quote undefined)) (define-key map [menu-bar mark directories] (quote undefined)) (define-key map [menu-bar mark symlinks] (quote undefined)) (define-key map [M-mouse-2] (quote locate-mouse-view-file)) (define-key map "" (quote locate-tags)) (define-key map "l" (quote locate-do-redisplay)) (define-key map "U" (quote dired-unmark-all-files)) (define-key map "V" (quote locate-find-directory)) map)) nil [13910 14675])
            ("locate-filename-indentation" variable
               (:constant-flag t
                :default-value 4)
                nil [14762 14847])
            ("locate-get-file-positions" function nil nil [14849 15504])
            ("locate-current-line-number" function nil nil [15523 15698])
            ("locate-get-filename" function nil nil [16067 16280])
            ("locate-main-listing-line-p" function nil nil [16282 16640])
            ("locate-mouse-view-file" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [16642 16955])
            ("define-derived-mode" code nil nil [17096 18915])
            ("put" code nil nil [18916 18967])
            ("locate-do-setup" function (:arguments ("search-string")) nil [18969 19575])
            ("locate-set-properties" function nil nil [19577 19734])
            ("locate-insert-header" function (:arguments ("search-string")) nil [19736 21556])
            ("locate-tags" function (:user-visible-flag t) nil [21558 21883])
            ("locate-update" function (:arguments ("_ignore1" "_ignore2")) nil [21930 22635])
            ("locate-find-directory" function (:user-visible-flag t) nil [22777 23287])
            ("locate-find-directory-other-window" function (:user-visible-flag t) nil [23289 23571])
            ("locate-get-dirname" function nil nil [23940 24902])
            ("locate-in-alternate-database" function
               (:user-visible-flag t
                :arguments ("search-string" "database"))
                nil [24927 25776])
            ("locate-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [25778 26144])
            ("locate" package nil nil [26146 26163]))          
      :file "locate.el.gz"
      :pointmax 26189
      :fsize 7981
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [3671 3688])
            ("help" include nil nil [3653 3668])
            ("define-key" code nil nil [3711 3766])
            ("define-key" code nil nil [3767 3814])
            ("facemenu" customgroup (:user-visible-flag t) nil [3816 3940])
            ("facemenu-keybindings" variable (:default-value (mapcar (quote purecopy) (quote ((default . "d") (bold . "b") (italic . "i") (bold-italic . "l") (underline . "u"))))) nil [3942 4779])
            ("facemenu-new-faces-at-end" variable (:default-value t) nil [4781 5015])
            ("facemenu-listed-faces" variable nil nil [5017 6145])
            ("facemenu-face-menu" variable (:default-value (let ((map (make-sparse-keymap "Face"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-face))) map)) nil [6147 6326])
            ("defalias" code nil nil [6327 6376])
            ("put" code nil nil [6377 6442])
            ("facemenu-foreground-menu" variable (:default-value (let ((map (make-sparse-keymap "Foreground Color"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-foreground))) map)) nil [6444 6659])
            ("defalias" code nil nil [6660 6721])
            ("put" code nil nil [6722 6793])
            ("facemenu-background-menu" variable (:default-value (let ((map (make-sparse-keymap "Background Color"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-background))) map)) nil [6795 7010])
            ("defalias" code nil nil [7011 7072])
            ("put" code nil nil [7073 7144])
            ("facemenu-enable-faces-p" function nil nil [7200 7449])
            ("facemenu-special-menu" variable (:default-value (let ((map (make-sparse-keymap "Special"))) (define-key map [115] (cons (purecopy "Remove Special") (quote facemenu-remove-special))) (define-key map [116] (cons (purecopy "Intangible") (quote facemenu-set-intangible))) (define-key map [118] (cons (purecopy "Invisible") (quote facemenu-set-invisible))) (define-key map [114] (cons (purecopy "Read-Only") (quote facemenu-set-read-only))) map)) nil [7451 7950])
            ("defalias" code nil nil [7951 8006])
            ("facemenu-justification-menu" variable (:default-value (let ((map (make-sparse-keymap "Justification"))) (define-key map [99] (cons (purecopy "Center") (quote set-justification-center))) (define-key map [98] (cons (purecopy "Full") (quote set-justification-full))) (define-key map [114] (cons (purecopy "Right") (quote set-justification-right))) (define-key map [108] (cons (purecopy "Left") (quote set-justification-left))) (define-key map [117] (cons (purecopy "Unfilled") (quote set-justification-none))) map)) nil [8008 8535])
            ("defalias" code nil nil [8536 8603])
            ("facemenu-indentation-menu" variable (:default-value (let ((map (make-sparse-keymap "Indentation"))) (define-key map [decrease-right-margin] (cons (purecopy "Indent Right Less") (quote decrease-right-margin))) (define-key map [increase-right-margin] (cons (purecopy "Indent Right More") (quote increase-right-margin))) (define-key map [decrease-left-margin] (cons (purecopy "Indent Less") (quote decrease-left-margin))) (define-key map [increase-left-margin] (cons (purecopy "Indent More") (quote increase-left-margin))) map)) nil [8605 9168])
            ("defalias" code nil nil [9169 9232])
            ("facemenu-menu" variable nil nil [9296 9358])
            ("setq" code nil nil [9359 9418])
            ("let" code nil nil [9419 10028])
            ("let" code nil nil [10029 10650])
            ("defalias" code nil nil [10651 10690])
            ("facemenu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Set face"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-face))) (define-key map "\357" (quote font-lock-fontify-block)) map)) nil [10692 11038])
            ("defalias" code nil nil [11039 11082])
            ("facemenu-add-face-function" variable nil nil [11085 11407])
            ("facemenu-end-add-face" variable nil nil [11409 11687])
            ("facemenu-remove-face-function" variable nil nil [11689 12021])
            ("facemenu-color-alist" variable nil nil [12047 12182])
            ("facemenu-update" function (:user-visible-flag t) nil [12184 12511])
            ("facemenu-set-face" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [12513 13714])
            ("facemenu-set-foreground" function
               (:user-visible-flag t
                :arguments ("color" "start" "end"))
                nil [13716 14587])
            ("facemenu-set-background" function
               (:user-visible-flag t
                :arguments ("color" "start" "end"))
                nil [14589 15460])
            ("facemenu-set-face-from-menu" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [15462 16715])
            ("facemenu-set-invisible" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [16717 16949])
            ("facemenu-set-intangible" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [16951 17212])
            ("facemenu-set-read-only" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17214 17449])
            ("facemenu-remove-face-props" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17451 17727])
            ("facemenu-remove-all" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17729 17963])
            ("facemenu-remove-special" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17965 18345])
            ("defalias" code nil nil [18348 18391])
            ("list-colors-sort" variable nil nil [18393 19403])
            ("list-colors-sort-key" function (:arguments ("color")) nil [19405 20738])
            ("list-colors-callback" variable nil nil [20740 20846])
            ("list-colors-redisplay" function (:arguments ("_ignore-auto" "_noconfirm")) nil [20848 21090])
            ("list-colors-display" function
               (:user-visible-flag t
                :arguments ("list" "buffer-name" "callback"))
                nil [21092 23497])
            ("list-colors-print" function (:arguments ("list" "callback")) nil [23499 24986])
            ("list-colors-duplicates" function (:arguments ("list")) nil [24989 26602])
            ("facemenu-color-equal" function (:arguments ("a" "b")) nil [26604 26962])
            ("facemenu-self-insert-data" variable nil nil [26965 27003])
            ("facemenu-post-self-insert-function" function nil nil [27005 27382])
            ("facemenu-set-self-insert-face" function (:arguments ("face")) nil [27384 27625])
            ("facemenu-add-face" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [27627 30547])
            ("facemenu-active-faces" function (:arguments ("face-list" "frame")) nil [30549 31874])
            ("facemenu-add-new-face" function (:arguments ("face")) nil [31876 33903])
            ("facemenu-add-new-color" function (:arguments ("color" "menu")) nil [33939 35187])
            ("facemenu-complete-face-list" function (:arguments ("oldlist")) nil [35189 35718])
            ("facemenu-iterate" function (:arguments ("func" "list")) nil [35720 35975])
            ("facemenu-update" code nil nil [35977 35994])
            ("facemenu" package nil nil [35996 36015]))          
      :file "facemenu.el.gz"
      :pointmax 36043
      :fsize 10214
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 3688 . 3689) (symbol 3633 . 3650) (open-paren 3632 . 3633)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1167 3375])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3393 4588])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4795 5461])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5796 6268])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6725 7035])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7037 9256])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9258 9630])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9632 10596])
            ("decompose-string" function (:arguments ("string")) nil [10598 10770])
            ("compose-chars" function (:arguments ("args")) nil [10772 11648])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11650 13632])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13636 15080])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15082 15993])
            ("global-set-key" code nil nil [15995 16052])
            ("lgstring-header" function (:arguments ("gstring")) nil [16173 16226])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16227 16298])
            ("lgstring-font" function (:arguments ("gstring")) nil [16299 16368])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16369 16445])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16446 16524])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16525 16580])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16581 16640])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16641 16701])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16702 16764])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16765 16841])
            ("lglyph-from" function (:arguments ("glyph")) nil [16843 16888])
            ("lglyph-to" function (:arguments ("glyph")) nil [16889 16932])
            ("lglyph-char" function (:arguments ("glyph")) nil [16933 16978])
            ("lglyph-code" function (:arguments ("glyph")) nil [16979 17024])
            ("lglyph-width" function (:arguments ("glyph")) nil [17025 17071])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17072 17121])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17122 17171])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17172 17219])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17220 17268])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17269 17320])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17322 17415])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17416 17475])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17476 17535])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17536 17598])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17599 17732])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17771 17823])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17870 18369])
            ("lgstring-remove-glyph" function (:arguments ("gstring" "idx")) nil [18408 18723])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18725 19298])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [19300 20514])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20516 26772])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [26774 28565])
            ("when" code nil nil [28612 29057])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [29059 31040])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [31043 31982])
            ("put" code nil nil [31984 32031])
            ("make-variable-buffer-local" code nil nil [32033 32088])
            ("setq-default" code nil nil [32089 32149])
            ("define-minor-mode" code nil nil [32166 32767])
            ("make-variable-buffer-local" code nil nil [32819 32870])
            ("define-minor-mode" code nil nil [32887 33267])
            ("defalias" code nil nil [33269 33327])
            ("composite" package nil nil [33329 33349]))          
      :file "composite.el.gz"
      :pointmax 33381
      :fsize 9348
      :lastmodtime '(23900 21803 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode" include nil nil [1044 1064])
            ("cl-lib" include nil nil [1084 1101])
            ("case-replace" variable (:default-value t) nil [1104 1238])
            ("replace-char-fold" variable nil nil [1240 1574])
            ("replace-lax-whitespace" variable nil nil [1576 1883])
            ("replace-regexp-lax-whitespace" variable nil nil [1885 2206])
            ("query-replace-history" variable nil nil [2208 2378])
            ("query-replace-defaults" variable nil nil [2380 2579])
            ("query-replace-interactive" variable nil nil [2581 2722])
            ("make-obsolete-variable" code nil nil [2723 2971])
            ("query-replace-from-to-separator" variable (:default-value " \342\206\222 ") nil [2973 3293])
            ("query-replace-from-history-variable" variable (:default-value (quote query-replace-history)) nil [3295 3641])
            ("query-replace-to-history-variable" variable (:default-value (quote query-replace-history)) nil [3643 3978])
            ("query-replace-skip-read-only" variable nil nil [3980 4150])
            ("query-replace-show-replacement" variable (:default-value t) nil [4152 4372])
            ("query-replace-highlight" variable (:default-value t) nil [4374 4512])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [4514 4883])
            ("query-replace" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [4885 5026])
            ("replace-count" variable nil nil [5028 5146])
            ("query-replace-descr" function (:arguments ("string")) nil [5148 5239])
            ("query-replace--split-string" function (:arguments ("string")) nil [5241 5786])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [5788 9350])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [9352 10700])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [10703 11241])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [11243 11684])
            ("query-replace" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [11686 14419])
            ("define-key" code nil nil [14421 14460])
            ("query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [14462 18113])
            ("define-key" code nil nil [18115 18165])
            ("query-replace-regexp-eval" function (:arguments ("regexp" "to-expr" "delimited" "start" "end")) nil [18167 21473])
            ("map-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-strings" "n" "start" "end"))
                nil [21475 23502])
            ("replace-string" function (:arguments ("from-string" "to-string" "delimited" "start" "end" "backward")) nil [23504 25957])
            ("replace-regexp" function (:arguments ("regexp" "to-string" "delimited" "start" "end" "backward")) nil [25959 29164])
            ("regexp-history" variable nil nil [29168 29356])
            ("occur-collect-regexp-history" variable (:default-value (quote ("\\1"))) nil [29358 29456])
            ("read-regexp-defaults-function" variable nil nil [29458 30431])
            ("read-regexp-suggestions" function nil nil [30433 31014])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [31016 33822])
            ("defalias" code nil nil [33825 33874])
            ("defalias" code nil nil [33875 33921])
            ("defalias" code nil nil [33922 33957])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [33960 34146])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [34148 36844])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [36847 38894])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [38897 40701])
            ("occur-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [next-error-follow-minor-mode] (quote (menu-item "Auto Occurrence Display" next-error-follow-minor-mode :help "Display another occurrence when moving the cursor" :button (:toggle and (boundp (quote next-error-follow-minor-mode)) next-error-follow-minor-mode)))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [kill-this-buffer] (quote (menu-item "Kill Occur Buffer" kill-this-buffer :help "Kill the current *Occur* buffer"))) (bindings--define-key map [quit-window] (quote (menu-item "Quit Occur Window" quit-window :help "Quit the current *Occur* buffer.  Bury it, and maybe delete the selected frame"))) (bindings--define-key map [revert-buffer] (quote (menu-item "Revert Occur Buffer" revert-buffer :help "Replace the text in the *Occur* buffer with the results of rerunning occur"))) (bindings--define-key map [clone-buffer] (quote (menu-item "Clone Occur Buffer" clone-buffer :help "Create and return a twin copy of the current *Occur* buffer"))) (bindings--define-key map [occur-rename-buffer] (quote (menu-item "Rename Occur Buffer" occur-rename-buffer :help "Rename the current *Occur* buffer to *Occur: original-buffer-name*."))) (bindings--define-key map [occur-edit-buffer] (quote (menu-item "Edit Occur Buffer" occur-edit-mode :help "Edit the *Occur* buffer and apply changes to the original buffers."))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [occur-mode-goto-occurrence-other-window] (quote (menu-item "Go To Occurrence Other Window" occur-mode-goto-occurrence-other-window :help "Go to the occurrence the current line describes, in another window"))) (bindings--define-key map [occur-mode-goto-occurrence] (quote (menu-item "Go To Occurrence" occur-mode-goto-occurrence :help "Go to the occurrence the current line describes"))) (bindings--define-key map [occur-mode-display-occurrence] (quote (menu-item "Display Occurrence" occur-mode-display-occurrence :help "Display in another window the occurrence the current line describes"))) (bindings--define-key map [occur-next] (quote (menu-item "Move to Next Match" occur-next :help "Move to the Nth (default 1) next match in an Occur mode buffer"))) (bindings--define-key map [occur-prev] (quote (menu-item "Move to Previous Match" occur-prev :help "Move to the Nth (default 1) previous match in an Occur mode buffer"))) map)) nil [40705 43307])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "e" (quote occur-edit-mode)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "o" (quote occur-mode-goto-occurrence-other-window)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "\356" (quote occur-next)) (define-key map "\360" (quote occur-prev)) (define-key map "r" (quote occur-rename-buffer)) (define-key map "c" (quote clone-buffer)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [43309 44126])
            ("occur-revert-arguments" variable nil nil [44128 44259])
            ("make-variable-buffer-local" code nil nil [44260 44312])
            ("put" code nil nil [44313 44361])
            ("occur-mode-hook" variable (:default-value (quote (turn-on-font-lock))) nil [44363 44483])
            ("occur-hook" variable nil nil [44485 44594])
            ("occur-mode-find-occurrence-hook" variable nil nil [44596 44888])
            ("put" code nil nil [44890 44928])
            ("define-derived-mode" code nil nil [44929 45393])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-cease-edit)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [45418 45870])
            ("define-derived-mode" code nil nil [45872 46333])
            ("occur-cease-edit" function (:user-visible-flag t) nil [46335 46526])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [46528 48030])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [48034 48206])
            ("occur-mode-find-occurrence" function nil nil [48208 48474])
            ("defalias" code nil nil [48476 48537])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [48538 49286])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [49288 49596])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [49598 50024])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [50026 50377])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50379 50570])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50572 50774])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [50776 51767])
            ("match" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [51770 52345])
            ("list-matching-lines-default-context-lines" variable nil nil [52347 52664])
            ("defalias" code nil nil [52666 52704])
            ("list-matching-lines-face" variable (:default-value (quote match)) nil [52706 52924])
            ("list-matching-lines-buffer-name-face" variable (:default-value (quote underline)) nil [52926 53154])
            ("list-matching-lines-current-line-face" variable (:default-value (quote lazy-highlight)) nil [53156 53344])
            ("list-matching-lines-jump-to-current-line" variable nil nil [53346 53595])
            ("list-matching-lines-prefix-face" variable (:default-value (quote shadow)) nil [53597 53873])
            ("occur-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link))) nil [53875 54293])
            ("occur-read-primary-args" function nil nil [54295 55166])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [55168 56055])
            ("occur--region-start" variable nil nil [56108 56140])
            ("occur--region-end" variable nil nil [56141 56171])
            ("occur--matches-threshold" variable nil nil [56172 56209])
            ("occur--orig-line" variable nil nil [56210 56239])
            ("occur--orig-line-str" variable nil nil [56240 56273])
            ("occur--final-pos" variable nil nil [56274 56303])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines" "region"))
                nil [56305 59251])
            ("ido-ignore-item-temp-list" variable nil nil [59253 59287])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [59289 60207])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [60209 61162])
            ("occur-regexp-descr" function (:arguments ("regexp")) nil [61164 61577])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [61579 64864])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [64866 75022])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [75024 75514])
            ("occur-engine-add-prefix" function (:arguments ("lines" "prefix-face")) nil [75516 75740])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [75742 76262])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "curr-line" "prev-line" "prev-after-lines" "prefix-face")) nil [76675 78502])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type Space or `y' to replace one match, Delete or `n' to skip to next,
RET or `q' to exit, Period to replace one match and exit,
Comma to replace but not move point immediately,
C-r to enter recursive edit (\\[exit-recursive-edit] to get out again),
C-w to delete match and recursive edit,
C-l to clear the screen, redisplay, and offer same replacement again,
! to replace all remaining matches in this buffer with no more questions,
^ to move point back to previous match,
u to undo previous replacement,
U to undo all replacements,
E to edit the replacement string.
In multi-buffer replacements type `Y' to replace all remaining
matches in all remaining buffers with no more questions,
`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [78613 79467])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote act)) (define-key map "" (quote skip)) (define-key map [delete] (quote skip)) (define-key map [backspace] (quote skip)) (define-key map "y" (quote act)) (define-key map "n" (quote skip)) (define-key map "Y" (quote act)) (define-key map "N" (quote skip)) (define-key map "e" (quote edit-replacement)) (define-key map "E" (quote edit-replacement)) (define-key map "," (quote act-and-show)) (define-key map "q" (quote exit)) (define-key map "" (quote exit)) (define-key map [return] (quote exit)) (define-key map "." (quote act-and-exit)) (define-key map "" (quote edit)) (define-key map "" (quote delete-and-edit)) (define-key map "" (quote recenter)) (define-key map "!" (quote automatic)) (define-key map "^" (quote backup)) (define-key map "u" (quote undo)) (define-key map "U" (quote undo-all)) (define-key map "" (quote help)) (define-key map [f1] (quote help)) (define-key map [help] (quote help)) (define-key map "?" (quote help)) (define-key map "" (quote quit)) (define-key map "" (quote quit)) (define-key map "" (quote scroll-up)) (define-key map "\366" (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map [prior] (quote scroll-down)) (define-key map [134217750] (quote scroll-other-window)) (define-key map [M-next] (quote scroll-other-window)) (define-key map [167772182] (quote scroll-other-window-down)) (define-key map [M-prior] (quote scroll-other-window-down)) (define-key map [escape] (quote exit-prefix)) map)) nil [79469 81591])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" (quote automatic-all)) (define-key map "N" (quote exit-current)) map)) nil [81593 82253])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [82255 83416])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [83418 83768])
            ("replace-quote" function (:arguments ("replacement")) nil [83770 84244])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [84246 84669])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [84671 85074])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data" "backward")) nil [85076 86917])
            ("replace-update-post-hook" variable nil nil [86919 87033])
            ("replace-search-function" variable nil nil [87035 87250])
            ("replace-re-search-function" variable nil nil [87252 87537])
            ("replace-search" function (:arguments ("search-string" "limit" "regexp-flag" "delimited-flag" "case-fold" "backward")) nil [87539 88845])
            ("replace-overlay" variable nil nil [88847 88875])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold" "backward")) nil [88877 89825])
            ("replace-dehighlight" function nil nil [89827 90164])
            ("replace--push-stack" function (:arguments ("replaced" "search-str" "next-replace" "stack")) nil [90239 91044])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end" "backward" "region-noncontiguous-p")) nil [91046 113147])
            ("replace" package nil nil [113149 113167]))          
      :file "replace.el.gz"
      :pointmax 113194
      :fsize 27276
      :lastmodtime '(23900 21803 0 0)
      :unmatched-syntax '((close-paren 1101 . 1102) (symbol 1066 . 1083) (open-paren 1065 . 1066)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tabulated-list" include nil nil [1117 1142])
            ("Buffer-menu" customgroup (:user-visible-flag t) nil [1144 1252])
            ("Buffer-menu-marker-char" variable (:default-value 62) nil [1254 1332])
            ("Buffer-menu-del-char" variable (:default-value 68) nil [1334 1415])
            ("Buffer-menu-use-header-line" variable (:default-value t) nil [1417 1571])
            ("buffer-menu-buffer" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [1573 1693])
            ("put" code nil nil [1694 1751])
            ("Buffer-menu-buffer+size-width" variable nil nil [1753 2198])
            ("make-obsolete-variable" code nil nil [2200 2337])
            ("Buffer-menu-name-width" variable (:default-value 19) nil [2339 2484])
            ("Buffer-menu-size-width" variable (:default-value 7) nil [2486 2630])
            ("Buffer-menu-mode-width" variable (:default-value 16) nil [2632 2757])
            ("Buffer-menu-use-frame-buffer-list" variable (:default-value t) nil [2759 3160])
            ("Buffer-menu-files-only" variable nil nil [3162 3335])
            ("make-variable-buffer-local" code nil nil [3336 3388])
            ("Buffer-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "v" (quote Buffer-menu-select)) (define-key map "2" (quote Buffer-menu-2-window)) (define-key map "1" (quote Buffer-menu-1-window)) (define-key map "f" (quote Buffer-menu-this-window)) (define-key map "e" (quote Buffer-menu-this-window)) (define-key map "" (quote Buffer-menu-this-window)) (define-key map "o" (quote Buffer-menu-other-window)) (define-key map "" (quote Buffer-menu-switch-other-window)) (define-key map "s" (quote Buffer-menu-save)) (define-key map "d" (quote Buffer-menu-delete)) (define-key map "k" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete-backwards)) (define-key map "x" (quote Buffer-menu-execute)) (define-key map " " (quote next-line)) (define-key map "" (quote Buffer-menu-backup-unmark)) (define-key map "~" (quote Buffer-menu-not-modified)) (define-key map "u" (quote Buffer-menu-unmark)) (define-key map "\377" (quote Buffer-menu-unmark-all-buffers)) (define-key map "U" (quote Buffer-menu-unmark-all)) (define-key map "m" (quote Buffer-menu-mark)) (define-key map "t" (quote Buffer-menu-visit-tags-table)) (define-key map "%" (quote Buffer-menu-toggle-read-only)) (define-key map "b" (quote Buffer-menu-bury)) (define-key map "V" (quote Buffer-menu-view)) (define-key map "T" (quote Buffer-menu-toggle-files-only)) (define-key map (kbd "M-s a C-s") (quote Buffer-menu-isearch-buffers)) (define-key map (kbd "M-s a M-C-s") (quote Buffer-menu-isearch-buffers-regexp)) (define-key map (kbd "M-s a C-o") (quote Buffer-menu-multi-occur)) (define-key map [mouse-2] (quote Buffer-menu-mouse-select)) (define-key map [follow-link] (quote mouse-face)) (define-key map [menu-bar Buffer-menu-mode] (cons (purecopy "Buffer-Menu") menu-map)) (bindings--define-key menu-map [quit] (quote (menu-item "Quit" quit-window :help "Remove the buffer menu from the display"))) (bindings--define-key menu-map [rev] (quote (menu-item "Refresh" revert-buffer :help "Refresh the *Buffer List* buffer contents"))) (bindings--define-key menu-map [s0] menu-bar-separator) (bindings--define-key menu-map [tf] (quote (menu-item "Show Only File Buffers" Buffer-menu-toggle-files-only :button (:toggle . Buffer-menu-files-only) :help "Toggle whether the current buffer-menu displays only file buffers"))) (bindings--define-key menu-map [s1] menu-bar-separator) (bindings--define-key menu-map [sel] (quote (menu-item "Select Marked" Buffer-menu-select :help "Select this line's buffer; also display buffers marked with `>'"))) (bindings--define-key menu-map [bm2] (quote (menu-item "Select Two" Buffer-menu-2-window :help "Select this line's buffer, with previous buffer in second window"))) (bindings--define-key menu-map [bm1] (quote (menu-item "Select Current" Buffer-menu-1-window :help "Select this line's buffer, alone, in full frame"))) (bindings--define-key menu-map [ow] (quote (menu-item "Select in Other Window" Buffer-menu-other-window :help "Select this line's buffer in other window, leaving buffer menu visible"))) (bindings--define-key menu-map [tw] (quote (menu-item "Select in Current Window" Buffer-menu-this-window :help "Select this line's buffer in this window"))) (bindings--define-key menu-map [s2] menu-bar-separator) (bindings--define-key menu-map [is] (quote (menu-item "Regexp Isearch Marked Buffers..." Buffer-menu-isearch-buffers-regexp :help "Search for a regexp through all marked buffers using Isearch"))) (bindings--define-key menu-map [ir] (quote (menu-item "Isearch Marked Buffers..." Buffer-menu-isearch-buffers :help "Search for a string through all marked buffers using Isearch"))) (bindings--define-key menu-map [mo] (quote (menu-item "Multi Occur Marked Buffers..." Buffer-menu-multi-occur :help "Show lines matching a regexp in marked buffers using Occur"))) (bindings--define-key menu-map [s3] menu-bar-separator) (bindings--define-key menu-map [by] (quote (menu-item "Bury" Buffer-menu-bury :help "Bury the buffer listed on this line"))) (bindings--define-key menu-map [vt] (quote (menu-item "Set Unmodified" Buffer-menu-not-modified :help "Mark buffer on this line as unmodified (no changes to save)"))) (bindings--define-key menu-map [ex] (quote (menu-item "Execute" Buffer-menu-execute :help "Save and/or delete buffers marked with s or k commands"))) (bindings--define-key menu-map [s4] menu-bar-separator) (bindings--define-key menu-map [delb] (quote (menu-item "Mark for Delete and Move Backwards" Buffer-menu-delete-backwards :help "Mark buffer on this line to be deleted by x command and move up one line"))) (bindings--define-key menu-map [del] (quote (menu-item "Mark for Delete" Buffer-menu-delete :help "Mark buffer on this line to be deleted by x command"))) (bindings--define-key menu-map [sv] (quote (menu-item "Mark for Save" Buffer-menu-save :help "Mark buffer on this line to be saved by x command"))) (bindings--define-key menu-map [umk] (quote (menu-item "Unmark" Buffer-menu-unmark :help "Cancel all requested operations on buffer on this line and move down"))) (bindings--define-key menu-map [umkab] (quote (menu-item "Remove marks..." Buffer-menu-unmark-all-buffers :help "Cancel a requested operation on all buffers"))) (bindings--define-key menu-map [umka] (quote (menu-item "Unmark all" Buffer-menu-unmark-all :help "Cancel all requested operations on buffers"))) (bindings--define-key menu-map [mk] (quote (menu-item "Mark" Buffer-menu-mark :help "Mark buffer on this line for being displayed by v command"))) map)) nil [3390 9249])
            ("define-obsolete-variable-alias" code nil nil [9251 9338])
            ("define-derived-mode" code nil nil [9340 12012])
            ("buffer-menu" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12014 12963])
            ("buffer-menu-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12965 13465])
            ("list-buffers" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13482 13920])
            ("Buffer-menu-toggle-files-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13922 14434])
            ("defalias" code nil nil [14436 14485])
            ("Buffer-menu-buffer" function (:arguments ("error-if-non-existent-p")) nil [14489 15003])
            ("Buffer-menu-no-header" function nil nil [15005 15198])
            ("Buffer-menu-beginning" function nil nil [15200 15316])
            ("Buffer-menu-mark" function (:user-visible-flag t) nil [15369 15644])
            ("Buffer-menu-unmark" function
               (:user-visible-flag t
                :arguments ("backup"))
                nil [15646 15878])
            ("Buffer-menu-unmark-all-buffers" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [15880 16566])
            ("Buffer-menu-unmark-all" function (:user-visible-flag t) nil [16568 16704])
            ("Buffer-menu-backup-unmark" function (:user-visible-flag t) nil [16706 16875])
            ("Buffer-menu--unmark" function nil nil [16877 17113])
            ("Buffer-menu-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17115 17847])
            ("Buffer-menu-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17849 18173])
            ("Buffer-menu-save" function (:user-visible-flag t) nil [18175 18448])
            ("Buffer-menu-not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18450 18794])
            ("Buffer-menu-execute" function (:user-visible-flag t) nil [18796 19799])
            ("Buffer-menu-select" function (:user-visible-flag t) nil [19801 20596])
            ("Buffer-menu-marked-buffers" function (:arguments ("unmark")) nil [20598 21025])
            ("Buffer-menu-isearch-buffers" function (:user-visible-flag t) nil [21027 21202])
            ("Buffer-menu-isearch-buffers-regexp" function (:user-visible-flag t) nil [21204 21393])
            ("Buffer-menu-multi-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [21395 21623])
            ("Buffer-menu-visit-tags-table" function (:user-visible-flag t) nil [21627 21903])
            ("Buffer-menu-1-window" function (:user-visible-flag t) nil [21905 22105])
            ("Buffer-menu-this-window" function (:user-visible-flag t) nil [22107 22247])
            ("Buffer-menu-other-window" function (:user-visible-flag t) nil [22249 22433])
            ("Buffer-menu-switch-other-window" function (:user-visible-flag t) nil [22435 22627])
            ("Buffer-menu-2-window" function (:user-visible-flag t) nil [22629 22940])
            ("Buffer-menu-toggle-read-only" function (:user-visible-flag t) nil [22942 23307])
            ("Buffer-menu-bury" function (:user-visible-flag t) nil [23309 23791])
            ("Buffer-menu-view" function (:user-visible-flag t) nil [23793 23917])
            ("Buffer-menu-view-other-window" function (:user-visible-flag t) nil [23919 24087])
            ("list-buffers-noselect" function (:arguments ("files-only" "buffer-list")) nil [24152 24818])
            ("Buffer-menu-mouse-select" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [24820 25242])
            ("list-buffers--refresh" function (:arguments ("buffer-list" "old-buffer")) nil [25244 27053])
            ("tabulated-list-entry-size->" function (:arguments ("entry1" "entry2")) nil [27055 27201])
            ("Buffer-menu--pretty-name" function (:arguments ("name")) nil [27203 27335])
            ("Buffer-menu--pretty-file-name" function (:arguments ("file")) nil [27337 27480]))          
      :file "buff-menu.el.gz"
      :pointmax 27509
      :fsize 7036
      :lastmodtime '(23624 29139 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [1129 1246])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux)))) nil [1263 1395])
            ("lpr" customgroup (:user-visible-flag t) nil [1398 1471])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [1489 2502])
            ("lpr-switches" variable nil nil [2519 2787])
            ("lpr-add-switches" variable (:default-value (memq system-type (quote (berkeley-unix gnu/linux)))) nil [2789 3107])
            ("lpr-printer-switch" variable (:default-value (if lpr-lp-system "-d " "-P")) nil [3109 3467])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [3484 4107])
            ("lpr-headers-switches" variable nil nil [4240 4583])
            ("print-region-function" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (function w32-direct-print-region-function) (function call-process-region))) nil [4585 4879])
            ("lpr-page-header-program" variable (:default-value "pr") nil [4881 5006])
            ("lpr-page-header-switches" variable (:default-value (quote ("-h" "%s" "-F"))) nil [5120 5511])
            ("lpr-buffer" function (:user-visible-flag t) nil [5528 5870])
            ("print-buffer" function (:user-visible-flag t) nil [5887 6597])
            ("lpr-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [6614 6992])
            ("print-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [7009 7759])
            ("print-region-1" function (:arguments ("start" "end" "switches" "page-headers")) nil [7761 9608])
            ("lpr-print-region" function (:arguments ("start" "end" "switches" "name")) nil [9610 11346])
            ("print-region-new-buffer" function (:arguments ("ostart" "oend")) nil [11539 11872])
            ("printify-region" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [11874 12481])
            ("lpr-eval-switch" function (:arguments ("arg")) nil [12627 12806])
            ("lpr-flatten-list" function (:arguments ("list")) nil [13097 13162])
            ("lpr-flatten-list-1" function (:arguments ("list")) nil [13164 13346])
            ("lpr" package nil nil [13348 13362]))          
      :file "lpr.el.gz"
      :pointmax 13385
      :fsize 4341
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pr-version" variable
               (:constant-flag t
                :default-value "6.9.3")
                nil [349 545])
            ("lpr" include nil nil [40952 40966])
            ("ps-print" include nil nil [40967 40986])
            ("and" code nil nil [40989 41106])
            ("pr-cygwin-system" variable
               (:constant-flag t
                :default-value (and lpr-windows-system (getenv "OSTYPE") (string-match "cygwin" (getenv "OSTYPE"))))
                nil [41109 41230])
            ("when" code nil nil [41381 41870])
            ("when" code nil nil [42117 43562])
            ("defalias" code nil nil [44607 44652])
            ("defalias" code nil nil [44559 44604])
            ("defalias" code nil nil [44511 44556])
            ("defalias" code nil nil [44463 44508])
            ("defalias" code nil nil [44415 44460])
            ("defalias" code nil nil [44367 44412])
            ("defalias" code nil nil [44319 44364])
            ("defalias" code nil nil [44271 44316])
            ("defalias" code nil nil [44223 44268])
            ("defalias" code nil nil [44175 44220])
            ("defalias" code nil nil [44127 44172])
            ("defalias" code nil nil [44079 44124])
            ("defalias" code nil nil [44031 44076])
            ("defalias" code nil nil [43983 44028])
            ("defalias" code nil nil [43935 43980])
            ("pr-ps-utility-alist" variable nil nil [43850 43878])
            ("pr-txt-printer-alist" variable nil nil [43818 43847])
            ("pr-ps-printer-alist" variable nil nil [43787 43815])
            ("pr-menu-lock" variable nil nil [43763 43784])
            ("pr-menu-char-width" variable nil nil [43733 43760])
            ("pr-menu-char-height" variable nil nil [43702 43730])
            ("pr-auto-region" variable nil nil [43676 43699])
            ("pr-path-style" variable nil nil [43651 43673])
            ("pr-menu-print-item" variable (:default-value "print") nil [44717 44849])
            ("pr-ps-printer-menu-modified" variable (:default-value t) nil [44851 44971])
            ("pr-txt-printer-menu-modified" variable (:default-value t) nil [44973 45094])
            ("pr-ps-utility-menu-modified" variable (:default-value t) nil [45096 45215])
            ("pr-even-or-odd-alist" variable
               (:constant-flag t
                :default-value (quote ((nil . "Print All Pages") (even-page . "Print Even Pages") (odd-page . "Print Odd Pages") (even-sheet . "Print Even Sheets") (odd-sheet . "Print Odd Sheets"))))
                nil [45217 45438])
            ("cond" code nil nil [45618 51060])
            ("unless" code nil nil [51287 51384])
            ("cond" code nil nil [51387 58605])
            ("pr-dosify-file-name" function
               (:user-visible-flag t
                :arguments ("path"))
                nil [58736 58956])
            ("pr-unixify-file-name" function
               (:user-visible-flag t
                :arguments ("path"))
                nil [58959 59180])
            ("pr-standard-file-name" function (:arguments ("path")) nil [59183 59551])
            ("pr-alist-custom-set" function (:arguments ("symbol" "value")) nil [59659 59889])
            ("pr-ps-utility-custom-set" function (:arguments ("symbol" "value")) nil [59892 60101])
            ("pr-ps-name-custom-set" function (:arguments ("symbol" "value")) nil [60104 60319])
            ("pr-txt-name-custom-set" function (:arguments ("symbol" "value")) nil [60322 60533])
            ("printing" customgroup (:user-visible-flag t) nil [60632 60851])
            ("pr-path-style" variable (:default-value (if (and (not pr-cygwin-system) lpr-windows-system) (quote windows) (quote unix))) nil [60854 61261])
            ("pr-path-alist" variable (:default-value (quote ((unix PATH) (cygwin PATH) (windows PATH)))) nil [61264 63365])
            ("pr-txt-name" variable (:default-value (quote default)) nil [63368 63834])
            ("pr-txt-printer-alist" variable (:default-value (list (list (quote default) lpr-command nil (cond ((boundp (quote printer-name)) printer-name) (lpr-windows-system "PRN") (t nil))))) nil [63837 68180])
            ("pr-ps-name" variable (:default-value (quote default)) nil [68183 68659])
            ("pr-ps-printer-alist" variable (:default-value (list (list (quote default) lpr-command nil (cond (lpr-windows-system nil) (lpr-lp-system "-d") (t "-P")) (or (getenv "PRINTER") (getenv "LPDEST") ps-printer-name)))) nil [68662 78261])
            ("pr-temp-dir" variable (:default-value (pr-dosify-file-name (if (boundp (quote temporary-file-directory)) (symbol-value (quote temporary-file-directory)) (file-name-as-directory (or (getenv "TMPDIR") (getenv "TMP") (getenv "TEMP") (cond (lpr-windows-system "c:/temp") (t "/tmp"))))))) nil [78264 78794])
            ("pr-ps-temp-file" variable (:default-value "prspool-") nil [78797 79004])
            ("pr-file-modes" variable (:default-value 384) nil [79172 79434])
            ("pr-gv-command" variable (:default-value (if lpr-windows-system "gsview32.exe" "gv")) nil [79437 80363])
            ("pr-gs-command" variable (:default-value (if lpr-windows-system "gswin32.exe" "gs")) nil [80366 80909])
            ("pr-gs-switches" variable (:default-value (if lpr-windows-system (quote ("-q -dNOPAUSE -Ic:/gs/gs5.50;c:/gs/gs5.50/fonts")) (quote ("-q -dNOPAUSE -I/usr/share/ghostscript/5.10")))) nil [80912 82170])
            ("pr-gs-device" variable (:default-value (if lpr-windows-system "mswinpr2" "uniprint")) nil [82173 82538])
            ("pr-gs-resolution" variable (:default-value 300) nil [82541 82822])
            ("pr-print-using-ghostscript" variable nil nil [82825 83162])
            ("pr-faces-p" variable nil nil [83165 83273])
            ("pr-spool-p" variable nil nil [83276 83384])
            ("pr-file-landscape" variable nil nil [83387 83522])
            ("pr-file-duplex" variable nil nil [83525 83647])
            ("pr-file-tumble" variable nil nil [83650 83934])
            ("pr-auto-region" variable (:default-value t) nil [83937 84304])
            ("pr-auto-mode" variable (:default-value t) nil [84307 84711])
            ("pr-mode-alist" variable (:default-value (quote ((mh-folder-mode pr-mh-lpr-1 pr-mh-print-1 2 (ps-article-author ps-article-subject) ("/pagenumberstring load" pr-article-date) nil) (mh-letter-mode pr-mh-lpr-2 pr-mh-print-2 2 (ps-article-author ps-article-subject) ("/pagenumberstring load" pr-article-date) nil) (rmail-summary-mode pr-rmail-lpr pr-rmail-print 3 (ps-article-subject ps-article-author buffer-name) nil nil) (rmail-mode pr-rmail-lpr pr-rmail-print 3 (ps-article-subject ps-article-author buffer-name) nil nil) (gnus-summary-mode pr-gnus-lpr pr-gnus-print 3 (ps-article-subject ps-article-author gnus-newsgroup-name) nil nil) (gnus-article-mode pr-gnus-lpr pr-gnus-print 3 (ps-article-subject ps-article-author gnus-newsgroup-name) nil nil) (Info-mode pr-mode-lpr pr-mode-print 2 (ps-info-node ps-info-file) nil nil) (vm-mode pr-vm-lpr pr-vm-print 3 (ps-article-subject ps-article-author buffer-name) nil nil)))) nil [84714 91201])
            ("pr-ps-utility" variable (:default-value (quote mpage)) nil [91204 91788])
            ("pr-ps-utility-alist" variable (:default-value (quote ((mpage "mpage" nil "-b%s" "-%d" "-l" "-t" "-T" ">" nil) (psnup "psnup" ("-q") "-P%s" "-%d" "-l" nil nil " " nil (inherits-from: . no-duplex))))) nil [91791 98135])
            ("pr-menu-lock" variable (:default-value t) nil [98138 98323])
            ("pr-menu-char-height" variable (:default-value (pr-menu-char-height)) nil [98326 98646])
            ("pr-menu-char-width" variable (:default-value (pr-menu-char-width)) nil [98649 98969])
            ("pr-setting-database" variable (:default-value (quote ((no-duplex nil nil nil (pr-file-duplex) (pr-file-tumble))))) nil [98972 102909])
            ("pr-visible-entry-list" variable (:default-value (quote (postscript text postscript-options postscript-process printing help))) nil [102912 104881])
            ("pr-delete-temp-file" variable (:default-value t) nil [104884 105157])
            ("pr-list-directory" variable nil nil [105160 105623])
            ("pr-buffer-name" variable (:default-value "*Printing Interface*") nil [105626 105807])
            ("pr-buffer-name-ignore" variable (:default-value (list (regexp-quote pr-buffer-name) "^ .*$")) nil [105810 106223])
            ("pr-buffer-verbose" variable (:default-value t) nil [106226 106397])
            ("pr-txt-command" variable nil nil [106500 106601])
            ("pr-txt-switches" variable nil nil [106604 106733])
            ("pr-txt-printer" variable nil nil [106736 106822])
            ("pr-ps-command" variable nil nil [106825 106930])
            ("pr-ps-switches" variable nil nil [106933 107066])
            ("pr-ps-printer-switch" variable nil nil [107069 107173])
            ("pr-ps-printer" variable nil nil [107176 107266])
            ("pr-save-file-modes" function (:arguments ("body")) nil [107357 107562])
            ("pr-visible-p" function (:arguments ("key")) nil [107658 107722])
            ("pr-mode-alist-p" function nil nil [107725 107794])
            ("pr-auto-mode-p" function nil nil [107797 107864])
            ("pr-using-ghostscript-p" function nil nil [107867 107955])
            ("defalias" code nil nil [107958 108170])
            ("pr-menu-spec" variable
               (:constant-flag t
                :default-value (let ((pr-:active (if (featurep (quote xemacs)) :included :active)) (pr-:help (if (featurep (quote xemacs)) (quote ignore) (function (lambda (text) (list :help text)))))) (\` (["Printing Interface" pr-interface (\,@ (funcall pr-:help "Use buffer interface instead of menu interface"))] "--" ("PostScript Preview" :included (pr-visible-p (quote postscript)) (\,@ (funcall pr-:help "Preview PostScript instead of sending to printer")) ("Directory" (\, pr-:active) (not pr-spool-p) ["1-up" (pr-ps-directory-preview 1 nil nil t) t] ["2-up" (pr-ps-directory-preview 2 nil nil t) t] ["4-up" (pr-ps-directory-preview 4 nil nil t) t] ["Other..." (pr-ps-directory-preview nil nil nil t) :keys "\\[pr-ps-buffer-preview]"]) ("Buffer" (\, pr-:active) (not pr-spool-p) ["1-up" (pr-ps-buffer-preview 1 t) t] ["2-up" (pr-ps-buffer-preview 2 t) t] ["4-up" (pr-ps-buffer-preview 4 t) t] ["Other..." (pr-ps-buffer-preview nil t) :keys "\\[pr-ps-buffer-preview]"]) ("Region" (\, pr-:active) (and (not pr-spool-p) (ps-mark-active-p)) ["1-up" (pr-ps-region-preview 1 t) t] ["2-up" (pr-ps-region-preview 2 t) t] ["4-up" (pr-ps-region-preview 4 t) t] ["Other..." (pr-ps-region-preview nil t) :keys "\\[pr-ps-region-preview]"]) ("Mode" (\, pr-:active) (and (not pr-spool-p) (pr-mode-alist-p)) ["1-up" (pr-ps-mode-preview 1 t) t] ["2-up" (pr-ps-mode-preview 2 t) t] ["4-up" (pr-ps-mode-preview 4 t) t] ["Other..." (pr-ps-mode-preview nil t) :keys "\\[pr-ps-mode-preview]"]) ("File" ["No Preprocessing..." (call-interactively (quote pr-ps-file-preview)) :keys "\\[pr-ps-file-preview]" (\,@ (funcall pr-:help "Preview PostScript file"))] "--" ["PostScript Utility" pr-update-menus :active pr-ps-utility-alist (\,@ (funcall pr-:help "Select PostScript utility"))] "--" ["1-up..." (pr-ps-file-up-preview 1 t t) pr-ps-utility-alist] ["2-up..." (pr-ps-file-up-preview 2 t t) pr-ps-utility-alist] ["4-up..." (pr-ps-file-up-preview 4 t t) pr-ps-utility-alist] ["Other..." (pr-ps-file-up-preview nil t t) :keys "\\[pr-ps-file-up-preview]" :active pr-ps-utility-alist] "--" ["Landscape" pr-toggle-file-landscape-menu :style toggle :selected pr-file-landscape (\,@ (funcall pr-:help "Toggle landscape for PostScript file")) :active pr-ps-utility-alist] ["Duplex" pr-toggle-file-duplex-menu :style toggle :selected pr-file-duplex (\,@ (funcall pr-:help "Toggle duplex for PostScript file")) :active pr-ps-utility-alist] ["Tumble" pr-toggle-file-tumble-menu :style toggle :selected pr-file-tumble (\,@ (funcall pr-:help "Toggle tumble for PostScript file")) :active (and pr-file-duplex pr-ps-utility-alist)]) ["Despool..." (call-interactively (quote pr-despool-preview)) :active pr-spool-p :keys "\\[pr-despool-preview]" (\,@ (funcall pr-:help "Despool PostScript buffer to printer or file (C-u)"))]) ("PostScript Print" :included (pr-visible-p (quote postscript)) (\,@ (funcall pr-:help "Send PostScript to printer or file (C-u)")) ("Directory" ["1-up" (pr-ps-directory-ps-print 1 nil nil t) t] ["2-up" (pr-ps-directory-ps-print 2 nil nil t) t] ["4-up" (pr-ps-directory-ps-print 4 nil nil t) t] ["Other..." (pr-ps-directory-ps-print nil nil nil t) :keys "\\[pr-ps-buffer-ps-print]"]) ("Buffer" ["1-up" (pr-ps-buffer-ps-print 1 t) t] ["2-up" (pr-ps-buffer-ps-print 2 t) t] ["4-up" (pr-ps-buffer-ps-print 4 t) t] ["Other..." (pr-ps-buffer-ps-print nil t) :keys "\\[pr-ps-buffer-ps-print]"]) ("Region" (\, pr-:active) (ps-mark-active-p) ["1-up" (pr-ps-region-ps-print 1 t) t] ["2-up" (pr-ps-region-ps-print 2 t) t] ["4-up" (pr-ps-region-ps-print 4 t) t] ["Other..." (pr-ps-region-ps-print nil t) :keys "\\[pr-ps-region-ps-print]"]) ("Mode" (\, pr-:active) (pr-mode-alist-p) ["1-up" (pr-ps-mode-ps-print 1 t) t] ["2-up" (pr-ps-mode-ps-print 2 t) t] ["4-up" (pr-ps-mode-ps-print 4 t) t] ["Other..." (pr-ps-mode-ps-print nil t) :keys "\\[pr-ps-mode-ps-print]"]) ("File" ["No Preprocessing..." (call-interactively (quote pr-ps-file-ps-print)) :keys "\\[pr-ps-file-ps-print]" (\,@ (funcall pr-:help "Send PostScript file to printer"))] "--" ["PostScript Utility" pr-update-menus :active pr-ps-utility-alist (\,@ (funcall pr-:help "Select PostScript utility"))] "--" ["1-up..." (pr-ps-file-up-ps-print 1 t t) pr-ps-utility-alist] ["2-up..." (pr-ps-file-up-ps-print 2 t t) pr-ps-utility-alist] ["4-up..." (pr-ps-file-up-ps-print 4 t t) pr-ps-utility-alist] ["Other..." (pr-ps-file-up-ps-print nil t t) :keys "\\[pr-ps-file-up-ps-print]" :active pr-ps-utility-alist] "--" ["Landscape" pr-toggle-file-landscape-menu :style toggle :selected pr-file-landscape (\,@ (funcall pr-:help "Toggle landscape for PostScript file")) :active pr-ps-utility-alist] ["Duplex" pr-toggle-file-duplex-menu :style toggle :selected pr-file-duplex (\,@ (funcall pr-:help "Toggle duplex for PostScript file")) :active pr-ps-utility-alist] ["Tumble" pr-toggle-file-tumble-menu :style toggle :selected pr-file-tumble (\,@ (funcall pr-:help "Toggle tumble for PostScript file")) :active (and pr-file-duplex pr-ps-utility-alist)]) ["Despool..." (call-interactively (quote pr-despool-ps-print)) :active pr-spool-p :keys "\\[pr-despool-ps-print]" (\,@ (funcall pr-:help "Despool PostScript buffer to printer or file (C-u)"))]) ["PostScript Printers" pr-update-menus :active pr-ps-printer-alist :included (pr-visible-p (quote postscript)) (\,@ (funcall pr-:help "Select PostScript printer"))] "--" ("Printify" :included (pr-visible-p (quote text)) (\,@ (funcall pr-:help "Replace non-printing chars with printable representations.")) ["Directory" pr-printify-directory t] ["Buffer" pr-printify-buffer t] ["Region" pr-printify-region (ps-mark-active-p)]) ("Print" :included (pr-visible-p (quote text)) (\,@ (funcall pr-:help "Send text to printer")) ["Directory" pr-txt-directory t] ["Buffer" pr-txt-buffer t] ["Region" pr-txt-region (ps-mark-active-p)] ["Mode" pr-txt-mode (pr-mode-alist-p)]) ["Text Printers" pr-update-menus :active pr-txt-printer-alist :included (pr-visible-p (quote text)) (\,@ (funcall pr-:help "Select text printer"))] "--" ["Landscape" pr-toggle-landscape-menu :style toggle :selected ps-landscape-mode :included (pr-visible-p (quote postscript-options))] ["Print Header" pr-toggle-header-menu :style toggle :selected ps-print-header :included (pr-visible-p (quote postscript-options))] ["Print Header Frame" pr-toggle-header-frame-menu :style toggle :selected ps-print-header-frame :active ps-print-header :included (pr-visible-p (quote postscript-options))] ["Line Number" pr-toggle-line-menu :style toggle :selected ps-line-number :included (pr-visible-p (quote postscript-options))] ["Zebra Stripes" pr-toggle-zebra-menu :style toggle :selected ps-zebra-stripes :included (pr-visible-p (quote postscript-options))] ["Duplex" pr-toggle-duplex-menu :style toggle :selected ps-spool-duplex :included (pr-visible-p (quote postscript-options))] ["Tumble" pr-toggle-tumble-menu :style toggle :selected ps-spool-tumble :active ps-spool-duplex :included (pr-visible-p (quote postscript-options))] ["Upside-Down" pr-toggle-upside-down-menu :style toggle :selected ps-print-upside-down :included (pr-visible-p (quote postscript-options))] ("Print All Pages" :included (pr-visible-p (quote postscript-options)) (\,@ (funcall pr-:help "Select odd/even pages/sheets to print")) ["All Pages" (pr-even-or-odd-pages nil) :style radio :selected (eq ps-even-or-odd-pages nil)] ["Even Pages" (pr-even-or-odd-pages (quote even-page)) :style radio :selected (eq ps-even-or-odd-pages (quote even-page))] ["Odd Pages" (pr-even-or-odd-pages (quote odd-page)) :style radio :selected (eq ps-even-or-odd-pages (quote odd-page))] ["Even Sheets" (pr-even-or-odd-pages (quote even-sheet)) :style radio :selected (eq ps-even-or-odd-pages (quote even-sheet))] ["Odd Sheets" (pr-even-or-odd-pages (quote odd-sheet)) :style radio :selected (eq ps-even-or-odd-pages (quote odd-sheet))]) "--" ["Spool Buffer" pr-toggle-spool-menu :style toggle :selected pr-spool-p :included (pr-visible-p (quote postscript-process)) (\,@ (funcall pr-:help "Toggle PostScript spooling"))] ["Print with faces" pr-toggle-faces-menu :style toggle :selected pr-faces-p :included (pr-visible-p (quote postscript-process)) (\,@ (funcall pr-:help "Toggle PostScript printing with faces"))] ["Print via Ghostscript" pr-toggle-ghostscript-menu :style toggle :selected pr-print-using-ghostscript :included (pr-visible-p (quote postscript-process)) (\,@ (funcall pr-:help "Toggle PostScript generation using ghostscript"))] "--" ["Auto Region" pr-toggle-region-menu :style toggle :selected pr-auto-region :included (pr-visible-p (quote printing))] ["Auto Mode" pr-toggle-mode-menu :style toggle :selected pr-auto-mode :included (pr-visible-p (quote printing))] ["Menu Lock" pr-toggle-lock-menu :style toggle :selected pr-menu-lock :included (pr-visible-p (quote printing))] "--" ("Customize" :included (pr-visible-p (quote help)) ["printing" pr-customize t] ["ps-print" ps-print-customize t] ["lpr" lpr-customize t]) ("Show Settings" :included (pr-visible-p (quote help)) ["printing" pr-show-pr-setup t] ["ps-print" pr-show-ps-setup t] ["lpr" pr-show-lpr-setup t]) ["Help" pr-help :active t :included (pr-visible-p (quote help))]))))
                nil [108173 118481])
            ("pr-menu-bind" function (:user-visible-flag t) nil [118484 118736])
            ("let" code nil nil [118754 119506])
            ("pr-help-message" variable
               (:constant-flag t
                :default-value (concat "printing.el version " pr-version "    ps-print.el version " ps-print-version "


Menu Layout
-----------

The `printing' menu (Tools/Printing or File/Print) has the following layout:

       +-----------------------------+
A   0  |   Printing Interface        |
       +-----------------------------+       +-A---------+     +-B------+
I   1  |   PostScript Preview       >|-------|Directory >|-----|1-up    |
    2  |   PostScript Print         >|---- A |Buffer    >|-- B |2-up    |
    3  |   PostScript Printer: name >|---- C |Region    >|-- B |4-up    |
       +-----------------------------+       |Mode      >|-- B |Other...|
II  4  |   Printify                 >|-----\\ |File      >|--\\  +--------+
    5  |   Print                    >|---\\ | |Despool... |  |
    6  |   Text Printer: name       >|-\\ | | +-----------+  |
       +-----------------------------+ | | | +---------+   +------------+
III 7  |[ ]Landscape                 | | | \\-|Directory|   | No Prep... | Ia
    8  |[ ]Print Header              | | |   |Buffer   |   +------------+ Ib
    9  |[ ]Print Header Frame        | | |   |Region   |   |   name    >|- C
    10 |[ ]Line Number               | | |   +---------+   +------------+
    11 |[ ]Zebra Stripes             | | |   +---------+   |   1-up...  | Ic
    12 |[ ]Duplex                    | | \\---|Directory|   |   2-up...  |
    13 |[ ]Tumble                    | \\--\\  |Buffer   |   |   4-up...  |
    14 |[ ]Upside-Down               |    |  |Region   |   |   Other... |
    15 |   Print All Pages          >|--\\ |  |Mode     |   +------------+
       +-----------------------------+  | |  +---------+   |[ ]Landscape| Id
IV  16 |[ ]Spool Buffer              |  | |  +-C-------+   |[ ]Duplex   | Ie
    17 |[ ]Print with faces          |  | \\--|( )name A|   |[ ]Tumble   | If
    18 |[ ]Print via Ghostscript     |  |    |( )name B|   +------------+
       +-----------------------------+  |    |...      |
V   19 |[ ]Auto Region               |  |    |(*)name  |
    20 |[ ]Auto Mode                 |  |    |...      |
    21 |[ ]Menu Lock                 |  |    +---------+   +--------------+
       +-----------------------------+  \\------------------|(*)All Pages  |
VI  22 |   Customize                >|--- D  +-D------+    |( )Even Pages |
    23 |   Show Settings            >|-------|printing|    |( )Odd Pages  |
    24 |   Help                      |       |ps-print|    |( )Even Sheets|
       +-----------------------------+       |lpr     |    |( )Odd Sheets |
					     +--------+    +--------------+

See `pr-visible-entry-list' for hiding some parts of the menu.

The menu has the following sections:

A. Interface:

   0. You can use a buffer interface instead of menus.  It looks like the
      customization buffer.  Basically, it has the same options found in the
      menu and some extra options, all this on a buffer.

I. PostScript printing:

   1. You can generate a PostScript file (if you type C-u before activating
      menu) or PostScript temporary file for a directory, a buffer, a region
      or a major mode, choosing 1-up, 2-up, 4-up or any other n-up printing;
      after file generation, ghostview is activated using the file generated
      as argument.  This option is disabled if spooling is on (option 16).
      Also, if you already have a PostScript file you can preview it.
      Instead of previewing each buffer, region or major mode at once, you
      can save temporarily the PostScript code generated in a buffer and
      preview it later.  The option `Despool...' despools the PostScript
      spooling buffer in a temporary file and uses ghostview to preview it.
      If you type C-u before choosing this option, the PostScript code
      generated is saved in a file instead of saving in a temporary file.  To
      spool the PostScript code generated you need to turn on the option 16.
      The option `Despool...' is enabled if spooling is on (option 16).

      NOTE 1: It's possible to customize a major mode printing, just declare
	      the customization in `pr-mode-alist' and invoke some of
	      `*-mode*' commands or select Mode option in Printing menu.  An
	      example for major mode usage is when you're using gnus (or mh,
	      or rmail, etc.) and you're in the *Summary* buffer, if you
	      forget to switch to the *Article* buffer before printing,
	      you'll get a nicely formatted list of article subjects shows
	      up at the printer.  With major mode printing you don't need to
	      switch from gnus *Summary* buffer first.

      NOTE 2: There are the following options for PostScript file processing:
	      Ia. Print the file *No Preprocessing*, that is, send it
		  directly to PostScript printer.
	      Ib. PostScript utility processing selection.
		  See `pr-ps-utility-alist' and `pr-setting-database' for
		  documentation.
	      Ic. Do n-up processing before printing.
	      Id. Toggle on/off landscape for PostScript file processing.
	      Ie. Toggle on/off duplex for PostScript file processing.
	      If. Toggle on/off tumble for PostScript file processing.

      NOTE 3: Don't forget to download and install the utilities declared on
	      `pr-ps-utility-alist'.

   2. Operate the same way as option 1, but it sends directly the PostScript
      code (or put in a file, if you've typed C-u) or it uses ghostscript to
      print the PostScript file generated.  It depends on option 18, if it's
      turned on, it uses ghostscript; otherwise, it sends directly to
      printer.  If spooling is on (option 16), the PostScript code is saved
      temporarily in a buffer instead of printing it or saving it in a file.
      Also, if you already have a PostScript file you can print it.
      Instead of printing each buffer, region or major mode at once, you can
      save temporarily the PostScript code generated in a buffer and print it
      later.  The option `Despool...' despools the PostScript spooling buffer
      directly on a printer.  If you type C-u before choosing this option,
      the PostScript code generated is saved in a file instead of sending it to
      the printer.  To spool the PostScript code generated you need to turn on
      option 16.  This option is enabled if spooling is on (option 16).
      See also the NOTE 1, NOTE 2 and NOTE 3 on option 1.

   3. You can select a new PostScript printer to send PostScript code
      generated.  For selection it's used all PostScript printers defined
      in `pr-ps-printer-alist' variable (see it for documentation).
      See also `pr-setting-database'.

II. Text printing:

   4. If you have control characters (character code from \\000 to \\037) in a
      buffer and you want to print them in a text printer, select this
      option.  All control characters in your buffer or region will be
      replaced by a printable representation.  The printable representations
      use ^ (for ASCII control characters) or hex.  The characters tab,
      linefeed, space, return and formfeed are not affected.
      You don't need to select this option if you use any option of section
      I, the PostScript engine treats control characters properly.

   5. If you want to print a directory, buffer, region or major mode in a
      text printer, select this option.  See also the NOTE 1 on option 1.

   6. You can select a new text printer to send text generated.  For
      selection it's used all text printers defined in `pr-txt-printer-alist'
      variable (see it for documentation).
      See also `pr-setting-database'.

III. PostScript page toggle options:

   7. If you want a PostScript landscape printing, turn on this option.

   8. If you want to have a header in each page in your PostScript code,
      turn on this option.

   9. If you want to draw a gaudy frame around the header, turn on this
      option.  This option is enabled if print header is on (option 8).

   10. If you want that the line number is printed in your PostScript code,
       turn on this option.

   11. If you want background zebra stripes in your PostScript code, turn on
       this option.

   12. If you want a duplex printing and your PostScript printer has this
       feature, turn on this option.

   13. If you turned on duplex printing, you can choose if you want to have a
       printing suitable for binding on the left or right (tumble off), or to
       have a printing suitable for binding at top or bottom (tumble on).
       This option is enabled if duplex is on (option 12).

   14. If you want a PostScript upside-down printing, turn on this option.

   15. With this option, you can choose if you want to print all pages, odd
       pages, even pages, odd sheets or even sheets.
       See also `ps-even-or-odd-pages'.

IV. PostScript processing toggle options:

   16. If you want to spool the PostScript code generated, turn on this
       option.  To spool the PostScript code generated use option 2.  You can
       despool later by choosing option 1 or 2, sub-option `Despool...'.

   17. If you use colors in your buffers and want to see these colors on your
       PostScript code generated, turn on this option.  If you have a
       black/white PostScript printer, these colors are displayed in gray
       scale by PostScript printer interpreter.

   18. If you don't have a PostScript printer to send PostScript files, turn
       on this option.  When this option is on, the ghostscript is used to
       print PostScript files.  In GNU or Unix system, if ghostscript is set
       as a PostScript filter, you don't need to turn on this option.

V. Printing customization:

   19. If you want that region is automagically detected, turn on this
       option.  Note that this will only work if you're using transient mark
       mode.  When this option is on, the `*-buffer*' commands will behave
       like `*-region*' commands, that is, `*-buffer*' commands will print
       only the region marked instead of all buffer.

   20. Turn this option on if you want that when current major-mode is
       declared in `pr-mode-alist', the `*-buffer*' and `*-region*' commands
       behave like `*-mode*' commands.

   21. If you want that Printing menu stays open while you are setting
       toggle options, turn on this option.  The variables
       `pr-menu-char-height' and `pr-menu-char-width' are used to guess the
       menu position, so don't forget to adjust these variables if menu
       position is not ok.

VI. Customization:

   22. Besides all options in section III, IV and V, you can customize much
       more PostScript options in `ps-print' option.  Or you can customize
       some `lpr' options for text printing.  Or customize `printing'
       options.

   23. Show current settings for `printing', `ps-print' or `lpr'.

   24. Quick help for printing menu layout.
"))
                nil [120007 130938])
            ("pr-interface-help-message" variable
               (:constant-flag t
                :default-value (concat "printing.el version " pr-version "    ps-print.el version " ps-print-version "


The printing interface buffer has the same functionality as the printing menu.
The major difference is that the states (like sending PostScript generated to a
file, n-up printing, etc.) are set and saved between printing buffer
activation.  Also, the landscape, duplex and tumble values are the same for
PostScript file and directory/buffer/region/mode processing; using menu, there
are different value sets for PostScript file and directory/buffer/region/mode
processing.

The printing interface buffer has the following sections:

1. Print:

   Here you can choose to print/preview a buffer, a directory or a PostScript
   file:

   1a. Buffer:

      * Buffer List:
	 Select a buffer from the current buffer list.

      * Region:
	 If it's on, this means that the selected buffer has an active region,
	 so you can turn on/off, as you wish.
	 If it's off when a buffer is selected, this means that the selected
	 buffer has no active region, so it'll not be possible to turn it on.
	 If you want to process the region, let this option on.
	 If you want to process the whole buffer, let this option off.

      * Mode:
	 If it's on, this means that the selected buffer major mode is declared
	 for major mode processing, so you can turn on/off, as you wish.
	 If it's off when a buffer is selected, this means that the selected
	 buffer major mode isn't declared for major mode processing, so it'll
	 not be possible to turn it on.
	 If you want the major mode processing, let this option on.
	 If you don't want the major mode processing, let this option off.

      NOTE 1: It's possible to customize a major mode printing, just declare
	      the customization in `pr-mode-alist' and invoke some of
	      `*-mode*' commands or select Mode option in Printing menu.  An
	      example for major mode usage is when you're using gnus (or mh,
	      or rmail, etc.) and you're in the *Summary* buffer, if you
	      forget to switch to the *Article* buffer before printing,
	      you'll get a nicely formatted list of article subjects shows
	      up at the printer.  With major mode printing you don't need to
	      switch from gnus *Summary* buffer first.

   1b. Directory:

      * Directory:
	 Specify a valid directory path.

      * File Regexp:
	 Specify a file name regexp.  All file names in the directory that
	 match with regexp will be printed/previewed.  An empty file name
	 regexp means to print/preview all files in the directory.

      * List Directory Entry:
	 If it's turned on, list directory entries besides file entries.

   1c. PostScript file:

      * PostScript File:
	 Specify an existent PostScript file to print/preview.

      * PostScript Utility:
	 Select a PostScript utility.
	 See `pr-ps-utility-alist' and `pr-setting-database' for documentation.

      NOTE 2: Don't forget to download and install the utilities declared on
	      `pr-ps-utility-alist'.

      * No Preprocessing:
	 If it's turned on, don't use the PostScript utility to preprocess the
	 PostScript file before printing/previewing.

2. PostScript printer:

   * PostScript Printer:
      You can select a new PostScript printer to send PostScript code
      generated.  For selection it's used all PostScript printers defined
      in `pr-ps-printer-alist' variable (see it for documentation).
      See also `pr-setting-database'.

   * Despool:
      If spooling is on, you can turn it on/off, as you wish.
      If spooling is off, it'll not be possible to turn it on.
      If it's turned on, specify to despools the PostScript spooling buffer in
      a temporary file or in the selected PostScript file when
      printing/previewing.

   * Preview:
      Preview the PostScript generated.

   * Print:
      Print the PostScript generated.

   * Quit:
      Quit from printing interface buffer.

   * Send to Printer/Temporary File:
      If it's turned on, the PostScript generated is sent directly to
      PostScript printer or, for previewing, to a temporary file.

   * Send to File:
      Specify a file name to send the PostScript generated.

   * N-Up:
      Specify n-up printing.

3. Text printer:

   * Text Printer:
      Select a new text printer to send text generated.  For selection it's used
      all text printers defined in `pr-txt-printer-alist' variable (see it for
      documentation).  See also `pr-setting-database'.

   * Printify:
      If you have control characters (character code from \\000 to \\037) in a
      buffer and you want to print them in a text printer, select this
      option.  All control characters in your buffer or region will be
      replaced by a printable representation.  The printable representations
      use ^ (for ASCII control characters) or hex.  The characters tab,
      linefeed, space, return and formfeed are not affected.
      You don't need to select this option if you use any option of section
      I, the PostScript engine treats control characters properly.

   * Print:
      To print a directory, buffer, region or major mode in a
      text printer, select this option.  See also the NOTE 1 on section 1.

   * Quit:
      Quit from printing interface buffer.

4. Settings:

   There are 3 setting columns:

   4a. First column (left column):

      * Landscape:
	 PostScript landscape printing.

      * Print Header:
	 To have a header in each page in your PostScript code.

      * Print Header Frame:
	 To draw a gaudy frame around the header.

      * Line Number:
	 The line number is printed in your PostScript code.

      * Zebra Stripes:
	 Background zebra stripes in your PostScript code.

      * Duplex:
	 Duplex printing (if your PostScript printer has this feature).

      * Tumble:
	 If duplex printing is on, you can choose if you want to have a
	 printing suitable for binding on the left or right (tumble off), or to
	 have a printing suitable for binding at top or bottom (tumble on).

      * Upside-Down:
	 PostScript upside-down printing.

   4b. Second column (middle column):

      * Auto Region:
	 If you want that region is automagically detected, turn on this
	 option.  Note that this will only work if you're using transient mark
	 mode.  When this option is on, the `*-buffer*' commands will behave
	 like `*-region*' commands, that is, `*-buffer*' commands will print
	 only the region marked instead of all buffer.

      * Auto Mode:
	 Turn this option on if you want that when current major-mode is
	 declared in `pr-mode-alist', the `*-buffer*' and `*-region*' commands
	 behave like `*-mode*' commands.

      * Menu Lock:
	 If you want that Printing menu stays open while you are setting
	 toggle options, turn on this option.  The variables
	 `pr-menu-char-height' and `pr-menu-char-width' are used to guess the
	 menu position, so don't forget to adjust these variables if menu
	 position is not ok.

      * Spool Buffer:
	 To spool the PostScript code generated.  You can despool later by
	 setting Despool option on PostScript printer section.

      * Print with faces:
	 If you use colors in your buffers and want to see these colors on your
	 PostScript code generated, turn on this option.  If you have a
	 black/white PostScript printer, these colors are displayed in gray
	 scale by PostScript printer interpreter.

      * Print via Ghostscript:
	 If you don't have a PostScript printer to send PostScript files, turn
	 on this option.  When this option is on, the ghostscript is used to
	 print PostScript files.  In GNU or Unix system, if ghostscript is set
	 as a PostScript filter, you don't need to turn on this option.

      * Parity Page Menu:
	 To print all pages, odd pages, even pages, odd sheets or even sheets.
	 See also `ps-even-or-odd-pages'.

   4c. Third column (right column):

      * Verbose:
	 That is, to be verbose when editing a field in interface buffer.

5. Customize:

   Besides all options in section 4, you can customize much more PostScript
   options in `ps-print' option.  Or you can customize some `lpr' options for
   text printing.  Or customize `printing' options.

6. Show settings:

   Show current settings for `printing', `ps-print' or `lpr'.

7. Help:

   Quick help for printing interface buffer and printing menu layout.  You can
   also quit the printing interface buffer or kill all printing help buffer.
"))
                nil [130941 139423])
            ("pr-interface" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [139531 139820])
            ("pr-ps-directory-preview" function
               (:user-visible-flag t
                :arguments ("n-up" "dir" "file-regexp" "filename"))
                nil [139838 140973])
            ("pr-ps-directory-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("n-up" "dir" "file-regexp" "filename"))
                nil [140991 142180])
            ("pr-ps-directory-print" function
               (:user-visible-flag t
                :arguments ("n-up" "dir" "file-regexp" "filename"))
                nil [142198 143345])
            ("pr-ps-directory-ps-print" function
               (:user-visible-flag t
                :arguments ("n-up" "dir" "file-regexp" "filename"))
                nil [143363 144620])
            ("pr-ps-buffer-preview" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [144638 145487])
            ("pr-ps-buffer-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [145505 146399])
            ("pr-ps-buffer-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [146417 147252])
            ("pr-ps-buffer-ps-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [147270 148346])
            ("pr-ps-region-preview" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [148364 148718])
            ("pr-ps-region-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [148736 149151])
            ("pr-ps-region-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [149169 149518])
            ("pr-ps-region-ps-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [149536 150039])
            ("pr-ps-mode-preview" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [150057 150426])
            ("pr-ps-mode-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [150444 150923])
            ("pr-ps-mode-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [150941 151219])
            ("pr-ps-mode-ps-print" function
               (:user-visible-flag t
                :arguments ("n-up" "filename"))
                nil [151237 151581])
            ("pr-printify-directory" function
               (:user-visible-flag t
                :arguments ("dir" "file-regexp"))
                nil [151599 152299])
            ("pr-printify-buffer" function (:user-visible-flag t) nil [152317 152694])
            ("pr-printify-region" function (:user-visible-flag t) nil [152712 153023])
            ("pr-txt-directory" function
               (:user-visible-flag t
                :arguments ("dir" "file-regexp"))
                nil [153041 153535])
            ("pr-txt-buffer" function (:user-visible-flag t) nil [153553 153762])
            ("pr-txt-region" function (:user-visible-flag t) nil [153780 153963])
            ("pr-txt-mode" function (:user-visible-flag t) nil [153981 154219])
            ("pr-despool-preview" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [154237 154891])
            ("pr-despool-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [154909 155632])
            ("pr-despool-print" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [155650 156442])
            ("pr-despool-ps-print" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [156460 157138])
            ("pr-ps-file-preview" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [157156 157389])
            ("pr-ps-file-up-preview" function
               (:user-visible-flag t
                :arguments ("n-up" "ifilename" "ofilename"))
                nil [157407 157744])
            ("pr-ps-file-using-ghostscript" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [157762 158434])
            ("pr-ps-file-print" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [158452 159359])
            ("pr-ps-file-ps-print" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [159377 159725])
            ("pr-ps-file-up-ps-print" function
               (:user-visible-flag t
                :arguments ("n-up" "ifilename" "ofilename"))
                nil [159743 161042])
            ("pr-toggle-file-duplex" function (:user-visible-flag t) nil [161060 161180])
            ("pr-toggle-file-tumble" function (:user-visible-flag t) nil [161198 161480])
            ("pr-toggle-file-landscape" function (:user-visible-flag t) nil [161498 161627])
            ("pr-toggle-ghostscript" function (:user-visible-flag t) nil [161645 161765])
            ("pr-toggle-faces" function (:user-visible-flag t) nil [161783 161884])
            ("pr-toggle-spool" function (:user-visible-flag t) nil [161902 161992])
            ("pr-toggle-duplex" function (:user-visible-flag t) nil [162010 162100])
            ("pr-toggle-tumble" function (:user-visible-flag t) nil [162118 162370])
            ("pr-toggle-landscape" function (:user-visible-flag t) nil [162388 162487])
            ("pr-toggle-upside-down" function (:user-visible-flag t) nil [162505 162610])
            ("pr-toggle-line" function (:user-visible-flag t) nil [162628 162719])
            ("pr-toggle-zebra" function (:user-visible-flag t) nil [162737 162832])
            ("pr-toggle-header" function (:user-visible-flag t) nil [162850 162949])
            ("pr-toggle-header-frame" function (:user-visible-flag t) nil [162967 163084])
            ("pr-toggle-lock" function (:user-visible-flag t) nil [163102 163191])
            ("pr-toggle-region" function (:user-visible-flag t) nil [163209 163337])
            ("pr-toggle-mode" function (:user-visible-flag t) nil [163355 163444])
            ("pr-customize" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [163462 163587])
            ("lpr-customize" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [163605 163721])
            ("pr-help" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [163739 163873])
            ("pr-ps-name" function (:user-visible-flag t) nil [163891 164083])
            ("pr-txt-name" function (:user-visible-flag t) nil [164101 164285])
            ("pr-ps-utility" function (:user-visible-flag t) nil [164303 164506])
            ("pr-show-ps-setup" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [164524 164658])
            ("pr-show-pr-setup" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [164676 164810])
            ("pr-show-lpr-setup" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [164828 164960])
            ("pr-ps-fast-fire" function
               (:user-visible-flag t
                :arguments ("n-up" "select"))
                nil [165073 168249])
            ("pr-txt-fast-fire" function
               (:user-visible-flag t
                :arguments ("select-printer"))
                nil [168267 169521])
            ("pr-setup" function nil nil [169615 172080])
            ("lpr-setup" function nil nil [172083 172825])
            ("declare-function" code nil nil [172973 173039])
            ("declare-function" code nil nil [173040 173111])
            ("declare-function" code nil nil [173112 173173])
            ("mh-show-buffer" variable nil nil [173174 173197])
            ("pr-article-date" function nil nil [173200 173594])
            ("pr-mh-current-message" function nil nil [173597 173859])
            ("pr-mh-print-1" function (:arguments ("n-up" "filename" "header-list")) nil [173862 174094])
            ("pr-mh-lpr-1" function (:arguments ("header-list")) nil [174097 174299])
            ("defalias" code nil nil [174302 174342])
            ("defalias" code nil nil [174345 174381])
            ("pr-rmail-lpr" function (:arguments ("header-list")) nil [174497 174670])
            ("pr-rmail-print" function (:arguments ("n-up" "filename" "header-list")) nil [174673 174872])
            ("pr-ps-message-from-summary" function (:arguments ("n-up" "filename" "header-list" "summary-buffer" "summary-default")) nil [174875 175238])
            ("pr-lpr-message-from-summary" function (:arguments ("header-list" "summary-buffer" "summary-default")) nil [175241 175572])
            ("pr-gnus-article" variable (:default-value "*Article*") nil [175687 175723])
            ("pr-gnus-print" function (:arguments ("n-up" "filename" "header-list")) nil [175726 175930])
            ("pr-gnus-lpr" function (:arguments ("header-list")) nil [175933 176111])
            ("pr-vm-summary" variable nil nil [176224 176249])
            ("pr-vm-print" function (:arguments ("n-up" "filename" "header-list")) nil [176252 176440])
            ("pr-vm-lpr" function (:arguments ("header-list")) nil [176443 176605])
            ("pr-ps-mode" function (:arguments ("n-up" "filename")) nil [176704 177010])
            ("pr-local-variable" function (:arguments ("header-list" "body")) nil [177013 177470])
            ("pr-mode-print" function (:arguments ("n-up" "filename" "header-list" "from" "to")) nil [177473 178023])
            ("pr-mode-lpr" function (:arguments ("header-list" "from" "to")) nil [178026 178353])
            ("pr-menu-entry-alist" variable
               (:constant-flag t
                :default-value (quote ((postscript . 3) (text . 3) (postscript-options . 9) (postscript-process . 3) (printing . 3) (help . 3))))
                nil [178447 178848])
            ("pr-menu-index" function (:arguments ("entry" "index")) nil [178851 179423])
            ("pr-update-var" function (:arguments ("var-sym" "alist")) nil [179535 179653])
            ("pr-update-menus" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [179656 180694])
            ("pr-menu-create" function (:arguments ("name" "alist" "var-sym" "fun" "entry" "index")) nil [180697 181000])
            ("pr-ps-set-utility" function (:arguments ("value")) nil [181003 181284])
            ("pr-ps-set-printer" function (:arguments ("value")) nil [181287 182077])
            ("pr-txt-set-printer" function (:arguments ("value")) nil [182080 182604])
            ("pr-eval-alist" function (:arguments ("alist")) nil [182607 182854])
            ("pr-eval-local-alist" function (:arguments ("alist")) nil [182857 183232])
            ("pr-eval-setting-alist" function (:arguments ("key" "global" "old")) nil [183235 184540])
            ("pr-kill-local-variable" function (:arguments ("local-var-list")) nil [184543 184637])
            ("pr-toggle" function (:arguments ("var-sym" "mess" "entry" "index" "horizontal" "state" "path" "no-menu")) nil [184745 185016])
            ("pr-toggle-file-duplex-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [185019 185252])
            ("pr-toggle-file-tumble-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [185255 185488])
            ("pr-toggle-file-landscape-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [185491 185743])
            ("pr-toggle-ghostscript-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [185746 185985])
            ("pr-toggle-faces-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [185988 186201])
            ("pr-toggle-spool-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [186204 186415])
            ("pr-toggle-duplex-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [186418 186650])
            ("pr-toggle-tumble-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [186653 186873])
            ("pr-toggle-landscape-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [186876 187087])
            ("pr-toggle-upside-down-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [187090 187336])
            ("pr-toggle-line-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [187339 187545])
            ("pr-toggle-zebra-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [187548 187753])
            ("pr-toggle-header-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [187756 187980])
            ("pr-toggle-header-frame-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [187983 188223])
            ("pr-toggle-lock-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [188226 188440])
            ("pr-toggle-region-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [188443 188650])
            ("pr-toggle-mode-menu" function
               (:user-visible-flag t
                :arguments ("no-menu"))
                nil [188653 188880])
            ("pr-prompt" function (:arguments ("str")) nil [188883 188991])
            ("pr-prompt-region" function (:arguments ("str")) nil [188994 189085])
            ("pr-prompt-gs" function (:arguments ("str")) nil [189088 189179])
            ("pr-region-active-symbol" function (:arguments ("region-p")) nil [189182 189302])
            ("pr-region-active-string" function (:arguments ("prefix")) nil [189305 189424])
            ("pr-show-setup" function (:arguments ("settings" "buffer-name")) nil [189427 189567])
            ("pr-complete-alist" function (:arguments ("prompt" "alist" "default")) nil [189570 189888])
            ("pr-delete-file" function (:arguments ("file")) nil [189891 189995])
            ("pr-expand-file-name" function (:arguments ("filename")) nil [189998 190088])
            ("pr-ps-outfile-preprint" function (:arguments ("mess")) nil [190091 190777])
            ("pr-ps-infile-preprint" function (:arguments ("mess")) nil [190780 191397])
            ("pr-ps-utility-args" function (:arguments ("n-up-sym" "infile-sym" "outfile-sym" "prompt")) nil [191400 192188])
            ("pr-ps-utility-process" function (:arguments ("n-up" "infile" "outfile")) nil [192191 192924])
            ("pr-remove-nil-from-list" function (:arguments ("lst")) nil [192927 193156])
            ("pr-call-process" function (:arguments ("command" "args")) nil [193159 194143])
            ("pr-txt-print" function (:arguments ("from" "to")) nil [194146 194373])
            ("pr-switches-string" function (:arguments ("switches" "mess")) nil [194376 194588])
            ("pr-switches" function (:arguments ("switches" "mess")) nil [194591 194787])
            ("pr-ps-preview" function (:arguments ("kind" "n-up" "filename" "mess")) nil [194790 195004])
            ("pr-ps-using-ghostscript" function (:arguments ("kind" "n-up" "filename" "mess")) nil [195007 195293])
            ("pr-ps-print" function (:arguments ("kind" "n-up" "filename" "mess")) nil [195296 195558])
            ("pr-ps-file" function (:arguments ("filename")) nil [195561 195768])
            ("pr-interactive-n-up" function (:arguments ("mess")) nil [195771 196386])
            ("pr-interactive-dir" function (:arguments ("mess")) nil [196389 197063])
            ("pr-interactive-regexp" function (:arguments ("mess")) nil [197066 197175])
            ("pr-interactive-dir-args" function (:arguments ("mess")) nil [197178 197342])
            ("pr-interactive-ps-dir-args" function (:arguments ("mess")) nil [197345 197659])
            ("pr-interactive-n-up-file" function (:arguments ("mess")) nil [197662 197857])
            ("pr-interactive-n-up-inout" function (:arguments ("mess")) nil [197860 198103])
            ("pr-set-outfilename" function (:arguments ("filename-sym")) nil [198106 198425])
            ("pr-set-n-up-and-filename" function (:arguments ("n-up-sym" "filename-sym" "mess")) nil [198428 198631])
            ("pr-set-dir-args" function (:arguments ("dir-sym" "regexp-sym" "mess")) nil [198634 198881])
            ("pr-set-ps-dir-args" function (:arguments ("n-up-sym" "dir-sym" "regexp-sym" "filename-sym" "mess")) nil [198884 199178])
            ("pr-find-buffer-visiting" function (:arguments ("file")) nil [199181 199795])
            ("pr-file-list" function (:arguments ("dir" "file-regexp" "fun")) nil [199798 200321])
            ("pr-delete-file-if-exists" function (:arguments ("filename")) nil [200324 200466])
            ("pr-ps-file-list" function (:arguments ("n-up" "dir" "file-regexp" "filename")) nil [200469 200830])
            ("pr-text2ps" function (:arguments ("kind" "n-up" "filename" "from" "to")) nil [200833 202047])
            ("pr-command" function (:arguments ("command")) nil [202050 202952])
            ("pr-path-command" function (:arguments ("symbol" "command" "sym-list")) nil [202955 203653])
            ("pr-find-command" function (:arguments ("cmd")) nil [203656 204151])
            ("widget" include nil nil [204355 204372])
            ("wid-edit" include nil nil [204333 204352])
            ("cus-edit" include nil nil [204311 204330])
            ("pr-i-window-configuration" variable nil nil [204376 204414])
            ("pr-i-buffer" variable nil nil [204416 204444])
            ("pr-i-region" variable nil nil [204445 204473])
            ("pr-i-mode" variable nil nil [204474 204502])
            ("pr-i-despool" variable nil nil [204503 204531])
            ("pr-i-ps-as-is" variable (:default-value t) nil [204532 204558])
            ("pr-i-n-up" variable (:default-value 1) nil [204559 204585])
            ("pr-i-directory" variable (:default-value "./") nil [204586 204615])
            ("pr-i-regexp" variable nil nil [204616 204643])
            ("pr-i-ps-file" variable nil nil [204644 204671])
            ("pr-i-out-file" variable nil nil [204672 204699])
            ("pr-i-answer-yes" variable nil nil [204700 204728])
            ("pr-i-process" variable (:default-value (quote buffer)) nil [204729 204761])
            ("pr-i-ps-send" variable (:default-value (quote printer)) nil [204762 204795])
            ("pr-interface-map" variable nil nil [204798 204856])
            ("unless" code nil nil [204858 205253])
            ("pr-interface-save" function (:arguments ("body")) nil [205256 205346])
            ("pr-create-interface" function nil nil [205349 206681])
            ("declare-function" code nil nil [206683 206758])
            ("declare-function" code nil nil [206759 206820])
            ("pr-insert-section-1" function nil nil [206822 210716])
            ("pr-insert-section-2" function nil nil [210719 212812])
            ("pr-insert-section-3" function nil nil [212815 213187])
            ("pr-insert-section-4" function nil nil [213190 215499])
            ("pr-insert-section-5" function nil nil [215502 215788])
            ("pr-insert-section-6" function nil nil [215791 216051])
            ("pr-insert-section-7" function nil nil [216054 216395])
            ("pr-kill-help" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [216398 216785])
            ("pr-interface-quit" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [216788 216980])
            ("pr-interface-help" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [216983 217148])
            ("pr-interface-txt-print" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [217151 217925])
            ("pr-interface-printify" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [217928 218558])
            ("pr-interface-ps-print" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [218561 218850])
            ("pr-interface-preview" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [218853 219131])
            ("pr-interface-ps" function (:arguments ("ps-despool" "ps-directory" "ps-file" "ps-file-up" "ps-region" "ps-mode" "ps-buffer")) nil [219134 220514])
            ("pr-i-ps-send" function nil nil [220517 221054])
            ("pr-i-directory" function nil nil [221057 221189])
            ("pr-interface-directory" function (:arguments ("widget" "_ignore")) nil [221192 221449])
            ("pr-interface-infile" function (:arguments ("widget" "_ignore")) nil [221452 221727])
            ("pr-interface-outfile" function (:arguments ("widget" "_ignore")) nil [221730 222036])
            ("pr-widget-field-action" function (:arguments ("widget" "event")) nil [222039 222259])
            ("pr-insert-italic" function (:arguments ("str" "from" "to")) nil [222262 222479])
            ("pr-insert-checkbox" function (:arguments ("before" "var-sym" "fun" "label")) nil [222482 222677])
            ("pr-insert-toggle" function (:arguments ("var-sym" "label")) nil [222680 222873])
            ("pr-insert-button" function (:arguments ("fun" "label" "separator")) nil [222876 223038])
            ("pr-insert-menu" function (:arguments ("tag" "var-sym" "choices" "before" "after" "body")) nil [223041 223488])
            ("pr-insert-radio-button" function (:arguments ("var-sym" "sym")) nil [223491 223924])
            ("pr-update-radio-button" function (:arguments ("var-sym")) nil [223927 224225])
            ("pr-update-checkbox" function (:arguments ("var-sym")) nil [224228 224393])
            ("pr-choice-alist" function (:arguments ("alist")) nil [224396 224809])
            ("printing" package nil nil [224890 224909]))          
      :file "printing.el.gz"
      :pointmax 224938
      :fsize 47820
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 204372 . 204373) (symbol 204291 . 204308) (open-paren 204290 . 204291) (close-paren 51384 . 51385) (symbol 51268 . 51284) (open-paren 51267 . 51268) (close-paren 44652 . 44653) (symbol 43566 . 43583) (open-paren 43565 . 43566)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [902 1354])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1356 1940])
            ("declare-function" code nil nil [1942 2014])
            ("help-xref-stack-item" variable nil nil [2016 2045])
            ("face-name-history" variable nil nil [2047 2228])
            ("font-selection" customgroup (:user-visible-flag t) nil [2399 2481])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2484 3266])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3440 5433])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5479 6543])
            ("face-list" function nil nil [6718 6819])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6821 7522])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7524 7786])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7788 9039])
            ("facep" function (:arguments ("face")) nil [9219 9368])
            ("check-face" function (:arguments ("face")) nil [9371 9525])
            ("face-id" function (:arguments ("face" "_frame")) nil [9706 10048])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [10050 10467])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10470 11183])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [11186 11530])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11533 11962])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [12160 14052])
            ("declare-function" code nil nil [14055 14150])
            ("declare-function" code nil nil [14152 14266])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [14268 14977])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14980 15343])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [15346 15942])
            ("face-name" function (:arguments ("face")) nil [16126 16218])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [16221 16687])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16689 18503])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18505 19093])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [19096 19377])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [19379 20435])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20437 21493])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21495 22515])
            ("defalias" code nil nil [22518 22566])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22569 23022])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [23025 23459])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23462 23981])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23984 24488])
            ("face-documentation" function (:arguments ("face")) nil [24664 25086])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [25089 25277])
            ("defalias" code nil nil [25280 25327])
            ("defalias" code nil nil [25328 25383])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25564 33275])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33277 33728])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33731 34131])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34134 34591])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34594 34999])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [35002 35499])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35502 35928])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36134 36603])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36606 37075])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [37078 37683])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37686 38455])
            ("define-obsolete-function-alias" code nil nil [38457 38570])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38573 39146])
            ("define-obsolete-function-alias" code nil nil [39148 39269])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [39271 39687])
            ("define-obsolete-function-alias" code nil nil [39689 39760])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39763 40199])
            ("define-obsolete-function-alias" code nil nil [40201 40276])
            ("defalias" code nil nil [40279 40335])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [40338 41138])
            ("crm-separator" variable nil nil [41324 41346])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [41362 44220])
            ("x-bitmap-file-path" variable nil nil [44279 44306])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [44308 46997])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [47000 47770])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [47773 47920])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47923 48938])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48941 49558])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [49719 52060])
            ("declare-function" code nil nil [52062 52108])
            ("declare-function" code nil nil [52109 52200])
            ("read-face-font" function (:arguments ("face" "frame")) nil [52202 52574])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [52577 53005])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [53007 53952])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53954 54743])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54914 55077])
            ("help-xref-stack" variable nil nil [55206 55230])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [55231 58266])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [58269 62402])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [62680 63270])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [63273 65075])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [65078 66573])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [66753 66912])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66914 67987])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67989 70092])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [70094 71807])
            ("face-spec-set-2" function (:arguments ("face" "frame" "face-attrs")) nil [71809 72263])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [72265 73339])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [73341 73536])
            ("face-default-spec" function (:arguments ("face")) nil [73538 73726])
            ("face-user-default-spec" function (:arguments ("face")) nil [73728 74011])
            ("defined-colors" function (:arguments ("frame")) nil [74269 74727])
            ("defalias" code nil nil [74728 74772])
            ("defined-colors-with-face-attributes" function (:arguments ("frame")) nil [74774 75399])
            ("readable-foreground-color" function (:arguments ("color")) nil [75401 75828])
            ("declare-function" code nil nil [75830 75900])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [75902 76569])
            ("defalias" code nil nil [76570 76616])
            ("declare-function" code nil nil [76618 76685])
            ("color-values" function (:arguments ("color" "frame")) nil [76687 77606])
            ("defalias" code nil nil [77608 77648])
            ("declare-function" code nil nil [77650 77717])
            ("display-color-p" function (:arguments ("display")) nil [77719 78121])
            ("defalias" code nil nil [78122 78168])
            ("declare-function" code nil nil [78170 78240])
            ("display-grayscale-p" function (:arguments ("display")) nil [78242 78675])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [78677 81542])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [81544 82550])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [82552 84085])
            ("foreground-color-at-point" function nil nil [84087 84245])
            ("background-color-at-point" function nil nil [84247 84405])
            ("declare-function" code nil nil [84576 84621])
            ("declare-function" code nil nil [84622 84715])
            ("declare-function" code nil nil [84716 84810])
            ("declare-function" code nil nil [84811 84865])
            ("x-display-name" variable nil nil [84866 84889])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [84891 85786])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [85789 86795])
            ("declare-function" code nil nil [86797 86847])
            ("declare-function" code nil nil [86848 86914])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [86916 88117])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [88119 89516])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [89518 90194])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [90197 90956])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [90958 91523])
            ("tty-setup-hook" variable nil nil [91525 91757])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [91759 93332])
            ("tty-set-up-initial-frame-faces" function nil nil [93438 93595])
            ("basic-faces" customgroup (:user-visible-flag t) nil [93766 93841])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [93843 93975])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [93977 94056])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [94058 94423])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [94425 94532])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [94534 94724])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [94726 94830])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [94832 94960])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [94962 95442])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [95444 95882])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [95884 96351])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [96353 96603])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [96605 97147])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [97309 98235])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [98237 98785])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [98787 99064])
            ("line-number" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [99102 99513])
            ("line-number-current-line" variable
               (:default-value (quote ((t :inherit line-number)))
                :type "face")
                nil [99515 100064])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100066 100496])
            ("homoglyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100498 100706])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [100708 100968])
            ("nobreak-hyphen" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100970 101189])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [101191 101308])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [101310 101606])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [101608 102146])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [102148 102422])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102424 102667])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102669 102852])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [102854 104190])
            ("header-line-highlight" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [104192 104334])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [104336 104501])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [104503 104971])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [104973 105390])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [105392 105805])
            ("internal-border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [105807 105944])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [105946 106441])
            ("setq" code nil nil [106443 106554])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [106556 106868])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [106870 107008])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107010 107139])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [107141 107591])
            ("put" code nil nil [107593 107625])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107627 107753])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [107755 108045])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [108047 108291])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [108293 108415])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [108417 108691])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [108693 109223])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [109225 109459])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [109461 109880])
            ("read-multiple-choice-face" variable
               (:default-value (quote ((t (:inherit underline :weight bold))))
                :type "face")
                nil [109882 110071])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [110097 110269])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [110271 110517])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [110519 110666])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [110668 110803])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [110805 111271])
            ("show-paren-match-expression" variable
               (:default-value (quote ((t :inherit show-paren-match)))
                :type "face")
                nil [111273 111508])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [111510 111701])
            ("x-font-regexp" variable nil nil [112077 112103])
            ("x-font-regexp-head" variable nil nil [112104 112135])
            ("x-font-regexp-weight" variable nil nil [112136 112169])
            ("x-font-regexp-slant" variable nil nil [112170 112202])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [112204 112244])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [112245 112284])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [112285 112325])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [112326 112367])
            ("let" code nil nil [112450 113668])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [113671 114758])
            ("font-list-limit" variable (:default-value 100) nil [114760 114875])
            ("make-obsolete-variable" code nil nil [114876 114928])
            ("faces" package nil nil [114930 114946]))          
      :file "faces.el.gz"
      :pointmax 114971
      :fsize 29145
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [2020 2040])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2076 2591])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2629 4663])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4680 5541])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5567 5833])
            ("end-of-thing" function (:arguments ("thing")) nil [5835 6089])
            ("put" code nil nil [6222 6314])
            ("in-string-p" function nil nil [6327 6581])
            ("thing-at-point--end-of-sexp" function nil nil [6583 6845])
            ("define-obsolete-function-alias" code nil nil [6847 6997])
            ("put" code nil nil [6999 7047])
            ("thing-at-point--beginning-of-sexp" function nil nil [7049 7330])
            ("define-obsolete-function-alias" code nil nil [7332 7494])
            ("put" code nil nil [7496 7556])
            ("put" code nil nil [7569 7646])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7648 8111])
            ("put" code nil nil [8124 8170])
            ("put" code nil nil [8171 8211])
            ("put" code nil nil [8212 8252])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [8269 8371])
            ("put" code nil nil [8373 8503])
            ("put" code nil nil [8504 8693])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8705 8876])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8878 9032])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [9034 9203])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [9205 10559])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10561 10846])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10848 10971])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [10973 11134])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [11136 11305])
            ("put" code nil nil [11307 11382])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [11384 12585])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12587 13096])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [13098 14552])
            ("put" code nil nil [14554 14609])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [14611 17045])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [17047 17940])
            ("put" code nil nil [17942 17992])
            ("put" code nil nil [17994 18056])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [18461 19982])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [20005 20250])
            ("put" code nil nil [20493 20786])
            ("put" code nil nil [20788 21026])
            ("put" code nil nil [21040 21097])
            ("put" code nil nil [21098 21161])
            ("word-at-point" function nil nil [21176 21278])
            ("sentence-at-point" function nil nil [21280 21394])
            ("thing-at-point--read-from-whole-string" function (:arguments ("str")) nil [21396 21865])
            ("define-obsolete-function-alias" code nil nil [21867 22039])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [22041 22343])
            ("sexp-at-point" function nil nil [22360 22463])
            ("symbol-at-point" function nil nil [22479 22635])
            ("number-at-point" function nil nil [22651 22877])
            ("put" code nil nil [22879 22925])
            ("list-at-point" function (:arguments ("ignore-comment-or-string")) nil [22941 23309]))          
      :file "thingatpt.el.gz"
      :pointmax 23338
      :fsize 7550
      :lastmodtime '(23603 24959 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166 1107])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1109 1207])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209 1325])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1327 1437])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1439 1575])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1577 1947])
            ("if" code nil nil [1949 2040])
            ("push" code nil nil [2170 2229])
            ("ada-add-extensions" function (:prototype-flag t) nil [2231 2517])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2519 2616])
            ("if" code nil nil [2618 2714])
            ("if" code nil nil [2842 2937])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3068 3170])
            ("if" code nil nil [3172 3268])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3399 3535])
            ("if" code nil nil [3537 3633])
            ("put" code nil nil [3747 3816])
            ("add-log-current-defun-function" variable nil nil [3818 4073])
            ("custom-autoload" code nil nil [4075 4136])
            ("add-log-full-name" variable nil nil [4138 4303])
            ("custom-autoload" code nil nil [4305 4353])
            ("add-log-mailing-address" variable nil nil [4355 4716])
            ("custom-autoload" code nil nil [4718 4772])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4774 4871])
            ("find-change-log" function (:prototype-flag t) nil [4873 5962])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5964 7265])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7267 7531])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7533 7959])
            ("add-log-current-defun" function (:prototype-flag t) nil [7961 8482])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8484 8885])
            ("if" code nil nil [8887 9000])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [9127 9781])
            ("custom-autoload" code nil nil [9783 9835])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [9837 10386])
            ("custom-autoload" code nil nil [10388 10447])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10449 10575])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10577 10704])
            ("ad-add-advice" function (:prototype-flag t) nil [10706 11768])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11770 12851])
            ("defadvice" function (:prototype-flag t) nil [12853 15027])
            ("function-put" code nil nil [15029 15073])
            ("function-put" code nil nil [15075 15125])
            ("if" code nil nil [15127 15220])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15322 16144])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16146 17954])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17956 18332])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18334 18762])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18764 19224])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19226 19351])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [19353 19558])
            ("if" code nil nil [19560 19655])
            ("push" code nil nil [19759 19816])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [19818 20001])
            ("allout-setup" function (:prototype-flag t) nil [20003 20327])
            ("allout-auto-activation" variable nil nil [20329 20993])
            ("custom-autoload" code nil nil [20995 21049])
            ("put" code nil nil [21051 21173])
            ("put" code nil nil [21175 21267])
            ("put" code nil nil [21269 21383])
            ("put" code nil nil [21385 21442])
            ("put" code nil nil [21444 21502])
            ("put" code nil nil [21504 21568])
            ("put" code nil nil [21570 21640])
            ("put" code nil nil [21642 21783])
            ("put" code nil nil [21785 21906])
            ("put" code nil nil [21908 22027])
            ("put" code nil nil [22029 22169])
            ("put" code nil nil [22171 22312])
            ("put" code nil nil [22314 22379])
            ("put" code nil nil [22381 22482])
            ("put" code nil nil [22484 22554])
            ("put" code nil nil [22556 22622])
            ("allout-mode-p" function (:prototype-flag t) nil [22624 22730])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [22732 35725])
            ("defalias" code nil nil [35727 35774])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35776 36052])
            ("if" code nil nil [36054 36151])
            ("push" code nil nil [36287 36352])
            ("allout-widgets-setup" function (:prototype-flag t) nil [36354 36579])
            ("allout-widgets-auto-activation" variable nil nil [36581 37115])
            ("custom-autoload" code nil nil [37117 37187])
            ("put" code nil nil [37189 37312])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37314 38331])
            ("if" code nil nil [38333 38438])
            ("defalias" code nil nil [38557 38610])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38612 39007])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [39009 39095])
            ("if" code nil nil [39097 39235])
            ("animate-string" function (:prototype-flag t) nil [39353 39744])
            ("animate-sequence" function (:prototype-flag t) nil [39746 40110])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40112 40427])
            ("if" code nil nil [40429 40526])
            ("push" code nil nil [40642 40705])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40707 40817])
            ("ansi-color-process-output" function (:prototype-flag t) nil [40819 41408])
            ("if" code nil nil [41410 41515])
            ("push" code nil nil [41659 41722])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41724 42578])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42580 42676])
            ("antlr-set-tabs" function (:prototype-flag t) nil [42678 42874])
            ("if" code nil nil [42876 42976])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43093 43457])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43459 43655])
            ("if" code nil nil [43657 43750])
            ("apropos-read-pattern" function (:prototype-flag t) nil [43858 44211])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44213 44715])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44717 45017])
            ("apropos-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45019 45326])
            ("defalias" code nil nil [45328 45372])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45374 46137])
            ("apropos-documentation-property" function (:prototype-flag t) nil [46139 46299])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46301 46980])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46982 47275])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47277 47919])
            ("apropos-local-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47921 48197])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48199 48915])
            ("if" code nil nil [48917 49016])
            ("archive-mode" function (:prototype-flag t) nil [49127 49652])
            ("if" code nil nil [49654 49754])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49856 52941])
            ("if" code nil nil [52943 53119])
            ("push" code nil nil [53243 53302])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [53304 60987])
            ("if" code nil nil [60989 61086])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61217 61945])
            ("if" code nil nil [61947 62043])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [62163 62330])
            ("custom-autoload" code nil nil [62332 62391])
            ("if" code nil nil [62393 62499])
            ("push" code nil nil [62641 62710])
            ("auth-source-pass-enable" function (:prototype-flag t) nil [62712 62820])
            ("if" code nil nil [62822 62939])
            ("autoarg-mode" variable nil nil [63047 63181])
            ("custom-autoload" code nil nil [63183 63228])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63230 64313])
            ("autoarg-kp-mode" variable nil nil [64315 64612])
            ("custom-autoload" code nil nil [64614 64662])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64664 65089])
            ("if" code nil nil [65091 65190])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65321 65426])
            ("if" code nil nil [65428 65529])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65646 65851])
            ("define-auto-insert" function (:prototype-flag t) nil [65853 66157])
            ("auto-insert-mode" variable nil nil [66159 66460])
            ("custom-autoload" code nil nil [66462 66514])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66516 66934])
            ("if" code nil nil [66936 67041])
            ("put" code nil nil [67182 67242])
            ("put" code nil nil [67244 67309])
            ("put" code nil nil [67311 67366])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67368 67913])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67915 68731])
            ("batch-update-autoloads" function (:prototype-flag t) nil [68733 68987])
            ("if" code nil nil [68989 69139])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69256 70015])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [70017 70232])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70234 71159])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [71161 71400])
            ("global-auto-revert-mode" variable nil nil [71402 71731])
            ("custom-autoload" code nil nil [71733 71792])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71794 72821])
            ("if" code nil nil [72823 72951])
            ("if" code nil nil [73092 73193])
            ("mouse-avoidance-mode" variable nil nil [73295 73538])
            ("custom-autoload" code nil nil [73540 73591])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73593 74733])
            ("if" code nil nil [74735 74840])
            ("add-to-list" code nil nil [74971 75039])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75041 75340])
            ("if" code nil nil [75342 75438])
            ("put" code nil nil [75546 75601])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [75603 75833])
            ("display-battery-mode" variable nil nil [75835 76152])
            ("custom-autoload" code nil nil [76154 76207])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76209 76696])
            ("if" code nil nil [76698 76797])
            ("benchmark-run" function (:prototype-flag t) nil [76941 77375])
            ("function-put" code nil nil [77377 77431])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [77433 77769])
            ("function-put" code nil nil [77771 77834])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77836 78147])
            ("if" code nil nil [78149 78258])
            ("if" code nil nil [78389 78535])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78660 79374])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [79376 82045])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [82047 82792])
            ("if" code nil nil [82794 82891])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [83042 83146])
            ("if" code nil nil [83148 83257])
            ("if" code nil nil [83384 83481])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [83596 83763])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [83765 84008])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84010 84154])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84156 84268])
            ("if" code nil nil [84270 84367])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84488 89450])
            ("if" code nil nil [89452 89559])
            ("define-key" code nil nil [89670 89713])
            ("define-key" code nil nil [89715 89757])
            ("define-key" code nil nil [89759 89814])
            ("define-key" code nil nil [89816 89865])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "M" (quote bookmark-set-no-overwrite)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [89867 90755])
            ("fset" code nil nil [90757 90790])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90792 91976])
            ("bookmark-set-no-overwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91978 93260])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93262 94203])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94205 94347])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94349 94665])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94667 94932])
            ("defalias" code nil nil [94934 94987])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94989 95598])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95600 96010])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96012 96506])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96508 96633])
            ("function-put" code nil nil [96635 96698])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96700 97477])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97479 98407])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98409 98677])
            ("defalias" code nil nil [98679 98726])
            ("defalias" code nil nil [98728 98775])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98777 98904])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [98906 100353])
            ("defalias" code nil nil [100355 100410])
            ("if" code nil nil [100412 100546])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [100671 101234])
            ("custom-autoload" code nil nil [101236 101297])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101299 101648])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101650 101909])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101911 102045])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102047 102166])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102168 102870])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102872 103166])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103168 103452])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103454 103701])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103703 104512])
            ("make-obsolete" code nil nil [104514 104563])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104565 105368])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105370 106107])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106109 106412])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106414 107211])
            ("make-obsolete" code nil nil [107213 107260])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107262 107412])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107414 108058])
            ("make-obsolete" code nil nil [108060 108110])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108112 108813])
            ("make-obsolete" code nil nil [108815 108862])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108864 109611])
            ("make-obsolete" code nil nil [109613 109657])
            ("browse-url-conkeror" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109659 110472])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110474 110958])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110960 111262])
            ("make-obsolete" code nil nil [111264 111315])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111317 111737])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111739 112432])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112434 113145])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113147 113548])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113550 113757])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113759 114125])
            ("if" code nil nil [114127 114232])
            ("push" code nil nil [114324 114378])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114380 114582])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114584 114794])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114796 114895])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114897 115523])
            ("if" code nil nil [115525 115614])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115732 116336])
            ("if" code nil nil [116338 116437])
            ("put" code nil nil [116591 116725])
            ("put" code nil nil [116727 116788])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116790 117102])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117104 117257])
            ("if" code nil nil [117259 117370])
            ("if" code nil nil [117511 117629])
            ("put" code nil nil [117769 117827])
            ("put" code nil nil [117828 117899])
            ("put" code nil nil [117900 117969])
            ("put" code nil nil [117970 118034])
            ("put" code nil nil [118036 118175])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [118177 118551])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [118553 118911])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118913 119112])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119114 119852])
            ("put" code nil nil [119853 119906])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119908 120305])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120307 120524])
            ("byte-compile" function (:prototype-flag t) nil [120526 120707])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120709 121391])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [121393 121621])
            ("batch-byte-compile" function (:prototype-flag t) nil [121623 122074])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [122076 122520])
            ("if" code nil nil [122522 122723])
            ("if" code nil nil [122863 123002])
            ("put" code nil nil [123142 123199])
            ("if" code nil nil [123201 123346])
            ("if" code nil nil [123489 123601])
            ("put" code nil nil [123727 123790])
            ("put" code nil nil [123792 123853])
            ("put" code nil nil [123855 123918])
            ("if" code nil nil [123920 124027])
            ("if" code nil nil [124170 124300])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124443 124727])
            ("if" code nil nil [124729 124872])
            ("if" code nil nil [125001 125102])
            ("if" code nil nil [125242 125387])
            ("if" code nil nil [125513 125634])
            ("if" code nil nil [125777 125906])
            ("if" code nil nil [126046 126173])
            ("if" code nil nil [126302 126397])
            ("if" code nil nil [126526 126627])
            ("if" code nil nil [126770 126902])
            ("if" code nil nil [127028 127127])
            ("if" code nil nil [127247 127359])
            ("define-key" code nil nil [127468 127509])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127511 127648])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127650 127802])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127804 127926])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127928 128189])
            ("calc-eval" function (:prototype-flag t) nil [128191 128475])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128477 128775])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128777 128941])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128943 129084])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129086 129231])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129233 129369])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129371 129579])
            ("defmath" function (:prototype-flag t) nil [129581 129991])
            ("function-put" code nil nil [129993 130035])
            ("if" code nil nil [130037 130178])
            ("if" code nil nil [130339 130444])
            ("if" code nil nil [130565 130669])
            ("if" code nil nil [130796 130902])
            ("if" code nil nil [131023 131127])
            ("if" code nil nil [131251 131356])
            ("if" code nil nil [131480 131585])
            ("if" code nil nil [131749 131848])
            ("if" code nil nil [131969 132080])
            ("if" code nil nil [132201 132306])
            ("if" code nil nil [132433 132554])
            ("if" code nil nil [132678 132783])
            ("if" code nil nil [132910 133016])
            ("if" code nil nil [133143 133242])
            ("if" code nil nil [133366 133464])
            ("if" code nil nil [133591 133690])
            ("if" code nil nil [133817 133916])
            ("if" code nil nil [134040 134146])
            ("if" code nil nil [134270 134384])
            ("if" code nil nil [134505 134609])
            ("if" code nil nil [134733 134838])
            ("if" code nil nil [134962 135060])
            ("if" code nil nil [135221 135324])
            ("if" code nil nil [135448 135567])
            ("if" code nil nil [135688 135792])
            ("if" code nil nil [135919 136036])
            ("if" code nil nil [136160 136270])
            ("if" code nil nil [136394 136507])
            ("if" code nil nil [136631 136736])
            ("if" code nil nil [136863 136962])
            ("if" code nil nil [137083 137180])
            ("if" code nil nil [137304 137409])
            ("if" code nil nil [137536 137634])
            ("if" code nil nil [137761 137867])
            ("if" code nil nil [137994 138099])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [138223 138276])
            ("if" code nil nil [138278 138376])
            ("if" code nil nil [138503 138609])
            ("if" code nil nil [138730 138834])
            ("if" code nil nil [138995 139114])
            ("if" code nil nil [139235 139356])
            ("if" code nil nil [139477 139581])
            ("if" code nil nil [139702 139812])
            ("if" code nil nil [139933 140030])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [140147 140291])
            ("if" code nil nil [140293 140398])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [140527 142154])
            ("if" code nil nil [142156 142329])
            ("canlock-insert-header" function (:prototype-flag t) nil [142447 142612])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142614 142807])
            ("if" code nil nil [142809 142908])
            ("if" code nil nil [143039 143133])
            ("if" code nil nil [143258 143361])
            ("if" code nil nil [143509 143607])
            ("if" code nil nil [143735 143828])
            ("if" code nil nil [143956 144084])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [144226 144339])
            ("if" code nil nil [144341 144436])
            ("if" code nil nil [144567 144801])
            ("c-guess-guessed-offsets-alist" variable nil nil [144932 145011])
            ("c-guess-guessed-basic-offset" variable nil nil [145013 145090])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145092 145462])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145464 145780])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145782 146146])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146148 146458])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146460 146819])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146821 147710])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147712 148151])
            ("if" code nil nil [148153 148253])
            ("if" code nil nil [148384 148478])
            ("if" code nil nil [148609 148710])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [148838 149290])
            ("add-to-list" code nil nil [149292 149358])
            ("add-to-list" code nil nil [149360 149439])
            ("add-to-list" code nil nil [149441 149509])
            ("add-to-list" code nil nil [149511 149563])
            ("add-to-list" code nil nil [149565 149624])
            ("add-to-list" code nil nil [149626 149688])
            ("add-to-list" code nil nil [149690 149744])
            ("add-to-list" code nil nil [149746 149798])
            ("add-to-list" code nil nil [149800 149855])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149857 150405])
            ("c-or-c++-mode" function (:prototype-flag t) nil [150407 150868])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150870 151427])
            ("add-to-list" code nil nil [151429 151484])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151486 152056])
            ("add-to-list" code nil nil [152058 152116])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152118 152680])
            ("add-to-list" code nil nil [152682 152738])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152740 153321])
            ("add-to-list" code nil nil [153323 153414])
            ("add-to-list" code nil nil [153416 153475])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153477 154039])
            ("add-to-list" code nil nil [154041 154097])
            ("add-to-list" code nil nil [154099 154156])
            ("add-to-list" code nil nil [154158 154216])
            ("add-to-list" code nil nil [154218 154276])
            ("add-to-list" code nil nil [154278 154336])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154338 154896])
            ("if" code nil nil [154898 155069])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155211 156337])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156339 156884])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156886 157224])
            ("if" code nil nil [157226 157348])
            ("put" code nil nil [157475 157527])
            ("put" code nil nil [157528 157584])
            ("put" code nil nil [157585 157643])
            ("if" code nil nil [157645 157815])
            ("ccl-compile" function (:prototype-flag t) nil [157939 158064])
            ("ccl-dump" function (:prototype-flag t) nil [158066 158152])
            ("declare-ccl-program" function (:prototype-flag t) nil [158154 158616])
            ("define-ccl-program" function (:prototype-flag t) nil [158618 166505])
            ("function-put" code nil nil [166507 166560])
            ("check-ccl-program" function (:prototype-flag t) nil [166562 166883])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [166885 167168])
            ("if" code nil nil [167170 167261])
            ("cconv-closure-convert" function (:prototype-flag t) nil [167385 167690])
            ("cconv-warnings-only" function (:prototype-flag t) nil [167692 167813])
            ("if" code nil nil [167815 167910])
            ("if" code nil nil [168006 168097])
            ("push" code nil nil [168210 168266])
            ("if" code nil nil [168268 168363])
            ("if" code nil nil [168506 168615])
            ("if" code nil nil [168755 168856])
            ("if" code nil nil [168999 169102])
            ("if" code nil nil [169248 169359])
            ("push" code nil nil [169489 169548])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169550 169783])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169785 170018])
            ("cfengine-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170020 170142])
            ("if" code nil nil [170144 170244])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [170358 170871])
            ("if" code nil nil [170873 170976])
            ("push" code nil nil [171099 171155])
            ("if" code nil nil [171157 171251])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171407 171588])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171590 171788])
            ("if" code nil nil [171790 171901])
            ("push" code nil nil [172041 172102])
            ("put" code nil nil [172103 172172])
            ("put" code nil nil [172173 172239])
            ("put" code nil nil [172240 172317])
            ("put" code nil nil [172318 172395])
            ("put" code nil nil [172396 172479])
            ("put" code nil nil [172480 172551])
            ("put" code nil nil [172552 172628])
            ("put" code nil nil [172629 172707])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [172709 172821])
            ("put" code nil nil [172822 172886])
            ("put" code nil nil [172887 172952])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172954 173174])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173176 173704])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173706 174246])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174248 174537])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174539 174840])
            ("checkdoc-file" function (:prototype-flag t) nil [174842 174967])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174969 175324])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175326 175586])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175588 175877])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175879 176238])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176240 176455])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176457 176798])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176800 177165])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177167 177374])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177376 177622])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177624 177875])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177877 178146])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178148 178396])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178398 178617])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178619 178859])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178861 179100])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179102 179332])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179334 179886])
            ("checkdoc-package-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179888 180015])
            ("if" code nil nil [180017 180118])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180261 180413])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180415 180522])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180524 180672])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180674 180777])
            ("post-read-decode-hz" function (:prototype-flag t) nil [180779 180847])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [180849 180921])
            ("if" code nil nil [180923 181092])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181203 181608])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181610 181982])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181984 182609])
            ("if" code nil nil [182611 182776])
            ("if" code nil nil [182891 183030])
            ("if" code nil nil [183200 183295])
            ("push" code nil nil [183441 183502])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [183646 187155])
            ("if" code nil nil [187157 187270])
            ("push" code nil nil [187396 187453])
            ("define-obsolete-variable-alias" code nil nil [187455 187545])
            ("cl-custom-print-functions" variable nil nil [187547 188033])
            ("cl-old-struct-compat-mode" variable nil nil [188035 188372])
            ("custom-autoload" code nil nil [188374 188431])
            ("cl-old-struct-compat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [188433 188714])
            ("if" code nil nil [188716 188809])
            ("if" code nil nil [188976 189070])
            ("push" code nil nil [189210 189269])
            ("cl-print-object" function (:prototype-flag t) nil [189271 189573])
            ("cl-prin1" function (:prototype-flag t) nil [189575 189890])
            ("cl-prin1-to-string" function (:prototype-flag t) nil [189892 190035])
            ("if" code nil nil [190037 190155])
            ("if" code nil nil [190319 190413])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [190541 191077])
            ("if" code nil nil [191079 191178])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [191292 191956])
            ("if" code nil nil [191958 192118])
            ("color-name-to-rgb" function (:prototype-flag t) nil [192220 192757])
            ("if" code nil nil [192759 192854])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [192959 193627])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [193629 194424])
            ("make-comint" function (:prototype-flag t) nil [194426 195164])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195166 195506])
            ("function-put" code nil nil [195508 195565])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [195567 195787])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195789 196087])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [196089 196383])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [196385 196640])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [196642 196910])
            ("if" code nil nil [196912 197047])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197167 198444])
            ("if" code nil nil [198446 198547])
            ("if" code nil nil [198670 198772])
            ("compilation-mode-hook" variable nil nil [198900 198988])
            ("custom-autoload" code nil nil [198990 199042])
            ("compilation-start-hook" variable nil nil [199044 199186])
            ("custom-autoload" code nil nil [199188 199241])
            ("compilation-window-height" variable nil nil [199243 199353])
            ("custom-autoload" code nil nil [199355 199411])
            ("compilation-process-setup-function" variable nil nil [199413 199718])
            ("compilation-buffer-name-function" variable nil nil [199720 200017])
            ("compilation-finish-function" variable nil nil [200019 200224])
            ("compilation-finish-functions" variable nil nil [200226 200444])
            ("put" code nil nil [200445 200503])
            ("compilation-ask-about-save" variable (:default-value t) nil [200505 200674])
            ("custom-autoload" code nil nil [200676 200733])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [200735 200981])
            ("custom-autoload" code nil nil [200983 201037])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [201039 201686])
            ("custom-autoload" code nil nil [201688 201734])
            ("put" code nil nil [201735 201880])
            ("compilation-disable-input" variable nil nil [201882 202124])
            ("custom-autoload" code nil nil [202126 202182])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202184 203437])
            ("compilation-start" function (:prototype-flag t) nil [203439 204391])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204393 204795])
            ("put" code nil nil [204797 204845])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204847 205339])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205341 205753])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205755 205984])
            ("if" code nil nil [205986 206140])
            ("dynamic-completion-mode" variable nil nil [206257 206586])
            ("custom-autoload" code nil nil [206588 206647])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206649 206924])
            ("if" code nil nil [206926 207469])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207611 209038])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209040 209195])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209197 209669])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209671 210095])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210097 210857])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210859 211018])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211020 211346])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211348 211676])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211678 211995])
            ("conf-toml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211997 212276])
            ("conf-desktop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212278 212661])
            ("if" code nil nil [212663 212761])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212879 213201])
            ("cookie-insert" function (:prototype-flag t) nil [213203 213451])
            ("cookie-snarf" function (:prototype-flag t) nil [213453 213731])
            ("if" code nil nil [213733 213830])
            ("put" code nil nil [213973 214032])
            ("put" code nil nil [214033 214092])
            ("put" code nil nil [214093 214152])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214154 214606])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214608 214875])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214877 214999])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215001 215219])
            ("if" code nil nil [215221 215324])
            ("put" code nil nil [215468 215524])
            ("put" code nil nil [215525 215581])
            ("put" code nil nil [215582 215648])
            ("put" code nil nil [215649 215705])
            ("put" code nil nil [215706 215776])
            ("put" code nil nil [215777 215847])
            ("put" code nil nil [215848 215911])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215913 224206])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224208 224291])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224293 224399])
            ("if" code nil nil [224401 224519])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224635 224931])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224933 225029])
            ("if" code nil nil [225031 225122])
            ("completing-read-multiple" function (:prototype-flag t) nil [225240 226202])
            ("if" code nil nil [226204 226295])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [226426 227182])
            ("add-to-list" code nil nil [227184 227242])
            ("scss-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227244 227333])
            ("css-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227335 227676])
            ("if" code nil nil [227678 227782])
            ("cua-mode" variable nil nil [227913 228182])
            ("custom-autoload" code nil nil [228184 228226])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228228 229346])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229348 229474])
            ("if" code nil nil [229476 229572])
            ("if" code nil nil [229703 229799])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229930 230118])
            ("if" code nil nil [230120 230216])
            ("cursor-sensor-inhibit" variable nil nil [230372 230586])
            ("cursor-intangible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230588 230731])
            ("cursor-sensor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230733 231232])
            ("if" code nil nil [231234 231345])
            ("if" code nil nil [231453 231588])
            ("custom-browse-sort-alphabetically" variable nil nil [231699 231821])
            ("custom-autoload" code nil nil [231823 231888])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [231890 232008])
            ("custom-autoload" code nil nil [232010 232075])
            ("custom-menu-sort-alphabetically" variable nil nil [232077 232192])
            ("custom-autoload" code nil nil [232194 232257])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232259 232784])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232786 233439])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [233441 234100])
            ("customize-push-and-save" function (:prototype-flag t) nil [234102 234514])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234516 234810])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234812 235073])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235075 235268])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235270 235427])
            ("defalias" code nil nil [235429 235477])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235479 235589])
            ("defalias" code nil nil [235591 235665])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235667 235846])
            ("customize-package-emacs-version-alist" variable nil nil [235848 237188])
            ("defalias" code nil nil [237190 237246])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237248 237711])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237713 238132])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238134 238464])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238466 238590])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238592 238704])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238706 238800])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238802 239335])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239337 239486])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239488 239602])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239604 239720])
            ("custom-prompt-customize-unsaved-options" function (:prototype-flag t) nil [239722 239949])
            ("custom-buffer-create" function (:prototype-flag t) nil [239951 240297])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [240299 240735])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240737 240860])
            ("custom-file" variable nil nil [240862 242382])
            ("custom-autoload" code nil nil [242384 242427])
            ("custom-save-all" function (:prototype-flag t) nil [242429 242528])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242530 242654])
            ("custom-menu-create" function (:prototype-flag t) nil [242656 242825])
            ("customize-menu-create" function (:prototype-flag t) nil [242827 243131])
            ("if" code nil nil [243133 243251])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243365 243787])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243789 243911])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243913 244034])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244036 244265])
            ("if" code nil nil [244267 244386])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244509 244599])
            ("if" code nil nil [244601 244699])
            ("push" code nil nil [244820 244878])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244880 245391])
            ("define-obsolete-function-alias" code nil nil [245393 245464])
            ("global-cwarn-mode" variable nil nil [245466 245771])
            ("custom-autoload" code nil nil [245773 245821])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245823 246216])
            ("if" code nil nil [246218 246345])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [246488 246626])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [246628 246780])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246782 247371])
            ("if" code nil nil [247373 247490])
            ("put" code nil nil [247597 247652])
            ("put" code nil nil [247653 247704])
            ("define-key" code nil nil [247706 247746])
            ("define-key" code nil nil [247748 247796])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247798 248288])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248290 249387])
            ("if" code nil nil [249389 249488])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [249617 249729])
            ("if" code nil nil [249731 249836])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249943 250221])
            ("if" code nil nil [250223 250316])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250447 254456])
            ("if" code nil nil [254458 254554])
            ("setq" code nil nil [254678 254700])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [254702 255115])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [255117 255829])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [255831 256154])
            ("debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256156 256897])
            ("defalias" code nil nil [256899 256949])
            ("cancel-debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256951 257304])
            ("defalias" code nil nil [257306 257370])
            ("if" code nil nil [257372 257491])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257612 257733])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257735 258462])
            ("if" code nil nil [258464 258565])
            ("push" code nil nil [258678 258738])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258740 258840])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258842 258995])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258997 259170])
            ("if" code nil nil [259172 259281])
            ("defalias" code nil nil [259386 259440])
            ("delete-selection-mode" variable nil nil [259442 259763])
            ("custom-autoload" code nil nil [259765 259818])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259820 260571])
            ("if" code nil nil [260573 260693])
            ("define-derived-mode" function (:prototype-flag t) nil [260823 263050])
            ("function-put" code nil nil [263052 263106])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [263108 263392])
            ("if" code nil nil [263394 263498])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263615 264033])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264035 265339])
            ("describe-char-eldoc" function (:prototype-flag t) nil [265341 265877])
            ("if" code nil nil [265879 265982])
            ("desktop-save-mode" variable nil nil [266090 266395])
            ("custom-autoload" code nil nil [266397 266447])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266449 267379])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [267381 267933])
            ("custom-autoload" code nil nil [267935 267988])
            ("defvar-local" code nil nil [267990 268586])
            ("desktop-buffer-mode-handlers" variable nil nil [268588 269896])
            ("put" code nil nil [269898 269957])
            ("desktop-minor-mode-handlers" variable nil nil [269959 271274])
            ("put" code nil nil [271276 271334])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271336 271789])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271791 273127])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273129 273274])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273276 273800])
            ("desktop-load-default" function (:prototype-flag t) nil [273802 273945])
            ("make-obsolete" code nil nil [273947 274011])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274013 274268])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274270 274385])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274387 274475])
            ("if" code nil nil [274477 274576])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274697 275112])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275114 275308])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275310 275588])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275590 275725])
            ("if" code nil nil [275727 275824])
            ("if" code nil nil [275929 276026])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276166 276516])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276518 277285])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277287 277377])
            ("if" code nil nil [277379 277495])
            ("diff-switches" variable (:default-value (purecopy "-u")) nil [277600 277712])
            ("custom-autoload" code nil nil [277714 277755])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [277757 277832])
            ("custom-autoload" code nil nil [277834 277874])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277876 278442])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278444 278777])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [278779 278894])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278896 279100])
            ("if" code nil nil [279102 279195])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279315 279895])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279897 280177])
            ("if" code nil nil [280179 280277])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280381 280601])
            ("if" code nil nil [280603 280706])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [280808 281483])
            ("custom-autoload" code nil nil [281485 281536])
            ("dired-directory" variable nil nil [281538 281841])
            ("define-key" code nil nil [281843 281876])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281878 282894])
            ("define-key" code nil nil [282896 282944])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282946 283101])
            ("define-key" code nil nil [283103 283150])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283152 283298])
            ("dired-noselect" function (:prototype-flag t) nil [283300 283456])
            ("dired-mode" function (:prototype-flag t) nil [283458 286499])
            ("put" code nil nil [286501 286545])
            ("if" code nil nil [286547 286642])
            ("if" code nil nil [286793 286938])
            ("if" code nil nil [287083 287196])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287307 287899])
            ("dirtrack" function (:prototype-flag t) nil [287901 288230])
            ("if" code nil nil [288232 288333])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288460 288828])
            ("if" code nil nil [288830 288932])
            ("make-display-table" function (:prototype-flag t) nil [289049 289146])
            ("display-table-slot" function (:prototype-flag t) nil [289148 289467])
            ("set-display-table-slot" function (:prototype-flag t) nil [289469 289799])
            ("describe-display-table" function (:prototype-flag t) nil [289801 289918])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289920 290061])
            ("standard-display-8bit" function (:prototype-flag t) nil [290063 290569])
            ("standard-display-default" function (:prototype-flag t) nil [290571 290710])
            ("standard-display-ascii" function (:prototype-flag t) nil [290712 290828])
            ("standard-display-g1" function (:prototype-flag t) nil [290830 291061])
            ("standard-display-graphic" function (:prototype-flag t) nil [291063 291281])
            ("standard-display-underline" function (:prototype-flag t) nil [291283 291412])
            ("create-glyph" function (:prototype-flag t) nil [291414 291545])
            ("make-glyph-code" function (:prototype-flag t) nil [291547 291685])
            ("glyph-char" function (:prototype-flag t) nil [291687 291789])
            ("glyph-face" function (:prototype-flag t) nil [291791 291922])
            ("standard-display-european" function (:prototype-flag t) nil [291924 292825])
            ("if" code nil nil [292827 292946])
            ("display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293101 293459])
            ("global-display-line-numbers-mode" variable nil nil [293461 293826])
            ("custom-autoload" code nil nil [293828 293906])
            ("global-display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293908 294406])
            ("if" code nil nil [294408 294533])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294660 295047])
            ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [295143 296086])
            ("custom-autoload" code nil nil [296088 296133])
            ("if" code nil nil [296135 296226])
            ("if" code nil nil [296330 296421])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296552 296964])
            ("defalias" code nil nil [296966 296997])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296999 297118])
            ("if" code nil nil [297120 297221])
            ("doc-view-mode-p" function (:prototype-flag t) nil [297332 297548])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297550 297895])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [297897 298084])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298086 298453])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [298455 298524])
            ("if" code nil nil [298526 298627])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298742 298844])
            ("if" code nil nil [298846 298963])
            ("if" code nil nil [299059 299150])
            ("if" code nil nil [299258 299352])
            ("if" code nil nil [299463 299593])
            ("if" code nil nil [299701 299839])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299944 300346])
            ("if" code nil nil [300348 300445])
            ("push" code nil nil [300559 300616])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300618 300705])
            ("if" code nil nil [300707 300814])
            ("if" code nil nil [300954 301131])
            ("defalias" code nil nil [301278 301337])
            ("define-minor-mode" function (:prototype-flag t) nil [301339 304824])
            ("function-put" code nil nil [304826 304878])
            ("defalias" code nil nil [304880 304951])
            ("defalias" code nil nil [304953 305019])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [305021 306348])
            ("function-put" code nil nil [306350 306413])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [306415 307097])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [307099 307349])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [307351 307547])
            ("if" code nil nil [307549 307654])
            ("easy-menu-define" function (:prototype-flag t) nil [307795 311273])
            ("function-put" code nil nil [311275 311336])
            ("easy-menu-do-define" function (:prototype-flag t) nil [311338 311421])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [311423 311721])
            ("easy-menu-change" function (:prototype-flag t) nil [311723 312614])
            ("if" code nil nil [312616 312732])
            ("if" code nil nil [312863 312964])
            ("if" code nil nil [313095 313192])
            ("if" code nil nil [313323 313424])
            ("if" code nil nil [313555 313656])
            ("if" code nil nil [313787 313884])
            ("if" code nil nil [314015 314112])
            ("if" code nil nil [314243 314344])
            ("push" code nil nil [314471 314529])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314531 314614])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314616 314937])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314939 315249])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315251 315824])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315826 316040])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316042 316363])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316365 316675])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316677 316995])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316997 317275])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317277 317575])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317577 317848])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317850 318587])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318589 319334])
            ("defalias" code nil nil [319336 319372])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319374 319677])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319679 319958])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319960 320064])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320066 320168])
            ("ebnf-setup" function (:prototype-flag t) nil [320170 320255])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320257 320433])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320435 320629])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320631 320753])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320755 320916])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320918 321084])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321086 321251])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321253 321496])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321498 321730])
            ("if" code nil nil [321732 321828])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321956 322348])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322350 322488])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322490 322587])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322589 322694])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322696 322801])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322803 322906])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322908 323011])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323013 323147])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323149 323281])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323283 323415])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323417 323548])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323550 323680])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323682 323812])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323814 324110])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324112 324383])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324385 324597])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324599 324784])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324786 325123])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325125 325265])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325267 325409])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325411 325540])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325542 325649])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325651 325895])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325897 325991])
            ("if" code nil nil [325993 326125])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326242 327693])
            ("if" code nil nil [327695 327829])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327943 328175])
            ("if" code nil nil [328177 328299])
            ("ecomplete-setup" function (:prototype-flag t) nil [328413 328499])
            ("if" code nil nil [328501 328604])
            ("push" code nil nil [328711 328765])
            ("global-ede-mode" variable nil nil [328767 329064])
            ("custom-autoload" code nil nil [329066 329110])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329112 329487])
            ("if" code nil nil [329489 329619])
            ("if" code nil nil [329742 329838])
            ("if" code nil nil [329996 330106])
            ("if" code nil nil [330266 330362])
            ("if" code nil nil [330528 330626])
            ("if" code nil nil [330798 330899])
            ("if" code nil nil [331065 331189])
            ("if" code nil nil [331318 331416])
            ("if" code nil nil [331579 331682])
            ("if" code nil nil [331845 331948])
            ("if" code nil nil [332111 332208])
            ("if" code nil nil [332377 332484])
            ("if" code nil nil [332647 332767])
            ("if" code nil nil [332933 333038])
            ("if" code nil nil [333198 333299])
            ("if" code nil nil [333457 333567])
            ("if" code nil nil [333693 333813])
            ("if" code nil nil [333939 334042])
            ("if" code nil nil [334165 334266])
            ("if" code nil nil [334421 334525])
            ("if" code nil nil [334668 334768])
            ("if" code nil nil [334914 335048])
            ("if" code nil nil [335197 335299])
            ("if" code nil nil [335445 335546])
            ("if" code nil nil [335692 335793])
            ("if" code nil nil [335936 336036])
            ("if" code nil nil [336182 336311])
            ("if" code nil nil [336463 336584])
            ("if" code nil nil [336736 336839])
            ("if" code nil nil [336988 337097])
            ("if" code nil nil [337260 337374])
            ("if" code nil nil [337503 337608])
            ("if" code nil nil [337737 337841])
            ("if" code nil nil [338013 338113])
            ("if" code nil nil [338253 338360])
            ("if" code nil nil [338520 338636])
            ("edebug-all-defs" variable nil nil [338763 339230])
            ("custom-autoload" code nil nil [339232 339277])
            ("edebug-all-forms" variable nil nil [339279 339513])
            ("custom-autoload" code nil nil [339515 339561])
            ("edebug-basic-spec" function (:prototype-flag t) nil [339563 339769])
            ("defalias" code nil nil [339771 339823])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339825 340702])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340704 340795])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340797 340883])
            ("if" code nil nil [340885 341041])
            ("push" code nil nil [341148 341207])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341209 341452])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341454 341710])
            ("defalias" code nil nil [341712 341744])
            ("defalias" code nil nil [341746 341776])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341778 341999])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342001 342214])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342216 342751])
            ("defalias" code nil nil [342753 342788])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342790 343342])
            ("defalias" code nil nil [343344 343381])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343383 343669])
            ("defalias" code nil nil [343671 343707])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343709 344011])
            ("defalias" code nil nil [344013 344066])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344068 344367])
            ("defalias" code nil nil [344369 344407])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344409 344798])
            ("defalias" code nil nil [344800 344848])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344850 345426])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345428 345833])
            ("defalias" code nil nil [345835 345900])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345902 346335])
            ("defalias" code nil nil [346337 346430])
            ("defalias" code nil nil [346432 346508])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346510 347031])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347033 347554])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347556 348057])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348059 348616])
            ("defalias" code nil nil [348618 348660])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348662 349057])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349059 349531])
            ("defalias" code nil nil [349533 349603])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349605 350276])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350278 351016])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351018 351442])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351444 351905])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351907 352255])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352257 352821])
            ("defalias" code nil nil [352823 352859])
            ("defalias" code nil nil [352861 352906])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352908 353332])
            ("defalias" code nil nil [353334 353371])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353373 353519])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353521 353655])
            ("ediff-files-command" function (:prototype-flag t) nil [353657 353776])
            ("ediff3-files-command" function (:prototype-flag t) nil [353778 353901])
            ("ediff-merge-command" function (:prototype-flag t) nil [353903 354028])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [354030 354185])
            ("ediff-directories-command" function (:prototype-flag t) nil [354187 354320])
            ("ediff-directories3-command" function (:prototype-flag t) nil [354322 354456])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [354458 354603])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [354605 354777])
            ("if" code nil nil [354779 354874])
            ("if" code nil nil [354997 355097])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355220 355278])
            ("if" code nil nil [355280 355380])
            ("if" code nil nil [355503 355620])
            ("if" code nil nil [355743 355843])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355966 356053])
            ("defalias" code nil nil [356055 356097])
            ("if" code nil nil [356099 356199])
            ("if" code nil nil [356322 356422])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356545 356757])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356759 356987])
            ("if" code nil nil [356989 357089])
            ("if" code nil nil [357212 357338])
            ("if" code nil nil [357461 357561])
            ("push" code nil nil [357668 357726])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357728 358210])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358212 358334])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358336 358488])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358490 359165])
            ("format-kbd-macro" function (:prototype-flag t) nil [359167 359548])
            ("if" code nil nil [359550 359649])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359765 360003])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360005 360079])
            ("if" code nil nil [360081 360172])
            ("if" code nil nil [360314 360417])
            ("if" code nil nil [360562 360660])
            ("if" code nil nil [360785 360885])
            ("if" code nil nil [361027 361139])
            ("with-electric-help" function (:prototype-flag t) nil [361241 362464])
            ("electric-helpify" function (:prototype-flag t) nil [362466 362541])
            ("if" code nil nil [362543 362650])
            ("push" code nil nil [362773 362829])
            ("if" code nil nil [362831 363042])
            ("if" code nil nil [363189 363289])
            ("if" code nil nil [363471 363642])
            ("push" code nil nil [363788 363849])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [363851 364238])
            ("if" code nil nil [364240 364411])
            ("if" code nil nil [364593 364695])
            ("if" code nil nil [364857 364981])
            ("if" code nil nil [365154 365253])
            ("if" code nil nil [365412 365524])
            ("electric-pair-mode" variable nil nil [365638 365947])
            ("custom-autoload" code nil nil [365949 366002])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366004 366660])
            ("electric-pair-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366662 366790])
            ("if" code nil nil [366792 366899])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367016 367331])
            ("if" code nil nil [367333 367438])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367562 367634])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367636 367788])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367790 367923])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367925 368052])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368054 368245])
            ("if" code nil nil [368247 368342])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368460 368605])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368607 368881])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368883 369121])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [369123 369349])
            ("if" code nil nil [369351 369442])
            ("if" code nil nil [369604 369732])
            ("if" code nil nil [369897 370004])
            ("if" code nil nil [370166 370264])
            ("if" code nil nil [370423 370521])
            ("if" code nil nil [370680 370777])
            ("if" code nil nil [370936 371034])
            ("if" code nil nil [371193 371290])
            ("if" code nil nil [371443 371538])
            ("if" code nil nil [371697 371795])
            ("if" code nil nil [371960 372060])
            ("if" code nil nil [372225 372325])
            ("if" code nil nil [372490 372589])
            ("if" code nil nil [372751 372850])
            ("if" code nil nil [373009 373107])
            ("if" code nil nil [373269 373367])
            ("if" code nil nil [373526 373655])
            ("if" code nil nil [373814 373928])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374045 374990])
            ("if" code nil nil [374992 375117])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375238 375399])
            ("set-advertised-calling-convention" code nil nil [375401 375471])
            ("if" code nil nil [375473 375582])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375693 375830])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375832 376034])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376036 376168])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376170 376371])
            ("emerge-files-command" function (:prototype-flag t) nil [376373 376434])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [376436 376511])
            ("emerge-files-remote" function (:prototype-flag t) nil [376513 376596])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [376598 376704])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376706 376862])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376864 377078])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377080 377179])
            ("if" code nil nil [377181 377278])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377409 377961])
            ("enriched-encode" function (:prototype-flag t) nil [377963 378038])
            ("enriched-decode" function (:prototype-flag t) nil [378040 378106])
            ("if" code nil nil [378108 378209])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378305 378425])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378427 378555])
            ("epa-select-keys" function (:prototype-flag t) nil [378557 378917])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378919 379121])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379123 379191])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379193 379295])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379297 379393])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379395 380329])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380331 380581])
            ("function-put" code nil nil [380583 380647])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380649 381290])
            ("function-put" code nil nil [381292 381346])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381348 381618])
            ("function-put" code nil nil [381620 381687])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381689 382344])
            ("function-put" code nil nil [382346 382398])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382400 383079])
            ("function-put" code nil nil [383081 383136])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383138 383238])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383240 383318])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383320 383416])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383418 383574])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383576 383666])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383668 383761])
            ("if" code nil nil [383763 383854])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383968 384051])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384053 384134])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384136 384213])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384215 384298])
            ("epa-file-handler" function (:prototype-flag t) nil [384409 384489])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384491 384547])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384549 384606])
            ("if" code nil nil [384608 384704])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384815 385092])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385094 385246])
            ("function-put" code nil nil [385248 385301])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385303 385472])
            ("function-put" code nil nil [385474 385526])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385528 385679])
            ("function-put" code nil nil [385681 385731])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385733 386293])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386295 386468])
            ("function-put" code nil nil [386470 386527])
            ("epa-global-mail-mode" variable nil nil [386529 386846])
            ("custom-autoload" code nil nil [386848 386902])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386904 387174])
            ("if" code nil nil [387176 387277])
            ("push" code nil nil [387372 387428])
            ("epg-make-context" function (:prototype-flag t) nil [387430 387609])
            ("if" code nil nil [387611 387702])
            ("epg-find-configuration" function (:prototype-flag t) nil [387819 388361])
            ("epg-configuration" function (:prototype-flag t) nil [388363 388497])
            ("make-obsolete" code nil nil [388499 388565])
            ("epg-check-configuration" function (:prototype-flag t) nil [388567 388723])
            ("epg-expand-group" function (:prototype-flag t) nil [388725 388838])
            ("if" code nil nil [388840 388938])
            ("push" code nil nil [389041 389095])
            ("erc-select-read-args" function (:prototype-flag t) nil [389097 389218])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389220 390045])
            ("defalias" code nil nil [390047 390074])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390076 390223])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [390225 390497])
            ("if" code nil nil [390499 390610])
            ("erc-autoaway-mode" function (:prototype-flag t) nil [390749 390793])
            ("if" code nil nil [390795 390899])
            ("if" code nil nil [391027 391126])
            ("erc-button-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391251 391297])
            ("if" code nil nil [391299 391397])
            ("erc-capab-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391519 391572])
            ("if" code nil nil [391574 391686])
            ("erc-define-minor-mode" function (:prototype-flag t) nil [391811 391857])
            ("if" code nil nil [391859 391957])
            ("erc-dcc-mode" function (:prototype-flag t) nil [392073 392107])
            ("erc-cmd-DCC" function (:prototype-flag t) nil [392109 392409])
            ("pcomplete/erc-mode/DCC" function (:prototype-flag t) nil [392411 392516])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [392518 392612])
            ("erc-ctcp-query-DCC" function (:prototype-flag t) nil [392614 392861])
            ("if" code nil nil [392863 392980])
            ("erc-notifications-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393157 393224])
            ("if" code nil nil [393226 393353])
            ("erc-cmd-ezb" function (:prototype-flag t) nil [393492 393615])
            ("erc-ezb-get-login" function (:prototype-flag t) nil [393617 393876])
            ("erc-ezb-lookup-action" function (:prototype-flag t) nil [393878 393954])
            ("erc-ezb-notice-autodetect" function (:prototype-flag t) nil [393956 394076])
            ("erc-ezb-identify" function (:prototype-flag t) nil [394078 394182])
            ("erc-ezb-init-session-list" function (:prototype-flag t) nil [394184 394303])
            ("erc-ezb-end-of-session-list" function (:prototype-flag t) nil [394305 394436])
            ("erc-ezb-add-session" function (:prototype-flag t) nil [394438 394556])
            ("erc-ezb-select" function (:prototype-flag t) nil [394558 394681])
            ("erc-ezb-select-session" function (:prototype-flag t) nil [394683 394787])
            ("erc-ezb-initialize" function (:prototype-flag t) nil [394789 394897])
            ("if" code nil nil [394899 395003])
            ("erc-fill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395122 395164])
            ("erc-fill" function (:prototype-flag t) nil [395166 395360])
            ("if" code nil nil [395362 395458])
            ("if" code nil nil [395586 395685])
            ("if" code nil nil [395813 395912])
            ("erc-identd-mode" function (:prototype-flag t) nil [396037 396077])
            ("erc-identd-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396079 396464])
            ("erc-identd-stop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396466 396537])
            ("if" code nil nil [396539 396644])
            ("erc-create-imenu-index" function (:prototype-flag t) nil [396766 396832])
            ("if" code nil nil [396834 396944])
            ("erc-autojoin-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397063 397109])
            ("if" code nil nil [397111 397207])
            ("if" code nil nil [397326 397461])
            ("erc-list-mode" function (:prototype-flag t) nil [397580 397616])
            ("if" code nil nil [397618 397714])
            ("erc-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397830 397870])
            ("erc-logging-enabled" function (:prototype-flag t) nil [397872 398228])
            ("erc-save-buffer-in-logs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398230 398726])
            ("if" code nil nil [398728 398823])
            ("erc-match-mode" function (:prototype-flag t) nil [398945 398983])
            ("erc-add-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398985 399074])
            ("erc-delete-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399076 399171])
            ("erc-add-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399173 399265])
            ("erc-delete-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399267 399365])
            ("erc-add-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399367 399468])
            ("erc-delete-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399470 399577])
            ("erc-add-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399579 399701])
            ("erc-delete-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399703 399831])
            ("if" code nil nil [399833 399930])
            ("erc-menu-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400049 400091])
            ("if" code nil nil [400093 400194])
            ("erc-netsplit-mode" function (:prototype-flag t) nil [400333 400377])
            ("erc-cmd-WHOLEFT" function (:prototype-flag t) nil [400379 400457])
            ("if" code nil nil [400459 400559])
            ("erc-determine-network" function (:prototype-flag t) nil [400698 400951])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400953 401084])
            ("if" code nil nil [401086 401186])
            ("erc-notify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [401311 401357])
            ("erc-cmd-NOTIFY" function (:prototype-flag t) nil [401359 401603])
            ("pcomplete/erc-mode/NOTIFY" function (:prototype-flag t) nil [401605 401675])
            ("if" code nil nil [401677 401775])
            ("erc-page-mode" function (:prototype-flag t) nil [401894 401930])
            ("if" code nil nil [401932 402028])
            ("erc-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402170 402223])
            ("if" code nil nil [402225 402346])
            ("erc-replace-mode" function (:prototype-flag t) nil [402474 402516])
            ("if" code nil nil [402518 402625])
            ("erc-ring-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402744 402786])
            ("if" code nil nil [402788 402884])
            ("erc-services-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403023 403073])
            ("erc-nickserv-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403075 403208])
            ("erc-nickserv-identify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403210 403403])
            ("if" code nil nil [403405 403505])
            ("erc-sound-mode" function (:prototype-flag t) nil [403627 403665])
            ("if" code nil nil [403667 403764])
            ("erc-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403903 404059])
            ("if" code nil nil [404061 404161])
            ("erc-spelling-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404300 404350])
            ("if" code nil nil [404352 404461])
            ("erc-timestamp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404583 404631])
            ("if" code nil nil [404633 404730])
            ("erc-track-minor-mode" variable nil nil [404852 405010])
            ("custom-autoload" code nil nil [405012 405067])
            ("erc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405069 405610])
            ("erc-track-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405612 405656])
            ("if" code nil nil [405658 405755])
            ("erc-truncate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405894 405944])
            ("erc-truncate-buffer-to-size" function (:prototype-flag t) nil [405946 406210])
            ("erc-truncate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406212 406386])
            ("if" code nil nil [406388 406503])
            ("erc-xdcc-mode" function (:prototype-flag t) nil [406622 406658])
            ("erc-xdcc-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406660 406754])
            ("if" code nil nil [406756 406852])
            ("ert-deftest" function (:prototype-flag t) nil [406970 407552])
            ("function-put" code nil nil [407554 407600])
            ("function-put" code nil nil [407602 407654])
            ("put" code nil nil [407656 407698])
            ("put" code nil nil [407700 407739])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [407741 408147])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [408149 408498])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408500 408893])
            ("defalias" code nil nil [408895 408939])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408941 409083])
            ("if" code nil nil [409085 409176])
            ("put" code nil nil [409300 409351])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409353 409458])
            ("if" code nil nil [409460 409553])
            ("if" code nil nil [409675 409773])
            ("if" code nil nil [409895 410029])
            ("if" code nil nil [410151 410248])
            ("if" code nil nil [410367 410464])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [410589 410670])
            ("if" code nil nil [410672 410770])
            ("if" code nil nil [410909 411010])
            ("if" code nil nil [411132 411230])
            ("if" code nil nil [411355 411453])
            ("if" code nil nil [411578 411677])
            ("if" code nil nil [411799 411921])
            ("push" code nil nil [412039 412098])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412100 412636])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412638 412820])
            ("eshell-command-result" function (:prototype-flag t) nil [412822 413186])
            ("define-obsolete-function-alias" code nil nil [413188 413264])
            ("if" code nil nil [413266 413363])
            ("tags-file-name" variable nil nil [413485 413787])
            ("put" code nil nil [413789 413865])
            ("put" code nil nil [413867 413918])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [413920 414148])
            ("custom-autoload" code nil nil [414150 414200])
            ("tags-table-list" variable nil nil [414202 414541])
            ("custom-autoload" code nil nil [414543 414587])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [414589 414800])
            ("custom-autoload" code nil nil [414802 414857])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [414859 415137])
            ("custom-autoload" code nil nil [415139 415183])
            ("find-tag-hook" variable nil nil [415185 415398])
            ("custom-autoload" code nil nil [415400 415442])
            ("find-tag-default-function" variable nil nil [415444 415723])
            ("custom-autoload" code nil nil [415725 415779])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [415781 415873])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [415875 416504])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [416506 417266])
            ("tags-table-files" function (:prototype-flag t) nil [417268 417545])
            ("tags-lazy-completion-table" function (:prototype-flag t) nil [417547 417613])
            ("tags-completion-at-point-function" function nil nil [417615 417783])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [417785 418783])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [418785 419749])
            ("make-obsolete" code nil nil [419751 419807])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419809 420801])
            ("make-obsolete" code nil nil [420803 420885])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420887 421868])
            ("make-obsolete" code nil nil [421870 421950])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421952 422853])
            ("make-obsolete" code nil nil [422855 422914])
            ("defalias" code nil nil [422916 422963])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422965 423514])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423516 424114])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424116 424583])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424585 425184])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425186 425462])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425464 425575])
            ("make-obsolete" code nil nil [425577 425633])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425635 425900])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425902 426159])
            ("etags--xref-backend" function (:prototype-flag t) nil [426161 426220])
            ("if" code nil nil [426222 426564])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [426707 426787])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426789 427407])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427409 428045])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428047 428341])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428343 429051])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429053 429759])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429761 429993])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429995 430111])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430113 430622])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430624 430728])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430730 430875])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430877 431011])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [431013 431329])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [431331 431475])
            ("ethio-find-file" function (:prototype-flag t) nil [431477 431607])
            ("ethio-write-file" function (:prototype-flag t) nil [431609 431745])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431747 431919])
            ("ethio-composition-function" function (:prototype-flag t) nil [431921 432018])
            ("if" code nil nil [432020 432148])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432255 432481])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432483 432664])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432666 432847])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432849 433654])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433656 433935])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433937 434091])
            ("cond" code nil nil [434093 436077])
            ("if" code nil nil [436079 436172])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [436291 436412])
            ("eudc-display-url" function (:prototype-flag t) nil [436414 436511])
            ("eudc-display-mail" function (:prototype-flag t) nil [436513 436623])
            ("eudc-display-sound" function (:prototype-flag t) nil [436625 436731])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [436733 436855])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [436857 436967])
            ("if" code nil nil [436969 437066])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437194 437392])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437394 437518])
            ("if" code nil nil [437520 437620])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437759 437883])
            ("if" code nil nil [437885 437994])
            ("if" code nil nil [438116 438214])
            ("if" code nil nil [438339 438443])
            ("if" code nil nil [438568 438667])
            ("if" code nil nil [438789 438887])
            ("ewoc-create" function (:prototype-flag t) nil [439008 439809])
            ("if" code nil nil [439811 439904])
            ("eww-suggest-uris" variable (:default-value (quote (eww-links-at-point url-get-url-at-point eww-current-url))) nil [440008 440336])
            ("custom-autoload" code nil nil [440338 440381])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440383 440570])
            ("defalias" code nil nil [440572 440599])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440601 440677])
            ("eww-search-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440679 440980])
            ("eww-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440982 441052])
            ("eww-browse-url" function (:prototype-flag t) nil [441054 441131])
            ("eww-list-bookmarks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441133 441209])
            ("if" code nil nil [441211 441302])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [441447 441641])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441643 441988])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441990 442405])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [442407 442652])
            ("if" code nil nil [442654 442759])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [442864 443766])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [443768 443953])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443955 444148])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444150 444335])
            ("define-key" code nil nil [444337 444394])
            ("define-key" code nil nil [444396 444449])
            ("if" code nil nil [444451 444548])
            ("if" code nil nil [444656 444755])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444871 447250])
            ("if" code nil nil [447252 447343])
            ("face-remap-add-relative" function (:prototype-flag t) nil [447460 448552])
            ("face-remap-reset-base" function (:prototype-flag t) nil [448554 448805])
            ("face-remap-set-base" function (:prototype-flag t) nil [448807 449514])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449516 449944])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449946 450399])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450401 450586])
            ("define-key" code nil nil [450588 450644])
            ("define-key" code nil nil [450646 450702])
            ("define-key" code nil nil [450704 450760])
            ("define-key" code nil nil [450762 450818])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450820 451974])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451976 452359])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452361 452846])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452848 453544])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453546 453794])
            ("if" code nil nil [453796 453962])
            ("push" code nil nil [454082 454140])
            ("feedmail-send-it" function (:prototype-flag t) nil [454142 454398])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454400 454553])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454555 454856])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454858 455184])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455186 456333])
            ("if" code nil nil [456335 456436])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456535 456957])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456959 457475])
            ("defalias" code nil nil [457477 457513])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457515 457872])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457874 458200])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458202 458401])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [458403 458570])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458572 458669])
            ("if" code nil nil [458671 458813])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458927 459169])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459171 459592])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459594 459687])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459689 459856])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459858 460055])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460057 460453])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460455 460891])
            ("if" code nil nil [460893 460997])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461114 461404])
            ("if" code nil nil [461406 461512])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461620 462137])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462139 462309])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462311 462719])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462721 462889])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462891 463044])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463046 463193])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463195 463309])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463311 463440])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463442 463569])
            ("enable-connection-local-variables" variable (:default-value t) nil [463571 463675])
            ("connection-local-set-profiles" function (:prototype-flag t) nil [463677 464262])
            ("connection-local-set-profile-variables" function (:prototype-flag t) nil [464264 464914])
            ("hack-connection-local-variables-apply" function (:prototype-flag t) nil [464916 465145])
            ("with-connection-local-profiles" function (:prototype-flag t) nil [465147 465363])
            ("function-put" code nil nil [465365 465436])
            ("if" code nil nil [465438 465617])
            ("filesets-init" function (:prototype-flag t) nil [465728 465880])
            ("if" code nil nil [465882 465983])
            ("push" code nil nil [466093 466152])
            ("find-cmd" function (:prototype-flag t) nil [466154 466591])
            ("if" code nil nil [466593 466690])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466807 467134])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467136 467521])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467523 467943])
            ("if" code nil nil [467945 468072])
            ("ff-special-constructs" variable (:default-value (\` (((\, (purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]")) lambda nil (buffer-substring (match-beginning 2) (match-end 2)))))) nil [468186 468703])
            ("custom-autoload" code nil nil [468705 468759])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468761 469031])
            ("defalias" code nil nil [469033 469085])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [469087 470980])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470982 471082])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471084 471215])
            ("if" code nil nil [471217 471346])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471490 471657])
            ("find-library-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471659 471828])
            ("find-library-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471830 471997])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [471999 472502])
            ("find-function-noselect" function (:prototype-flag t) nil [472504 473189])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473191 473722])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473724 473903])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473905 474082])
            ("find-variable-noselect" function (:prototype-flag t) nil [474084 474586])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474588 475117])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475119 475298])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475300 475477])
            ("find-definition-noselect" function (:prototype-flag t) nil [475479 476003])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476005 476552])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476554 476728])
            ("find-function-on-key-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476730 476894])
            ("find-function-on-key-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476896 477058])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477060 477180])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477182 477302])
            ("find-function-setup-keys" function (:prototype-flag t) nil [477304 477439])
            ("if" code nil nil [477441 477559])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477673 477781])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477783 477895])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [477897 478036])
            ("if" code nil nil [478038 478141])
            ("push" code nil nil [478245 478302])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478304 478421])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478423 478585])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478587 478682])
            ("if" code nil nil [478684 478814])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478928 479180])
            ("enable-flow-control-on" function (:prototype-flag t) nil [479182 479566])
            ("if" code nil nil [479568 479676])
            ("fill-flowed-encode" function (:prototype-flag t) nil [479800 479879])
            ("fill-flowed" function (:prototype-flag t) nil [479881 479966])
            ("if" code nil nil [479968 480073])
            ("push" code nil nil [480200 480258])
            ("flymake-log" function (:prototype-flag t) nil [480260 480592])
            ("flymake-make-diagnostic" function (:prototype-flag t) nil [480594 480862])
            ("flymake-diagnostics" function (:prototype-flag t) nil [480864 481139])
            ("flymake-diag-region" function (:prototype-flag t) nil [481141 481378])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481380 482871])
            ("flymake-mode-on" function (:prototype-flag t) nil [482873 482951])
            ("flymake-mode-off" function (:prototype-flag t) nil [482953 483033])
            ("if" code nil nil [483035 483134])
            ("push" code nil nil [483284 483347])
            ("if" code nil nil [483349 483458])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483589 483697])
            ("flyspell-mode" variable nil nil [483698 483763])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483765 485032])
            ("turn-on-flyspell" function (:prototype-flag t) nil [485034 485131])
            ("turn-off-flyspell" function (:prototype-flag t) nil [485133 485232])
            ("flyspell-mode-off" function (:prototype-flag t) nil [485234 485317])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485319 485538])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485540 485618])
            ("if" code nil nil [485620 485807])
            ("push" code nil nil [485914 485973])
            ("if" code nil nil [485975 486074])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [486179 486299])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [486301 486423])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486425 487856])
            ("follow-scroll-up-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487858 488310])
            ("follow-scroll-down-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488312 488782])
            ("follow-scroll-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488784 489169])
            ("follow-scroll-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489171 489561])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489563 490254])
            ("if" code nil nil [490256 490353])
            ("if" code nil nil [490497 490696])
            ("push" code nil nil [490816 490876])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490878 491315])
            ("if" code nil nil [491317 491430])
            ("if" code nil nil [491550 491656])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491758 492562])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [492564 492647])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [492649 492761])
            ("if" code nil nil [492763 492858])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [492986 496034])
            ("if" code nil nil [496036 496135])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496253 496479])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496481 496734])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496736 496969])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496971 497362])
            ("fortune-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497364 497612])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497614 497964])
            ("if" code nil nil [497966 498065])
            ("frameset-session-filter-alist" variable (:default-value (quote ((name . :never) (left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified)))) nil [498176 498485])
            ("frameset-persistent-filter-alist" variable (:default-value (nconc (quote ((background-color . frameset-filter-sanitize-color) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (client . :never) (delete-before . :never) (font . frameset-filter-font-param) (foreground-color . frameset-filter-sanitize-color) (frameset--text-pixel-height . :save) (frameset--text-pixel-width . :save) (fullscreen . frameset-filter-shelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (outer-window-id . :never) (parent-frame . :never) (parent-id . :never) (mouse-wheel-frame . :never) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-id . :never) (window-system . :never))) frameset-session-filter-alist)) nil [498487 499557])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [499559 501774])
            ("frameset-frame-id" function (:prototype-flag t) nil [501776 502211])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [502213 502330])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [502332 502566])
            ("frameset-save" function (:prototype-flag t) nil [502568 503329])
            ("frameset-restore" function (:prototype-flag t) nil [503331 506311])
            ("frameset--jump-to-register" function (:prototype-flag t) nil [506313 506485])
            ("frameset--print-register" function (:prototype-flag t) nil [506487 506676])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [506678 506963])
            ("if" code nil nil [506965 507066])
            ("if" code nil nil [507171 507282])
            ("push" code nil nil [507402 507461])
            ("if" code nil nil [507463 507564])
            ("if" code nil nil [507685 507786])
            ("gdb-enable-debug" variable nil nil [507911 508062])
            ("custom-autoload" code nil nil [508064 508112])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508114 508552])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508554 511582])
            ("if" code nil nil [511584 511715])
            ("if" code nil nil [511859 511964])
            ("generic-mode-list" variable nil nil [512094 512258])
            ("define-generic-mode" function (:prototype-flag t) nil [512260 513836])
            ("function-put" code nil nil [513838 513898])
            ("function-put" code nil nil [513900 513954])
            ("generic-mode-internal" function (:prototype-flag t) nil [513956 514109])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [514111 514506])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [514508 515009])
            ("make-obsolete" code nil nil [515011 515074])
            ("if" code nil nil [515076 515175])
            ("if" code nil nil [515289 515413])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [515541 515920])
            ("if" code nil nil [515922 516021])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [516145 516312])
            ("gmm-message" function (:prototype-flag t) nil [516314 516638])
            ("gmm-error" function (:prototype-flag t) nil [516640 516802])
            ("gmm-widget-p" function (:prototype-flag t) nil [516804 516897])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [516899 517746])
            ("if" code nil nil [517748 517857])
            ("push" code nil nil [517965 518021])
            ("when" code nil nil [518022 518101])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518103 518243])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518245 518636])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518638 518720])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518722 519331])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519333 519618])
            ("if" code nil nil [519620 519713])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519840 519918])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519920 519994])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519996 520104])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [520106 520514])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [520516 520619])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [520621 520950])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [520952 521250])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [521252 521386])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [521388 521578])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [521580 521837])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521839 521933])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521935 522035])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522037 522190])
            ("if" code nil nil [522192 522291])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [522412 522532])
            ("if" code nil nil [522534 522642])
            ("if" code nil nil [522769 522868])
            ("if" code nil nil [522995 523102])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523246 523341])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523343 523461])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523463 523751])
            ("if" code nil nil [523753 523864])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [523991 524167])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524169 524289])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524291 524418])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [524420 524735])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [524737 525034])
            ("if" code nil nil [525036 525135])
            ("if" code nil nil [525259 525366])
            ("if" code nil nil [525493 525598])
            ("if" code nil nil [525719 525834])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525961 526509])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526511 526622])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [526624 527001])
            ("if" code nil nil [527003 527108])
            ("if" code nil nil [527235 527334])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [527461 527540])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [527542 527621])
            ("if" code nil nil [527623 527722])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527849 527961])
            ("if" code nil nil [527963 528068])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528195 528298])
            ("if" code nil nil [528300 528399])
            ("if" code nil nil [528520 528617])
            ("if" code nil nil [528744 528852])
            ("gnus--random-face-with-type" function (:prototype-flag t) nil [528973 529144])
            ("message-goto-eoh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529146 529190])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529192 529383])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529385 529517])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529519 529725])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [529727 529926])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [529928 530081])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [530083 530257])
            ("gnus-random-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530259 530430])
            ("gnus-insert-random-face-header" function (:prototype-flag t) nil [530432 530560])
            ("if" code nil nil [530562 530659])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530803 530970])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530972 531150])
            ("if" code nil nil [531152 531263])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531390 531603])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531605 531713])
            ("if" code nil nil [531715 531814])
            ("gnus-article-html" function (:prototype-flag t) nil [531938 532016])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [532018 532095])
            ("if" code nil nil [532097 532195])
            ("if" code nil nil [532342 532454])
            ("if" code nil nil [532575 532672])
            ("defalias" code nil nil [532796 532841])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532843 532981])
            ("if" code nil nil [532983 533081])
            ("if" code nil nil [533208 533307])
            ("if" code nil nil [533425 533521])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [533639 533711])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533713 533884])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533886 534041])
            ("if" code nil nil [534043 534152])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534279 535415])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535417 535764])
            ("gnus-group-split" function (:prototype-flag t) nil [535766 536004])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [536006 538185])
            ("if" code nil nil [538187 538298])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538419 538782])
            ("gnus-button-mailto" function (:prototype-flag t) nil [538784 538869])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538871 538976])
            ("define-mail-user-agent" code nil nil [538978 539097])
            ("if" code nil nil [539099 539196])
            ("gnus-notifications" function (:prototype-flag t) nil [539355 539709])
            ("if" code nil nil [539711 539832])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539959 540103])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540105 540255])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540257 540430])
            ("if" code nil nil [540432 540537])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [540664 540876])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [540878 541077])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [541079 541261])
            ("gnus-intersection" function (:prototype-flag t) nil [541263 541337])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [541339 541501])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [541503 541677])
            ("defalias" code nil nil [541679 541746])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [541748 541946])
            ("gnus-sorted-union" function (:prototype-flag t) nil [541948 542096])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [542098 542282])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [542284 542401])
            ("if" code nil nil [542403 542502])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542646 542745])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542747 542847])
            ("if" code nil nil [542849 542951])
            ("if" code nil nil [543092 543196])
            ("if" code nil nil [543320 543418])
            ("if" code nil nil [543545 543644])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543771 544144])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544146 544477])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544479 544549])
            ("if" code nil nil [544551 544656])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544780 544887])
            ("if" code nil nil [544889 544987])
            ("if" code nil nil [545111 545209])
            ("gnus-declare-backend" function (:prototype-flag t) nil [545336 545478])
            ("if" code nil nil [545480 545579])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [545700 545904])
            ("if" code nil nil [545906 546003])
            ("if" code nil nil [546130 546229])
            ("if" code nil nil [546353 546451])
            ("if" code nil nil [546575 546673])
            ("if" code nil nil [546791 546887])
            ("if" code nil nil [547005 547101])
            ("gnus-add-configuration" function (:prototype-flag t) nil [547222 547357])
            ("if" code nil nil [547359 547456])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [547569 548301])
            ("custom-autoload" code nil nil [548303 548354])
            ("if" code nil nil [548356 548474])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548589 549353])
            ("if" code nil nil [549355 549452])
            ("define-obsolete-function-alias" code nil nil [549574 549659])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549661 549953])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549955 550389])
            ("put" code nil nil [550390 550437])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550439 550738])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550740 550878])
            ("if" code nil nil [550880 550986])
            ("gravatar-retrieve" function (:prototype-flag t) nil [551109 551401])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [551403 551625])
            ("if" code nil nil [551627 551728])
            ("grep-window-height" variable nil nil [551847 551958])
            ("custom-autoload" code nil nil [551960 552006])
            ("grep-command" variable nil nil [552008 552446])
            ("custom-autoload" code nil nil [552448 552490])
            ("grep-find-command" variable nil nil [552492 552750])
            ("custom-autoload" code nil nil [552752 552799])
            ("grep-setup-hook" variable nil nil [552801 552903])
            ("custom-autoload" code nil nil [552905 552948])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (\` (((\, (concat "^\\(?:" "\\(?1:[^ 
]+\\)\\(?3: \\)\\(?2:[0-9]+\\):" "\\|" "\\(?1:" "\\(?:[a-zA-Z]:\\)?" "[^
:]+?[^
/:]\\):[	 ]*\\(?2:[1-9][0-9]*\\)[	 ]*:" "\\)")) 1 2 ((\, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face))) (when mbeg (- mbeg beg)))))) \, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face)) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) nil nil (3 (quote (face nil display ":")))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [552950 553853])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [553855 554042])
            ("find-program" variable (:default-value (purecopy "find")) nil [554044 554189])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [554191 554389])
            ("grep-find-use-xargs" variable nil nil [554391 554705])
            ("grep-history" variable nil nil [554707 554759])
            ("grep-find-history" variable nil nil [554761 554823])
            ("grep-process-setup" function (:prototype-flag t) nil [554825 555002])
            ("grep-compute-defaults" function (:prototype-flag t) nil [555004 555064])
            ("grep-mode" function (:prototype-flag t) nil [555066 555170])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555172 556073])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [556075 556434])
            ("defalias" code nil nil [556436 556468])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [556470 557380])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [557382 558479])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558481 558770])
            ("defalias" code nil nil [558772 558798])
            ("if" code nil nil [558800 558914])
            ("if" code nil nil [559029 559154])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559270 559817])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559819 560029])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560031 560241])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560243 560604])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560606 560822])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560824 561036])
            ("guiler" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561038 561256])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561258 561887])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561889 561975])
            ("gud-tooltip-mode" variable nil nil [561977 562278])
            ("custom-autoload" code nil nil [562280 562325])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562327 562579])
            ("if" code nil nil [562581 562679])
            ("gv-get" function (:prototype-flag t) nil [562794 563284])
            ("gv-letplace" function (:prototype-flag t) nil [563286 563836])
            ("function-put" code nil nil [563838 563890])
            ("gv-define-expander" function (:prototype-flag t) nil [563892 564203])
            ("function-put" code nil nil [564205 564264])
            ("gv--defun-declaration" function (:prototype-flag t) nil [564266 564363])
            ("or" code nil nil [564365 564565])
            ("or" code nil nil [564567 564713])
            ("gv-define-setter" function (:prototype-flag t) nil [564715 565388])
            ("function-put" code nil nil [565390 565447])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [565449 566032])
            ("setf" function (:prototype-flag t) nil [566034 566386])
            ("put" code nil nil [566388 566440])
            ("gv-ref" function (:prototype-flag t) nil [566442 566734])
            ("if" code nil nil [566736 566825])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566949 567375])
            ("if" code nil nil [567377 567505])
            ("if" code nil nil [567648 567745])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567857 567952])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [567954 568176])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568178 568421])
            ("if" code nil nil [568423 568518])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568639 568769])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568771 568965])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [568967 569090])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569092 569388])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569390 569632])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569634 569808])
            ("if" code nil nil [569810 569911])
            ("help-at-pt-string" function (:prototype-flag t) nil [570028 570421])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [570423 570701])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570703 571184])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571186 571345])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571347 571510])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [571512 572888])
            ("custom-autoload" code nil nil [572890 572954])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [572956 573899])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573901 574915])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574917 575293])
            ("if" code nil nil [575295 575421])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575532 575716])
            ("help-C-file-name" function (:prototype-flag t) nil [575718 575917])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [575919 576669])
            ("describe-function-1" function (:prototype-flag t) nil [576671 576742])
            ("variable-at-point" function (:prototype-flag t) nil [576744 576980])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576982 577324])
            ("describe-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577326 577702])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577704 577954])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577956 578281])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578283 578413])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578415 578544])
            ("if" code nil nil [578546 578655])
            ("three-step-help" variable nil nil [578772 579101])
            ("custom-autoload" code nil nil [579103 579152])
            ("if" code nil nil [579154 579264])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579378 579580])
            ("help-mode-setup" function (:prototype-flag t) nil [579582 579679])
            ("help-mode-finish" function (:prototype-flag t) nil [579681 579784])
            ("help-setup-xref" function (:prototype-flag t) nil [579786 580380])
            ("help-buffer" function (:prototype-flag t) nil [580382 580719])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580721 581742])
            ("help-xref-button" function (:prototype-flag t) nil [581744 582113])
            ("help-insert-xref-button" function (:prototype-flag t) nil [582115 582416])
            ("help-xref-on-pp" function (:prototype-flag t) nil [582418 582543])
            ("define-obsolete-function-alias" code nil nil [582545 582621])
            ("help-bookmark-jump" function (:prototype-flag t) nil [582623 582849])
            ("if" code nil nil [582851 582976])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583103 583210])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583212 583292])
            ("if" code nil nil [583294 583391])
            ("if" code nil nil [583502 583631])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [583730 587270])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587272 587493])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587495 587630])
            ("if" code nil nil [587632 587744])
            ("if" code nil nil [587892 588018])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588126 590946])
            ("global-hi-lock-mode" variable nil nil [590948 591261])
            ("custom-autoload" code nil nil [591263 591315])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591317 591721])
            ("defalias" code nil nil [591723 591792])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591794 592334])
            ("defalias" code nil nil [592336 592385])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592387 592778])
            ("defalias" code nil nil [592780 592836])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592838 593443])
            ("defalias" code nil nil [593445 593512])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593514 593936])
            ("defalias" code nil nil [593938 593991])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593993 594344])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594346 594670])
            ("if" code nil nil [594672 594800])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594925 596736])
            ("if" code nil nil [596738 596959])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [597090 598531])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598533 599435])
            ("turn-off-hideshow" function (:prototype-flag t) nil [599437 599538])
            ("if" code nil nil [599540 599635])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [599749 600840])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600842 601477])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601479 601698])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601700 601842])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601844 601994])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601996 602673])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602675 603259])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603261 603879])
            ("global-highlight-changes-mode" variable nil nil [603881 604234])
            ("custom-autoload" code nil nil [604236 604300])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [604302 604772])
            ("if" code nil nil [604774 604917])
            ("push" code nil nil [605033 605094])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [605096 605567])
            ("custom-autoload" code nil nil [605569 605635])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605637 606123])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [606125 606392])
            ("if" code nil nil [606394 606515])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606623 607468])
            ("global-hl-line-mode" variable nil nil [607470 607783])
            ("custom-autoload" code nil nil [607785 607837])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607839 608408])
            ("if" code nil nil [608410 608527])
            ("if" code nil nil [608646 608758])
            ("if" code nil nil [608877 608990])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [609119 609940])
            ("custom-autoload" code nil nil [609942 609998])
            ("put" code nil nil [610000 610055])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [610057 610558])
            ("custom-autoload" code nil nil [610560 610617])
            ("put" code nil nil [610619 610675])
            ("holiday-local-holidays" variable nil nil [610677 610791])
            ("custom-autoload" code nil nil [610793 610847])
            ("put" code nil nil [610849 610902])
            ("holiday-other-holidays" variable nil nil [610904 611025])
            ("custom-autoload" code nil nil [611027 611081])
            ("put" code nil nil [611083 611136])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [611138 611453])
            ("custom-autoload" code nil nil [611455 611510])
            ("put" code nil nil [611512 611566])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [611568 611992])
            ("custom-autoload" code nil nil [611994 612052])
            ("put" code nil nil [612054 612111])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [612113 612623])
            ("custom-autoload" code nil nil [612625 612681])
            ("put" code nil nil [612683 612738])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the B\303\241b") (holiday-fixed 5 29 "Ascension of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (holiday-fixed 7 9 "Martyrdom of the B\303\241b") (holiday-fixed 10 20 "Birth of the B\303\241b") (holiday-fixed 11 12 "Birth of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu\342\200\231l-Bah\303\241"))))))) nil [612740 613285])
            ("custom-autoload" code nil nil [613287 613341])
            ("put" code nil nil [613343 613396])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [613398 613950])
            ("custom-autoload" code nil nil [613952 614006])
            ("put" code nil nil [614008 614061])
            ("put" code nil nil [614063 614111])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614113 614373])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614375 615198])
            ("defalias" code nil nil [615200 615239])
            ("if" code nil nil [615241 615353])
            ("push" code nil nil [615472 615535])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615537 616283])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616285 616594])
            ("if" code nil nil [616596 616710])
            ("if" code nil nil [616858 617222])
            ("define-ibuffer-column" function (:prototype-flag t) nil [617336 618437])
            ("function-put" code nil nil [618439 618505])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [618507 619008])
            ("function-put" code nil nil [619010 619072])
            ("function-put" code nil nil [619074 619130])
            ("define-ibuffer-op" function (:prototype-flag t) nil [619132 621151])
            ("function-put" code nil nil [621153 621211])
            ("function-put" code nil nil [621213 621265])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [621267 621832])
            ("function-put" code nil nil [621834 621896])
            ("function-put" code nil nil [621898 621954])
            ("if" code nil nil [621956 622057])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622165 622392])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622394 622635])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [622637 623504])
            ("ibuffer-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623506 623713])
            ("if" code nil nil [623715 623883])
            ("push" code nil nil [624022 624083])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624085 624346])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624348 624822])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624824 625171])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625173 625877])
            ("if" code nil nil [625879 625982])
            ("icomplete-mode" variable nil nil [626096 626389])
            ("custom-autoload" code nil nil [626391 626440])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626442 627201])
            ("when" code nil nil [627202 627397])
            ("if" code nil nil [627399 627502])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627621 629047])
            ("if" code nil nil [629049 629273])
            ("if" code nil nil [629457 629572])
            ("if" code nil nil [629714 629815])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629960 630810])
            ("if" code nil nil [630812 630914])
            ("if" code nil nil [631065 631177])
            ("push" code nil nil [631304 631365])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [631367 636327])
            ("if" code nil nil [636329 636428])
            ("ido-mode" variable nil nil [636524 636988])
            ("custom-autoload" code nil nil [636990 637027])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637029 637546])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637548 639244])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639246 639485])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639487 639714])
            ("ido-display-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639716 639945])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [639947 640130])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640132 640361])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640363 640600])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640602 640703])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640705 643194])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643196 643423])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643425 643655])
            ("ido-find-alternate-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643657 643900])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643902 644127])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644129 644383])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644385 644637])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644639 644856])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644858 645083])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645085 645278])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645280 645485])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645487 645669])
            ("ido-dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645671 645911])
            ("ido-dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645913 646144])
            ("ido-read-buffer" function (:prototype-flag t) nil [646146 646537])
            ("ido-read-file-name" function (:prototype-flag t) nil [646539 646830])
            ("ido-read-directory-name" function (:prototype-flag t) nil [646832 647132])
            ("ido-completing-read" function (:prototype-flag t) nil [647134 648108])
            ("if" code nil nil [648110 648201])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648300 648500])
            ("if" code nil nil [648502 648622])
            ("if" code nil nil [648749 648854])
            ("define-obsolete-function-alias" code nil nil [648959 649032])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649034 649338])
            ("if" code nil nil [649340 649460])
            ("image-type-from-data" function (:prototype-flag t) nil [649562 649754])
            ("image-type-from-buffer" function (:prototype-flag t) nil [649756 649956])
            ("image-type-from-file-header" function (:prototype-flag t) nil [649958 650175])
            ("image-type-from-file-name" function (:prototype-flag t) nil [650177 650381])
            ("image-type" function (:prototype-flag t) nil [650383 650851])
            ("image-type-available-p" function (:prototype-flag t) nil [650853 651013])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [651015 651512])
            ("create-image" function (:prototype-flag t) nil [651514 652644])
            ("put-image" function (:prototype-flag t) nil [652646 653365])
            ("insert-image" function (:prototype-flag t) nil [653367 654217])
            ("insert-sliced-image" function (:prototype-flag t) nil [654219 654802])
            ("remove-images" function (:prototype-flag t) nil [654804 655052])
            ("find-image" function (:prototype-flag t) nil [655054 655882])
            ("defimage" function (:prototype-flag t) nil [655884 656699])
            ("function-put" code nil nil [656701 656744])
            ("imagemagick-register-types" function (:prototype-flag t) nil [656746 657323])
            ("if" code nil nil [657325 657419])
            ("push" code nil nil [657538 657603])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657605 657993])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657995 658626])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658628 659618])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659620 659900])
            ("defalias" code nil nil [659902 659956])
            ("define-obsolete-function-alias" code nil nil [659958 660017])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660019 660153])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660155 660314])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660316 660418])
            ("image-dired-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660420 660665])
            ("define-obsolete-function-alias" code nil nil [660667 660767])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660769 660898])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660900 661033])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661035 661160])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661162 661412])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661414 661537])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661539 661965])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661967 662178])
            ("if" code nil nil [662180 662287])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [662404 662942])
            ("custom-autoload" code nil nil [662944 663006])
            ("image-file-name-regexps" variable nil nil [663008 663481])
            ("custom-autoload" code nil nil [663483 663542])
            ("image-file-name-regexp" function (:prototype-flag t) nil [663544 663669])
            ("insert-image-file" function (:prototype-flag t) nil [663671 663998])
            ("auto-image-file-mode" variable nil nil [664000 664317])
            ("custom-autoload" code nil nil [664319 664375])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664377 664817])
            ("if" code nil nil [664819 664924])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665041 665326])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665328 665759])
            ("image-mode-to-text" function (:prototype-flag t) nil [665761 665999])
            ("image-bookmark-jump" function (:prototype-flag t) nil [666001 666069])
            ("if" code nil nil [666071 666171])
            ("if" code nil nil [666278 666371])
            ("imenu-sort-function" variable nil nil [666473 667009])
            ("custom-autoload" code nil nil [667011 667059])
            ("imenu-generic-expression" variable nil nil [667061 668625])
            ("put" code nil nil [668626 668681])
            ("make-variable-buffer-local" code nil nil [668683 668737])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [668739 669105])
            ("make-variable-buffer-local" code nil nil [669107 669164])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [669166 669606])
            ("make-variable-buffer-local" code nil nil [669608 669672])
            ("imenu-extract-index-name-function" variable nil nil [669674 669967])
            ("make-variable-buffer-local" code nil nil [669969 670032])
            ("imenu-name-lookup-function" variable nil nil [670034 670392])
            ("make-variable-buffer-local" code nil nil [670394 670450])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [670452 670655])
            ("make-variable-buffer-local" code nil nil [670657 670714])
            ("put" code nil nil [670715 670764])
            ("make-variable-buffer-local" code nil nil [670766 670814])
            ("make-variable-buffer-local" code nil nil [670816 670868])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670870 671088])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671090 671294])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671296 671511])
            ("if" code nil nil [671513 671608])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671737 671868])
            ("indian-compose-string" function (:prototype-flag t) nil [671870 671941])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [671943 672021])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [672023 672105])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672107 672232])
            ("if" code nil nil [672234 672345])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672476 672954])
            ("defalias" code nil nil [672956 672991])
            ("if" code nil nil [672993 673124])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep (quote ns)) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list (quote ("/usr/local/" "/usr/" "/opt/")))) (suffixes (quote ("share/" ""))) (standard-info-dirs (apply (function nconc) (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type (quote windows-nt))) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [673223 675168])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675170 675309])
            ("put" code nil nil [675311 675352])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675354 676302])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676304 676396])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676398 676521])
            ("info-standalone" function (:prototype-flag t) nil [676523 676730])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676732 676959])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676961 677042])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677044 677439])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677441 677600])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677602 677934])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677936 681627])
            ("put" code nil nil [681629 681694])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681696 682032])
            ("put" code nil nil [682034 682103])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682105 682518])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682520 682675])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [682677 682858])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [682860 683201])
            ("if" code nil nil [683203 683304])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683418 683662])
            ("put" code nil nil [683664 683708])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683710 684155])
            ("put" code nil nil [684157 684199])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684201 684604])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684606 684728])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684730 684848])
            ("if" code nil nil [684850 684948])
            ("push" code nil nil [685061 685119])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [685121 686356])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686358 686948])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686950 687336])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687338 688208])
            ("if" code nil nil [688210 688313])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688424 688574])
            ("Info-split-threshold" variable (:default-value 262144) nil [688576 688684])
            ("custom-autoload" code nil nil [688686 688738])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688740 689425])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689427 689589])
            ("batch-info-validate" function (:prototype-flag t) nil [689591 689921])
            ("if" code nil nil [689923 690029])
            ("define-inline" function (:prototype-flag t) nil [690156 690411])
            ("function-put" code nil nil [690413 690471])
            ("function-put" code nil nil [690473 690521])
            ("if" code nil nil [690523 690620])
            ("push" code nil nil [690745 690805])
            ("inversion-require-emacs" function (:prototype-flag t) nil [690807 691032])
            ("if" code nil nil [691034 691137])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691287 691426])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691428 691539])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [691541 691654])
            ("if" code nil nil [691656 691757])
            ("push" code nil nil [691867 691926])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691928 692193])
            ("if" code nil nil [692195 692295])
            ("if" code nil nil [692445 692548])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692692 692962])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692964 693223])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693225 693492])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693494 693761])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693763 694039])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694041 694317])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694319 694592])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694594 694859])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694861 695126])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695128 695228])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695230 695332])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695334 695463])
            ("if" code nil nil [695465 695560])
            ("define-key" code nil nil [695713 695777])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695779 695863])
            ("if" code nil nil [695865 695970])
            ("put" code nil nil [696095 696185])
            ("ispell-personal-dictionary" variable nil nil [696187 696361])
            ("custom-autoload" code nil nil [696363 696419])
            ("put" code nil nil [696421 696490])
            ("ispell-menu-map" variable nil nil [696492 696549])
            ("ispell-menu-map-needed" variable (:default-value (unless ispell-menu-map (quote reload))) nil [696551 696615])
            ("if" code nil nil [696617 698367])
            ("if" code nil nil [698369 699050])
            ("if" code nil nil [699052 699684])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage"))))) nil [699686 700585])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [700587 701425])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [701427 701972])
            ("put" code nil nil [701973 702028])
            ("define-key" code nil nil [702030 702067])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [702069 703444])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703446 703626])
            ("ispell-help" function (:prototype-flag t) nil [703628 704721])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704723 704987])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704989 705301])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705303 705554])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705556 705691])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705693 705804])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705806 706025])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706027 706148])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706150 706420])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706422 706552])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706554 706999])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707001 707649])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707651 708624])
            ("if" code nil nil [708626 708746])
            ("if" code nil nil [708899 709041])
            ("if" code nil nil [709194 709295])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [709438 709518])
            ("japanese-katakana" function (:prototype-flag t) nil [709520 709995])
            ("japanese-hiragana" function (:prototype-flag t) nil [709997 710239])
            ("japanese-hankaku" function (:prototype-flag t) nil [710241 710579])
            ("japanese-zenkaku" function (:prototype-flag t) nil [710581 710823])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710825 711109])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711111 711254])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711256 711600])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711602 711951])
            ("read-hiragana-string" function (:prototype-flag t) nil [711953 712197])
            ("if" code nil nil [712199 712302])
            ("jka-compr-inhibit" variable nil nil [712416 712630])
            ("jka-compr-handler" function (:prototype-flag t) nil [712632 712714])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [712716 712956])
            ("if" code nil nil [712958 713081])
            ("push" code nil nil [713193 713244])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [713246 713322])
            ("js-jsx-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [713324 713688])
            ("defalias" code nil nil [713690 713726])
            ("dolist" code nil nil [713728 713850])
            ("if" code nil nil [713852 713951])
            ("push" code nil nil [714049 714104])
            ("if" code nil nil [714106 714199])
            ("if" code nil nil [714304 714401])
            ("keypad-setup" variable nil nil [714526 714737])
            ("custom-autoload" code nil nil [714739 714783])
            ("keypad-numlock-setup" variable nil nil [714785 715003])
            ("custom-autoload" code nil nil [715005 715057])
            ("keypad-shifted-setup" variable nil nil [715059 715276])
            ("custom-autoload" code nil nil [715278 715330])
            ("keypad-numlock-shifted-setup" variable nil nil [715332 715557])
            ("custom-autoload" code nil nil [715559 715619])
            ("keypad-setup" function (:prototype-flag t) nil [715621 716664])
            ("kinsoku" function (:prototype-flag t) nil [716808 717452])
            ("if" code nil nil [717454 717553])
            ("kkc-after-update-conversion-functions" variable nil nil [717677 718055])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718057 718484])
            ("if" code nil nil [718486 718577])
            ("global-set-key" code nil nil [718682 718726])
            ("global-set-key" code nil nil [718728 718770])
            ("global-set-key" code nil nil [718772 718823])
            ("global-set-key" code nil nil [718825 718884])
            ("global-set-key" code nil nil [718886 718933])
            ("global-set-key" code nil nil [718935 718977])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718979 719061])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [719063 719220])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719222 720278])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720280 720743])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720745 721386])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721388 722400])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722402 722673])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722675 723049])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723051 723257])
            ("if" code nil nil [723259 723356])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [723499 723695])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [723697 723775])
            ("if" code nil nil [723777 723979])
            ("lao-compose-string" function (:prototype-flag t) nil [724108 724173])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [724175 724711])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [724713 724854])
            ("lao-composition-function" function (:prototype-flag t) nil [724856 724931])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724933 725000])
            ("if" code nil nil [725002 725098])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy (quote (("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8))))) nil [725245 725954])
            ("custom-autoload" code nil nil [725956 726015])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [726017 726229])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [726231 726438])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [726440 726732])
            ("if" code nil nil [726734 726844])
            ("latin1-display" variable nil nil [727000 727703])
            ("custom-autoload" code nil nil [727705 727756])
            ("latin1-display" function (:prototype-flag t) nil [727758 728099])
            ("latin1-display-ucs-per-lynx" variable nil nil [728101 728436])
            ("custom-autoload" code nil nil [728438 728502])
            ("if" code nil nil [728504 728614])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728756 728852])
            ("if" code nil nil [728854 728957])
            ("if" code nil nil [729064 729157])
            ("if" code nil nil [729313 729425])
            ("put" code nil nil [729579 729641])
            ("put" code nil nil [729643 729695])
            ("put" code nil nil [729697 729759])
            ("put" code nil nil [729761 729822])
            ("add-to-list" code nil nil [729824 729886])
            ("less-css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729888 730043])
            ("if" code nil nil [730045 730151])
            ("push" code nil nil [730294 730356])
            ("let-alist" function (:prototype-flag t) nil [730358 731292])
            ("function-put" code nil nil [731294 731344])
            ("if" code nil nil [731346 731450])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731559 731824])
            ("if" code nil nil [731826 731919])
            ("push" code nil nil [732020 732079])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732081 732404])
            ("global-linum-mode" variable nil nil [732406 732711])
            ("custom-autoload" code nil nil [732713 732761])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732763 733135])
            ("if" code nil nil [733137 733232])
            ("if" code nil nil [733373 733468])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [733579 734753])
            ("if" code nil nil [734755 734900])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [735005 735204])
            ("custom-autoload" code nil nil [735206 735261])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [735263 736327])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736329 737089])
            ("if" code nil nil [737091 737188])
            ("log-edit" function (:prototype-flag t) nil [737305 738545])
            ("if" code nil nil [738547 738658])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738775 738868])
            ("if" code nil nil [738870 738971])
            ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [739067 739182])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux)))) nil [739184 739314])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [739316 740130])
            ("custom-autoload" code nil nil [740132 740171])
            ("lpr-switches" variable nil nil [740173 740381])
            ("custom-autoload" code nil nil [740383 740422])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [740424 740990])
            ("custom-autoload" code nil nil [740992 741030])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741032 741228])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741230 741796])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741798 742004])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [742006 742586])
            ("if" code nil nil [742588 742687])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [742795 742978])
            ("custom-autoload" code nil nil [742980 743042])
            ("if" code nil nil [743044 743143])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743263 743536])
            ("if" code nil nil [743538 743678])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743806 743889])
            ("if" code nil nil [743891 743985])
            ("name-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744090 744393])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744395 745093])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745095 745754])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745756 747223])
            ("define-key" code nil nil [747225 747268])
            ("mail-extract-address-components" function (:prototype-flag t) nil [747392 748342])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [748344 748464])
            ("if" code nil nil [748466 748569])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [748693 748823])
            ("mail-hist-enable" function (:prototype-flag t) nil [748825 748885])
            ("mail-hist-keep-history" variable (:default-value t) nil [748887 748992])
            ("custom-autoload" code nil nil [748994 749049])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [749051 749339])
            ("if" code nil nil [749341 749444])
            ("if" code nil nil [749571 749670])
            ("if" code nil nil [749797 749902])
            ("if" code nil nil [750040 750146])
            ("mail-use-rfc822" variable nil nil [750273 750463])
            ("custom-autoload" code nil nil [750465 750514])
            ("mail-dont-reply-to-names" variable nil nil [750516 750857])
            ("custom-autoload" code nil nil [750859 750917])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [750919 751025])
            ("mail-quote-printable" function (:prototype-flag t) nil [751027 751381])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751383 751635])
            ("mail-unquote-printable" function (:prototype-flag t) nil [751637 751888])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751890 752536])
            ("mail-fetch-field" function (:prototype-flag t) nil [752538 753014])
            ("if" code nil nil [753016 753115])
            ("mail-abbrevs-mode" variable nil nil [753242 753547])
            ("custom-autoload" code nil nil [753549 753602])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753604 754133])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [754135 754241])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [754243 754472])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754474 754916])
            ("if" code nil nil [754918 755061])
            ("mail-complete-style" variable (:default-value (quote angles)) nil [755185 755499])
            ("custom-autoload" code nil nil [755501 755553])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755555 755966])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755968 756427])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [756429 756591])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756593 756865])
            ("make-obsolete" code nil nil [756867 756940])
            ("if" code nil nil [756942 757061])
            ("if" code nil nil [757177 757276])
            ("mailclient-send-it" function (:prototype-flag t) nil [757403 757617])
            ("if" code nil nil [757619 757724])
            ("if" code nil nil [757851 757956])
            ("if" code nil nil [758069 758166])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758308 761609])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761611 761728])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761730 761841])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761843 761956])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761958 762074])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762076 762187])
            ("if" code nil nil [762189 762291])
            ("if" code nil nil [762422 762523])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762631 762805])
            ("if" code nil nil [762807 762911])
            ("defalias" code nil nil [763007 763036])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763038 764366])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764368 764493])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [764495 764600])
            ("if" code nil nil [764602 764699])
            ("if" code nil nil [764827 764926])
            ("push" code nil nil [765043 765097])
            ("if" code nil nil [765099 765189])
            ("push" code nil nil [765293 765352])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765354 765909])
            ("if" code nil nil [765911 766008])
            ("minibuffer-depth-indicate-mode" variable nil nil [766119 766476])
            ("custom-autoload" code nil nil [766478 766542])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766544 767079])
            ("if" code nil nil [767081 767190])
            ("push" code nil nil [767285 767339])
            ("if" code nil nil [767341 767431])
            ("define-mail-user-agent" code nil nil [767549 767670])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767672 770086])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770088 770497])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770499 770620])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770622 770776])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770778 770916])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770918 771100])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771102 771255])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771257 771480])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771482 771600])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771602 771816])
            ("message-forward-make-body" function (:prototype-flag t) nil [771818 771917])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [771919 772007])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772009 772105])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772107 772207])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772209 772433])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772435 772592])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772594 772749])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772751 772885])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772887 773020])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773022 773262])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773264 773487])
            ("if" code nil nil [773489 773594])
            ("push" code nil nil [773735 773795])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773797 773892])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773894 773989])
            ("if" code nil nil [773991 774145])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774266 774433])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774435 774829])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774831 775243])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775245 775665])
            ("if" code nil nil [775667 775768])
            ("if" code nil nil [775889 776035])
            ("if" code nil nil [776156 776251])
            ("if" code nil nil [776378 776475])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776593 776733])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776735 776904])
            ("mh-smail-batch" function (:prototype-flag t) nil [776906 777464])
            ("define-mail-user-agent" code nil nil [777466 777595])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [777597 778397])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778399 779482])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779484 779794])
            ("if" code nil nil [779796 779890])
            ("if" code nil nil [780014 780110])
            ("push" code nil nil [780218 780276])
            ("put" code nil nil [780278 780317])
            ("put" code nil nil [780319 780356])
            ("put" code nil nil [780358 780401])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780403 780521])
            ("if" code nil nil [780523 780656])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780780 780995])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780997 781218])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781220 782961])
            ("if" code nil nil [782963 783059])
            ("if" code nil nil [783180 783275])
            ("if" code nil nil [783413 783511])
            ("if" code nil nil [783626 783729])
            ("if" code nil nil [783847 783941])
            ("if" code nil nil [784065 784161])
            ("if" code nil nil [784282 784377])
            ("if" code nil nil [784495 784589])
            ("if" code nil nil [784710 784806])
            ("if" code nil nil [784924 785018])
            ("if" code nil nil [785142 785238])
            ("if" code nil nil [785353 785446])
            ("if" code nil nil [785564 785658])
            ("if" code nil nil [785779 785874])
            ("if" code nil nil [785998 786094])
            ("if" code nil nil [786232 786339])
            ("if" code nil nil [786460 786555])
            ("if" code nil nil [786676 786771])
            ("mhtml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786916 787192])
            ("if" code nil nil [787194 787294])
            ("midnight-mode" variable nil nil [787405 787694])
            ("custom-autoload" code nil nil [787696 787743])
            ("midnight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787745 787859])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787861 788483])
            ("midnight-delay-set" function (:prototype-flag t) nil [788485 788704])
            ("if" code nil nil [788706 788828])
            ("minibuffer-electric-default-mode" variable nil nil [788954 789319])
            ("custom-autoload" code nil nil [789321 789392])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789394 790069])
            ("if" code nil nil [790071 790175])
            ("copy-from-above-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790274 790594])
            ("zap-up-to-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790596 790865])
            ("mark-beginning-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790867 790968])
            ("mark-end-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790970 791059])
            ("upcase-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791061 791176])
            ("forward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791178 791330])
            ("backward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791332 791480])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791482 792056])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792058 792502])
            ("if" code nil nil [792504 792616])
            ("add-hook" code nil nil [792727 792777])
            ("multi-isearch-next-buffer-function" variable nil nil [792779 793818])
            ("multi-isearch-next-buffer-current-function" variable nil nil [793820 794018])
            ("multi-isearch-current-buffer" variable nil nil [794020 794182])
            ("multi-isearch-buffer-list" variable nil nil [794184 794355])
            ("multi-isearch-file-list" variable nil nil [794357 794457])
            ("multi-isearch-setup" function (:prototype-flag t) nil [794459 794608])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794610 794954])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794956 795314])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795316 795741])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795743 796182])
            ("if" code nil nil [796184 796317])
            ("push" code nil nil [796461 796522])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796524 796615])
            ("if" code nil nil [796617 796717])
            ("if" code nil nil [796844 796941])
            ("if" code nil nil [797065 797161])
            ("if" code nil nil [797285 797381])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [797505 797613])
            ("if" code nil nil [797615 797711])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [797835 797962])
            ("mm-inline-external-body" function (:prototype-flag t) nil [797964 798257])
            ("if" code nil nil [798259 798362])
            ("mm-inline-partial" function (:prototype-flag t) nil [798489 798771])
            ("if" code nil nil [798773 798888])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [799003 799162])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [799164 799296])
            ("if" code nil nil [799298 799395])
            ("if" code nil nil [799513 799607])
            ("mm-uu-dissect" function (:prototype-flag t) nil [799719 800025])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [800027 800218])
            ("if" code nil nil [800220 800312])
            ("if" code nil nil [800430 800524])
            ("mml-to-mime" function (:prototype-flag t) nil [800630 800725])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [800727 801578])
            ("if" code nil nil [801580 801685])
            ("if" code nil nil [801803 801898])
            ("if" code nil nil [802022 802125])
            ("mml1991-encrypt" function (:prototype-flag t) nil [802243 802320])
            ("mml1991-sign" function (:prototype-flag t) nil [802322 802381])
            ("if" code nil nil [802383 802482])
            ("mml2015-decrypt" function (:prototype-flag t) nil [802600 802668])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [802670 802743])
            ("mml2015-verify" function (:prototype-flag t) nil [802745 802812])
            ("mml2015-verify-test" function (:prototype-flag t) nil [802814 802886])
            ("mml2015-encrypt" function (:prototype-flag t) nil [802888 802965])
            ("mml2015-sign" function (:prototype-flag t) nil [802967 803026])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [803028 803090])
            ("if" code nil nil [803092 803191])
            ("put" code nil nil [803320 803373])
            ("if" code nil nil [803375 803742])
            ("defalias" code nil nil [803870 803904])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803906 805052])
            ("if" code nil nil [805054 805172])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805284 805391])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805393 805511])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805513 805631])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805633 805756])
            ("if" code nil nil [805758 805873])
            ("if" code nil nil [805990 806090])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806207 807147])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807149 807769])
            ("if" code nil nil [807771 807871])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807967 808031])
            ("if" code nil nil [808033 808147])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808256 808334])
            ("if" code nil nil [808336 808429])
            ("msb-mode" variable nil nil [808525 808794])
            ("custom-autoload" code nil nil [808796 808833])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808835 809183])
            ("if" code nil nil [809185 809297])
            ("if" code nil nil [809415 809514])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809664 810158])
            ("read-charset" function (:prototype-flag t) nil [810160 810690])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810692 810814])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810816 810945])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810947 811065])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811067 812241])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812243 812364])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812366 812672])
            ("list-coding-categories" function (:prototype-flag t) nil [812674 812780])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812782 812942])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812944 813098])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813100 813372])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813374 813478])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813480 813813])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813815 814054])
            ("if" code nil nil [814056 814276])
            ("store-substring" function (:prototype-flag t) nil [814426 814555])
            ("truncate-string-to-width" function (:prototype-flag t) nil [814557 815823])
            ("nested-alist-p" function (:arguments ("obj")) nil [815825 816280])
            ("set-nested-alist" function (:prototype-flag t) nil [816282 816660])
            ("lookup-nested-alist" function (:prototype-flag t) nil [816662 817305])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [817307 817467])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [817469 817629])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [817631 817803])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [817805 817977])
            ("with-coding-priority" function (:prototype-flag t) nil [817979 818344])
            ("put" code nil nil [818345 818396])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [818398 818667])
            ("make-obsolete" code nil nil [818669 818743])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [818745 819016])
            ("char-displayable-p" function (:prototype-flag t) nil [819018 819370])
            ("filepos-to-bufferpos" function (:prototype-flag t) nil [819372 820008])
            ("bufferpos-to-filepos" function (:prototype-flag t) nil [820010 820652])
            ("if" code nil nil [820654 820799])
            ("if" code nil nil [820904 821016])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821138 821241])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821243 821346])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821348 821449])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821451 821544])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821546 821643])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821645 821740])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821742 821898])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821900 822260])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822262 822335])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822337 822701])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822703 823048])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823050 823137])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823139 823314])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823316 823650])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823652 823714])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823716 823910])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823912 824024])
            ("if" code nil nil [824026 824362])
            ("netrc-credentials" function (:prototype-flag t) nil [824472 824670])
            ("if" code nil nil [824672 824767])
            ("open-network-stream" function (:prototype-flag t) nil [824912 829355])
            ("defalias" code nil nil [829357 829410])
            ("if" code nil nil [829412 829525])
            ("newsticker-running-p" function (:prototype-flag t) nil [829667 829904])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829906 830269])
            ("if" code nil nil [830271 830379])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830527 830622])
            ("if" code nil nil [830624 830734])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830873 830994])
            ("if" code nil nil [830996 831103])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [831242 831497])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831499 831699])
            ("if" code nil nil [831701 831808])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831953 832045])
            ("if" code nil nil [832047 832156])
            ("if" code nil nil [832281 832393])
            ("if" code nil nil [832511 832610])
            ("if" code nil nil [832728 832827])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832945 833082])
            ("if" code nil nil [833084 833183])
            ("if" code nil nil [833295 833390])
            ("nndoc-add-type" function (:prototype-flag t) nil [833502 833850])
            ("if" code nil nil [833852 833947])
            ("if" code nil nil [834065 834164])
            ("if" code nil nil [834288 834391])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834512 834713])
            ("if" code nil nil [834715 834816])
            ("if" code nil nil [834940 835043])
            ("if" code nil nil [835164 835304])
            ("if" code nil nil [835419 835515])
            ("if" code nil nil [835624 835725])
            ("if" code nil nil [835840 835937])
            ("if" code nil nil [836061 836164])
            ("if" code nil nil [836285 836386])
            ("if" code nil nil [836501 836598])
            ("if" code nil nil [836707 836800])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [836909 837037])
            ("if" code nil nil [837039 837132])
            ("if" code nil nil [837244 837339])
            ("if" code nil nil [837448 837559])
            ("if" code nil nil [837686 837791])
            ("if" code nil nil [837903 837998])
            ("if" code nil nil [838116 838236])
            ("if" code nil nil [838345 838438])
            ("if" code nil nil [838562 838665])
            ("if" code nil nil [838777 838872])
            ("if" code nil nil [838998 839109])
            ("define-obsolete-variable-alias" code nil nil [839214 839303])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [839305 839483])
            ("disabled-command-function" function (:prototype-flag t) nil [839485 839570])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839572 839816])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839818 840049])
            ("if" code nil nil [840051 840159])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840304 840625])
            ("if" code nil nil [840627 840727])
            ("if" code nil nil [840831 840947])
            ("push" code nil nil [841053 841110])
            ("if" code nil nil [841112 841205])
            ("if" code nil nil [841326 841423])
            ("if" code nil nil [841550 841683])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841807 844355])
            ("defalias" code nil nil [844356 844387])
            ("if" code nil nil [844389 844487])
            ("if" code nil nil [844605 844704])
            ("if" code nil nil [844831 844930])
            ("if" code nil nil [845057 845156])
            ("if" code nil nil [845277 845374])
            ("if" code nil nil [845498 845596])
            ("if" code nil nil [845703 845801])
            ("if" code nil nil [845908 846013])
            ("if" code nil nil [846120 846226])
            ("push" code nil nil [846338 846395])
            ("if" code nil nil [846397 846497])
            ("if" code nil nil [846636 846742])
            ("if" code nil nil [846855 846955])
            ("if" code nil nil [847071 847172])
            ("if" code nil nil [847297 847401])
            ("if" code nil nil [847523 847633])
            ("if" code nil nil [847746 847865])
            ("if" code nil nil [848018 848113])
            ("if" code nil nil [848226 848326])
            ("if" code nil nil [848445 848541])
            ("if" code nil nil [848654 848754])
            ("push" code nil nil [848869 848927])
            ("if" code nil nil [848929 849030])
            ("if" code nil nil [849172 849279])
            ("if" code nil nil [849395 849496])
            ("if" code nil nil [849609 849703])
            ("if" code nil nil [849822 849924])
            ("if" code nil nil [850049 850153])
            ("if" code nil nil [850278 850404])
            ("if" code nil nil [850526 850629])
            ("if" code nil nil [850754 850858])
            ("if" code nil nil [850983 851087])
            ("if" code nil nil [851197 851296])
            ("if" code nil nil [851412 851513])
            ("if" code nil nil [851623 851722])
            ("if" code nil nil [851875 851976])
            ("if" code nil nil [852095 852197])
            ("if" code nil nil [852319 852422])
            ("if" code nil nil [852550 852671])
            ("if" code nil nil [852787 852888])
            ("if" code nil nil [853038 853138])
            ("if" code nil nil [853251 853351])
            ("if" code nil nil [853479 853584])
            ("if" code nil nil [853706 853809])
            ("if" code nil nil [853931 854034])
            ("if" code nil nil [854153 854255])
            ("if" code nil nil [854377 854480])
            ("if" code nil nil [854593 854693])
            ("if" code nil nil [854809 854910])
            ("if" code nil nil [855038 855143])
            ("if" code nil nil [855271 855370])
            ("if" code nil nil [855512 855619])
            ("if" code nil nil [855741 855844])
            ("if" code nil nil [855957 856057])
            ("if" code nil nil [856173 856274])
            ("if" code nil nil [856390 856491])
            ("if" code nil nil [856613 856716])
            ("if" code nil nil [856838 856941])
            ("push" code nil nil [857053 857112])
            ("if" code nil nil [857114 857214])
            ("if" code nil nil [857333 857435])
            ("if" code nil nil [857551 857652])
            ("if" code nil nil [857765 857865])
            ("if" code nil nil [857987 858090])
            ("if" code nil nil [858206 858307])
            ("if" code nil nil [858426 858522])
            ("if" code nil nil [858681 858784])
            ("if" code nil nil [858900 859001])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859126 859572])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859574 860141])
            ("defalias" code nil nil [860143 860182])
            ("if" code nil nil [860184 860300])
            ("if" code nil nil [860433 860530])
            ("define-obsolete-function-alias" code nil nil [860658 860724])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860726 861789])
            ("if" code nil nil [861791 861890])
            ("push" code nil nil [861993 862049])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [862051 862183])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862185 862545])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862547 862857])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [862859 862949])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [862951 863055])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [863057 863931])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [863933 866335])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866337 866593])
            ("put" code nil nil [866594 866662])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866664 866976])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [866978 867074])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [867076 867176])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [867178 867459])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [867461 868201])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868203 868365])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868367 868710])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868712 868860])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [868862 869132])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869134 869374])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869376 869723])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869725 869876])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [869878 869976])
            ("if" code nil nil [869978 870090])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870215 870323])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [870325 872057])
            ("org-batch-agenda" function (:prototype-flag t) nil [872059 872497])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [872499 874281])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [874283 874384])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [874386 874531])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [874533 875253])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875255 877613])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877615 877997])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877999 878213])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878215 878519])
            ("org-diary" function (:prototype-flag t) nil [878521 879684])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [879686 879879])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879881 880237])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880239 880442])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880444 881692])
            ("if" code nil nil [881694 881792])
            ("if" code nil nil [881957 882056])
            ("if" code nil nil [882218 882323])
            ("if" code nil nil [882479 882580])
            ("if" code nil nil [882705 882803])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882931 883065])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883067 884380])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [884382 884533])
            ("if" code nil nil [884535 884634])
            ("if" code nil nil [884793 884890])
            ("org-columns-remove-overlays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885018 885133])
            ("org-columns-get-format-and-top-level" function (:prototype-flag t) nil [885135 885217])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885219 885735])
            ("org-columns-compute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [885737 885943])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [885945 887069])
            ("org-columns-insert-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [887071 887193])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [887195 887301])
            ("if" code nil nil [887303 887402])
            ("org-check-version" function (:prototype-flag t) nil [887527 887637])
            ("if" code nil nil [887639 887737])
            ("if" code nil nil [887859 887956])
            ("if" code nil nil [888078 888181])
            ("if" code nil nil [888349 888458])
            ("if" code nil nil [888586 888693])
            ("org-duration-set-regexps" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [888832 888930])
            ("org-duration-p" function (:prototype-flag t) nil [888932 889036])
            ("org-duration-to-minutes" function (:prototype-flag t) nil [889038 889455])
            ("org-duration-from-minutes" function (:prototype-flag t) nil [889457 889844])
            ("org-duration-h:mm-only-p" function (:prototype-flag t) nil [889846 890233])
            ("if" code nil nil [890235 890344])
            ("if" code nil nil [890509 890616])
            ("if" code nil nil [890755 890860])
            ("if" code nil nil [890985 891090])
            ("if" code nil nil [891206 891305])
            ("if" code nil nil [891427 891524])
            ("if" code nil nil [891680 891781])
            ("if" code nil nil [891949 892058])
            ("if" code nil nil [892177 892278])
            ("if" code nil nil [892400 892497])
            ("if" code nil nil [892647 892744])
            ("if" code nil nil [892906 893004])
            ("if" code nil nil [893123 893224])
            ("if" code nil nil [893369 893482])
            ("if" code nil nil [893635 893734])
            ("org-lint" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893853 894238])
            ("if" code nil nil [894240 894341])
            ("if" code nil nil [894460 894556])
            ("if" code nil nil [894678 894781])
            ("org-load-noerror-mustsuffix" function (:prototype-flag t) nil [894900 895030])
            ("if" code nil nil [895032 895128])
            ("if" code nil nil [895244 895343])
            ("if" code nil nil [895505 895610])
            ("if" code nil nil [895732 895835])
            ("if" code nil nil [895977 896100])
            ("if" code nil nil [896256 896356])
            ("if" code nil nil [896495 896604])
            ("if" code nil nil [896726 896829])
            ("if" code nil nil [896945 897040])
            ("if" code nil nil [897199 897295])
            ("if" code nil nil [897454 897557])
            ("org-release" function (:prototype-flag t) nil [897685 897828])
            ("org-git-version" function (:prototype-flag t) nil [897830 897973])
            ("if" code nil nil [898089 898188])
            ("put" code nil nil [898295 898346])
            ("put" code nil nil [898347 898410])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898412 899524])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [899526 899855])
            ("put" code nil nil [899856 899900])
            ("if" code nil nil [899902 900001])
            ("if" code nil nil [900139 900236])
            ("if" code nil nil [900392 900494])
            ("if" code nil nil [900653 900757])
            ("if" code nil nil [900910 901010])
            ("if" code nil nil [901178 901288])
            ("if" code nil nil [901444 901546])
            ("if" code nil nil [901696 901794])
            ("if" code nil nil [901941 902037])
            ("if" code nil nil [902187 902285])
            ("if" code nil nil [902435 902533])
            ("if" code nil nil [902695 902801])
            ("if" code nil nil [902963 903069])
            ("push" code nil nil [903198 903258])
            ("package-enable-at-startup" variable (:default-value t) nil [903260 903647])
            ("custom-autoload" code nil nil [903649 903705])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903707 904342])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904344 904443])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904445 904833])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904835 905291])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905293 905788])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905790 905956])
            ("package-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905958 906152])
            ("package-reinstall" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906154 906314])
            ("package-autoremove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906316 906537])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906539 906656])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906658 907008])
            ("defalias" code nil nil [907010 907058])
            ("if" code nil nil [907060 907213])
            ("if" code nil nil [907357 907458])
            ("if" code nil nil [907589 907788])
            ("show-paren-mode" variable nil nil [907890 908187])
            ("custom-autoload" code nil nil [908189 908235])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [908237 908694])
            ("if" code nil nil [908696 908796])
            ("put" code nil nil [908938 908985])
            ("parse-time-string" function (:prototype-flag t) nil [908987 909505])
            ("if" code nil nil [909507 909607])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909732 911724])
            ("if" code nil nil [911726 911842])
            ("password-cache" variable (:default-value t) nil [911979 912036])
            ("custom-autoload" code nil nil [912038 912090])
            ("password-cache-expiry" variable (:default-value 16) nil [912092 912267])
            ("custom-autoload" code nil nil [912269 912328])
            ("password-in-cache-p" function (:prototype-flag t) nil [912330 912431])
            ("if" code nil nil [912433 912540])
            ("pcase" function (:prototype-flag t) nil [912664 914439])
            ("function-put" code nil nil [914441 914487])
            ("pcase-exhaustive" function (:prototype-flag t) nil [914489 914679])
            ("function-put" code nil nil [914681 914738])
            ("pcase-lambda" function (:prototype-flag t) nil [914740 915040])
            ("function-put" code nil nil [915042 915089])
            ("function-put" code nil nil [915091 915148])
            ("pcase-let*" function (:prototype-flag t) nil [915150 915666])
            ("function-put" code nil nil [915668 915719])
            ("pcase-let" function (:prototype-flag t) nil [915721 916341])
            ("function-put" code nil nil [916343 916393])
            ("pcase-dolist" function (:prototype-flag t) nil [916395 917032])
            ("function-put" code nil nil [917034 917087])
            ("pcase-defmacro" function (:prototype-flag t) nil [917089 917408])
            ("function-put" code nil nil [917410 917465])
            ("function-put" code nil nil [917467 917516])
            ("if" code nil nil [917518 917613])
            ("pcomplete/cvs" function (:prototype-flag t) nil [917727 917823])
            ("if" code nil nil [917825 917928])
            ("pcomplete/gzip" function (:prototype-flag t) nil [918042 918122])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [918124 918206])
            ("pcomplete/make" function (:prototype-flag t) nil [918208 918292])
            ("pcomplete/tar" function (:prototype-flag t) nil [918294 918386])
            ("pcomplete/find" function (:prototype-flag t) nil [918388 918482])
            ("defalias" code nil nil [918484 918526])
            ("if" code nil nil [918528 918631])
            ("pcomplete/kill" function (:prototype-flag t) nil [918751 918867])
            ("pcomplete/umount" function (:prototype-flag t) nil [918869 918965])
            ("pcomplete/mount" function (:prototype-flag t) nil [918967 919061])
            ("if" code nil nil [919063 919192])
            ("pcomplete/rpm" function (:prototype-flag t) nil [919306 919396])
            ("if" code nil nil [919398 919501])
            ("pcomplete/cd" function (:prototype-flag t) nil [919618 919695])
            ("defalias" code nil nil [919697 919738])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [919740 919823])
            ("pcomplete/rm" function (:prototype-flag t) nil [919825 919902])
            ("pcomplete/xargs" function (:prototype-flag t) nil [919904 919987])
            ("defalias" code nil nil [919989 920032])
            ("pcomplete/which" function (:prototype-flag t) nil [920034 920117])
            ("pcomplete/chown" function (:prototype-flag t) nil [920119 920214])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [920216 920311])
            ("pcomplete/ssh" function (:prototype-flag t) nil [920313 920410])
            ("pcomplete/scp" function (:prototype-flag t) nil [920412 920567])
            ("if" code nil nil [920569 920669])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [920777 920869])
            ("pcomplete/ack" function (:prototype-flag t) nil [920871 921039])
            ("defalias" code nil nil [921041 921086])
            ("pcomplete/ag" function (:prototype-flag t) nil [921088 921174])
            ("if" code nil nil [921176 921275])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921389 921646])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921648 921756])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921758 921915])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921917 922031])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922033 922177])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922179 922297])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922299 922418])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [922420 922691])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [922693 922794])
            ("if" code nil nil [922796 922899])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923004 923271])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923273 923653])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923655 924163])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924165 924617])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924619 925064])
            ("cvs-dired-action" variable (:default-value (quote cvs-quickdir)) nil [925066 925234])
            ("custom-autoload" code nil nil [925236 925280])
            ("cvs-dired-use-hook" variable (:default-value (quote (4))) nil [925282 925613])
            ("custom-autoload" code nil nil [925615 925661])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [925663 926197])
            ("if" code nil nil [926199 926308])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] (\` (menu-item (\, (purecopy "Directory Status")) cvs-status :help (\, (purecopy "A more verbose status of a workarea"))))) (define-key m [checkout] (\` (menu-item (\, (purecopy "Checkout Module")) cvs-checkout :help (\, (purecopy "Check out a module from the repository"))))) (define-key m [update] (\` (menu-item (\, (purecopy "Update Directory")) cvs-update :help (\, (purecopy "Fetch updates from the repository"))))) (define-key m [examine] (\` (menu-item (\, (purecopy "Examine Directory")) cvs-examine :help (\, (purecopy "Examine the current state of a workarea"))))) (fset (quote cvs-global-menu) m))) nil [926428 927105])
            ("if" code nil nil [927107 927204])
            ("if" code nil nil [927324 927421])
            ("if" code nil nil [927544 927642])
            ("if" code nil nil [927762 927859])
            ("put" code nil nil [928000 928055])
            ("put" code nil nil [928056 928125])
            ("put" code nil nil [928126 928191])
            ("put" code nil nil [928192 928247])
            ("put" code nil nil [928248 928313])
            ("put" code nil nil [928314 928369])
            ("perl-flymake" function (:prototype-flag t) nil [928371 928659])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [928661 930867])
            ("if" code nil nil [930869 931006])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [931134 934892])
            ("defalias" code nil nil [934894 934932])
            ("if" code nil nil [934934 935033])
            ("pixel-scroll-mode" variable nil nil [935156 935461])
            ("custom-autoload" code nil nil [935463 935518])
            ("pixel-scroll-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935520 935811])
            ("if" code nil nil [935813 935915])
            ("plstore-open" function (:prototype-flag t) nil [936023 936129])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936131 936220])
            ("if" code nil nil [936222 936321])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [936434 936654])
            ("if" code nil nil [936656 936745])
            ("pop3-movemail" function (:prototype-flag t) nil [936852 936987])
            ("if" code nil nil [936989 937082])
            ("pp-to-string" function (:prototype-flag t) nil [937197 937460])
            ("pp-buffer" function (:prototype-flag t) nil [937462 937581])
            ("pp" function (:prototype-flag t) nil [937583 937889])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937891 938072])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938074 938195])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938197 938391])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938393 938601])
            ("if" code nil nil [938603 938692])
            ("push" code nil nil [938802 938863])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938865 939085])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939087 939936])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939938 940816])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940818 941672])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941674 942599])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942601 943239])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943241 943899])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943901 944535])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [944537 945242])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945244 945394])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945396 945585])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945587 945740])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945742 945924])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945926 946078])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946080 946271])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946273 946428])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946430 946606])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946608 947171])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947173 947454])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947456 947737])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947739 948107])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948109 948195])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948197 948283])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948285 948373])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948375 948866])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948868 949376])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949378 949874])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949876 950406])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950408 950509])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950511 950641])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950643 950770])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950772 950869])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950871 951012])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951014 951931])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951933 952029])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952031 952289])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952291 952393])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952395 952491])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952493 952576])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952578 952650])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952652 952723])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952725 952958])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952960 953037])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953039 953120])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953122 953196])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953198 953275])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953277 953357])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953359 953451])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953453 953525])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953527 953636])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953638 953710])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953712 953816])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953818 953918])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953920 954011])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954013 954106])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954108 954196])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954198 954294])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954296 954397])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954399 954500])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954502 954599])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954601 957113])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957115 958105])
            ("if" code nil nil [958107 958214])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958319 958675])
            ("if" code nil nil [958677 958774])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958885 959159])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959161 959254])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959256 959362])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959364 959469])
            ("if" code nil nil [959471 959572])
            ("project-current" function (:prototype-flag t) nil [959700 960069])
            ("project-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960071 960555])
            ("project-or-external-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960557 960791])
            ("project-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960793 960983])
            ("project-or-external-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960985 961205])
            ("if" code nil nil [961207 961306])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961431 961838])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961840 961979])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961981 962175])
            ("if" code nil nil [962177 962293])
            ("bdf-directory-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (list (expand-file-name "fonts/bdf" installation-directory)) (quote ("/usr/local/share/emacs/fonts/bdf")))) nil [962398 962686])
            ("custom-autoload" code nil nil [962688 962736])
            ("if" code nil nil [962738 962832])
            ("push" code nil nil [962959 963019])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963021 964098])
            ("if" code nil nil [964100 964194])
            ("if" code nil nil [964339 964438])
            ("push" code nil nil [964548 964609])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list (quote a4) (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list (quote a3) (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list (quote letter) (* 72 8.5) (* 72 11.0) "Letter") (list (quote legal) (* 72 8.5) (* 72 14.0) "Legal") (list (quote letter-small) (* 72 7.68) (* 72 10.16) "LetterSmall") (list (quote tabloid) (* 72 11.0) (* 72 17.0) "Tabloid") (list (quote ledger) (* 72 17.0) (* 72 11.0) "Ledger") (list (quote statement) (* 72 5.5) (* 72 8.5) "Statement") (list (quote executive) (* 72 7.5) (* 72 10.0) "Executive") (list (quote a4small) (* 72 7.47) (* 72 10.85) "A4Small") (list (quote b4) (* 72 10.125) (* 72 14.33) "B4") (list (quote b5) (* 72 7.16) (* 72 10.125) "B5") (quote (addresslarge 236.0 99.0 "AddressLarge")) (quote (addresssmall 236.0 68.0 "AddressSmall")) (quote (cuthanging13 90.0 222.0 "CutHanging13")) (quote (cuthanging15 90.0 114.0 "CutHanging15")) (quote (diskette 181.0 136.0 "Diskette")) (quote (eurofilefolder 139.0 112.0 "EuropeanFilefolder")) (quote (eurofoldernarrow 526.0 107.0 "EuroFolderNarrow")) (quote (eurofolderwide 526.0 136.0 "EuroFolderWide")) (quote (euronamebadge 189.0 108.0 "EuroNameBadge")) (quote (euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge")) (quote (filefolder 230.0 37.0 "FileFolder")) (quote (jewelry 76.0 136.0 "Jewelry")) (quote (mediabadge 180.0 136.0 "MediaBadge")) (quote (multipurpose 126.0 68.0 "MultiPurpose")) (quote (retaillabel 90.0 104.0 "RetailLabel")) (quote (shipping 271.0 136.0 "Shipping")) (quote (slide35mm 26.0 104.0 "Slide35mm")) (quote (spine8mm 187.0 26.0 "Spine8mm")) (quote (topcoated 425.19685 136.0 "TopCoatedPaper")) (quote (topcoatedpaper 396.0 136.0 "TopcoatedPaper150")) (quote (vhsface 205.0 127.0 "VHSFace")) (quote (vhsspine 400.0 50.0 "VHSSpine")) (quote (zipdisk 156.0 136.0 "ZipDisk"))))) nil [964611 966316])
            ("custom-autoload" code nil nil [966318 966377])
            ("ps-paper-type" variable (:default-value (quote letter)) nil [966379 966568])
            ("custom-autoload" code nil nil [966570 966615])
            ("ps-print-color-p" variable (:default-value (or (fboundp (quote x-color-values)) (fboundp (quote color-instance-rgb-components)))) nil [966617 966954])
            ("custom-autoload" code nil nil [966956 967004])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967006 967097])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967099 967614])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967616 967956])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967958 968153])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968155 968503])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968505 968802])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968804 969210])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969212 969469])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969471 969881])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969883 970392])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970394 970638])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970640 970828])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970830 971017])
            ("ps-setup" function (:prototype-flag t) nil [971019 971117])
            ("ps-extend-face-list" function (:prototype-flag t) nil [971119 971616])
            ("ps-extend-face" function (:prototype-flag t) nil [971618 972705])
            ("if" code nil nil [972707 972802])
            ("if" code nil nil [972910 973004])
            ("push" code nil nil [973117 973173])
            ("pulse-momentary-highlight-one-line" function (:prototype-flag t) nil [973175 973404])
            ("pulse-momentary-highlight-region" function (:prototype-flag t) nil [973406 973637])
            ("if" code nil nil [973639 973734])
            ("if" code nil nil [973841 973934])
            ("push" code nil nil [974058 974118])
            ("add-to-list" code nil nil [974120 974197])
            ("add-to-list" code nil nil [974199 974283])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974285 975073])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975075 975182])
            ("if" code nil nil [975184 975326])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975429 975971])
            ("if" code nil nil [975973 976076])
            ("quail-title" function (:prototype-flag t) nil [976206 976303])
            ("quail-use-package" function (:prototype-flag t) nil [976305 976600])
            ("quail-define-package" function (:prototype-flag t) nil [976602 980779])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980781 981219])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981221 981456])
            ("quail-define-rules" function (:prototype-flag t) nil [981458 982929])
            ("quail-install-map" function (:prototype-flag t) nil [982931 983215])
            ("quail-install-decode-map" function (:prototype-flag t) nil [983217 983543])
            ("quail-defrule" function (:prototype-flag t) nil [983545 984813])
            ("quail-defrule-internal" function (:prototype-flag t) nil [984815 985253])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985255 985830])
            ("if" code nil nil [985832 985927])
            ("if" code nil nil [986074 986198])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [986339 986595])
            ("if" code nil nil [986597 986722])
            ("if" code nil nil [986863 986977])
            ("if" code nil nil [987101 987206])
            ("if" code nil nil [987353 987466])
            ("if" code nil nil [987590 987718])
            ("if" code nil nil [987842 987963])
            ("if" code nil nil [988107 988239])
            ("if" code nil nil [988366 988483])
            ("if" code nil nil [988627 988744])
            ("ucs-input-activate" function (:prototype-flag t) nil [988894 989188])
            ("if" code nil nil [989190 989299])
            ("if" code nil nil [989426 989543])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'local-write-file-hooks (lambda () (quickurl-read) nil)))
;; End:
")
                nil [989662 990183])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990185 990433])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990435 990556])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990558 990788])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990790 991058])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991060 991201])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991203 991318])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991320 991497])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991499 991624])
            ("if" code nil nil [991626 991727])
            ("if" code nil nil [991874 991979])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992089 992301])
            ("defalias" code nil nil [992303 992325])
            ("rcirc-connect" function (:prototype-flag t) nil [992327 992477])
            ("rcirc-track-minor-mode" variable nil nil [992479 992804])
            ("custom-autoload" code nil nil [992806 992859])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992861 993146])
            ("if" code nil nil [993148 993292])
            ("defalias" code nil nil [993439 993477])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993479 993867])
            ("if" code nil nil [993869 993996])
            ("recentf-mode" variable nil nil [994104 994389])
            ("custom-autoload" code nil nil [994391 994436])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994438 994860])
            ("if" code nil nil [994862 994961])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995060 995488])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [995490 995865])
            ("extract-rectangle" function (:prototype-flag t) nil [995867 996068])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996070 996718])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996720 996850])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996852 996966])
            ("insert-rectangle" function (:prototype-flag t) nil [996968 997339])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997341 997775])
            ("defalias" code nil nil [997777 997833])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997835 998326])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998328 998721])
            ("defalias" code nil nil [998723 998770])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998772 999117])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999119 999463])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999465 999857])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999859 1000039])
            ("if" code nil nil [1000041 1000275])
            ("if" code nil nil [1000400 1000494])
            ("if" code nil nil [1000616 1000711])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000836 1001351])
            ("if" code nil nil [1001353 1001450])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001574 1001621])
            ("reftex-all-document-files" function (:prototype-flag t) nil [1001622 1001674])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001675 1001734])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001735 1001793])
            ("turn-on-reftex" function (:prototype-flag t) nil [1001795 1001870])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001872 1003283])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [1003285 1003470])
            ("if" code nil nil [1003472 1003569])
            ("if" code nil nil [1003743 1003844])
            ("if" code nil nil [1004021 1004123])
            ("if" code nil nil [1004297 1004398])
            ("if" code nil nil [1004581 1004685])
            ("if" code nil nil [1004865 1004968])
            ("if" code nil nil [1005148 1005251])
            ("if" code nil nil [1005425 1005526])
            ("if" code nil nil [1005700 1005801])
            ("if" code nil nil [1005975 1006076])
            ("put" code nil nil [1006223 1006315])
            ("put" code nil nil [1006316 1006408])
            ("put" code nil nil [1006409 1006466])
            ("put" code nil nil [1006467 1006549])
            ("if" code nil nil [1006551 1006653])
            ("regexp-opt" function (:prototype-flag t) nil [1006800 1008364])
            ("regexp-opt-depth" function (:prototype-flag t) nil [1008366 1008561])
            ("if" code nil nil [1008563 1008668])
            ("push" code nil nil [1008788 1008843])
            ("if" code nil nil [1008845 1008938])
            ("if" code nil nil [1009049 1009150])
            ("push" code nil nil [1009280 1009339])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009341 1009618])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009620 1009732])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009734 1009900])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [1009902 1010013])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010015 1010969])
            ("if" code nil nil [1010971 1011072])
            ("push" code nil nil [1011176 1011234])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011236 1011924])
            ("if" code nil nil [1011926 1012023])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [1012144 1013350])
            ("if" code nil nil [1013352 1013453])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013570 1014700])
            ("if" code nil nil [1014702 1014820])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014925 1015308])
            ("global-reveal-mode" variable nil nil [1015310 1015619])
            ("custom-autoload" code nil nil [1015621 1015671])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1015673 1016027])
            ("if" code nil nil [1016029 1016126])
            ("if" code nil nil [1016270 1016369])
            ("if" code nil nil [1016487 1016599])
            ("if" code nil nil [1016717 1016816])
            ("if" code nil nil [1016932 1017031])
            ("if" code nil nil [1017149 1017248])
            ("if" code nil nil [1017366 1017465])
            ("if" code nil nil [1017580 1017677])
            ("ring-p" function (:prototype-flag t) nil [1017798 1017884])
            ("make-ring" function (:prototype-flag t) nil [1017886 1017982])
            ("if" code nil nil [1017984 1018077])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018190 1019915])
            ("if" code nil nil [1019917 1020014])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [1020126 1020209])
            ("custom-autoload" code nil nil [1020211 1020255])
            ("put" code nil nil [1020257 1020485])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type (quote (hpux usg-unix-v))) "/usr/mail/") (t "/usr/spool/mail/")))) nil [1020487 1020812])
            ("custom-autoload" code nil nil [1020814 1020864])
            ("custom-initialize-delay" code nil nil [1020865 1020917])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [1020919 1021112])
            ("rmail-user-mail-address-regexp" variable nil nil [1021114 1021734])
            ("custom-autoload" code nil nil [1021736 1021795])
            ("define-obsolete-variable-alias" code nil nil [1021797 1021889])
            ("rmail-default-dont-reply-to-names" variable nil nil [1021891 1022095])
            ("make-obsolete-variable" code nil nil [1022097 1022189])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^ARC-.*:" "\\|^Received-SPF:" "\\|^Authentication-Results:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [1022191 1023670])
            ("custom-autoload" code nil nil [1023672 1023722])
            ("rmail-displayed-headers" variable nil nil [1023724 1023904])
            ("custom-autoload" code nil nil [1023906 1023958])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [1023960 1024229])
            ("custom-autoload" code nil nil [1024231 1024287])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [1024289 1024499])
            ("custom-autoload" code nil nil [1024501 1024555])
            ("rmail-primary-inbox-list" variable nil nil [1024557 1024920])
            ("custom-autoload" code nil nil [1024922 1024975])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [1024977 1025084])
            ("custom-autoload" code nil nil [1025086 1025145])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [1025147 1025260])
            ("custom-autoload" code nil nil [1025262 1025318])
            ("rmail-mode-hook" variable nil nil [1025320 1025401])
            ("rmail-show-message-hook" variable nil nil [1025403 1025500])
            ("custom-autoload" code nil nil [1025502 1025554])
            ("rmail-file-coding-system" variable nil nil [1025556 1025663])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [1025665 1026037])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026039 1026620])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026622 1029965])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029967 1030052])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030054 1030196])
            ("if" code nil nil [1030198 1030301])
            ("if" code nil nil [1030457 1030571])
            ("if" code nil nil [1030732 1030831])
            ("if" code nil nil [1030989 1031087])
            ("if" code nil nil [1031242 1031339])
            ("put" code nil nil [1031459 1031513])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031515 1032775])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032777 1033327])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1033329 1033913])
            ("if" code nil nil [1033915 1034013])
            ("if" code nil nil [1034174 1034273])
            ("if" code nil nil [1034431 1034529])
            ("read-multiple-choice" function (:prototype-flag t) nil [1034647 1035993])
            ("rng-c-load-schema" function (:prototype-flag t) nil [1036117 1036260])
            ("if" code nil nil [1036262 1036359])
            ("if" code nil nil [1036474 1036571])
            ("if" code nil nil [1036689 1036784])
            ("if" code nil nil [1036908 1037005])
            ("if" code nil nil [1037129 1037226])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037347 1037590])
            ("if" code nil nil [1037592 1037688])
            ("if" code nil nil [1037812 1037915])
            ("if" code nil nil [1038039 1038136])
            ("if" code nil nil [1038254 1038349])
            ("if" code nil nil [1038470 1038566])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1038690 1039988])
            ("if" code nil nil [1039990 1040087])
            ("put" code nil nil [1040205 1040290])
            ("rng-xsd-compile" function (:prototype-flag t) nil [1040292 1041383])
            ("if" code nil nil [1041385 1041515])
            ("robin-define-package" function (:prototype-flag t) nil [1041645 1042088])
            ("robin-modify-package" function (:prototype-flag t) nil [1042090 1042376])
            ("robin-use-package" function (:prototype-flag t) nil [1042378 1042490])
            ("if" code nil nil [1042492 1042587])
            ("rot13" function (:prototype-flag t) nil [1042689 1042975])
            ("rot13-string" function (:prototype-flag t) nil [1042977 1043070])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043072 1043197])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043199 1043571])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043573 1043684])
            ("if" code nil nil [1043686 1043781])
            ("add-to-list" code nil nil [1043897 1043966])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043968 1044230])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1044232 1044649])
            ("if" code nil nil [1044651 1044742])
            ("if" code nil nil [1044844 1044939])
            ("push" code nil nil [1045080 1045140])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045142 1045226])
            ("add-to-list" code nil nil [1045228 1045486])
            ("dolist" code nil nil [1045488 1045623])
            ("if" code nil nil [1045625 1045723])
            ("push" code nil nil [1045839 1045900])
            ("ruler-mode" variable nil nil [1045902 1046017])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1046019 1046294])
            ("if" code nil nil [1046296 1046396])
            ("rx-to-string" function (:prototype-flag t) nil [1046511 1046741])
            ("rx" function (:prototype-flag t) nil [1046743 1055961])
            ("if" code nil nil [1055963 1056052])
            ("if" code nil nil [1056159 1056252])
            ("if" code nil nil [1056374 1056481])
            ("if" code nil nil [1056609 1056720])
            ("push" code nil nil [1056841 1056896])
            ("if" code nil nil [1056898 1057001])
            ("if" code nil nil [1057146 1057255])
            ("push" code nil nil [1057365 1057423])
            ("savehist-mode" variable nil nil [1057425 1057714])
            ("custom-autoload" code nil nil [1057716 1057763])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1057765 1059268])
            ("if" code nil nil [1059270 1059371])
            ("save-place-mode" variable nil nil [1059485 1059782])
            ("custom-autoload" code nil nil [1059784 1059834])
            ("save-place-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059836 1060078])
            ("save-place-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060080 1060572])
            ("if" code nil nil [1060574 1060711])
            ("if" code nil nil [1060822 1060943])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061068 1061899])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061901 1062347])
            ("if" code nil nil [1062349 1062455])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1062582 1062741])
            ("if" code nil nil [1062743 1062862])
            ("scroll-all-mode" variable nil nil [1062979 1063276])
            ("custom-autoload" code nil nil [1063278 1063329])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063331 1063751])
            ("if" code nil nil [1063753 1063858])
            ("if" code nil nil [1063975 1064185])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064305 1064801])
            ("if" code nil nil [1064803 1064910])
            ("when" code nil nil [1065025 1065102])
            ("if" code nil nil [1065104 1065203])
            ("push" code nil nil [1065325 1065384])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [1065386 1066935])
            ("custom-autoload" code nil nil [1066937 1066994])
            ("semantic-mode" variable nil nil [1066996 1067285])
            ("custom-autoload" code nil nil [1067287 1067334])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067336 1067897])
            ("if" code nil nil [1067899 1068011])
            ("if" code nil nil [1068195 1068305])
            ("if" code nil nil [1068516 1068642])
            ("if" code nil nil [1068815 1068937])
            ("if" code nil nil [1069104 1069225])
            ("if" code nil nil [1069424 1069538])
            ("if" code nil nil [1069719 1069827])
            ("if" code nil nil [1070014 1070143])
            ("if" code nil nil [1070313 1070427])
            ("if" code nil nil [1070617 1070758])
            ("if" code nil nil [1070951 1071063])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071239 1071353])
            ("if" code nil nil [1071355 1071469])
            ("if" code nil nil [1071665 1071794])
            ("if" code nil nil [1071987 1072099])
            ("if" code nil nil [1072248 1072361])
            ("if" code nil nil [1072548 1072658])
            ("if" code nil nil [1072833 1072939])
            ("if" code nil nil [1073108 1073214])
            ("if" code nil nil [1073372 1073484])
            ("if" code nil nil [1073648 1073773])
            ("if" code nil nil [1073922 1074049])
            ("if" code nil nil [1074233 1074344])
            ("if" code nil nil [1074528 1074639])
            ("if" code nil nil [1074829 1074942])
            ("if" code nil nil [1075115 1075250])
            ("if" code nil nil [1075434 1075545])
            ("if" code nil nil [1075697 1075811])
            ("if" code nil nil [1076010 1076126])
            ("if" code nil nil [1076304 1076417])
            ("if" code nil nil [1076575 1076685])
            ("if" code nil nil [1076896 1077025])
            ("if" code nil nil [1077227 1077377])
            ("if" code nil nil [1077549 1077717])
            ("if" code nil nil [1077889 1077997])
            ("if" code nil nil [1078164 1078281])
            ("if" code nil nil [1078456 1078562])
            ("if" code nil nil [1078737 1078843])
            ("if" code nil nil [1079024 1079132])
            ("if" code nil nil [1079272 1079375])
            ("if" code nil nil [1079530 1079639])
            ("if" code nil nil [1079803 1079927])
            ("if" code nil nil [1080102 1080227])
            ("if" code nil nil [1080396 1080503])
            ("if" code nil nil [1080681 1080792])
            ("if" code nil nil [1080967 1081140])
            ("if" code nil nil [1081318 1081425])
            ("if" code nil nil [1081571 1081677])
            ("if" code nil nil [1081849 1081967])
            ("if" code nil nil [1082151 1082282])
            ("if" code nil nil [1082481 1082631])
            ("if" code nil nil [1082771 1082878])
            ("if" code nil nil [1083056 1083163])
            ("if" code nil nil [1083347 1083479])
            ("if" code nil nil [1083654 1083760])
            ("if" code nil nil [1083941 1084056])
            ("if" code nil nil [1084258 1084395])
            ("if" code nil nil [1084568 1084690])
            ("if" code nil nil [1084892 1085029])
            ("if" code nil nil [1085225 1085345])
            ("if" code nil nil [1085550 1085689])
            ("if" code nil nil [1085885 1086005])
            ("if" code nil nil [1086177 1086282])
            ("if" code nil nil [1086469 1086593])
            ("if" code nil nil [1086774 1086882])
            ("if" code nil nil [1087072 1087193])
            ("if" code nil nil [1087368 1087474])
            ("if" code nil nil [1087620 1087726])
            ("if" code nil nil [1087919 1088031])
            ("if" code nil nil [1088183 1088311])
            ("if" code nil nil [1088478 1088589])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1088765 1088879])
            ("if" code nil nil [1088881 1088995])
            ("if" code nil nil [1089206 1089350])
            ("if" code nil nil [1089564 1089727])
            ("if" code nil nil [1089929 1090071])
            ("if" code nil nil [1090244 1090386])
            ("mail-from-style" variable (:default-value (quote default)) nil [1090507 1090913])
            ("custom-autoload" code nil nil [1090915 1090962])
            ("mail-specify-envelope-from" variable nil nil [1090964 1091420])
            ("custom-autoload" code nil nil [1091422 1091480])
            ("mail-self-blind" variable nil nil [1091482 1091683])
            ("custom-autoload" code nil nil [1091685 1091732])
            ("mail-interactive" variable (:default-value t) nil [1091734 1091891])
            ("custom-autoload" code nil nil [1091893 1091941])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [1091943 1092415])
            ("custom-autoload" code nil nil [1092417 1092467])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [1092469 1092611])
            ("custom-autoload" code nil nil [1092613 1092666])
            ("mail-archive-file-name" variable nil nil [1092668 1092861])
            ("custom-autoload" code nil nil [1092863 1092917])
            ("mail-default-reply-to" variable nil nil [1092919 1093118])
            ("custom-autoload" code nil nil [1093120 1093173])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [1093175 1093437])
            ("custom-autoload" code nil nil [1093439 1093495])
            ("mail-setup-hook" variable nil nil [1093497 1093595])
            ("custom-autoload" code nil nil [1093597 1093644])
            ("mail-aliases" variable (:default-value t) nil [1093646 1093952])
            ("mail-yank-prefix" variable (:default-value "> ") nil [1093954 1094123])
            ("custom-autoload" code nil nil [1094125 1094173])
            ("mail-indentation-spaces" variable (:default-value 3) nil [1094175 1094334])
            ("custom-autoload" code nil nil [1094336 1094391])
            ("mail-citation-hook" variable nil nil [1094393 1094889])
            ("custom-autoload" code nil nil [1094891 1094941])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [1094943 1095316])
            ("custom-autoload" code nil nil [1095318 1095377])
            ("mail-signature" variable (:default-value t) nil [1095379 1095827])
            ("custom-autoload" code nil nil [1095829 1095875])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [1095877 1095992])
            ("custom-autoload" code nil nil [1095994 1096045])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [1096047 1096315])
            ("custom-autoload" code nil nil [1096317 1096371])
            ("mail-default-headers" variable nil nil [1096373 1096611])
            ("custom-autoload" code nil nil [1096613 1096665])
            ("sendmail-query-once" function (:prototype-flag t) nil [1096667 1096847])
            ("define-mail-user-agent" code nil nil [1096849 1096943])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [1096945 1097128])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1097130 1098258])
            ("mail-mailing-lists" variable nil nil [1098260 1098472])
            ("custom-autoload" code nil nil [1098474 1098524])
            ("sendmail-coding-system" variable nil nil [1098526 1098845])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [1098847 1099323])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1099325 1101513])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101515 1101704])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101706 1101893])
            ("if" code nil nil [1101895 1102004])
            ("push" code nil nil [1102121 1102176])
            ("if" code nil nil [1102178 1102269])
            ("put" code nil nil [1102374 1102416])
            ("put" code nil nil [1102418 1102460])
            ("put" code nil nil [1102462 1102508])
            ("server-name" variable (:default-value "server") nil [1102510 1103105])
            ("custom-autoload" code nil nil [1103107 1103148])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103150 1103991])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1103993 1104226])
            ("server-mode" variable nil nil [1104228 1104509])
            ("custom-autoload" code nil nil [1104511 1104554])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1104556 1104943])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [1104945 1105260])
            ("if" code nil nil [1105262 1105359])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1105455 1106904])
            ("if" code nil nil [1106906 1107016])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1107158 1107879])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1107881 1109690])
            ("if" code nil nil [1109692 1109798])
            ("push" code nil nil [1109939 1110001])
            ("put" code nil nil [1110002 1110047])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1110049 1112629])
            ("defalias" code nil nil [1112631 1112669])
            ("if" code nil nil [1112671 1112767])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112894 1114835])
            ("if" code nil nil [1114837 1114945])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115062 1115502])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115504 1115845])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115847 1116303])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116305 1116387])
            ("if" code nil nil [1116389 1116489])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [1116591 1116942])
            ("custom-autoload" code nil nil [1116944 1116996])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116998 1118658])
            ("if" code nil nil [1118660 1118774])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118878 1119021])
            ("shr-insert-document" function (:prototype-flag t) nil [1119023 1119221])
            ("if" code nil nil [1119223 1119314])
            ("if" code nil nil [1119436 1119539])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1119649 1119721])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1119723 1119788])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1119790 1119864])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1119866 1119940])
            ("if" code nil nil [1119942 1120037])
            ("if" code nil nil [1120176 1120278])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120403 1120746])
            ("if" code nil nil [1120748 1120848])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120973 1123118])
            ("if" code nil nil [1123120 1123217])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [1123328 1123445])
            ("define-skeleton" function (:prototype-flag t) nil [1123447 1123694])
            ("function-put" code nil nil [1123696 1123746])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [1123748 1124330])
            ("skeleton-insert" function (:prototype-flag t) nil [1124332 1127874])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1127876 1128602])
            ("if" code nil nil [1128604 1128705])
            ("smerge-refine-regions" function (:prototype-flag t) nil [1128831 1129764])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129766 1129984])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129986 1130290])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1130292 1130473])
            ("if" code nil nil [1130475 1130577])
            ("if" code nil nil [1130698 1130791])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1130906 1131076])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131078 1131279])
            ("if" code nil nil [1131281 1131403])
            ("if" code nil nil [1131515 1131609])
            ("smtpmail-send-it" function (:prototype-flag t) nil [1131730 1131789])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131791 1131928])
            ("if" code nil nil [1131930 1132031])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1132143 1132707])
            ("if" code nil nil [1132709 1132804])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1132926 1133303])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1133305 1133688])
            ("if" code nil nil [1133690 1133787])
            ("push" code nil nil [1133914 1133978])
            ("if" code nil nil [1133980 1134080])
            ("if" code nil nil [1134219 1134320])
            ("if" code nil nil [1134430 1134525])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1134645 1135039])
            ("if" code nil nil [1135041 1135171])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135295 1136959])
            ("if" code nil nil [1136961 1137064])
            ("put" code nil nil [1137162 1137214])
            ("sort-subr" function (:prototype-flag t) nil [1137216 1139367])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139369 1139709])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139711 1140061])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1140063 1140403])
            ("put" code nil nil [1140404 1140459])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1140461 1141038])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141040 1141498])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141500 1142611])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142613 1143406])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143408 1143571])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143573 1144518])
            ("if" code nil nil [1144520 1144613])
            ("if" code nil nil [1144721 1144819])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144928 1145288])
            ("if" code nil nil [1145290 1145383])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145521 1145850])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [1145852 1146075])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [1146077 1146282])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146284 1146535])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146537 1146733])
            ("if" code nil nil [1146735 1146842])
            ("if" code nil nil [1146966 1147101])
            ("if" code nil nil [1147225 1147323])
            ("defalias" code nil nil [1147434 1147475])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147477 1147936])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147938 1148184])
            ("if" code nil nil [1148186 1148287])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148399 1148497])
            ("snarf-spooks" function (:prototype-flag t) nil [1148499 1148614])
            ("if" code nil nil [1148616 1148717])
            ("push" code nil nil [1148832 1148886])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [1148888 1149626])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149628 1150720])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150722 1151048])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151050 1151605])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151607 1152832])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152834 1154070])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154072 1155190])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155192 1156446])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156448 1157724])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1157726 1158859])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158861 1159964])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1159966 1161185])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1161187 1162682])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162684 1163837])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1163839 1165166])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1165168 1166379])
            ("sql-vertica" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166381 1166477])
            ("if" code nil nil [1166479 1166570])
            ("push" code nil nil [1166689 1166747])
            ("if" code nil nil [1166749 1166855])
            ("if" code nil nil [1166998 1167102])
            ("if" code nil nil [1167283 1167390])
            ("if" code nil nil [1167559 1167662])
            ("if" code nil nil [1167805 1167909])
            ("if" code nil nil [1168070 1168180])
            ("if" code nil nil [1168364 1168481])
            ("if" code nil nil [1168647 1168775])
            ("if" code nil nil [1168968 1169079])
            ("if" code nil nil [1169231 1169345])
            ("if" code nil nil [1169494 1169600])
            ("if" code nil nil [1169752 1169873])
            ("if" code nil nil [1170016 1170120])
            ("if" code nil nil [1170298 1170404])
            ("if" code nil nil [1170582 1170688])
            ("if" code nil nil [1170857 1170960])
            ("if" code nil nil [1171132 1171236])
            ("if" code nil nil [1171391 1171508])
            ("if" code nil nil [1171677 1171785])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171940 1172048])
            ("defalias" code nil nil [1172050 1172093])
            ("if" code nil nil [1172095 1172215])
            ("if" code nil nil [1172361 1172485])
            ("if" code nil nil [1172669 1172792])
            ("if" code nil nil [1172964 1173103])
            ("starttls-open-stream" function (:prototype-flag t) nil [1173222 1174073])
            ("if" code nil nil [1174075 1174176])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174284 1174718])
            ("strokes-read-stroke" function (:prototype-flag t) nil [1174720 1175156])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [1175158 1175637])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175639 1175803])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175805 1175978])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175980 1176122])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176124 1176221])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176223 1176348])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176350 1176696])
            ("strokes-mode" variable nil nil [1176698 1176983])
            ("custom-autoload" code nil nil [1176985 1177030])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177032 1177811])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177813 1178082])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178084 1178221])
            ("if" code nil nil [1178223 1178322])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178437 1178526])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178528 1178654])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178656 1178743])
            ("if" code nil nil [1178870 1179035])
            ("define-obsolete-function-alias" code nil nil [1179163 1179240])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1179242 1180317])
            ("global-subword-mode" variable nil nil [1180319 1180632])
            ("custom-autoload" code nil nil [1180634 1180686])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180688 1181095])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1181097 1181623])
            ("global-superword-mode" variable nil nil [1181625 1181946])
            ("custom-autoload" code nil nil [1181948 1182002])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182004 1182425])
            ("if" code nil nil [1182427 1182547])
            ("sc-cite-original" function (:prototype-flag t) nil [1182671 1183672])
            ("if" code nil nil [1183674 1183770])
            ("push" code nil nil [1183865 1183919])
            ("if" code nil nil [1183921 1184012])
            ("define-obsolete-function-alias" code nil nil [1184120 1184189])
            ("gpm-mouse-mode" variable (:default-value t) nil [1184191 1184482])
            ("custom-autoload" code nil nil [1184484 1184531])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184533 1185185])
            ("if" code nil nil [1185187 1185288])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1185393 1185788])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1185790 1186284])
            ("if" code nil nil [1186286 1186389])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186511 1191611])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191613 1191940])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191942 1192294])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192296 1192447])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192449 1192818])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192820 1192875])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192877 1193215])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193217 1193287])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193289 1193553])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193555 1193616])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193618 1194083])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194085 1194145])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194147 1194585])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1194587 1195079])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195081 1195328])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195330 1195554])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195556 1197430])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197432 1197648])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197650 1197821])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197823 1197984])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197986 1198167])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198169 1198328])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198330 1198587])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198589 1198956])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198958 1199161])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199163 1199372])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199374 1199903])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199905 1200661])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1200663 1201830])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1201832 1203467])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1203469 1203720])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1203722 1203993])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1203995 1209136])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209138 1209446])
            ("if" code nil nil [1209448 1209554])
            ("push" code nil nil [1209712 1209777])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209876 1209985])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1209987 1210100])
            ("if" code nil nil [1210102 1210195])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1210306 1211085])
            ("if" code nil nil [1211087 1211183])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1211299 1212363])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212365 1212566])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212568 1212760])
            ("if" code nil nil [1212762 1212955])
            ("if" code nil nil [1213102 1213208])
            ("if" code nil nil [1213367 1213482])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213595 1214198])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1214200 1214432])
            ("if" code nil nil [1214434 1214556])
            ("if" code nil nil [1214658 1214753])
            ("make-term" function (:prototype-flag t) nil [1214852 1215271])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215273 1215520])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215522 1215768])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215770 1216344])
            ("if" code nil nil [1216346 1216501])
            ("testcover-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1216645 1217002])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1217004 1217105])
            ("if" code nil nil [1217107 1217210])
            ("tex-shell-file-name" variable nil nil [1217341 1217449])
            ("custom-autoload" code nil nil [1217451 1217502])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1217504 1217791])
            ("custom-autoload" code nil nil [1217793 1217838])
            ("tex-first-line-header-regexp" variable nil nil [1217840 1218117])
            ("custom-autoload" code nil nil [1218119 1218179])
            ("tex-main-file" variable nil nil [1218181 1218372])
            ("custom-autoload" code nil nil [1218374 1218419])
            ("tex-offer-save" variable (:default-value t) nil [1218421 1218524])
            ("custom-autoload" code nil nil [1218526 1218572])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [1218574 1218735])
            ("custom-autoload" code nil nil [1218737 1218784])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [1218786 1218955])
            ("custom-autoload" code nil nil [1218957 1219006])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [1219008 1219181])
            ("custom-autoload" code nil nil [1219183 1219233])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [1219235 1219531])
            ("custom-autoload" code nil nil [1219533 1219582])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [1219584 1219839])
            ("custom-autoload" code nil nil [1219841 1219891])
            ("latex-block-names" variable nil nil [1219893 1220029])
            ("custom-autoload" code nil nil [1220031 1220080])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [1220082 1220341])
            ("custom-autoload" code nil nil [1220343 1220393])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1220395 1220645])
            ("custom-autoload" code nil nil [1220647 1220700])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1220702 1221314])
            ("custom-autoload" code nil nil [1221316 1221373])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [1221375 1221865])
            ("custom-autoload" code nil nil [1221867 1221919])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [1221921 1222097])
            ("custom-autoload" code nil nil [1222099 1222153])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [1222155 1222453])
            ("custom-autoload" code nil nil [1222455 1222503])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1222505 1222616])
            ("custom-autoload" code nil nil [1222618 1222664])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1222666 1222779])
            ("custom-autoload" code nil nil [1222781 1222828])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1222830 1223262])
            ("defalias" code nil nil [1223264 1223294])
            ("defalias" code nil nil [1223296 1223338])
            ("defalias" code nil nil [1223340 1223374])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1223376 1225121])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1225123 1226827])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226829 1228602])
            ("tex-start-shell" function (:prototype-flag t) nil [1228604 1228662])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1228664 1228748])
            ("if" code nil nil [1228750 1228896])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1229027 1229453])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1229455 1229796])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1229798 1230425])
            ("if" code nil nil [1230427 1230548])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1230676 1230795])
            ("custom-autoload" code nil nil [1230797 1230846])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1230848 1230969])
            ("custom-autoload" code nil nil [1230971 1231021])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1231023 1233846])
            ("if" code nil nil [1233848 1233947])
            ("if" code nil nil [1234092 1234194])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234334 1234547])
            ("thai-compose-string" function (:prototype-flag t) nil [1234549 1234685])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234687 1234794])
            ("thai-composition-function" function (:prototype-flag t) nil [1234796 1234873])
            ("if" code nil nil [1234875 1235058])
            ("if" code nil nil [1235198 1235296])
            ("forward-thing" function (:prototype-flag t) nil [1235410 1235734])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1235736 1236249])
            ("thing-at-point" function (:prototype-flag t) nil [1236251 1236768])
            ("sexp-at-point" function (:prototype-flag t) nil [1236770 1236877])
            ("symbol-at-point" function (:prototype-flag t) nil [1236879 1236990])
            ("number-at-point" function (:prototype-flag t) nil [1236992 1237103])
            ("list-at-point" function (:prototype-flag t) nil [1237105 1237340])
            ("if" code nil nil [1237342 1237552])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1237657 1237747])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1237749 1237989])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1237991 1238103])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238105 1238228])
            ("defalias" code nil nil [1238230 1238270])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1238272 1238388])
            ("if" code nil nil [1238390 1238487])
            ("push" code nil nil [1238610 1238666])
            ("if" code nil nil [1238668 1238763])
            ("tibetan-char-p" function (:prototype-flag t) nil [1238906 1239064])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1239066 1239219])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1239221 1239415])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1239417 1239515])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1239517 1239634])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1239636 1239895])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1239897 1240134])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1240136 1240340])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1240342 1240518])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1240520 1240597])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1240599 1240680])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1240682 1240777])
            ("if" code nil nil [1240779 1240881])
            ("push" code nil nil [1241008 1241068])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241070 1241532])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241534 1241976])
            ("tildify-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1241978 1242835])
            ("tildify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1242837 1243450])
            ("if" code nil nil [1243452 1243551])
            ("display-time-day-and-date" variable nil nil [1243650 1243768])
            ("custom-autoload" code nil nil [1243770 1243823])
            ("put" code nil nil [1243824 1243874])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243876 1244194])
            ("display-time-mode" variable nil nil [1244196 1244501])
            ("custom-autoload" code nil nil [1244503 1244550])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1244552 1245155])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1245157 1245382])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1245384 1245642])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1245644 1245760])
            ("if" code nil nil [1245762 1245944])
            ("date-to-time" function (:prototype-flag t) nil [1246084 1246339])
            ("defalias" code nil nil [1246341 1246380])
            ("seconds-to-time" function (:prototype-flag t) nil [1246382 1246481])
            ("days-to-time" function (:prototype-flag t) nil [1246483 1246575])
            ("time-since" function (:prototype-flag t) nil [1246577 1246729])
            ("define-obsolete-function-alias" code nil nil [1246731 1246800])
            ("date-to-day" function (:prototype-flag t) nil [1246802 1246947])
            ("days-between" function (:prototype-flag t) nil [1246949 1247112])
            ("date-leap-year-p" function (:prototype-flag t) nil [1247114 1247211])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1247213 1247341])
            ("time-to-days" function (:prototype-flag t) nil [1247343 1247561])
            ("safe-date-to-time" function (:prototype-flag t) nil [1247563 1247753])
            ("format-seconds" function (:prototype-flag t) nil [1247755 1248709])
            ("seconds-to-string" function (:prototype-flag t) nil [1248711 1248833])
            ("if" code nil nil [1248835 1248999])
            ("put" code nil nil [1249115 1249169])
            ("put" code nil nil [1249170 1249236])
            ("put" code nil nil [1249237 1249296])
            ("put" code nil nil [1249297 1249350])
            ("put" code nil nil [1249351 1249402])
            ("put" code nil nil [1249403 1249464])
            ("put" code nil nil [1249465 1249519])
            ("put" code nil nil [1249520 1249575])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249577 1250519])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1250521 1250742])
            ("if" code nil nil [1250744 1250849])
            ("push" code nil nil [1250988 1251050])
            ("timeclock-mode-line-display" variable nil nil [1251052 1251402])
            ("custom-autoload" code nil nil [1251404 1251466])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1251468 1252033])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1252035 1252801])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1252803 1253278])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1253280 1253617])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1253619 1253959])
            ("timeclock-query-out" function (:prototype-flag t) nil [1253961 1254128])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254130 1254297])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254299 1254695])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254697 1254993])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1254995 1255412])
            ("if" code nil nil [1255414 1255517])
            ("list-timers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255664 1255779])
            ("put" code nil nil [1255781 1255874])
            ("if" code nil nil [1255876 1255981])
            ("if" code nil nil [1256092 1256193])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1256346 1256599])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1256601 1257057])
            ("if" code nil nil [1257059 1257270])
            ("if" code nil nil [1257374 1257483])
            ("define-key" code nil nil [1257579 1257622])
            ("define-key" code nil nil [1257624 1257685])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1257687 1258182])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1258184 1258466])
            ("tmm-prompt" function (:prototype-flag t) nil [1258468 1259097])
            ("if" code nil nil [1259099 1259190])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1259330 1261210])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261212 1261343])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261345 1261471])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261473 1261630])
            ("if" code nil nil [1261632 1261730])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261841 1262037])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1262039 1262804])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1262806 1263447])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1263449 1264158])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1264160 1264726])
            ("if" code nil nil [1264728 1264829])
            ("if" code nil nil [1264937 1265036])
            ("tq-create" function (:prototype-flag t) nil [1265151 1265439])
            ("if" code nil nil [1265441 1265530])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1265654 1265744])
            ("custom-autoload" code nil nil [1265746 1265787])
            ("trace-values" function (:prototype-flag t) nil [1265789 1265964])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1265966 1266850])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1266852 1267112])
            ("defalias" code nil nil [1267114 1267167])
            ("if" code nil nil [1267169 1267291])
            ("tramp-mode" variable (:default-value t) nil [1267401 1267515])
            ("custom-autoload" code nil nil [1267517 1267556])
            ("tramp-initial-file-name-regexp" variable
               (:constant-flag t
                :default-value "\\`/.+:.*:")
                nil [1267558 1267716])
            ("tramp-file-name-regexp" variable (:default-value tramp-initial-file-name-regexp) nil [1267718 1268035])
            ("tramp-autoload-file-name-regexp" variable
               (:constant-flag t
                :default-value (concat "\\`/" (if (memq system-type (quote (cygwin windows-nt))) "\\(-\\|[^/|:]\\{2,\\}\\)" "[^/|:]+") ":"))
                nil [1268037 1268405])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1268407 1268702])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1268704 1269031])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1269033 1269077])
            ("tramp-unload-file-name-handlers" function nil nil [1269079 1269421])
            ("tramp-completion-mode" variable nil nil [1269423 1269537])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1269539 1269635])
            ("if" code nil nil [1269637 1269740])
            ("if" code nil nil [1269862 1269961])
            ("if" code nil nil [1270089 1270190])
            ("if" code nil nil [1270315 1270415])
            ("if" code nil nil [1270554 1270656])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1270778 1270889])
            ("if" code nil nil [1270891 1270990])
            ("if" code nil nil [1271115 1271245])
            ("if" code nil nil [1271364 1271462])
            ("if" code nil nil [1271584 1271687])
            ("if" code nil nil [1271806 1271906])
            ("push" code nil nil [1272024 1272087])
            ("if" code nil nil [1272089 1272187])
            ("if" code nil nil [1272307 1272414])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1272525 1273311])
            ("if" code nil nil [1273313 1273448])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1273574 1273672])
            ("if" code nil nil [1273674 1273774])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1273919 1273967])
            ("global-set-key" code nil nil [1273969 1274005])
            ("global-set-key" code nil nil [1274007 1274040])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1274042 1274505])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1274507 1274766])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1274768 1275554])
            ("if" code nil nil [1275556 1275653])
            ("type-break-mode" variable nil nil [1275770 1276067])
            ("custom-autoload" code nil nil [1276069 1276120])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1276122 1279719])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279721 1280002])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280004 1280276])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280278 1281557])
            ("if" code nil nil [1281559 1281672])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1281778 1282089])
            ("if" code nil nil [1282091 1282182])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282344 1282470])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1282472 1282592])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282594 1282720])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1282722 1282842])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282844 1282972])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1282974 1283096])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1283098 1283226])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1283228 1283350])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1283352 1283504])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1283506 1283652])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1283654 1283806])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1283808 1283954])
            ("if" code nil nil [1283956 1284079])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1284221 1284466])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1284468 1284694])
            ("if" code nil nil [1284852 1284950])
            ("batch-unrmail" function (:prototype-flag t) nil [1285068 1285395])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1285397 1285595])
            ("if" code nil nil [1285597 1285707])
            ("unsafep" function (:prototype-flag t) nil [1285837 1286078])
            ("if" code nil nil [1286080 1286196])
            ("url-retrieve" function (:prototype-flag t) nil [1286300 1287788])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1287790 1288367])
            ("if" code nil nil [1288369 1288460])
            ("if" code nil nil [1288582 1288679])
            ("url-get-authentication" function (:prototype-flag t) nil [1288798 1289965])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1289967 1290648])
            ("if" code nil nil [1290650 1290746])
            ("url-store-in-cache" function (:prototype-flag t) nil [1290868 1290976])
            ("url-is-cached" function (:prototype-flag t) nil [1290978 1291148])
            ("url-cache-extract" function (:prototype-flag t) nil [1291150 1291255])
            ("if" code nil nil [1291257 1291354])
            ("url-cid" function (:prototype-flag t) nil [1291470 1291523])
            ("if" code nil nil [1291525 1291628])
            ("if" code nil nil [1291753 1291857])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1291973 1292126])
            ("url-dav-request" function (:prototype-flag t) nil [1292128 1292911])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1292913 1292980])
            ("if" code nil nil [1292982 1293077])
            ("if" code nil nil [1293199 1293296])
            ("if" code nil nil [1293421 1293526])
            ("if" code nil nil [1293651 1293749])
            ("url-file" function (:prototype-flag t) nil [1293868 1293966])
            ("if" code nil nil [1293968 1294069])
            ("if" code nil nil [1294185 1294283])
            ("if" code nil nil [1294408 1294513])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1294626 1294756])
            ("url-open-stream" function (:prototype-flag t) nil [1294758 1295184])
            ("if" code nil nil [1295186 1295280])
            ("url-handler-mode" variable nil nil [1295419 1295720])
            ("custom-autoload" code nil nil [1295722 1295776])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1295778 1296079])
            ("url-file-handler" function (:prototype-flag t) nil [1296081 1296350])
            ("url-copy-file" function (:prototype-flag t) nil [1296352 1297047])
            ("url-file-local-copy" function (:prototype-flag t) nil [1297049 1297256])
            ("url-insert-buffer-contents" function (:prototype-flag t) nil [1297258 1297537])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1297539 1297646])
            ("if" code nil nil [1297648 1297748])
            ("if" code nil nil [1297876 1297975])
            ("url-default-expander" function (:prototype-flag t) nil [1298094 1298139])
            ("defalias" code nil nil [1298141 1298201])
            ("url-https" function (:prototype-flag t) nil [1298203 1298235])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1298237 1298283])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1298285 1298333])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1298335 1298383])
            ("if" code nil nil [1298385 1298482])
            ("if" code nil nil [1298601 1298701])
            ("url-irc" function (:prototype-flag t) nil [1298817 1298870])
            ("if" code nil nil [1298872 1298971])
            ("url-ldap" function (:prototype-flag t) nil [1299090 1299343])
            ("if" code nil nil [1299345 1299446])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1299571 1299633])
            ("url-mailto" function (:prototype-flag t) nil [1299635 1299724])
            ("if" code nil nil [1299726 1299839])
            ("if" code nil nil [1299967 1300073])
            ("url-man" function (:prototype-flag t) nil [1300192 1300275])
            ("url-info" function (:prototype-flag t) nil [1300277 1300353])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1300355 1300429])
            ("defalias" code nil nil [1300431 1300482])
            ("defalias" code nil nil [1300484 1300535])
            ("defalias" code nil nil [1300537 1300588])
            ("url-data" function (:prototype-flag t) nil [1300590 1300673])
            ("if" code nil nil [1300675 1300791])
            ("url-news" function (:prototype-flag t) nil [1300910 1300965])
            ("url-snews" function (:prototype-flag t) nil [1300967 1301023])
            ("if" code nil nil [1301025 1301126])
            ("if" code nil nil [1301242 1301340])
            ("isPlainHostName" function (:prototype-flag t) nil [1301453 1301514])
            ("dnsDomainIs" function (:prototype-flag t) nil [1301516 1301577])
            ("dnsResolve" function (:prototype-flag t) nil [1301579 1301635])
            ("isResolvable" function (:prototype-flag t) nil [1301637 1301695])
            ("isInNet" function (:prototype-flag t) nil [1301697 1301757])
            ("url-ns-prefs" function (:prototype-flag t) nil [1301759 1301827])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1301829 1301908])
            ("if" code nil nil [1301910 1302007])
            ("url-recreate-url" function (:prototype-flag t) nil [1302129 1302241])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1302243 1303690])
            ("if" code nil nil [1303692 1303789])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1303917 1304042])
            ("if" code nil nil [1304044 1304154])
            ("if" code nil nil [1304276 1304373])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1304495 1304933])
            ("if" code nil nil [1304935 1305037])
            ("url-tramp-protocols" variable (:default-value (quote ("ftp" "ssh" "scp" "rsync" "telnet"))) nil [1305159 1305342])
            ("custom-autoload" code nil nil [1305344 1305396])
            ("url-tramp-file-handler" function (:prototype-flag t) nil [1305398 1305647])
            ("if" code nil nil [1305649 1305760])
            ("url-debug" variable nil nil [1305879 1306187])
            ("custom-autoload" code nil nil [1306189 1306230])
            ("url-debug" function (:prototype-flag t) nil [1306232 1306299])
            ("url-parse-args" function (:prototype-flag t) nil [1306301 1306383])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1306385 1306802])
            ("url-normalize-url" function (:prototype-flag t) nil [1306804 1306945])
            ("url-lazy-message" function (:prototype-flag t) nil [1306947 1307137])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1307139 1307289])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1307291 1307400])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1307402 1307510])
            ("url-display-percentage" function (:prototype-flag t) nil [1307512 1307597])
            ("url-percentage" function (:prototype-flag t) nil [1307599 1307660])
            ("defalias" code nil nil [1307662 1307706])
            ("url-file-directory" function (:prototype-flag t) nil [1307708 1307819])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1307821 1307938])
            ("url-parse-query-string" function (:prototype-flag t) nil [1307940 1308045])
            ("url-build-query-string" function (:prototype-flag t) nil [1308047 1308670])
            ("url-unhex-string" function (:prototype-flag t) nil [1308672 1308975])
            ("url-hexify-string" function (:prototype-flag t) nil [1308977 1309602])
            ("url-encode-url" function (:prototype-flag t) nil [1309604 1309917])
            ("url-file-extension" function (:prototype-flag t) nil [1309919 1310136])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1310138 1310344])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310346 1310595])
            ("if" code nil nil [1310597 1310693])
            ("if" code nil nil [1310812 1310908])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1311019 1311496])
            ("userlock--ask-user-about-supersession-threat" function (:prototype-flag t) nil [1311498 1311588])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1311590 1312096])
            ("if" code nil nil [1312098 1312249])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1312379 1312449])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1312451 1312526])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1312528 1312602])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1312604 1312683])
            ("if" code nil nil [1312685 1312780])
            ("utf7-encode" function (:prototype-flag t) nil [1312907 1313050])
            ("if" code nil nil [1313052 1313145])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1313266 1313546])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1313548 1313777])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1313779 1313967])
            ("if" code nil nil [1313969 1314070])
            ("vc-checkout-hook" variable nil nil [1314169 1314282])
            ("custom-autoload" code nil nil [1314284 1314326])
            ("vc-checkin-hook" variable nil nil [1314328 1314457])
            ("custom-autoload" code nil nil [1314459 1314500])
            ("vc-before-checkin-hook" variable nil nil [1314502 1314629])
            ("custom-autoload" code nil nil [1314631 1314679])
            ("vc-responsible-backend" function (:prototype-flag t) nil [1314681 1315145])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1315147 1316284])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1316286 1316951])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1316953 1317327])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1317329 1317718])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1317720 1318180])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1318182 1318584])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1318586 1319014])
            ("vc-root-dir" function (:prototype-flag t) nil [1319016 1319169])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319171 1319428])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319430 1319640])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1319642 1320321])
            ("vc-message-unresolved-conflicts" function (:prototype-flag t) nil [1320323 1320462])
            ("defalias" code nil nil [1320464 1320510])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1320512 1320845])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1320847 1321444])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1321446 1321864])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1321866 1322200])
            ("vc-print-branch-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322202 1322306])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322308 1322549])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322551 1322786])
            ("vc-region-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322788 1322966])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1322968 1323211])
            ("define-obsolete-function-alias" code nil nil [1323213 1323281])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1323283 1323966])
            ("defalias" code nil nil [1323968 1323998])
            ("vc-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1324000 1324488])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1324490 1324914])
            ("vc-transfer-file" function (:prototype-flag t) nil [1324916 1325527])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325529 1325757])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325759 1325995])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325997 1326610])
            ("vc-branch-part" function (:prototype-flag t) nil [1326612 1326715])
            ("if" code nil nil [1326717 1326827])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1326953 1328531])
            ("if" code nil nil [1328533 1328631])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1328742 1328846])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1328848 1328990])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1328992 1329162])
            ("if" code nil nil [1329164 1329261])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1329371 1329599])
            ("if" code nil nil [1329601 1329698])
            ("if" code nil nil [1329809 1329906])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1330017 1330738])
            ("if" code nil nil [1330740 1330833])
            ("vc-do-command" function (:prototype-flag t) nil [1330973 1331942])
            ("if" code nil nil [1331944 1332044])
            ("if" code nil nil [1332170 1332268])
            ("vc-git-registered" function (:arguments ("file")) nil [1332379 1332592])
            ("if" code nil nil [1332594 1332691])
            ("vc-hg-registered" function (:arguments ("file")) nil [1332799 1333006])
            ("if" code nil nil [1333008 1333103])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1333214 1333284])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1333286 1333402])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1333404 1333560])
            ("if" code nil nil [1333562 1333659])
            ("vc-rcs-master-templates" variable (:default-value (purecopy (quote ("%sRCS/%s,v" "%s%s,v" "%sRCS/%s")))) nil [1333770 1333960])
            ("custom-autoload" code nil nil [1333962 1334015])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1334017 1334077])
            ("if" code nil nil [1334079 1334173])
            ("vc-sccs-master-templates" variable (:default-value (purecopy (quote ("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir)))) nil [1334287 1334496])
            ("custom-autoload" code nil nil [1334498 1334553])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1334555 1334617])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1334619 1335316])
            ("if" code nil nil [1335318 1335417])
            ("vc-src-master-templates" variable (:default-value (purecopy (quote ("%s.src/%s,v")))) nil [1335528 1335699])
            ("custom-autoload" code nil nil [1335701 1335754])
            ("vc-src-registered" function (:arguments ("f")) nil [1335756 1335816])
            ("if" code nil nil [1335818 1335915])
            ("vc-svn-registered" function (:arguments ("f")) nil [1336026 1336347])
            ("if" code nil nil [1336349 1336446])
            ("if" code nil nil [1336554 1336653])
            ("push" code nil nil [1336794 1336855])
            ("add-to-list" code nil nil [1336857 1336933])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1336935 1338657])
            ("if" code nil nil [1338659 1338757])
            ("push" code nil nil [1338907 1338985])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1338987 1345607])
            ("if" code nil nil [1345609 1345739])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1345881 1371501])
            ("if" code nil nil [1371503 1371601])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1371741 1371865])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1371867 1372133])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1372135 1372272])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1372274 1372540])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1372542 1372679])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1372681 1372754])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1372756 1372833])
            ("if" code nil nil [1372835 1372957])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1373056 1373224])
            ("custom-autoload" code nil nil [1373226 1373283])
            ("view-mode" variable nil nil [1373285 1373458])
            ("make-variable-buffer-local" code nil nil [1373460 1373499])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1373501 1373634])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1373636 1374086])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1374088 1374665])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1374667 1375260])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1375262 1376352])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1376354 1377242])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1377244 1378130])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1378132 1383003])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1383005 1383549])
            ("make-obsolete" code nil nil [1383551 1383635])
            ("view-mode-enter" function (:prototype-flag t) nil [1383637 1384305])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1384307 1384414])
            ("if" code nil nil [1384416 1384517])
            ("push" code nil nil [1384638 1384697])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1384699 1384832])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1384834 1384949])
            ("if" code nil nil [1384951 1385114])
            ("if" code nil nil [1385256 1385355])
            ("if" code nil nil [1385486 1385590])
            ("if" code nil nil [1385735 1385835])
            ("if" code nil nil [1385980 1386103])
            ("if" code nil nil [1386248 1386354])
            ("if" code nil nil [1386499 1386599])
            ("if" code nil nil [1386744 1386843])
            ("if" code nil nil [1386960 1387057])
            ("if" code nil nil [1387171 1387268])
            ("if" code nil nil [1387376 1387471])
            ("if" code nil nil [1387582 1387678])
            ("warning-prefix-function" variable nil nil [1387819 1388216])
            ("warning-series" variable nil nil [1388218 1388656])
            ("warning-fill-prefix" variable nil nil [1388658 1388767])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1388769 1389008])
            ("display-warning" function (:prototype-flag t) nil [1389010 1390256])
            ("lwarn" function (:prototype-flag t) nil [1390258 1391117])
            ("warn" function (:prototype-flag t) nil [1391119 1391407])
            ("if" code nil nil [1391409 1391569])
            ("push" code nil nil [1391673 1391730])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1391732 1392122])
            ("if" code nil nil [1392124 1392221])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1392337 1392615])
            ("if" code nil nil [1392617 1392716])
            ("put" code nil nil [1392861 1392909])
            ("put" code nil nil [1392911 1392960])
            ("define-obsolete-function-alias" code nil nil [1392962 1393039])
            ("which-function-mode" variable nil nil [1393041 1393354])
            ("custom-autoload" code nil nil [1393356 1393411])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1393413 1393875])
            ("if" code nil nil [1393877 1393981])
            ("push" code nil nil [1394097 1394161])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1394163 1394573])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1394575 1395192])
            ("global-whitespace-mode" variable nil nil [1395194 1395519])
            ("custom-autoload" code nil nil [1395521 1395579])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1395581 1396021])
            ("global-whitespace-newline-mode" variable nil nil [1396023 1396380])
            ("custom-autoload" code nil nil [1396382 1396448])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1396450 1397108])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1397110 1399926])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1399928 1402758])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1402760 1404906])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1404908 1406525])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1406527 1406720])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1406722 1408142])
            ("if" code nil nil [1408144 1408249])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408366 1408459])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408461 1408559])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408561 1408694])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408696 1408958])
            ("if" code nil nil [1408960 1409061])
            ("widgetp" function (:prototype-flag t) nil [1409172 1409266])
            ("widget-prompt-value" function (:prototype-flag t) nil [1409268 1409486])
            ("widget-create" function (:prototype-flag t) nil [1409488 1409634])
            ("widget-delete" function (:prototype-flag t) nil [1409636 1409713])
            ("widget-insert" function (:prototype-flag t) nil [1409715 1409844])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [1409846 1410469])
            ("widget-setup" function (:prototype-flag t) nil [1410471 1410579])
            ("if" code nil nil [1410581 1410680])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1410791 1411218])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1411220 1411633])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1411635 1412064])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412066 1412484])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412486 1412696])
            ("if" code nil nil [1412698 1412799])
            ("winner-mode" variable nil nil [1412904 1413185])
            ("custom-autoload" code nil nil [1413187 1413230])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1413232 1413886])
            ("if" code nil nil [1413888 1413985])
            ("push" code nil nil [1414086 1414144])
            ("woman-locale" variable nil nil [1414146 1414421])
            ("custom-autoload" code nil nil [1414423 1414464])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1414466 1415115])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1415117 1415230])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1415232 1415746])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1415748 1415859])
            ("if" code nil nil [1415861 1416012])
            ("if" code nil nil [1416114 1416209])
            ("if" code nil nil [1416305 1416396])
            ("xml-parse-file" function (:prototype-flag t) nil [1416492 1417228])
            ("xml-parse-region" function (:prototype-flag t) nil [1417230 1418197])
            ("if" code nil nil [1418199 1418290])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1418405 1419062])
            ("if" code nil nil [1419064 1419161])
            ("xref-find-backend" function (:prototype-flag t) nil [1419280 1419336])
            ("xref-pop-marker-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419338 1419457])
            ("xref-marker-stack-empty-p" function (:prototype-flag t) nil [1419459 1419576])
            ("xref-find-definitions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419578 1420003])
            ("xref-find-definitions-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420005 1420147])
            ("xref-find-definitions-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420149 1420289])
            ("xref-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420291 1420699])
            ("xref-find-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420701 1420861])
            ("define-key" code nil nil [1420863 1420911])
            ("define-key" code nil nil [1420913 1420961])
            ("define-key" code nil nil [1420963 1421010])
            ("define-key" code nil nil [1421012 1421060])
            ("define-key" code nil nil [1421062 1421127])
            ("define-key" code nil nil [1421129 1421193])
            ("xref-collect-matches" function (:prototype-flag t) nil [1421195 1421420])
            ("if" code nil nil [1421422 1421515])
            ("if" code nil nil [1421643 1421925])
            ("if" code nil nil [1422052 1422152])
            ("xterm-mouse-mode" variable nil nil [1422263 1422564])
            ("custom-autoload" code nil nil [1422566 1422616])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1422618 1423265])
            ("if" code nil nil [1423267 1423397])
            ("xwidget-webkit-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1423505 1423774])
            ("if" code nil nil [1423776 1423875])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1423984 1424116])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1424118 1424216])
            ("if" code nil nil [1424218 1424311])
            ("if" code nil nil [1424430 1424531])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1424640 1424702])
            ("if" code nil nil [1424704 1424797])
            ("loaddefs" package nil nil [1433613 1433632]))          
      :file "loaddefs.el"
      :pointmax 1433778
      :fsize 1433800
      :lastmodtime '(24047 52239 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2252 2269])
            ("isearch" customgroup (:user-visible-flag t) nil [2316 2529])
            ("search-exit-option" variable (:default-value t) nil [2532 2655])
            ("search-slow-window-lines" variable (:default-value 1) nil [2657 2965])
            ("search-slow-speed" variable (:default-value 1200) nil [2967 3195])
            ("search-upper-case" variable (:default-value (quote not-yanks)) nil [3197 3660])
            ("search-nonincremental-instead" variable (:default-value t) nil [3662 4195])
            ("search-whitespace-regexp" variable (:default-value (purecopy "\\s-+")) nil [4197 5161])
            ("search-invisible" variable (:default-value (quote open)) nil [5163 6021])
            ("isearch-hide-immediately" variable (:default-value t) nil [6023 6541])
            ("isearch-resume-in-command-history" variable nil nil [6543 6765])
            ("isearch-mode-hook" variable nil nil [6767 6862])
            ("isearch-update-post-hook" variable nil nil [6864 6972])
            ("isearch-mode-end-hook" variable nil nil [6974 7176])
            ("isearch-mode-end-hook-quit" variable nil nil [7178 7297])
            ("isearch-message-function" variable nil nil [7299 7427])
            ("isearch-wrap-function" variable nil nil [7429 7649])
            ("isearch-push-state-function" variable nil nil [7651 7793])
            ("isearch-filter-predicate" variable (:default-value (function isearch-filter-visible)) nil [7795 8449])
            ("search-ring" variable nil nil [8468 8529])
            ("regexp-search-ring" variable nil nil [8530 8617])
            ("search-ring-max" variable (:default-value 16) nil [8619 8740])
            ("regexp-search-ring-max" variable (:default-value 16) nil [8741 8876])
            ("search-ring-yank-pointer" variable nil nil [8878 8988])
            ("regexp-search-ring-yank-pointer" variable nil nil [8989 9113])
            ("search-ring-update" variable nil nil [9115 9296])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [9298 9341])
            ("search-default-mode" variable nil nil [9343 10206])
            ("search-highlight" variable (:default-value t) nil [10246 10360])
            ("isearch" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "magenta3" :foreground "lightskyblue1")) (((class color) (min-colors 88) (background dark)) (:background "palevioletred2" :foreground "brown4")) (((class color) (min-colors 16)) (:background "magenta4" :foreground "cyan1")) (((class color) (min-colors 8)) (:background "magenta4" :foreground "cyan1")) (t (:inverse-video t))))
                :type "face")
                nil [10362 11016])
            ("isearch-face" variable (:default-value (quote isearch)) nil [11017 11047])
            ("isearch-fail" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) :foreground "grey") (t (:inverse-video t))))
                :type "face")
                nil [11049 11537])
            ("isearch-lazy-highlight" variable (:default-value t) nil [11539 12110])
            ("lazy-highlight" customgroup (:user-visible-flag t) nil [12147 12311])
            ("define-obsolete-variable-alias" code nil nil [12313 12472])
            ("lazy-highlight-cleanup" variable (:default-value t) nil [12474 12714])
            ("define-obsolete-variable-alias" code nil nil [12716 12887])
            ("lazy-highlight-initial-delay" variable (:default-value 0.25) nil [12889 13045])
            ("define-obsolete-variable-alias" code nil nil [13047 13208])
            ("lazy-highlight-interval" variable nil nil [13210 13357])
            ("define-obsolete-variable-alias" code nil nil [13359 13530])
            ("lazy-highlight-max-at-a-time" variable nil nil [13532 13926])
            ("lazy-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:background "paleturquoise4")) (((class color) (min-colors 16)) (:background "turquoise3")) (((class color) (min-colors 8)) (:background "turquoise3")) (t (:underline t))))
                :type "face")
                nil [13928 14416])
            ("isearch-help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote isearch-help-for-help)) (define-key map [help] (quote isearch-help-for-help)) (define-key map [f1] (quote isearch-help-for-help)) (define-key map "?" (quote isearch-help-for-help)) (define-key map "b" (quote isearch-describe-bindings)) (define-key map "k" (quote isearch-describe-key)) (define-key map "m" (quote isearch-describe-mode)) (define-key map "q" (quote help-quit)) map)) nil [14449 14988])
            ("help-macro" include nil nil [15009 15030])
            ("make-help-screen" code nil nil [15033 15634])
            ("isearch--display-help-action" variable (:default-value (quote (nil (inhibit-same-window . t)))) nil [15636 15706])
            ("isearch-help-for-help" function (:user-visible-flag t) nil [15708 15917])
            ("isearch-describe-bindings" function (:user-visible-flag t) nil [15919 16357])
            ("isearch-describe-key" function (:user-visible-flag t) nil [16359 16604])
            ("isearch-describe-mode" function (:user-visible-flag t) nil [16606 16831])
            ("defalias" code nil nil [16833 16885])
            ("isearch-mode-map" variable (:default-value (let ((i 0) (map (make-keymap))) (or (char-table-p (nth 1 map)) (error "The initialization of isearch-mode-map must be updated")) (set-char-table-range (nth 1 map) (cons 256 (max-char)) (quote isearch-printing-char)) (setq i 32) (while (< i 256) (define-key map (vector i) (quote isearch-printing-char)) (setq i (1+ i))) (let ((meta-map (make-sparse-keymap))) (define-key map (char-to-string meta-prefix-char) meta-map)) (define-key map "" (quote isearch-repeat-forward)) (define-key map "" (quote isearch-repeat-backward)) (define-key map "\223" (quote isearch-repeat-forward)) (define-key map "\222" (quote isearch-repeat-backward)) (define-key map "" (quote isearch-delete-char)) (define-key map [backspace] (quote undefined)) (define-key map "" (quote isearch-abort)) (or (= 27 meta-prefix-char) (error "Inconsistency in isearch.el")) (define-key map "" (quote isearch-cancel)) (define-key map "" (quote isearch-quote-char)) (define-key map "" (quote isearch-exit)) (define-key map [return] (quote isearch-exit)) (define-key map "
" (quote isearch-printing-char)) (define-key map "	" (quote isearch-printing-char)) (define-key map [33554464] (quote isearch-printing-char)) (define-key map "" (quote isearch-yank-word-or-char)) (define-key map "\227" (quote isearch-del-char)) (define-key map "\231" (quote isearch-yank-char)) (define-key map "" (quote isearch-yank-kill)) (define-key map "\363" (quote isearch-yank-line)) (define-key map (char-to-string help-char) isearch-help-map) (define-key map [help] isearch-help-map) (define-key map [f1] isearch-help-map) (define-key map "\356" (quote isearch-ring-advance)) (define-key map "\360" (quote isearch-ring-retreat)) (define-key map "\371" (quote isearch-yank-pop)) (define-key map "\211" (quote isearch-complete)) (define-key map [switch-frame] nil) (define-key map [delete-frame] nil) (define-key map [iconify-frame] nil) (define-key map [make-frame-visible] nil) (define-key map [mouse-movement] nil) (define-key map [language-change] nil) (define-key map "" (quote isearch-toggle-input-method)) (define-key map "" (quote isearch-toggle-specified-input-method)) (define-key map [mouse-2] (function isearch-mouse-2)) (define-key map [down-mouse-2] nil) (define-key map [xterm-paste] (function isearch-xterm-paste)) (define-key map "\343" (quote isearch-toggle-case-fold)) (define-key map "\362" (quote isearch-toggle-regexp)) (define-key map "\345" (quote isearch-edit-string)) (put (quote isearch-edit-string) :advertised-binding "\363e") (define-key map "\363e" (quote isearch-edit-string)) (define-key map [134217765] (quote isearch-query-replace)) (define-key map [201326629] (quote isearch-query-replace-regexp)) (define-key map "\363o" (quote isearch-occur)) (define-key map "\363hr" (quote isearch-highlight-regexp)) (define-key map "8" (quote isearch-char-by-name)) map)) nil [16921 21253])
            ("minibuffer-local-isearch-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote exit-minibuffer)) (define-key map "\211" (quote isearch-complete-edit)) (define-key map "" (quote isearch-forward-exit-minibuffer)) (define-key map "" (quote isearch-reverse-exit-minibuffer)) (define-key map "" (quote isearch-yank-char-in-minibuffer)) (define-key map [right] (quote isearch-yank-char-in-minibuffer)) map)) nil [21255 21790])
            ("isearch-forward" variable nil nil [21954 21982])
            ("isearch-regexp" variable nil nil [22021 22048])
            ("isearch-regexp-function" variable nil nil [22075 22572])
            ("define-obsolete-variable-alias" code nil nil [22640 22720])
            ("isearch-lax-whitespace" variable (:default-value t) nil [22722 23159])
            ("isearch-regexp-lax-whitespace" variable nil nil [23161 23605])
            ("isearch-cmds" variable nil nil [23607 23836])
            ("isearch-string" variable nil nil [23838 23864])
            ("isearch-message" variable nil nil [23895 23922])
            ("isearch-message-prefix-add" variable nil nil [23974 24013])
            ("isearch-message-suffix-add" variable nil nil [24055 24094])
            ("isearch-success" variable (:default-value t) nil [24137 24163])
            ("isearch-error" variable nil nil [24201 24227])
            ("isearch-other-end" variable nil nil [24263 24293])
            ("isearch-wrapped" variable nil nil [24340 24368])
            ("isearch-barrier" variable nil nil [24414 24499])
            ("isearch-just-started" variable nil nil [24500 24533])
            ("isearch-start-hscroll" variable nil nil [24534 24566])
            ("isearch-case-fold-search" variable nil nil [24757 24794])
            ("isearch-invisible" variable (:default-value search-invisible) nil [24930 24973])
            ("isearch-last-case-fold-search" variable nil nil [24975 25017])
            ("isearch-original-minibuffer-message-timeout" variable nil nil [25073 25129])
            ("isearch-adjusted" variable nil nil [25131 25160])
            ("isearch-slow-terminal-mode" variable nil nil [25161 25200])
            ("isearch-small-window" variable nil nil [25232 25265])
            ("isearch-opoint" variable nil nil [25266 25291])
            ("isearch-window-configuration" variable nil nil [25359 25400])
            ("isearch-yank-flag" variable nil nil [25465 25495])
            ("isearch-op-fun" variable nil nil [25689 25716])
            ("isearch-recursive-edit" variable nil nil [25779 25814])
            ("isearch-nonincremental" variable nil nil [25872 25907])
            ("isearch-new-nonincremental" variable nil nil [25975 26014])
            ("isearch-new-forward" variable nil nil [26075 26107])
            ("isearch-opened-overlays" variable nil nil [26166 26202])
            ("isearch-hidden" variable nil nil [26254 26281])
            ("isearch-input-method-function" variable nil nil [26346 26388])
            ("isearch-input-method-local-p" variable nil nil [26478 26519])
            ("isearch--saved-overriding-local-map" variable nil nil [26521 26569])
            ("or" code nil nil [26700 26811])
            ("defvar-local" code nil nil [26813 26844])
            ("define-key" code nil nil [26885 26932])
            ("define-key" code nil nil [26933 26984])
            ("define-key" code nil nil [26985 27033])
            ("define-key" code nil nil [27034 27086])
            ("define-key" code nil nil [27087 27136])
            ("define-key" code nil nil [27137 27188])
            ("define-key" code nil nil [27189 27249])
            ("isearch-forward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [27285 31579])
            ("isearch-forward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [31581 32303])
            ("isearch-forward-word" function
               (:user-visible-flag t
                :arguments ("not-word" "no-recursive-edit"))
                nil [32305 32867])
            ("isearch-forward-symbol" function
               (:user-visible-flag t
                :arguments ("_not-symbol" "no-recursive-edit"))
                nil [32869 33411])
            ("isearch-backward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [33413 33726])
            ("isearch-backward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [33728 34153])
            ("isearch-forward-symbol-at-point" function (:user-visible-flag t) nil [34155 34888])
            ("isearch-mode" function (:arguments ("forward" "regexp" "op-fun" "recursive-edit" "regexp-function")) nil [35225 39422])
            ("isearch--current-buffer" variable nil nil [39470 39506])
            ("isearch-update" function nil nil [39508 42716])
            ("isearch-done" function (:arguments ("nopush" "edit")) nil [42718 46053])
            ("isearch-update-ring" function (:arguments ("string" "regexp")) nil [46055 46342])
            ("cl-defstruct" code nil nil [46733 47862])
            ("isearch--set-state" function (:arguments ("cmd")) nil [47864 48523])
            ("isearch-pop-state" function nil nil [48525 48636])
            ("isearch-push-state" function nil nil [48638 48710])
            ("isearch-exit" function (:user-visible-flag t) nil [48774 49243])
            ("isearch-fail-pos" function (:arguments ("msg")) nil [49245 50017])
            ("isearch-new-regexp-function" variable nil nil [50019 50298])
            ("define-obsolete-variable-alias" code nil nil [50299 50387])
            ("with-isearch-suspended" function (:arguments ("body")) nil [50389 56578])
            ("minibuffer-history-symbol" variable nil nil [56580 56614])
            ("isearch-edit-string" function (:user-visible-flag t) nil [56651 58064])
            ("isearch-nonincremental-exit-minibuffer" function nil nil [58066 58189])
            ("make-obsolete" code nil nil [58337 58416])
            ("isearch-forward-exit-minibuffer" function (:user-visible-flag t) nil [58418 58638])
            ("isearch-reverse-exit-minibuffer" function (:user-visible-flag t) nil [58640 58863])
            ("isearch-cancel" function (:user-visible-flag t) nil [58865 59381])
            ("isearch-abort" function (:user-visible-flag t) nil [59430 60181])
            ("isearch-repeat" function (:arguments ("direction")) nil [60183 61975])
            ("isearch-repeat-forward" function (:user-visible-flag t) nil [61977 62094])
            ("isearch-repeat-backward" function (:user-visible-flag t) nil [62096 62216])
            ("isearch-define-mode-toggle" function (:arguments ("mode" "key" "function" "docstring" "body")) nil [62289 63952])
            ("isearch-define-mode-toggle" code nil nil [63954 64060])
            ("isearch-define-mode-toggle" code nil nil [64061 64174])
            ("isearch-define-mode-toggle" code nil nil [64175 64293])
            ("put" code nil nil [64294 64357])
            ("isearch-define-mode-toggle" code nil nil [64359 64508])
            ("isearch--momentary-message" function (:arguments ("string")) nil [64510 64802])
            ("isearch-define-mode-toggle" code nil nil [64804 65296])
            ("isearch-define-mode-toggle" code nil nil [65298 65581])
            ("isearch-define-mode-toggle" code nil nil [65583 66083])
            ("word-search-regexp" function (:arguments ("string" "lax")) nil [66103 66990])
            ("word-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [66992 68358])
            ("word-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [68360 69687])
            ("word-search-backward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [69689 71174])
            ("word-search-forward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [71176 72621])
            ("isearch-symbol-regexp" function (:arguments ("string" "lax")) nil [72641 73906])
            ("put" code nil nil [73908 73970])
            ("search-forward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [74003 74275])
            ("search-backward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [74277 74552])
            ("re-search-forward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [74554 74814])
            ("re-search-backward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [74816 75079])
            ("dolist" code nil nil [75081 75410])
            ("isearch-query-replace" function
               (:user-visible-flag t
                :arguments ("arg" "regexp-flag"))
                nil [75414 77862])
            ("isearch-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77864 78124])
            ("isearch-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [78126 80292])
            ("declare-function" code nil nil [80294 80348])
            ("isearch-highlight-regexp" function (:user-visible-flag t) nil [80350 81873])
            ("isearch-delete-char" function (:user-visible-flag t) nil [81877 82331])
            ("isearch-del-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82333 83474])
            ("isearch-yank-string" function (:arguments ("string")) nil [83476 83958])
            ("isearch-yank-kill" function (:user-visible-flag t) nil [83960 84096])
            ("isearch-yank-pop" function (:user-visible-flag t) nil [84098 84642])
            ("isearch-yank-x-selection" function (:user-visible-flag t) nil [84644 84970])
            ("isearch-mouse-2" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [84973 85580])
            ("declare-function" code nil nil [85582 85635])
            ("isearch-xterm-paste" function (:user-visible-flag t) nil [85637 85772])
            ("isearch-yank-internal" function (:arguments ("jumpform")) nil [85774 86328])
            ("isearch-yank-char-in-minibuffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86330 86679])
            ("isearch-yank-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86681 86924])
            ("declare-function" code nil nil [86926 86986])
            ("isearch-yank-word-or-char" function (:user-visible-flag t) nil [86987 87514])
            ("isearch-yank-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87516 87749])
            ("isearch-yank-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87751 88045])
            ("isearch-char-by-name" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [88047 88753])
            ("isearch-search-and-update" function nil nil [88755 90862])
            ("isearch-backslash" function (:arguments ("str")) nil [91186 91338])
            ("isearch-fallback" function (:arguments ("want-backslash" "allow-invalid" "to-barrier")) nil [91340 94007])
            ("if" code nil nil [95406 95502])
            ("if" code nil nil [95503 95603])
            ("put" code nil nil [95719 95752])
            ("put" code nil nil [95753 95797])
            ("put" code nil nil [95798 95840])
            ("put" code nil nil [95884 95921])
            ("put" code nil nil [95922 95966])
            ("put" code nil nil [95967 96016])
            ("put" code nil nil [96017 96074])
            ("put" code nil nil [96075 96126])
            ("put" code nil nil [96171 96216])
            ("put" code nil nil [96217 96257])
            ("put" code nil nil [96258 96301])
            ("put" code nil nil [96302 96345])
            ("put" code nil nil [96346 96385])
            ("put" code nil nil [96417 96465])
            ("put" code nil nil [96466 96516])
            ("put" code nil nil [96549 96592])
            ("put" code nil nil [96593 96641])
            ("put" code nil nil [96642 96684])
            ("put" code nil nil [96685 96724])
            ("isearch-allow-scroll" variable nil nil [96726 97032])
            ("isearch-allow-prefix" variable (:default-value t) nil [97034 97333])
            ("isearch-string-out-of-window" function (:arguments ("isearch-point")) nil [97335 98635])
            ("isearch-back-into-window" function (:arguments ("above" "isearch-point")) nil [98637 99538])
            ("isearch-pre-scroll-point" variable nil nil [99540 99577])
            ("isearch-pre-command-hook" function nil nil [99579 101665])
            ("isearch-post-command-hook" function nil nil [101667 102005])
            ("isearch-quote-char" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [102007 103216])
            ("isearch-printing-char" function
               (:user-visible-flag t
                :arguments ("char" "count"))
                nil [103218 103703])
            ("isearch-process-search-char" function (:arguments ("char" "count")) nil [103705 104542])
            ("isearch-process-search-string" function (:arguments ("string" "message")) nil [104544 104733])
            ("isearch-ring-adjust1" function (:arguments ("advance")) nil [104753 105390])
            ("isearch-ring-adjust" function (:arguments ("advance")) nil [105392 105919])
            ("isearch-ring-advance" function (:user-visible-flag t) nil [105921 106130])
            ("isearch-ring-retreat" function (:user-visible-flag t) nil [106132 106262])
            ("isearch-complete1" function nil nil [106264 107169])
            ("isearch-complete" function (:user-visible-flag t) nil [107171 107622])
            ("isearch-complete-edit" function (:user-visible-flag t) nil [107624 107850])
            ("isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [107873 108976])
            ("isearch--describe-regexp-mode" function (:arguments ("regexp-function" "space-before")) nil [108978 110644])
            ("define-obsolete-function-alias" code nil nil [110645 110746])
            ("isearch-message-prefix" function (:arguments ("ellipsis" "nonincremental")) nil [110748 112635])
            ("isearch-message-suffix" function (:arguments ("c-q-hack")) nil [112637 112828])
            ("isearch-search-fun-function" variable (:default-value (quote isearch-search-fun-default)) nil [112846 113382])
            ("isearch-search-fun" function nil nil [113384 113601])
            ("isearch--lax-regexp-function-p" function nil nil [113603 113904])
            ("isearch-search-fun-default" function nil nil [113906 115427])
            ("isearch-search-string" function (:arguments ("string" "bound" "noerror")) nil [115429 117513])
            ("isearch-search" function nil nil [117515 119665])
            ("isearch-open-overlay-temporary" function (:arguments ("ov")) nil [119732 120421])
            ("isearch-open-necessary-overlays" function (:arguments ("ov")) nil [120690 121374])
            ("isearch-clean-overlays" function nil nil [121507 121680])
            ("isearch-intersects-p" function (:arguments ("start0" "end0" "start1" "end1")) nil [121683 121991])
            ("isearch-close-unnecessary-overlays" function (:arguments ("begin" "end")) nil [122112 122773])
            ("isearch-range-invisible" function (:arguments ("beg" "end")) nil [122776 124791])
            ("isearch-filter-visible" function (:arguments ("beg" "end")) nil [124793 125366])
            ("isearch-no-upper-case-p" function (:arguments ("string" "regexp-flag")) nil [125392 126597])
            ("isearch-text-char-description" function (:arguments ("c")) nil [126660 126964])
            ("isearch-unread" function (:arguments ("char-or-events")) nil [127073 127243])
            ("isearch-overlay" variable nil nil [127264 127292])
            ("isearch-highlight" function (:arguments ("beg" "end")) nil [127294 127717])
            ("isearch-dehighlight" function nil nil [127719 127811])
            ("isearch-lazy-highlight-overlays" variable nil nil [129032 129076])
            ("isearch-lazy-highlight-wrapped" variable nil nil [129077 129120])
            ("isearch-lazy-highlight-start-limit" variable nil nil [129121 129168])
            ("isearch-lazy-highlight-end-limit" variable nil nil [129169 129214])
            ("isearch-lazy-highlight-start" variable nil nil [129215 129256])
            ("isearch-lazy-highlight-end" variable nil nil [129257 129296])
            ("isearch-lazy-highlight-timer" variable nil nil [129297 129338])
            ("isearch-lazy-highlight-last-string" variable nil nil [129339 129386])
            ("isearch-lazy-highlight-window" variable nil nil [129387 129429])
            ("isearch-lazy-highlight-window-group" variable nil nil [129430 129478])
            ("isearch-lazy-highlight-window-start" variable nil nil [129479 129527])
            ("isearch-lazy-highlight-window-end" variable nil nil [129528 129574])
            ("isearch-lazy-highlight-case-fold-search" variable nil nil [129575 129627])
            ("isearch-lazy-highlight-regexp" variable nil nil [129628 129670])
            ("isearch-lazy-highlight-lax-whitespace" variable nil nil [129671 129721])
            ("isearch-lazy-highlight-regexp-lax-whitespace" variable nil nil [129722 129779])
            ("isearch-lazy-highlight-regexp-function" variable nil nil [129780 129831])
            ("define-obsolete-variable-alias" code nil nil [129832 129942])
            ("isearch-lazy-highlight-forward" variable nil nil [129943 129986])
            ("isearch-lazy-highlight-error" variable nil nil [129987 130028])
            ("lazy-highlight-cleanup" function
               (:user-visible-flag t
                :arguments ("force" "procrastinate"))
                nil [130030 130825])
            ("define-obsolete-function-alias" code nil nil [130827 130986])
            ("isearch-lazy-highlight-new-loop" function (:arguments ("beg" "end")) nil [130988 134487])
            ("isearch-lazy-highlight-search" function nil nil [134489 136294])
            ("isearch-lazy-highlight-start" function nil nil [136296 136465])
            ("isearch-lazy-highlight-update" function nil nil [136467 139143])
            ("isearch-resume" function (:arguments ("string" "regexp" "word" "forward" "message" "case-fold")) nil [139145 139740])
            ("isearch" package nil nil [139742 139760]))          
      :file "isearch.el.gz"
      :pointmax 139787
      :fsize 35581
      :lastmodtime '(23624 29139 0 0)
      :unmatched-syntax '((close-paren 15030 . 15031) (symbol 14991 . 15008) (open-paren 14990 . 14991) (close-paren 2269 . 2270) (symbol 2234 . 2251) (open-paren 2233 . 2234)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pp" include nil nil [1272 1285])
            ("cl-lib" include nil nil [1305 1322])
            ("bookmark" customgroup (:user-visible-flag t) nil [1741 1833])
            ("bookmark-use-annotations" variable nil nil [1836 1985])
            ("bookmark-save-flag" variable (:default-value t) nil [1988 2840])
            ("bookmark-old-default-file" variable
               (:constant-flag t
                :default-value "~/.emacs-bkmrks")
                nil [2843 2952])
            ("bookmark-file" variable nil nil [2999 3067])
            ("bookmark-default-file" variable (:default-value (if bookmark-file bookmark-file (locate-user-emacs-file "bookmarks" ".emacs.bmk"))) nil [3069 3335])
            ("bookmark-version-control" variable (:default-value (quote nospecial)) nil [3338 3912])
            ("bookmark-completion-ignore-case" variable (:default-value t) nil [3915 4060])
            ("bookmark-sort-flag" variable (:default-value t) nil [4063 4323])
            ("bookmark-automatically-show-annotations" variable (:default-value t) nil [4326 4478])
            ("bookmark-bmenu-use-header-line" variable (:default-value t) nil [4480 4689])
            ("bookmark-bmenu-inline-header-height" variable
               (:constant-flag t
                :default-value 2)
                nil [4691 4861])
            ("bookmark-bmenu-marks-width" variable
               (:constant-flag t
                :default-value 2)
                nil [4863 5009])
            ("bookmark-bmenu-file-column" variable (:default-value 30) nil [5011 5268])
            ("bookmark-bmenu-toggle-filenames" variable (:default-value t) nil [5271 5465])
            ("bookmark-menu-bookmark" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [5467 5610])
            ("bookmark-menu-length" variable (:default-value 70) nil [5612 5748])
            ("bookmark-search-delay" variable (:default-value 0.2) nil [5803 5937])
            ("bookmark-menu-heading" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [5939 6112])
            ("or" code nil nil [6210 6258])
            ("or" code nil nil [6314 6383])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "M" (quote bookmark-set-no-overwrite)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [6800 7848])
            ("bookmark-alist" variable nil nil [7942 9289])
            ("bookmarks-already-loaded" variable nil nil [9291 9412])
            ("bookmark-file-coding-system" variable nil nil [9414 9519])
            ("bookmark-current-bookmark" variable nil nil [9549 9730])
            ("make-variable-buffer-local" code nil nil [9732 9787])
            ("bookmark-alist-modification-count" variable nil nil [9790 9904])
            ("bookmark-search-size" variable (:default-value 16) nil [9907 10012])
            ("bookmark-current-buffer" variable nil nil [10015 10266])
            ("bookmark-yank-point" variable nil nil [10269 10419])
            ("bookmark-quit-flag" variable nil nil [10422 10512])
            ("with-buffer-modified-unmodified" function (:arguments ("body")) nil [10548 10873])
            ("bookmark-name-from-full-record" function (:arguments ("bookmark-record")) nil [11057 11239])
            ("bookmark-all-names" function nil nil [11242 11415])
            ("bookmark-get-bookmark" function (:arguments ("bookmark-name-or-record" "noerror")) nil [11418 12204])
            ("bookmark-get-bookmark-record" function (:arguments ("bookmark-name-or-record")) nil [12207 12682])
            ("bookmark-set-name" function (:arguments ("bookmark-name-or-record" "newname")) nil [12685 12862])
            ("bookmark-prop-get" function (:arguments ("bookmark-name-or-record" "prop")) nil [12864 13068])
            ("bookmark-prop-set" function (:arguments ("bookmark-name-or-record" "prop" "val")) nil [13070 13435])
            ("bookmark-get-annotation" function (:arguments ("bookmark-name-or-record")) nil [13437 13622])
            ("bookmark-set-annotation" function (:arguments ("bookmark-name-or-record" "ann")) nil [13624 13805])
            ("bookmark-get-filename" function (:arguments ("bookmark-name-or-record")) nil [13808 13992])
            ("bookmark-set-filename" function (:arguments ("bookmark-name-or-record" "filename")) nil [13995 14190])
            ("bookmark-get-position" function (:arguments ("bookmark-name-or-record")) nil [14193 14386])
            ("bookmark-set-position" function (:arguments ("bookmark-name-or-record" "position")) nil [14389 14593])
            ("bookmark-get-front-context-string" function (:arguments ("bookmark-name-or-record")) nil [14596 14811])
            ("bookmark-set-front-context-string" function (:arguments ("bookmark-name-or-record" "string")) nil [14814 15034])
            ("bookmark-get-rear-context-string" function (:arguments ("bookmark-name-or-record")) nil [15037 15249])
            ("bookmark-set-rear-context-string" function (:arguments ("bookmark-name-or-record" "string")) nil [15252 15469])
            ("bookmark-get-handler" function (:arguments ("bookmark-name-or-record")) nil [15472 15658])
            ("bookmark-history" variable nil nil [15660 15734])
            ("bookmark-completing-read" function (:arguments ("prompt" "default")) nil [15737 16994])
            ("bookmark-maybe-historicize-string" function (:arguments ("string")) nil [16997 17378])
            ("bookmark-make-record-function" variable (:default-value (quote bookmark-make-record-default)) nil [17380 18371])
            ("bookmark-make-record" function nil nil [18373 19039])
            ("bookmark-store" function (:arguments ("name" "alist" "no-overwrite")) nil [19041 20487])
            ("bookmark-make-record-default" function (:arguments ("no-file" "no-context" "posn")) nil [20489 22054])
            ("bookmark-file-format-version" variable
               (:constant-flag t
                :default-value 1)
                nil [24872 25013])
            ("bookmark-end-of-version-stamp-marker" variable
               (:constant-flag t
                :default-value "-*- End Of Bookmark File Format Version Stamp -*-
")
                nil [25016 25190])
            ("bookmark-alist-from-buffer" function nil nil [25193 25855])
            ("bookmark-upgrade-version-0-alist" function (:arguments ("old-list")) nil [25858 26580])
            ("bookmark-upgrade-file-format-from-0" function nil nil [26583 27278])
            ("bookmark-grok-file-format-version" function nil nil [27281 27751])
            ("bookmark-maybe-upgrade-file-format" function nil nil [27754 28266])
            ("bookmark-insert-file-format-version-stamp" function (:arguments ("coding")) nil [28269 28929])
            ("bookmark-maybe-message" function (:arguments ("fmt" "args")) nil [28983 29166])
            ("bookmark-minibuffer-read-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote bookmark-yank-word)) map)) nil [29186 29370])
            ("bookmark-set-internal" function
               (:user-visible-flag t
                :arguments ("prompt" "name" "overwrite-or-push"))
                nil [29372 32368])
            ("bookmark-set" function
               (:user-visible-flag t
                :arguments ("name" "no-overwrite"))
                nil [32386 33757])
            ("bookmark-set-no-overwrite" function
               (:user-visible-flag t
                :arguments ("name" "push-bookmark"))
                nil [33774 35151])
            ("bookmark-kill-line" function (:arguments ("newline-too")) nil [35154 35479])
            ("bookmark-annotation-name" variable nil nil [35524 35708])
            ("bookmark-default-annotation-text" function (:arguments ("bookmark-name")) nil [35711 36273])
            ("define-obsolete-variable-alias" code nil nil [36276 36389])
            ("bookmark-edit-annotation-text-func" variable (:default-value (quote bookmark-default-annotation-text)) nil [36390 36599])
            ("bookmark-edit-annotation-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map "" (quote bookmark-send-edited-annotation)) map)) nil [36601 36847])
            ("bookmark-insert-annotation" function (:arguments ("bookmark-name-or-record")) nil [36849 37144])
            ("define-derived-mode" code nil nil [37146 37394])
            ("bookmark-send-edited-annotation" function (:user-visible-flag t) nil [37397 38205])
            ("bookmark-edit-annotation" function (:arguments ("bookmark-name-or-record")) nil [38208 38598])
            ("bookmark-buffer-name" function nil nil [38601 39440])
            ("bookmark-yank-word" function (:user-visible-flag t) nil [39443 39990])
            ("bookmark-buffer-file-name" function nil nil [39992 40563])
            ("bookmark-maybe-load-default-file" function nil nil [40566 41297])
            ("bookmark-maybe-sort-alist" function nil nil [41300 41621])
            ("bookmark-after-jump-hook" variable nil nil [41624 41770])
            ("bookmark--jump-via" function (:arguments ("bookmark-name-or-record" "display-function")) nil [41772 42709])
            ("bookmark-jump" function
               (:user-visible-flag t
                :arguments ("bookmark" "display-func"))
                nil [42727 44097])
            ("bookmark-jump-other-window" function
               (:user-visible-flag t
                :arguments ("bookmark"))
                nil [44115 44442])
            ("bookmark-jump-noselect" function (:arguments ("bookmark")) nil [44445 44837])
            ("bookmark-handle-bookmark" function (:arguments ("bookmark-name-or-record")) nil [44839 47445])
            ("define-error" code nil nil [47447 47482])
            ("define-error" code nil nil [47483 47593])
            ("bookmark-default-handler" function (:arguments ("bmk-record")) nil [47595 49091])
            ("bookmark-relocate" function
               (:user-visible-flag t
                :arguments ("bookmark-name"))
                nil [49108 50109])
            ("bookmark-insert-location" function
               (:user-visible-flag t
                :arguments ("bookmark-name" "no-history"))
                nil [50127 50556])
            ("defalias" code nil nil [50573 50626])
            ("bookmark-location" function (:arguments ("bookmark-name-or-record")) nil [50628 51196])
            ("bookmark-rename" function
               (:user-visible-flag t
                :arguments ("old-name" "new-name"))
                nil [51214 52709])
            ("bookmark-insert" function
               (:user-visible-flag t
                :arguments ("bookmark-name"))
                nil [52727 53491])
            ("bookmark-delete" function
               (:user-visible-flag t
                :arguments ("bookmark-name" "batch"))
                nil [53509 54715])
            ("bookmark-time-to-save-p" function (:arguments ("final-time")) nil [54718 55293])
            ("bookmark-write" function nil nil [55311 55529])
            ("bookmark-save" function
               (:user-visible-flag t
                :arguments ("parg" "file"))
                nil [55547 57118])
            ("bookmark-write-file" function (:arguments ("file")) nil [57123 59202])
            ("bookmark-import-new-list" function (:arguments ("new-list")) nil [59205 59671])
            ("bookmark-maybe-rename" function (:arguments ("full-record" "names")) nil [59674 60261])
            ("bookmark-load" function
               (:user-visible-flag t
                :arguments ("file" "overwrite" "no-msg"))
                nil [60279 62917])
            ("bookmark-bmenu-hidden-bookmarks" variable nil nil [63023 63066])
            ("bookmark-bmenu-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map "v" (quote bookmark-bmenu-select)) (define-key map "w" (quote bookmark-bmenu-locate)) (define-key map "2" (quote bookmark-bmenu-2-window)) (define-key map "1" (quote bookmark-bmenu-1-window)) (define-key map "j" (quote bookmark-bmenu-this-window)) (define-key map "" (quote bookmark-bmenu-this-window)) (define-key map "f" (quote bookmark-bmenu-this-window)) (define-key map "" (quote bookmark-bmenu-this-window)) (define-key map "o" (quote bookmark-bmenu-other-window)) (define-key map "" (quote bookmark-bmenu-switch-other-window)) (define-key map "s" (quote bookmark-bmenu-save)) (define-key map "k" (quote bookmark-bmenu-delete)) (define-key map "" (quote bookmark-bmenu-delete-backwards)) (define-key map "x" (quote bookmark-bmenu-execute-deletions)) (define-key map "d" (quote bookmark-bmenu-delete)) (define-key map " " (quote next-line)) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "" (quote bookmark-bmenu-backup-unmark)) (define-key map "u" (quote bookmark-bmenu-unmark)) (define-key map "m" (quote bookmark-bmenu-mark)) (define-key map "l" (quote bookmark-bmenu-load)) (define-key map "r" (quote bookmark-bmenu-rename)) (define-key map "R" (quote bookmark-bmenu-relocate)) (define-key map "t" (quote bookmark-bmenu-toggle-filenames)) (define-key map "a" (quote bookmark-bmenu-show-annotation)) (define-key map "A" (quote bookmark-bmenu-show-all-annotations)) (define-key map "e" (quote bookmark-bmenu-edit-annotation)) (define-key map "/" (quote bookmark-bmenu-search)) (define-key map [mouse-2] (quote bookmark-bmenu-other-window-with-mouse)) map)) nil [63069 64743])
            ("put" code nil nil [64824 64871])
            ("bookmark-bmenu-surreptitiously-rebuild-list" function nil nil [65007 65266])
            ("bookmark-bmenu-list" function (:user-visible-flag t) nil [65284 67231])
            ("defalias" code nil nil [67248 67295])
            ("defalias" code nil nil [67311 67358])
            ("bookmark-bmenu-set-header" function nil nil [67360 68076])
            ("define-derived-mode" code nil nil [68078 70458])
            ("bookmark-bmenu-toggle-filenames" function
               (:user-visible-flag t
                :arguments ("show"))
                nil [70461 71077])
            ("bookmark-bmenu-show-filenames" function (:arguments ("force")) nil [71080 72499])
            ("bookmark-bmenu-hide-filenames" function (:arguments ("force")) nil [72502 73852])
            ("bookmark-bmenu-ensure-position" function nil nil [73855 74387])
            ("bookmark-bmenu-bookmark" function nil nil [74390 74678])
            ("bookmark-show-annotation" function (:arguments ("bookmark-name-or-record")) nil [74681 75270])
            ("bookmark-show-all-annotations" function nil nil [75273 76192])
            ("bookmark-bmenu-mark" function (:user-visible-flag t) nil [76195 76569])
            ("bookmark-bmenu-select" function (:user-visible-flag t) nil [76572 77563])
            ("bookmark-bmenu-any-marks" function nil nil [77566 77937])
            ("bookmark-bmenu-save" function
               (:user-visible-flag t
                :arguments ("parg"))
                nil [77940 78205])
            ("bookmark-bmenu-load" function (:user-visible-flag t) nil [78208 78489])
            ("bookmark-bmenu-1-window" function (:user-visible-flag t) nil [78492 78697])
            ("bookmark-bmenu-2-window" function (:user-visible-flag t) nil [78700 79063])
            ("bookmark-bmenu-this-window" function (:user-visible-flag t) nil [79066 79211])
            ("bookmark-bmenu-other-window" function (:user-visible-flag t) nil [79214 79460])
            ("bookmark-bmenu-switch-other-window" function (:user-visible-flag t) nil [79463 79742])
            ("bookmark-bmenu-other-window-with-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [79744 80085])
            ("bookmark-bmenu-show-annotation" function (:user-visible-flag t) nil [80088 80300])
            ("bookmark-bmenu-show-all-annotations" function (:user-visible-flag t) nil [80303 80460])
            ("bookmark-bmenu-edit-annotation" function (:user-visible-flag t) nil [80463 80675])
            ("bookmark-bmenu-unmark" function
               (:user-visible-flag t
                :arguments ("backup"))
                nil [80678 81275])
            ("bookmark-bmenu-backup-unmark" function (:user-visible-flag t) nil [81278 81544])
            ("bookmark-bmenu-delete" function (:user-visible-flag t) nil [81547 81981])
            ("bookmark-bmenu-delete-backwards" function (:user-visible-flag t) nil [81984 82362])
            ("bookmark-bmenu-execute-deletions" function (:user-visible-flag t) nil [82365 83311])
            ("bookmark-bmenu-rename" function (:user-visible-flag t) nil [83314 83548])
            ("bookmark-bmenu-locate" function (:user-visible-flag t) nil [83551 83754])
            ("bookmark-bmenu-relocate" function (:user-visible-flag t) nil [83756 84040])
            ("bookmark-bmenu-filter-alist-by-regexp" function (:arguments ("regexp")) nil [84069 84405])
            ("bookmark-bmenu-search" function (:user-visible-flag t) nil [84423 85317])
            ("bookmark-bmenu-goto-bookmark" function (:arguments ("name")) nil [85319 85556])
            ("bookmark-menu-popup-paned-menu" function (:arguments ("event" "name" "entries")) nil [85610 86630])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [86921 88514])
            ("defalias" code nil nil [88531 88586])
            ("if" code nil nil [88648 88801])
            ("bookmark-load-hook" variable nil nil [88853 88942])
            ("define-obsolete-variable-alias" code nil nil [88986 89068])
            ("bookmark-exit-hook" variable nil nil [89069 89131])
            ("bookmark-exit-hook-internal" function nil nil [89133 89360])
            ("unless" code nil nil [89362 89444])
            ("bookmark-unload-function" function nil nil [89446 89597])
            ("run-hooks" code nil nil [89600 89631])
            ("bookmark" package nil nil [89633 89652]))          
      :file "bookmark.el.gz"
      :pointmax 89680
      :fsize 23209
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax '((close-paren 1322 . 1323) (symbol 1287 . 1304) (open-paren 1286 . 1287)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [929 1264])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1267 1472])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1474 1733])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1735 1925])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1927 2372])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2374 2982])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2984 3334])
            ("mode-line-eol-desc-cache" variable nil nil [3336 3373])
            ("mode-line-eol-desc" function nil nil [3375 4254])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4282 4822])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4824 5109])
            ("put" code nil nil [5110 5162])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5164 5616])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5618 6540])
            ("put" code nil nil [6556 6606])
            ("make-variable-buffer-local" code nil nil [6607 6656])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6658 6869])
            ("put" code nil nil [6885 6932])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6934 7209])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7211 7471])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7473 7991])
            ("put" code nil nil [8007 8056])
            ("make-variable-buffer-local" code nil nil [8057 8105])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8107 8617])
            ("put" code nil nil [8633 8680])
            ("make-variable-buffer-local" code nil nil [8681 8727])
            ("mode-line-frame-control" function nil nil [8797 9034])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9144 9273])
            ("put" code nil nil [9289 9350])
            ("mode-line-process" variable nil nil [9352 9511])
            ("put" code nil nil [9527 9575])
            ("make-variable-buffer-local" code nil nil [9576 9623])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9625 10538])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10540 10649])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10651 11042])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [11044 11434])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11436 12446])
            ("put" code nil nil [12447 12493])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [size-indication-mode] (quote (menu-item "Display Size Indication" size-indication-mode :help "Toggle displaying a size indication in the mode-line" :button (:toggle . size-indication-mode)))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12495 13439])
            ("column-number-indicator-zero-based" variable (:default-value t) nil [13441 13827])
            ("mode-line-percent-position" variable (:default-value (quote (-3 "%p"))) nil [13829 14619])
            ("put" code nil nil [14620 14677])
            ("mode-line-position" variable (:default-value (\` ((:propertize mode-line-percent-position local-map (\, mode-line-column-line-number-mode-map) mouse-face mode-line-highlight help-echo "Size indication mode
mouse-1: Display Line and Column Mode Menu") (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (column-number-indicator-zero-based (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (10 (\, (propertize " (%l,%C)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu")))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (column-number-indicator-zero-based (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))) (5 (\, (propertize " C%C" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu")))))))))) nil [14679 16798])
            ("put" code nil nil [16799 16848])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [16850 17583])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [17585 18069])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [18071 18384])
            ("put" code nil nil [18400 18462])
            ("make-variable-buffer-local" code nil nil [18463 18524])
            ("mode-line-misc-info" variable (:default-value (quote ((global-mode-string ("" global-mode-string " "))))) nil [18526 18737])
            ("put" code nil nil [18738 18788])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [18790 18923])
            ("put" code nil nil [18924 18975])
            ("let" code nil nil [19040 19605])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19609 19788])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [19790 19987])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [19989 20156])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20158 20355])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20357 20566])
            ("bound-and-true-p" function (:arguments ("var")) nil [20568 20698])
            ("bindings--define-key" code nil nil [20817 21038])
            ("bindings--define-key" code nil nil [21039 21287])
            ("bindings--define-key" code nil nil [21288 21553])
            ("bindings--define-key" code nil nil [21554 21783])
            ("bindings--define-key" code nil nil [21784 22023])
            ("bindings--define-key" code nil nil [22024 22198])
            ("bindings--define-key" code nil nil [22199 22404])
            ("bindings--define-key" code nil nil [22405 22709])
            ("bindings--define-key" code nil nil [22710 22950])
            ("bindings--define-key" code nil nil [22951 23151])
            ("bindings--define-key" code nil nil [23152 23342])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23344 23583])
            ("minor-mode-alist" variable nil nil [23585 23882])
            ("put" code nil nil [23898 23945])
            ("setq" code nil nil [24016 24223])
            ("setq" code nil nil [24508 25770])
            ("setq" code nil nil [25806 25948])
            ("setq" code nil nil [26062 26465])
            ("make-variable-buffer-local" code nil nil [26467 26513])
            ("mapc" code nil nil [26835 27228])
            ("base64" package nil nil [27286 27303])
            ("md5" package nil nil [27304 27318])
            ("sha1" package nil nil [27319 27334])
            ("overlay" package nil nil [27335 27383])
            ("text-properties" package nil nil [27384 27454])
            ("define-key" code nil nil [27456 27498])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27500 27879])
            ("garbage-collect" code nil nil [27997 28014])
            ("setq" code nil nil [28018 28055])
            ("make-variable-buffer-local" code nil nil [28057 28118])
            ("global-set-key" code nil nil [28136 28188])
            ("global-set-key" code nil nil [28189 28243])
            ("global-set-key" code nil nil [28439 28491])
            ("global-set-key" code nil nil [28492 28538])
            ("global-set-key" code nil nil [28539 28590])
            ("put" code nil nil [28676 28711])
            ("visual-order-cursor-movement" variable nil nil [28764 29468])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29470 30226])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30228 30983])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [30985 31593])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [31595 32202])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [32204 32279])
            ("define-key" code nil nil [32280 32317])
            ("define-key" code nil nil [32319 32364])
            ("define-key" code nil nil [32365 32399])
            ("define-key" code nil nil [32413 32467])
            ("define-key" code nil nil [32468 32513])
            ("substitute-key-definition" code nil nil [32622 32690])
            ("define-key" code nil nil [32692 32731])
            ("define-key" code nil nil [32732 32773])
            ("define-key" code nil nil [32774 32813])
            ("define-key" code nil nil [32814 32859])
            ("define-key" code nil nil [32860 32904])
            ("define-key" code nil nil [32905 32955])
            ("define-key" code nil nil [32956 33001])
            ("define-key" code nil nil [33002 33051])
            ("define-key" code nil nil [33052 33092])
            ("define-key" code nil nil [33093 33130])
            ("define-key" code nil nil [33131 33175])
            ("define-key" code nil nil [33176 33224])
            ("define-key" code nil nil [33225 33266])
            ("define-key" code nil nil [33340 33384])
            ("define-key" code nil nil [33451 33504])
            ("define-key" code nil nil [33538 33591])
            ("define-key" code nil nil [33592 33624])
            ("put" code nil nil [33625 33667])
            ("define-key" code nil nil [33738 33775])
            ("define-key" code nil nil [33776 33812])
            ("define-key" code nil nil [33991 34030])
            ("define-key" code nil nil [34031 34080])
            ("define-key" code nil nil [34081 34126])
            ("define-key" code nil nil [34128 34171])
            ("define-key" code nil nil [34172 34217])
            ("define-key" code nil nil [34218 34268])
            ("define-key" code nil nil [34269 34315])
            ("define-key" code nil nil [34316 34364])
            ("define-key" code nil nil [34365 34416])
            ("let" code nil nil [34418 35321])
            ("define-key" code nil nil [35323 35373])
            ("let" code nil nil [35374 35488])
            ("define-key" code nil nil [35489 35532])
            ("let" code nil nil [35559 35687])
            ("define-key" code nil nil [35688 35738])
            ("let" code nil nil [35770 35895])
            ("define-key" code nil nil [35896 35949])
            ("define-key" code nil nil [36005 36057])
            ("define-key" code nil nil [36340 36383])
            ("define-key" code nil nil [36385 36426])
            ("define-key" code nil nil [36427 36470])
            ("define-key" code nil nil [36471 36511])
            ("define-key" code nil nil [36512 36557])
            ("define-key" code nil nil [36558 36594])
            ("define-key" code nil nil [36595 36629])
            ("define-key" code nil nil [36680 36728])
            ("define-key" code nil nil [36786 36835])
            ("put" code nil nil [36836 36887])
            ("define-key" code nil nil [36889 36943])
            ("define-key" code nil nil [36944 36990])
            ("define-key" code nil nil [36991 37038])
            ("define-key" code nil nil [37039 37086])
            ("define-key" code nil nil [37088 37129])
            ("define-key" code nil nil [37130 37175])
            ("define-key" code nil nil [37176 37222])
            ("define-key" code nil nil [37223 37277])
            ("define-key" code nil nil [37278 37326])
            ("define-key" code nil nil [37328 37366])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [37368 37442])
            ("define-key" code nil nil [37443 37476])
            ("define-key" code nil nil [37478 37517])
            ("define-key" code nil nil [37518 37557])
            ("define-key" code nil nil [37558 37597])
            ("define-key" code nil nil [37598 37638])
            ("define-key" code nil nil [37639 37679])
            ("define-key" code nil nil [37680 37724])
            ("define-key" code nil nil [37725 37769])
            ("define-key" code nil nil [37770 37814])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [37816 37896])
            ("define-key" code nil nil [37897 37932])
            ("define-key" code nil nil [37934 37971])
            ("define-key" code nil nil [37972 38020])
            ("define-key" code nil nil [38021 38069])
            ("define-key" code nil nil [38070 38118])
            ("define-key" code nil nil [38119 38182])
            ("define-key" code nil nil [38183 38240])
            ("define-key" code nil nil [38241 38291])
            ("define-key" code nil nil [38292 38345])
            ("define-key" code nil nil [38346 38412])
            ("define-key" code nil nil [38522 38578])
            ("define-key" code nil nil [38579 38625])
            ("define-key" code nil nil [38822 38879])
            ("define-key" code nil nil [38880 38935])
            ("define-key" code nil nil [38936 38990])
            ("define-key" code nil nil [38991 39058])
            ("define-key" code nil nil [39059 39124])
            ("define-key" code nil nil [39125 39167])
            ("define-key" code nil nil [39168 39212])
            ("define-key" code nil nil [39213 39257])
            ("define-key" code nil nil [39258 39300])
            ("define-key" code nil nil [39301 39354])
            ("define-key" code nil nil [39355 39405])
            ("define-key" code nil nil [39406 39457])
            ("define-key" code nil nil [39458 39510])
            ("define-key" code nil nil [39511 39558])
            ("put" code nil nil [39559 39589])
            ("define-key" code nil nil [39590 39636])
            ("define-key" code nil nil [39637 39691])
            ("define-key" code nil nil [39692 39744])
            ("define-key" code nil nil [39745 39804])
            ("define-key" code nil nil [39805 39863])
            ("define-key" code nil nil [39864 39922])
            ("define-key" code nil nil [39923 39971])
            ("define-key" code nil nil [39972 40019])
            ("define-key" code nil nil [40020 40080])
            ("define-key" code nil nil [40081 40139])
            ("define-key" code nil nil [40140 40193])
            ("define-key" code nil nil [40194 40261])
            ("define-key" code nil nil [40262 40328])
            ("define-key" code nil nil [40440 40499])
            ("define-key" code nil nil [40500 40549])
            ("define-key" code nil nil [40550 40600])
            ("define-key" code nil nil [40601 40641])
            ("define-key" code nil nil [40740 40792])
            ("define-key" code nil nil [40793 40847])
            ("define-key" code nil nil [40848 40892])
            ("define-key" code nil nil [40893 40930])
            ("define-key" code nil nil [40931 40986])
            ("define-key" code nil nil [40987 41043])
            ("define-key" code nil nil [41059 41101])
            ("define-key" code nil nil [41333 41380])
            ("define-key" code nil nil [41381 41428])
            ("define-key" code nil nil [41429 41486])
            ("let" code nil nil [45447 46293])
            ("define-key" code nil nil [46295 46344])
            ("define-key" code nil nil [46345 46391])
            ("define-key" code nil nil [46392 46441])
            ("define-key" code nil nil [47608 47654])
            ("define-key" code nil nil [47776 47823])
            ("define-key" code nil nil [47825 47873])
            ("define-key" code nil nil [47875 47922])
            ("define-key" code nil nil [47923 47964])
            ("define-key" code nil nil [47965 48009])
            ("define-key" code nil nil [48010 48056])
            ("define-key" code nil nil [48058 48096])
            ("define-key" code nil nil [48097 48146])
            ("define-key" code nil nil [48147 48199])
            ("define-key" code nil nil [48200 48246])
            ("define-key" code nil nil [48247 48292])
            ("define-key" code nil nil [48293 48336])
            ("define-key" code nil nil [48337 48386])
            ("define-key" code nil nil [48388 48423])
            ("define-key" code nil nil [48424 48462])
            ("define-key" code nil nil [48463 48502])
            ("define-key" code nil nil [48503 48538])
            ("define-key" code nil nil [48539 48586])
            ("define-key" code nil nil [48588 48633])
            ("define-key" code nil nil [48634 48673])
            ("define-key" code nil nil [48674 48719])
            ("define-key" code nil nil [48720 48770])
            ("defalias" code nil nil [48772 48833])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [48834 48949])
            ("define-key" code nil nil [48950 49010])
            ("global-set-key" code nil nil [49012 49051])
            ("define-key" code nil nil [49052 49094])
            ("global-set-key" code nil nil [49095 49133])
            ("define-key" code nil nil [49134 49176])
            ("global-set-key" code nil nil [49253 49292])
            ("global-set-key" code nil nil [49293 49331])
            ("global-set-key" code nil nil [49391 49429])
            ("global-set-key" code nil nil [49430 49480])
            ("global-set-key" code nil nil [49541 49581])
            ("global-set-key" code nil nil [49583 49628])
            ("define-key" code nil nil [49629 49674])
            ("global-set-key" code nil nil [49675 49719])
            ("define-key" code nil nil [49720 49764])
            ("global-set-key" code nil nil [49765 49813])
            ("define-key" code nil nil [49814 49862])
            ("global-set-key" code nil nil [49863 49904])
            ("define-key" code nil nil [49905 49946])
            ("global-set-key" code nil nil [49947 49997])
            ("define-key" code nil nil [49998 50048])
            ("global-set-key" code nil nil [50049 50093])
            ("define-key" code nil nil [50094 50138])
            ("define-key" code nil nil [50140 50181])
            ("define-key" code nil nil [50182 50224])
            ("define-key" code nil nil [50225 50270])
            ("define-key" code nil nil [50271 50309])
            ("define-key" code nil nil [50310 50350])
            ("define-key" code nil nil [50351 50389])
            ("define-key" code nil nil [50390 50428])
            ("define-key" code nil nil [50646 50697])
            ("define-key" code nil nil [50698 50752])
            ("define-key" code nil nil [50753 50794])
            ("define-key" code nil nil [50795 50837])
            ("define-key" code nil nil [50838 50885])
            ("define-key" code nil nil [50886 50927])
            ("define-key" code nil nil [50928 50967])
            ("define-key" code nil nil [50968 51012])
            ("define-key" code nil nil [51013 51057])
            ("define-key" code nil nil [51058 51112])
            ("define-key" code nil nil [51114 51159])
            ("define-key" code nil nil [51161 51201])
            ("define-key" code nil nil [51202 51257])
            ("define-key" code nil nil [51258 51312])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [51316 52372])
            ("define-key" code nil nil [52373 52411])
            ("define-key" code nil nil [52413 52453])
            ("define-key" code nil nil [52454 52497])
            ("define-key" code nil nil [52500 52544])
            ("define-key" code nil nil [52545 52588])
            ("define-key" code nil nil [52589 52629])
            ("define-key" code nil nil [52630 52673])
            ("define-key" code nil nil [52674 52716])
            ("define-key" code nil nil [52717 52756])
            ("define-key" code nil nil [52757 52810])
            ("define-key" code nil nil [52812 52853])
            ("define-key" code nil nil [52854 52894])
            ("define-key" code nil nil [52895 52935])
            ("define-key" code nil nil [52936 52980])
            ("define-key" code nil nil [52981 53024])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [53073 53145])
            ("define-key" code nil nil [53146 53183])
            ("define-key" code nil nil [53185 53229])
            ("define-key" code nil nil [53230 53277])
            ("define-key" code nil nil [53278 53324])
            ("define-key" code nil nil [53325 53369])
            ("define-key" code nil nil [53370 53425])
            ("define-key" code nil nil [53426 53479])
            ("define-key" code nil nil [53541 53595])
            ("define-key" code nil nil [53596 53638])
            ("define-key" code nil nil [53639 53681])
            ("define-key" code nil nil [53896 53940])
            ("define-key" code nil nil [53941 53982])
            ("define-key" code nil nil [53983 54026])
            ("define-key" code nil nil [54028 54062])
            ("define-key" code nil nil [54064 54110])
            ("define-key" code nil nil [54112 54175])
            ("define-key" code nil nil [54176 54240])
            ("define-key" code nil nil [54261 54309])
            ("define-key" code nil nil [54310 54358]))          
      :file "bindings.el.gz"
      :pointmax 54490
      :fsize 13590
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("chistory" customgroup (:user-visible-flag t) nil [1144 1212])
            ("repeat-matching-complex-command" function
               (:user-visible-flag t
                :arguments ("pattern"))
                nil [1229 2399])
            ("default-command-history-filter-garbage" variable (:default-value (quote (command-history-mode list-command-history electric-command-history))) nil [2401 2877])
            ("list-command-history-filter" variable (:default-value (quote default-command-history-filter)) nil [2879 3355])
            ("default-command-history-filter" function (:arguments ("frob")) nil [3357 3592])
            ("list-command-history-max" variable (:default-value 32) nil [3594 3772])
            ("list-command-history" function (:user-visible-flag t) nil [3789 4725])
            ("define-obsolete-variable-alias" code nil nil [4727 4815])
            ("command-history-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-shared-map) (suppress-keymap map) (define-key map "x" (quote command-history-repeat)) (define-key map "
" (quote next-line)) (define-key map "" (quote next-line)) (define-key map "" (quote previous-line)) map)) nil [4816 5174])
            ("define-derived-mode" code nil nil [5176 5460])
            ("command-history-hook" variable nil nil [5462 5603])
            ("command-history-repeat" function (:user-visible-flag t) nil [5605 5924])
            ("command-history" function (:user-visible-flag t) nil [5941 6656])
            ("chistory" package nil nil [6658 6677]))          
      :file "chistory.el.gz"
      :pointmax 6705
      :fsize 2558
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1149 1180])
            ("linum-overlays" variable nil nil [1182 1241])
            ("linum-available" variable nil nil [1242 1302])
            ("linum-before-numbering-hook" variable nil nil [1303 1406])
            ("mapc" code nil nil [1408 1477])
            ("linum" customgroup (:user-visible-flag t) nil [1479 1563])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1565 2040])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2042 2168])
            ("linum-eager" variable (:default-value t) nil [2170 2431])
            ("linum-delay" variable nil nil [2433 2553])
            ("define-minor-mode" code nil nil [2570 4412])
            ("define-globalized-minor-mode" code nil nil [4429 4497])
            ("linum-on" function nil nil [4499 5374])
            ("linum-delete-overlays" function nil nil [5376 6114])
            ("linum-update-current" function nil nil [6116 6229])
            ("linum-update" function (:arguments ("buffer")) nil [6231 6646])
            ("declare-function" code nil nil [6682 6742])
            ("linum--face-width" function (:arguments ("face")) nil [6744 6936])
            ("linum-update-window" function (:arguments ("win")) nil [6938 9494])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [9496 9764])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [9766 9842])
            ("linum-schedule" function nil nil [9907 10061])
            ("linum-unload-function" function nil nil [10176 10302])
            ("linum" package nil nil [10304 10320]))          
      :file "linum.el.gz"
      :pointmax 10345
      :fsize 3522
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el.gz"
      :pointmax 59422
      :fsize 17341
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4230 4247])
            ("completion-boundaries" function (:arguments ("string" "collection" "pred" "suffix")) nil [4320 5366])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5368 6378])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6380 6611])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6613 6689])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6691 7124])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [7126 7652])
            ("completion-table-dynamic" function (:arguments ("fun" "switch-buffer")) nil [7654 9298])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [9300 10186])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [10188 11027])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [11029 11371])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [11373 12939])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12941 14225])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [14227 17479])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17481 18957])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18959 19458])
            ("completion-table-merge" function (:arguments ("tables")) nil [19460 20477])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20479 28008])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [28010 29256])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [29258 29362])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [29364 32992])
            ("define-obsolete-function-alias" code nil nil [33143 33228])
            ("define-obsolete-function-alias" code nil nil [33229 33322])
            ("minibuffer" customgroup (:user-visible-flag t) nil [33351 33491])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33493 35554])
            ("minibuffer-completion-contents" function nil nil [35556 35812])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35814 36171])
            ("completion-show-inline-help" variable (:default-value t) nil [36173 36276])
            ("completion-auto-help" variable (:default-value t) nil [36278 36661])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36663 39244])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [39246 39455])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39456 39622])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39624 40528])
            ("completion-category-defaults" variable (:default-value (quote ((buffer (styles basic substring)) (unicode-name (styles basic substring)) (project-file (styles basic substring)) (info-menu (styles basic substring))))) nil [40530 41174])
            ("completion-category-overrides" variable nil nil [41176 42328])
            ("completion--category-override" function (:arguments ("category" "tag")) nil [42330 42520])
            ("completion--styles" function (:arguments ("metadata")) nil [42522 42796])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [42798 44961])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [44963 45520])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [45522 46059])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [46061 46210])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [46212 47915])
            ("completion-cycle-threshold" variable nil nil [47917 48439])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [48441 48660])
            ("defvar-local" code nil nil [48662 48714])
            ("defvar-local" code nil nil [48715 48777])
            ("completion-cycling" variable nil nil [48778 48809])
            ("completion-fail-discreetly" variable nil nil [48811 48902])
            ("completion--message" function (:arguments ("msg")) nil [48904 49003])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [49005 55566])
            ("minibuffer-complete" function (:user-visible-flag t) nil [55568 56121])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [56123 57306])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [57308 57622])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [57624 58069])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [58071 58517])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [58519 60672])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [60674 61110])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [61112 63864])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [63866 64132])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [64134 64885])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [64887 65422])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [65424 68028])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [68030 73035])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [73038 73466])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [73468 73851])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [73853 73970])
            ("completions-format" variable (:default-value (quote horizontal)) nil [73972 74368])
            ("completion--insert-strings" function (:arguments ("strings")) nil [74370 77941])
            ("completion-common-substring" variable nil nil [77943 77983])
            ("make-obsolete-variable" code nil nil [77984 78048])
            ("completion-setup-hook" variable nil nil [78050 78387])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [78389 78555])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [78557 78860])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [78862 80740])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [80742 82508])
            ("completion-extra-properties" variable nil nil [82510 83480])
            ("completion-annotate-function" variable nil nil [83482 84365])
            ("make-obsolete-variable" code nil nil [84366 84480])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [84482 85298])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [85300 91632])
            ("minibuffer-hide-completions" function nil nil [91634 91977])
            ("exit-minibuffer" function (:user-visible-flag t) nil [91979 92460])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [92462 92659])
            ("completion-in-region-functions" variable nil nil [92661 92813])
            ("make-obsolete-variable" code nil nil [92814 92932])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [92934 93213])
            ("completion-in-region--data" variable nil nil [93215 93254])
            ("completion-in-region-mode-predicate" variable nil nil [93256 93512])
            ("completion-in-region-mode--predicate" variable nil nil [93514 93735])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [93737 94354])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [94356 94581])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [94583 95685])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [95687 96039])
            ("completion-in-region--postch" function nil nil [96387 97044])
            ("completion-in-region-mode" variable nil nil [97120 97158])
            ("define-minor-mode" code nil nil [97196 98372])
            ("setq" code nil nil [98499 98627])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [98629 100031])
            ("completion--capf-misbehave-funs" variable nil nil [100033 100281])
            ("completion--capf-safe-funs" variable nil nil [100282 100512])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [100514 102437])
            ("completion-at-point" function (:user-visible-flag t) nil [102439 103575])
            ("completion-help-at-point" function (:user-visible-flag t) nil [103577 105343])
            ("let" code nil nil [105364 105528])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [105530 106033])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [106035 106364])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [106366 106661])
            ("define-obsolete-variable-alias" code nil nil [106663 106788])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [106789 106859])
            ("make-obsolete-variable" code nil nil [106860 106937])
            ("let" code nil nil [106939 107102])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [107104 107880])
            ("define-derived-mode" code nil nil [107882 108209])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [108235 108491])
            ("minibuffer-maybe-quote-filename" function (:arguments ("filename")) nil [108493 109014])
            ("completion--make-envvar-table" function nil nil [109016 109182])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [109184 109453])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [109455 111902])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [111904 114632])
            ("read-file-name-predicate" variable nil nil [114691 114785])
            ("make-obsolete-variable" code nil nil [114786 114899])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [114901 117289])
            ("defalias" code nil nil [117291 117725])
            ("defalias" code nil nil [117727 117950])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [117952 118125])
            ("insert-default-directory" variable (:default-value t) nil [118127 119166])
            ("declare-function" code nil nil [119248 119368])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [119370 120560])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [120562 123646])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [123648 124120])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [124710 131967])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [131969 132468])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [132528 132747])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [132749 132963])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [132965 134002])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [134004 134276])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [134301 134982])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [134984 135179])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [135181 136461])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [136463 137146])
            ("completion-pcm--delim-wild-regex" variable nil nil [137195 137647])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [137649 137765])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [137767 138408])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [138410 138847])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [138849 139134])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [139136 141593])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [141595 142530])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [142532 143342])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [143344 144608])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [144610 145410])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [145412 150646])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [150648 150948])
            ("completion--common-suffix" function (:arguments ("strs")) nil [150950 151097])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [151099 156130])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [156132 156403])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [157027 157426])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [157429 159281])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [159283 159659])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [159742 160477])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [160479 160866])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [160868 161203])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [161298 162999])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [163001 163228])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [163230 163455])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [163458 163635])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [163637 165420])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [165441 165814])
            ("minibuffer" package nil nil [165816 165837]))          
      :file "minibuffer.el.gz"
      :pointmax 165867
      :fsize 43706
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax '((close-paren 4247 . 4248) (symbol 4212 . 4229) (open-paren 4211 . 4212)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tabulated-list" include nil nil [938 963])
            ("copy-from-above-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [981 2146])
            ("zap-up-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [2195 2719])
            ("mark-beginning-of-buffer" function (:user-visible-flag t) nil [2869 2991])
            ("mark-end-of-buffer" function (:user-visible-flag t) nil [3008 3118])
            ("upcase-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3135 3330])
            ("forward-to-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3347 3625])
            ("backward-to-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3642 3817])
            ("butterfly" function (:user-visible-flag t) nil [3834 4875])
            ("list-dynamic-libraries--loaded-only-p" variable nil nil [5012 5058])
            ("make-variable-buffer-local" code nil nil [5059 5126])
            ("list-dynamic-libraries--loaded" function (:arguments ("from")) nil [5128 5609])
            ("list-dynamic-libraries--refresh" function nil nil [5611 6807])
            ("list-dynamic-libraries" function
               (:user-visible-flag t
                :arguments ("loaded-only-p" "buffer"))
                nil [6824 7709])
            ("misc" package nil nil [7711 7726]))          
      :file "misc.el.gz"
      :pointmax 7750
      :fsize 3122
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 963 . 964) (symbol 918 . 935) (open-paren 917 . 918)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1228 1245])
            ("cl-defstruct" code nil nil [1296 1628])
            ("cl-defun" code nil nil [1630 2251])
            ("register-alist" variable nil nil [2253 2966])
            ("register" customgroup (:user-visible-flag t) nil [2968 3054])
            ("register-separator" variable nil nil [3056 3452])
            ("register-preview-delay" variable (:default-value 1) nil [3454 3780])
            ("get-register" function (:arguments ("register")) nil [3782 3921])
            ("set-register" function (:arguments ("register" "value")) nil [3923 4163])
            ("register-describe-oneline" function (:arguments ("c")) nil [4165 4484])
            ("register-preview-default" function (:arguments ("r")) nil [4486 4686])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4688 4892])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4894 5536])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5538 6973])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6975 7662])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7664 8308])
            ("set-advertised-calling-convention" code nil nil [8370 8465])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8467 9099])
            ("set-advertised-calling-convention" code nil nil [9161 9255])
            ("make-obsolete" code nil nil [9257 9334])
            ("defalias" code nil nil [9336 9383])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9384 11427])
            ("register-swap-out" function nil nil [11429 11782])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11784 12485])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12487 13345])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13347 13826])
            ("list-registers" function (:user-visible-flag t) nil [13828 14205])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14207 16408])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16410 17617])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17619 18590])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18592 19598])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19600 20610])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20612 21548])
            ("register" package nil nil [21550 21569]))          
      :file "register.el.gz"
      :pointmax 21596
      :fsize 5981
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1245 . 1246) (symbol 1210 . 1227) (open-paren 1209 . 1210)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1924 8904])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8906 9236])
            ("menu-bar-last-search-type" variable nil nil [9268 9376])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9378 9771])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9773 10170])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function (:user-visible-flag t) nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function (:user-visible-flag t) nil [28438 28737])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28739 30913])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31022 31176])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31178 31392])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31394 31601])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31603 31813])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31815 31931])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32215 34657])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34659 34839])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34841 35066])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35068 35279])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35281 35466])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35468 35650])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35652 35822])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35824 38236])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38238 38389])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38391 38577])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38579 38776])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38778 38973])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38975 39146])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39148 41172])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41174 41330])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41332 41485])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41487 41610])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote right)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote left)))))) (bindings--define-key menu [none] (quote (menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil)))) menu)) nil [41612 43164])
            ("menu-bar-frame-for-menubar" function nil nil [43166 43349])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [43351 43471])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43473 43621])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [43622 43774])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [43775 43936])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [43937 44101])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44102 44260])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44261 44428])
            ("when" code nil nil [44430 47204])
            ("display-line-numbers-type" variable nil nil [47206 47240])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47241 47443])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] (\` (menu-item "Visual Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote visual)) (message "Visual line numbers enabled"))) :help "Enable visual line numbers" :button (:radio eq display-line-numbers (quote visual)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [relative] (\` (menu-item "Relative Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote relative)) (message "Relative line numbers enabled"))) :help "Enable relative line numbers" :button (:radio eq display-line-numbers (quote relative)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [absolute] (\` (menu-item "Absolute Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled"))) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [none] (\` (menu-item "No Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled"))) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47445 49678])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] (\` (menu-item "Line Numbers for All Lines" (\, menu-bar-showhide-line-numbers-menu)))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll Bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool Bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [49680 53691])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [53693 55790])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55792 57738])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place-mode "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place-mode) (not (symbol-value (quote save-place-mode)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57740 63074])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [63105 65044])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [65046 67387])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [67389 67516])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Servers" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [67518 71580])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [71609 74449])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [74451 74574])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [74576 74712])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [74714 74853])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [74855 75026])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [75028 75209])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [75211 77432])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [77434 78708])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [78710 78858])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [78860 82608])
            ("bindings--define-key" code nil nil [82610 82697])
            ("bindings--define-key" code nil nil [82698 82792])
            ("bindings--define-key" code nil nil [82793 82886])
            ("bindings--define-key" code nil nil [82887 82971])
            ("bindings--define-key" code nil nil [82972 83056])
            ("bindings--define-key" code nil nil [83057 83157])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [83159 83463])
            ("menu-bar-non-minibuffer-window-p" function nil nil [83465 83911])
            ("kill-this-buffer" function (:user-visible-flag t) nil [83913 84457])
            ("kill-this-buffer-enabled-p" function nil nil [84459 84927])
            ("put" code nil nil [84929 84990])
            ("delete-frame-enabled-p" function nil nil [85065 85350])
            ("yank-menu-length" variable (:default-value 20) nil [85352 85463])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [85465 86456])
            ("put" code nil nil [86458 86504])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [86505 86737])
            ("buffers-menu-max-size" variable (:default-value 10) nil [86759 87103])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [87105 87454])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [87456 88200])
            ("buffers-menu-show-status" variable (:default-value t) nil [88202 88575])
            ("list-buffers-directory" variable nil nil [88577 88686])
            ("make-variable-buffer-local" code nil nil [88687 88739])
            ("menu-bar-select-buffer" function nil nil [88741 88830])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88832 88943])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88945 89815])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89884 89934])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [89936 90124])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [90126 90554])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90556 94442])
            ("add-hook" code nil nil [94444 94501])
            ("menu-bar-update-buffers" code nil nil [94503 94528])
            ("dolist" code nil nil [95151 95447])
            ("let" code nil nil [95449 95938])
            ("let" code nil nil [95940 97009])
            ("define-minor-mode" code nil nil [97012 98376])
            ("put" code nil nil [98820 98861])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98863 99269])
            ("declare-function" code nil nil [99271 99336])
            ("declare-function" code nil nil [99337 99406])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [99408 99622])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [99624 102634])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [102636 103384])
            ("tty-menu-open-use-tmm" variable nil nil [103386 103847])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [103849 104000])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [104002 105570])
            ("global-set-key" code nil nil [105572 105609])
            ("buffer-menu-open" function (:user-visible-flag t) nil [105611 105836])
            ("global-set-key" code nil nil [105838 105880])
            ("mouse-buffer-menu-keymap" function nil nil [105882 106209])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [106211 109756])
            ("menu-bar" package nil nil [109758 109777]))          
      :file "menu-bar.el.gz"
      :pointmax 109805
      :fsize 23498
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image" customgroup (:user-visible-flag t) nil [892 951])
            ("defalias" code nil nil [953 991])
            ("image-type-header-regexps" variable
               (:constant-flag t
                :default-value (\` (("\\`/[	
 ]*\\*.*XPM.\\*/" . xpm) ("\\`P[1-6]\\(?:\\(?:\\(?:#[^
]*[
]\\)*[[:space:]]\\)+\\(?:\\(?:#[^
]*[
]\\)*[0-9]\\)+\\)\\{2\\}" . pbm) ("\\`GIF8[79]a" . gif) ("\\`\211PNG

" . png) ("\\`[	
 ]*#define \\([a-z0-9_]+\\)_width [0-9]+
#define \\1_height [0-9]+
\\(#define \\1_x_hot [0-9]+
#define \\1_y_hot [0-9]+
\\)?static \\(unsigned \\)?char \\1_bits" . xbm) ("\\`\\(?:MM \\*\\|II\\* \\)" . tiff) ("\\`[	
 ]*%!PS" . postscript) ("\\`\377\330" . jpeg) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Ss][Vv][Gg]"))) . svg))))
                nil [993 2316])
            ("image-type-file-name-regexps" variable (:default-value (quote (("\\.png\\'" . png) ("\\.gif\\'" . gif) ("\\.jpe?g\\'" . jpeg) ("\\.bmp\\'" . bmp) ("\\.xpm\\'" . xpm) ("\\.pbm\\'" . pbm) ("\\.xbm\\'" . xbm) ("\\.ps\\'" . postscript) ("\\.tiff?\\'" . tiff) ("\\.svgz?\\'" . svg)))) nil [2318 2777])
            ("image-type-auto-detectable" variable (:default-value (quote ((pbm . t) (xbm) (bmp . maybe) (gif . maybe) (png . maybe) (xpm) (jpeg . maybe) (tiff . maybe) (svg . maybe) (postscript)))) nil [2954 3457])
            ("image-format-suffixes" variable (:default-value (quote ((image/x-rgb "rgb") (image/x-icon "ico")))) nil [3459 3994])
            ("image-load-path" variable (:default-value (list (file-name-as-directory (expand-file-name "images" data-directory)) (quote data-directory) (quote load-path))) nil [3996 4699])
            ("image-scaling-factor" variable (:default-value (quote auto)) nil [4701 5244])
            ("image-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "-" (quote image-decrease-size)) (define-key map "+" (quote image-increase-size)) (define-key map "r" (quote image-rotate)) (define-key map "o" (quote image-save)) map)) nil [5289 5520])
            ("image-load-path-for-library" function (:arguments ("library" "image" "path" "no-error")) nil [5522 9569])
            ("image-jpeg-p" function (:arguments ("data")) nil [9665 10453])
            ("image-type-from-data" function (:arguments ("data")) nil [10471 11044])
            ("image-type-from-buffer" function nil nil [11062 11908])
            ("image-type-from-file-header" function (:arguments ("file")) nil [11926 12413])
            ("image-type-from-file-name" function (:arguments ("file")) nil [12431 12960])
            ("image-type" function (:arguments ("source" "type" "data-p")) nil [12977 13850])
            ("if" code nil nil [13853 14002])
            ("define-obsolete-variable-alias" code nil nil [14004 14095])
            ("image-type-available-p" function (:arguments ("type")) nil [14112 14318])
            ("image-type-auto-detected-p" function nil nil [14336 14981])
            ("create-image" function (:arguments ("file-or-data" "type" "data-p" "props")) nil [14999 16503])
            ("image--set-property" function (:arguments ("image" "property" "value")) nil [16505 17028])
            ("image-property" function (:arguments ("image" "property")) nil [17030 17315])
            ("image-compute-scaling-factor" function (:arguments ("scaling")) nil [17317 17797])
            ("put-image" function (:arguments ("image" "pos" "string" "area")) nil [17814 19140])
            ("insert-image" function (:arguments ("image" "string" "area" "slice")) nil [19158 21051])
            ("insert-sliced-image" function (:arguments ("image" "string" "area" "rows" "cols")) nil [21069 22782])
            ("remove-images" function (:arguments ("start" "end" "buffer")) nil [22801 23288])
            ("image-search-load-path" function (:arguments ("file" "path")) nil [23290 23996])
            ("find-image" function (:arguments ("specs")) nil [24013 25326])
            ("defimage" function (:arguments ("symbol" "specs" "doc")) nil [25344 26212])
            ("image-default-frame-delay" variable (:default-value 0.1) nil [26240 26398])
            ("image-multi-frame-p" function (:arguments ("image")) nil [26400 27096])
            ("image-animated-p" function (:arguments ("image")) nil [27098 27278])
            ("make-obsolete" code nil nil [27280 27341])
            ("image-animate" function (:arguments ("image" "index" "limit")) nil [27363 28105])
            ("image-animate-timer" function (:arguments ("image")) nil [28107 28491])
            ("image-minimum-frame-delay" variable
               (:constant-flag t
                :default-value 0.01)
                nil [28493 28603])
            ("image-current-frame" function (:arguments ("image")) nil [28605 28735])
            ("image-show-frame" function (:arguments ("image" "n" "nocheck")) nil [28737 29119])
            ("image-animate-get-speed" function (:arguments ("image")) nil [29121 29249])
            ("image-animate-set-speed" function (:arguments ("image" "value" "multiply")) nil [29251 29585])
            ("image-animate-timeout" function (:arguments ("image" "n" "count" "time-elapsed" "limit" "target-time")) nil [29794 31612])
            ("imagemagick-types-inhibit" variable nil nil [31616 31650])
            ("imagemagick-enabled-types" variable nil nil [31651 31685])
            ("imagemagick-filter-types" function nil nil [31687 32504])
            ("imagemagick--file-regexp" variable nil nil [32506 32723])
            ("imagemagick-register-types" function nil nil [32740 34232])
            ("imagemagick-types-inhibit" variable (:default-value (quote (C HTML HTM INFO M TXT PDF))) nil [34234 35096])
            ("imagemagick-enabled-types" variable (:default-value (quote (3FR ARW AVS BMP BMP2 BMP3 CAL CALS CMYK CMYKA CR2 CRW CUR CUT DCM DCR DCX DDS DJVU DNG DPX EXR FAX FITS GBR GIF GIF87 GRB HRZ ICB ICO ICON J2C JNG JP2 JPC JPEG JPG JPX K25 KDC MIFF MNG MRW MSL MSVG MTV NEF ORF OTB PBM PCD PCDS PCL PCT PCX PDB PEF PGM PICT PIX PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PSD PTIF PWP RAF RAS RBG RGB RGBA RGBO RLA RLE SCR SCT SFW SGI SR2 SRF SUN SVG SVGZ TGA TIFF TIFF64 TILE TIM TTF UYVY VDA VICAR VID VIFF VST WBMP WPG X3F XBM XC XCF XPM XV XWD YCbCr YCbCrA YUV))) nil [35098 36637])
            ("imagemagick-register-types" code nil nil [36685 36713])
            ("image-increase-size" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [36715 36990])
            ("image-decrease-size" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [36992 37268])
            ("image--get-image" function nil nil [37270 37441])
            ("image--get-imagemagick-and-warn" function nil nil [37443 37707])
            ("image--change-size" function (:arguments ("factor")) nil [37709 38003])
            ("image--image-without-parameters" function (:arguments ("image")) nil [38005 38345])
            ("image--current-scaling" function (:arguments ("image" "new-image")) nil [38347 38726])
            ("image-rotate" function (:user-visible-flag t) nil [38728 39204])
            ("image-save" function (:user-visible-flag t) nil [39206 39846])
            ("image" package nil nil [39848 39864]))          
      :file "image.el.gz"
      :pointmax 39889
      :fsize 12071
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1226 1242])
            ("ibuf-macs" include nil nil [1203 1223])
            ("cl-lib" include nil nil [1183 1200])
            ("font-core" include nil nil [1245 1265])
            ("seq" include nil nil [1266 1280])
            ("ibuffer-loaddefs" include nil nil [1282 1309])
            ("ibuffer-auto-mode" variable nil nil [1440 1466])
            ("ibuffer-cached-filter-formats" variable nil nil [1467 1505])
            ("ibuffer-compiled-filter-formats" variable nil nil [1506 1546])
            ("ibuffer-filter-format-alist" variable nil nil [1547 1583])
            ("ibuffer-filter-group-kill-ring" variable nil nil [1584 1623])
            ("ibuffer-filter-groups" variable nil nil [1624 1654])
            ("ibuffer-filtering-qualifiers" variable nil nil [1655 1692])
            ("ibuffer-header-line-format" variable nil nil [1693 1728])
            ("ibuffer-hidden-filter-groups" variable nil nil [1729 1766])
            ("ibuffer-inline-columns" variable nil nil [1767 1798])
            ("ibuffer-show-empty-filter-groups" variable nil nil [1799 1840])
            ("ibuffer-tmp-hide-regexps" variable nil nil [1841 1874])
            ("ibuffer-tmp-show-regexps" variable nil nil [1875 1908])
            ("declare-function" code nil nil [1910 1997])
            ("declare-function" code nil nil [1998 2105])
            ("declare-function" code nil nil [2106 2210])
            ("declare-function" code nil nil [2211 2282])
            ("ibuffer" customgroup (:user-visible-flag t) nil [2284 2551])
            ("ibuffer-formats" variable (:default-value (quote ((mark modified read-only locked " " (name 18 18 :left :elide) " " (size 9 -1 :right) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename)))) nil [2553 5746])
            ("ibuffer-always-compile-formats" variable (:default-value (featurep (quote bytecomp))) nil [5748 6008])
            ("ibuffer-fontification-alist" variable (:default-value (\` ((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (derived-mode-p (quote dired-mode)) font-lock-function-name-face) (40 (and (boundp (quote emacs-lock-mode)) emacs-lock-mode) ibuffer-locked-buffer)))) nil [6010 7191])
            ("ibuffer-use-other-window" variable nil nil [7193 7330])
            ("ibuffer-default-shrink-to-minimum-size" variable nil nil [7332 7489])
            ("ibuffer-shrink-to-minimum-size" variable nil nil [7490 7533])
            ("ibuffer-display-summary" variable (:default-value t) nil [7535 7650])
            ("ibuffer-truncate-lines" variable (:default-value t) nil [7652 7774])
            ("ibuffer-case-fold-search" variable (:default-value case-fold-search) nil [7776 7908])
            ("ibuffer-default-sorting-mode" variable (:default-value (quote recency)) nil [7910 8437])
            ("ibuffer-sorting-mode" variable nil nil [8438 8471])
            ("ibuffer-last-sorting-mode" variable nil nil [8472 8510])
            ("ibuffer-default-sorting-reversep" variable nil nil [8512 8646])
            ("ibuffer-sorting-reversep" variable nil nil [8647 8684])
            ("ibuffer-elide-long-columns" variable nil nil [8686 8836])
            ("make-obsolete-variable" code nil nil [8837 8992])
            ("ibuffer-eliding-string" variable (:default-value "...") nil [8994 9116])
            ("ibuffer-maybe-show-predicates" variable (:default-value (\` ((\, (lambda (buf) (and (string-match "^ " (buffer-name buf)) (null buffer-file-name))))))) nil [9118 9885])
            ("ibuffer-default-display-maybe-show-predicates" variable nil nil [9887 10058])
            ("ibuffer-display-maybe-show-predicates" variable nil nil [10060 10110])
            ("ibuffer-current-format" variable nil nil [10112 10147])
            ("ibuffer-movement-cycle" variable (:default-value t) nil [10149 10288])
            ("ibuffer-modified-char" variable (:default-value 42) nil [10290 10414])
            ("ibuffer-read-only-char" variable (:default-value 37) nil [10416 10542])
            ("ibuffer-marked-char" variable (:default-value 62) nil [10544 10664])
            ("ibuffer-locked-char" variable (:default-value 76) nil [10666 10804])
            ("ibuffer-deletion-char" variable (:default-value 68) nil [10806 10941])
            ("ibuffer-expert" variable nil nil [10943 11080])
            ("ibuffer-view-ibuffer" variable nil nil [11082 11364])
            ("ibuffer-always-show-last-buffer" variable nil nil [11366 11714])
            ("ibuffer-jump-offer-only-visible-buffers" variable nil nil [11716 11932])
            ("ibuffer-use-header-line" variable (:default-value (boundp (quote header-line-format))) nil [11934 12099])
            ("ibuffer-default-directory" variable nil nil [12101 12447])
            ("ibuffer-help-buffer-modes" variable (:default-value (quote (help-mode apropos-mode Info-mode Info-edit-mode))) nil [12449 12618])
            ("ibuffer-compressed-file-name-regexp" variable (:default-value "\\.\\(arj\\|bgz\\|bz2\\|gz\\|lzh\\|taz\\|tgz\\|xz\\|zip\\|z\\)$") nil [12620 12863])
            ("define-obsolete-variable-alias" code nil nil [12865 12933])
            ("ibuffer-hook" variable nil nil [12935 13034])
            ("define-obsolete-variable-alias" code nil nil [13036 13114])
            ("ibuffer-mode-hook" variable nil nil [13116 13258])
            ("ibuffer-load-hook" variable nil nil [13260 13362])
            ("ibuffer-marked-face" variable (:default-value (quote warning)) nil [13364 13481])
            ("ibuffer-deletion-face" variable (:default-value (quote error)) nil [13483 13613])
            ("ibuffer-title-face" variable (:default-value (quote font-lock-type-face)) nil [13615 13734])
            ("ibuffer-filter-group-name-face" variable (:default-value (quote bold)) nil [13736 13868])
            ("ibuffer-directory-abbrev-alist" variable nil nil [13870 14127])
            ("ibuffer-mode-groups-popup" variable (:default-value (let ((groups-map (make-sparse-keymap "Filter Groups"))) (define-key-after groups-map [filters-to-filter-group] (quote (menu-item "Create filter group from current filters..." ibuffer-filters-to-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after groups-map [forward-filter-group] (quote (menu-item "Move point to the next filter group" ibuffer-forward-filter-group))) (define-key-after groups-map [backward-filter-group] (quote (menu-item "Move point to the previous filter group" ibuffer-backward-filter-group))) (define-key-after groups-map [jump-to-filter-group] (quote (menu-item "Move point to a specific filter group..." ibuffer-jump-to-filter-group))) (define-key-after groups-map [kill-filter-group] (quote (menu-item "Kill filter group named..." ibuffer-kill-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [yank-filter-group] (quote (menu-item "Yank last killed filter group before..." ibuffer-yank-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-group-kill-ring)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Remove top filter group" ibuffer-pop-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [clear-filter-groups] (quote (menu-item "Remove all filter groups" ibuffer-clear-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Decompose filter group..." ibuffer-pop-filter-group :help "\"Unmake\" a filter group" :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [save-filter-groups] (quote (menu-item "Save current filter groups permanently..." ibuffer-save-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups) :help "Use a mnemonic name to store current filter groups"))) (define-key-after groups-map [switch-to-saved-filter-groups] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups) :help "Replace current filters with a saved stack"))) (define-key-after groups-map [delete-saved-filter-groups] (quote (menu-item "Delete permanently saved filter groups..." ibuffer-delete-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups)))) (define-key-after groups-map [set-filter-groups-by-mode] (quote (menu-item "Set current filter groups to filter by mode" ibuffer-set-filter-groups-by-mode))) groups-map)) nil [14129 17019])
            ("ibuffer-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map (kbd "0") (quote digit-argument)) (define-key map (kbd "1") (quote digit-argument)) (define-key map (kbd "2") (quote digit-argument)) (define-key map (kbd "3") (quote digit-argument)) (define-key map (kbd "4") (quote digit-argument)) (define-key map (kbd "5") (quote digit-argument)) (define-key map (kbd "6") (quote digit-argument)) (define-key map (kbd "7") (quote digit-argument)) (define-key map (kbd "8") (quote digit-argument)) (define-key map (kbd "9") (quote digit-argument)) (define-key map (kbd "m") (quote ibuffer-mark-forward)) (define-key map (kbd "t") (quote ibuffer-toggle-marks)) (define-key map (kbd "u") (quote ibuffer-unmark-forward)) (define-key map (kbd "=") (quote ibuffer-diff-with-file)) (define-key map (kbd "j") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-g") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-s a C-s") (quote ibuffer-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote ibuffer-do-isearch-regexp)) (define-key map (kbd "M-s a C-o") (quote ibuffer-do-occur)) (define-key map (kbd "DEL") (quote ibuffer-unmark-backward)) (define-key map (kbd "M-DEL") (quote ibuffer-unmark-all)) (define-key map (kbd "* *") (quote ibuffer-unmark-all)) (define-key map (kbd "* c") (quote ibuffer-change-marks)) (define-key map (kbd "U") (quote ibuffer-unmark-all-marks)) (define-key map (kbd "* M") (quote ibuffer-mark-by-mode)) (define-key map (kbd "* m") (quote ibuffer-mark-modified-buffers)) (define-key map (kbd "* u") (quote ibuffer-mark-unsaved-buffers)) (define-key map (kbd "* s") (quote ibuffer-mark-special-buffers)) (define-key map (kbd "* r") (quote ibuffer-mark-read-only-buffers)) (define-key map (kbd "* /") (quote ibuffer-mark-dired-buffers)) (define-key map (kbd "* e") (quote ibuffer-mark-dissociated-buffers)) (define-key map (kbd "* h") (quote ibuffer-mark-help-buffers)) (define-key map (kbd "* z") (quote ibuffer-mark-compressed-file-buffers)) (define-key map (kbd ".") (quote ibuffer-mark-old-buffers)) (define-key map (kbd "d") (quote ibuffer-mark-for-delete)) (define-key map (kbd "C-d") (quote ibuffer-mark-for-delete-backwards)) (define-key map (kbd "k") (quote ibuffer-mark-for-delete)) (define-key map (kbd "x") (quote ibuffer-do-kill-on-deletion-marks)) (define-key map (kbd "n") (quote ibuffer-forward-line)) (define-key map (kbd "SPC") (quote forward-line)) (define-key map (kbd "p") (quote ibuffer-backward-line)) (define-key map (kbd "M-}") (quote ibuffer-forward-next-marked)) (define-key map (kbd "M-{") (quote ibuffer-backwards-next-marked)) (define-key map (kbd "l") (quote ibuffer-redisplay)) (define-key map (kbd "g") (quote ibuffer-update)) (define-key map "`" (quote ibuffer-switch-format)) (define-key map "-" (quote ibuffer-add-to-tmp-hide)) (define-key map "+" (quote ibuffer-add-to-tmp-show)) (define-key map "b" (quote ibuffer-bury-buffer)) (define-key map (kbd ",") (quote ibuffer-toggle-sorting-mode)) (define-key map (kbd "s i") (quote ibuffer-invert-sorting)) (define-key map (kbd "s a") (quote ibuffer-do-sort-by-alphabetic)) (define-key map (kbd "s v") (quote ibuffer-do-sort-by-recency)) (define-key map (kbd "s s") (quote ibuffer-do-sort-by-size)) (define-key map (kbd "s f") (quote ibuffer-do-sort-by-filename/process)) (define-key map (kbd "s m") (quote ibuffer-do-sort-by-major-mode)) (define-key map (kbd "/ RET") (quote ibuffer-filter-by-mode)) (define-key map (kbd "/ m") (quote ibuffer-filter-by-used-mode)) (define-key map (kbd "/ M") (quote ibuffer-filter-by-derived-mode)) (define-key map (kbd "/ n") (quote ibuffer-filter-by-name)) (define-key map (kbd "/ *") (quote ibuffer-filter-by-starred-name)) (define-key map (kbd "/ f") (quote ibuffer-filter-by-filename)) (define-key map (kbd "/ b") (quote ibuffer-filter-by-basename)) (define-key map (kbd "/ .") (quote ibuffer-filter-by-file-extension)) (define-key map (kbd "/ <") (quote ibuffer-filter-by-size-lt)) (define-key map (kbd "/ >") (quote ibuffer-filter-by-size-gt)) (define-key map (kbd "/ i") (quote ibuffer-filter-by-modified)) (define-key map (kbd "/ v") (quote ibuffer-filter-by-visiting-file)) (define-key map (kbd "/ c") (quote ibuffer-filter-by-content)) (define-key map (kbd "/ e") (quote ibuffer-filter-by-predicate)) (define-key map (kbd "/ r") (quote ibuffer-switch-to-saved-filters)) (define-key map (kbd "/ a") (quote ibuffer-add-saved-filters)) (define-key map (kbd "/ x") (quote ibuffer-delete-saved-filters)) (define-key map (kbd "/ d") (quote ibuffer-decompose-filter)) (define-key map (kbd "/ s") (quote ibuffer-save-filters)) (define-key map (kbd "/ p") (quote ibuffer-pop-filter)) (define-key map (kbd "/ <up>") (quote ibuffer-pop-filter)) (define-key map (kbd "/ !") (quote ibuffer-negate-filter)) (define-key map (kbd "/ t") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ TAB") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ o") (quote ibuffer-or-filter)) (define-key map (kbd "/ |") (quote ibuffer-or-filter)) (define-key map (kbd "/ &") (quote ibuffer-and-filter)) (define-key map (kbd "/ g") (quote ibuffer-filters-to-filter-group)) (define-key map (kbd "/ P") (quote ibuffer-pop-filter-group)) (define-key map (kbd "/ S-<up>") (quote ibuffer-pop-filter-group)) (define-key map (kbd "/ D") (quote ibuffer-decompose-filter-group)) (define-key map (kbd "/ /") (quote ibuffer-filter-disable)) (define-key map (kbd "M-n") (quote ibuffer-forward-filter-group)) (define-key map "	" (quote ibuffer-forward-filter-group)) (define-key map (kbd "M-p") (quote ibuffer-backward-filter-group)) (define-key map [backtab] (quote ibuffer-backward-filter-group)) (define-key map (kbd "M-j") (quote ibuffer-jump-to-filter-group)) (define-key map (kbd "C-k") (quote ibuffer-kill-line)) (define-key map (kbd "C-y") (quote ibuffer-yank)) (define-key map (kbd "/ S") (quote ibuffer-save-filter-groups)) (define-key map (kbd "/ R") (quote ibuffer-switch-to-saved-filter-groups)) (define-key map (kbd "/ X") (quote ibuffer-delete-saved-filter-groups)) (define-key map (kbd "/ \\") (quote ibuffer-clear-filter-groups)) (define-key map (kbd "% n") (quote ibuffer-mark-by-name-regexp)) (define-key map (kbd "% m") (quote ibuffer-mark-by-mode-regexp)) (define-key map (kbd "% f") (quote ibuffer-mark-by-file-name-regexp)) (define-key map (kbd "% g") (quote ibuffer-mark-by-content-regexp)) (define-key map (kbd "% L") (quote ibuffer-mark-by-locked)) (define-key map (kbd "C-t") (quote ibuffer-visit-tags-table)) (define-key map (kbd "|") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "!") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "~") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "A") (quote ibuffer-do-view)) (define-key map (kbd "D") (quote ibuffer-do-delete)) (define-key map (kbd "E") (quote ibuffer-do-eval)) (define-key map (kbd "F") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "I") (quote ibuffer-do-query-replace-regexp)) (define-key map (kbd "H") (quote ibuffer-do-view-other-frame)) (define-key map (kbd "N") (quote ibuffer-do-shell-command-pipe-replace)) (define-key map (kbd "M") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "O") (quote ibuffer-do-occur)) (define-key map (kbd "P") (quote ibuffer-do-print)) (define-key map (kbd "Q") (quote ibuffer-do-query-replace)) (define-key map (kbd "R") (quote ibuffer-do-rename-uniquely)) (define-key map (kbd "S") (quote ibuffer-do-save)) (define-key map (kbd "T") (quote ibuffer-do-toggle-read-only)) (define-key map (kbd "L") (quote ibuffer-do-toggle-lock)) (define-key map (kbd "r") (quote ibuffer-do-replace-regexp)) (define-key map (kbd "V") (quote ibuffer-do-revert)) (define-key map (kbd "W") (quote ibuffer-do-view-and-eval)) (define-key map (kbd "X") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "k") (quote ibuffer-do-kill-lines)) (define-key map (kbd "w") (quote ibuffer-copy-filename-as-kill)) (define-key map (kbd "B") (quote ibuffer-copy-buffername-as-kill)) (define-key map (kbd "RET") (quote ibuffer-visit-buffer)) (define-key map (kbd "e") (quote ibuffer-visit-buffer)) (define-key map (kbd "f") (quote ibuffer-visit-buffer)) (define-key map (kbd "C-x C-f") (quote ibuffer-find-file)) (define-key map (kbd "o") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-o") (quote ibuffer-visit-buffer-other-window-noselect)) (define-key map (kbd "M-o") (quote ibuffer-visit-buffer-1-window)) (define-key map (kbd "v") (quote ibuffer-do-view)) (define-key map (kbd "C-x v") (quote ibuffer-do-view-horizontally)) (define-key map (kbd "C-c C-a") (quote ibuffer-auto-mode)) (define-key map (kbd "C-x 4 RET") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-x 5 RET") (quote ibuffer-visit-buffer-other-frame)) (define-key map [menu-bar view] (cons "View" (make-sparse-keymap "View"))) (define-key-after map [menu-bar view visit-buffer] (quote (menu-item "View this buffer" ibuffer-visit-buffer))) (define-key-after map [menu-bar view visit-buffer-other-window] (quote (menu-item "View (other window)" ibuffer-visit-buffer-other-window))) (define-key-after map [menu-bar view visit-buffer-other-frame] (quote (menu-item "View (other frame)" ibuffer-visit-buffer-other-frame))) (define-key-after map [menu-bar view ibuffer-update] (quote (menu-item "Update" ibuffer-update :help "Regenerate the list of buffers"))) (define-key-after map [menu-bar view switch-format] (quote (menu-item "Switch display format" ibuffer-switch-format :help "Toggle between available values of `ibuffer-formats'"))) (define-key-after map [menu-bar view dashes] (quote ("--"))) (define-key-after map [menu-bar view sort] (cons "Sort" (make-sparse-keymap "Sort"))) (define-key-after map [menu-bar view sort do-sort-by-major-mode] (quote (menu-item "Sort by major mode" ibuffer-do-sort-by-major-mode))) (define-key-after map [menu-bar view sort do-sort-by-size] (quote (menu-item "Sort by buffer size" ibuffer-do-sort-by-size))) (define-key-after map [menu-bar view sort do-sort-by-alphabetic] (quote (menu-item "Sort lexicographically" ibuffer-do-sort-by-alphabetic :help "Sort by the alphabetic order of buffer name"))) (define-key-after map [menu-bar view sort do-sort-by-recency] (quote (menu-item "Sort by view time" ibuffer-do-sort-by-recency :help "Sort by the last time the buffer was displayed"))) (define-key-after map [menu-bar view sort dashes] (quote ("--"))) (define-key-after map [menu-bar view sort invert-sorting] (quote (menu-item "Reverse sorting order" ibuffer-invert-sorting))) (define-key-after map [menu-bar view sort toggle-sorting-mode] (quote (menu-item "Switch sorting mode" ibuffer-toggle-sorting-mode :help "Switch between the various sorting criteria"))) (define-key-after map [menu-bar view filter] (cons "Filter" (make-sparse-keymap "Filter"))) (define-key-after map [menu-bar view filter filter-disable] (quote (menu-item "Disable all filtering" ibuffer-filter-disable :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter filter-by-mode] (quote (menu-item "Add filter by any major mode..." ibuffer-filter-by-mode))) (define-key-after map [menu-bar view filter filter-by-used-mode] (quote (menu-item "Add filter by a major mode in use..." ibuffer-filter-by-used-mode))) (define-key-after map [menu-bar view filter filter-by-derived-mode] (quote (menu-item "Add filter by derived mode..." ibuffer-filter-by-derived-mode))) (define-key-after map [menu-bar view filter filter-by-name] (quote (menu-item "Add filter by buffer name..." ibuffer-filter-by-name))) (define-key-after map [menu-bar view filter filter-by-starred-name] (quote (menu-item "Add filter by starred buffer name..." ibuffer-filter-by-starred-name :help "List buffers whose names begin with a star"))) (define-key-after map [menu-bar view filter filter-by-filename] (quote (menu-item "Add filter by full filename..." ibuffer-filter-by-filename :help (concat "For a buffer associated with file '/a/b/c.d', " "list buffer if a given pattern matches '/a/b/c.d'")))) (define-key-after map [menu-bar view filter filter-by-basename] (quote (menu-item "Add filter by file basename..." ibuffer-filter-by-basename :help (concat "For a buffer associated with file '/a/b/c.d', " "list buffer if a given pattern matches 'c.d'")))) (define-key-after map [menu-bar view filter filter-by-file-extension] (quote (menu-item "Add filter by file name extension..." ibuffer-filter-by-file-extension :help (concat "For a buffer associated with file '/a/b/c.d', " "list buffer if a given pattern matches 'd'")))) (define-key-after map [menu-bar view filter filter-by-directory] (quote (menu-item "Add filter by filename's directory..." ibuffer-filter-by-directory :help (concat "For a buffer associated with file '/a/b/c.d', " "list buffer if a given pattern matches '/a/b'")))) (define-key-after map [menu-bar view filter filter-by-size-lt] (quote (menu-item "Add filter by size less than..." ibuffer-filter-by-size-lt))) (define-key-after map [menu-bar view filter filter-by-size-gt] (quote (menu-item "Add filter by size greater than..." ibuffer-filter-by-size-gt))) (define-key-after map [menu-bar view filter filter-by-modified] (quote (menu-item "Add filter by modified buffer" ibuffer-filter-by-modified :help "List buffers that are marked as modified"))) (define-key-after map [menu-bar view filter filter-by-visiting-file] (quote (menu-item "Add filter by buffer visiting a file" ibuffer-filter-by-visiting-file :help "List buffers that are visiting files"))) (define-key-after map [menu-bar view filter filter-by-content] (quote (menu-item "Add filter by content (regexp)..." ibuffer-filter-by-content))) (define-key-after map [menu-bar view filter filter-by-predicate] (quote (menu-item "Add filter by Lisp predicate..." ibuffer-filter-by-predicate))) (define-key-after map [menu-bar view filter pop-filter] (quote (menu-item "Remove top filter" ibuffer-pop-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter and-filter] (quote (menu-item "AND top two filters" ibuffer-and-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers)) :help "Create a new filter which is the logical AND of the top two filters"))) (define-key-after map [menu-bar view filter or-filter] (quote (menu-item "OR top two filters" ibuffer-or-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers)) :help "Create a new filter which is the logical OR of the top two filters"))) (define-key-after map [menu-bar view filter negate-filter] (quote (menu-item "Negate top filter" ibuffer-negate-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter decompose-filter] (quote (menu-item "Decompose top filter" ibuffer-decompose-filter :enable (and (featurep (quote ibuf-ext)) (memq (car ibuffer-filtering-qualifiers) (quote (or saved not)))) :help "Break down a complex filter like OR or NOT"))) (define-key-after map [menu-bar view filter exchange-filters] (quote (menu-item "Swap top two filters" ibuffer-exchange-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers))))) (define-key-after map [menu-bar view filter save-filters] (quote (menu-item "Save current filters permanently..." ibuffer-save-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Use a mnemonic name to store current filter stack"))) (define-key-after map [menu-bar view filter switch-to-saved-filters] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters) :help "Replace current filters with a saved stack"))) (define-key-after map [menu-bar view filter add-saved-filters] (quote (menu-item "Add to permanently saved filters..." ibuffer-add-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Include already saved stack with current filters"))) (define-key-after map [menu-bar view filter delete-saved-filters] (quote (menu-item "Delete permanently saved filters..." ibuffer-delete-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters)))) (define-key-after map [menu-bar view filter-groups] (cons "Filter Groups" ibuffer-mode-groups-popup)) (define-key-after map [menu-bar view dashes2] (quote ("--"))) (define-key-after map [menu-bar view auto-mode] (quote (menu-item "Auto Mode" ibuffer-auto-mode :button (:toggle . ibuffer-auto-mode) :help "Attempt to automatically update the Ibuffer buffer"))) (define-key-after map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key-after map [menu-bar mark toggle-marks] (quote (menu-item "Toggle marks" ibuffer-toggle-marks :help "Unmark marked buffers, and mark unmarked buffers"))) (define-key-after map [menu-bar mark change-marks] (quote (menu-item "Change marks" ibuffer-change-marks :help "Change OLD mark for marked buffers with NEW"))) (define-key-after map [menu-bar mark mark-forward] (quote (menu-item "Mark" ibuffer-mark-forward :help "Mark the buffer at point"))) (define-key-after map [menu-bar mark unmark-forward] (quote (menu-item "Unmark" ibuffer-unmark-forward :help "Unmark the buffer at point"))) (define-key-after map [menu-bar mark mark-by-mode] (quote (menu-item "Mark by mode..." ibuffer-mark-by-mode :help "Mark all buffers in a particular major mode"))) (define-key-after map [menu-bar mark mark-modified-buffers] (quote (menu-item "Mark modified buffers" ibuffer-mark-modified-buffers :help "Mark all buffers which have been modified"))) (define-key-after map [menu-bar mark mark-unsaved-buffers] (quote (menu-item "Mark unsaved buffers" ibuffer-mark-unsaved-buffers :help "Mark all buffers which have a file and are modified"))) (define-key-after map [menu-bar mark mark-read-only-buffers] (quote (menu-item "Mark read-only buffers" ibuffer-mark-read-only-buffers :help "Mark all buffers which are read-only"))) (define-key-after map [menu-bar mark mark-special-buffers] (quote (menu-item "Mark special buffers" ibuffer-mark-special-buffers :help "Mark all buffers whose name begins with a *"))) (define-key-after map [menu-bar mark mark-dired-buffers] (quote (menu-item "Mark dired buffers" ibuffer-mark-dired-buffers :help "Mark buffers in dired-mode"))) (define-key-after map [menu-bar mark mark-dissociated-buffers] (quote (menu-item "Mark dissociated buffers" ibuffer-mark-dissociated-buffers :help "Mark buffers with a non-existent associated file"))) (define-key-after map [menu-bar mark mark-help-buffers] (quote (menu-item "Mark help buffers" ibuffer-mark-help-buffers :help "Mark buffers in help-mode"))) (define-key-after map [menu-bar mark mark-compressed-file-buffers] (quote (menu-item "Mark compressed file buffers" ibuffer-mark-compressed-file-buffers :help "Mark buffers which have a file that is compressed"))) (define-key-after map [menu-bar mark mark-old-buffers] (quote (menu-item "Mark old buffers" ibuffer-mark-old-buffers :help "Mark buffers which have not been viewed recently"))) (define-key-after map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" ibuffer-unmark-all))) (define-key-after map [menu-bar mark unmark-all-marks] (quote (menu-item "Unmark All buffers" ibuffer-unmark-all-marks))) (define-key-after map [menu-bar mark dashes] (quote ("--"))) (define-key-after map [menu-bar mark mark-by-name-regexp] (quote (menu-item "Mark by buffer name (regexp)..." ibuffer-mark-by-name-regexp :help "Mark buffers whose name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-mode-regexp] (quote (menu-item "Mark by major mode (regexp)..." ibuffer-mark-by-mode-regexp :help "Mark buffers whose major mode name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-file-name-regexp] (quote (menu-item "Mark by file name (regexp)..." ibuffer-mark-by-file-name-regexp :help "Mark buffers whose file name matches a regexp"))) (define-key-after map [menu-bar mark ibuffer-mark-by-content-regexp] (quote (menu-item "Mark by content (regexp)..." ibuffer-mark-by-content-regexp :help "Mark buffers whose content matches a regexp"))) (define-key-after map [menu-bar mark mark-by-locked] (quote (menu-item "Mark by locked buffers..." ibuffer-mark-by-locked :help "Mark all locked buffers"))) map)) nil [17021 38199])
            ("ibuffer-mode-operate-map" variable (:default-value (let ((operate-map (make-sparse-keymap "Operate"))) (define-key-after operate-map [do-view] (quote (menu-item "View" ibuffer-do-view))) (define-key-after operate-map [do-view-other-frame] (quote (menu-item "View (separate frame)" ibuffer-do-view-other-frame))) (define-key-after operate-map [do-save] (quote (menu-item "Save" ibuffer-do-save))) (define-key-after operate-map [do-replace-regexp] (quote (menu-item "Replace (regexp)..." ibuffer-do-replace-regexp :help "Replace text inside marked buffers"))) (define-key-after operate-map [do-query-replace] (quote (menu-item "Query Replace..." ibuffer-do-query-replace :help "Replace text in marked buffers, asking each time"))) (define-key-after operate-map [do-query-replace-regexp] (quote (menu-item "Query Replace (regexp)..." ibuffer-do-query-replace-regexp :help "Replace text in marked buffers by regexp, asking each time"))) (define-key-after operate-map [do-print] (quote (menu-item "Print" ibuffer-do-print))) (define-key-after operate-map [do-toggle-modified] (quote (menu-item "Toggle modification flag" ibuffer-do-toggle-modified))) (define-key-after operate-map [do-toggle-read-only] (quote (menu-item "Toggle read-only flag" ibuffer-do-toggle-read-only))) (define-key-after operate-map [do-toggle-lock] (quote (menu-item "Toggle lock flag" ibuffer-do-toggle-lock))) (define-key-after operate-map [do-revert] (quote (menu-item "Revert" ibuffer-do-revert :help "Revert marked buffers to their associated file"))) (define-key-after operate-map [do-rename-uniquely] (quote (menu-item "Rename Uniquely" ibuffer-do-rename-uniquely :help "Rename marked buffers to a new, unique name"))) (define-key-after operate-map [do-delete] (quote (menu-item "Kill" ibuffer-do-delete))) (define-key-after operate-map [do-occur] (quote (menu-item "List lines matching..." ibuffer-do-occur :help "View all lines in marked buffers matching a regexp"))) (define-key-after operate-map [do-shell-command-pipe] (quote (menu-item "Pipe to shell command..." ibuffer-do-shell-command-pipe :help "For each marked buffer, send its contents to a shell command"))) (define-key-after operate-map [do-shell-command-pipe-replace] (quote (menu-item "Pipe to shell command (replace)..." ibuffer-do-shell-command-pipe-replace :help "For each marked buffer, replace its contents with output of shell command"))) (define-key-after operate-map [do-shell-command-file] (quote (menu-item "Shell command on buffer's file..." ibuffer-do-shell-command-file :help "For each marked buffer, run a shell command with its file as argument"))) (define-key-after operate-map [do-eval] (quote (menu-item "Eval..." ibuffer-do-eval :help "Evaluate a Lisp form in each marked buffer"))) (define-key-after operate-map [do-view-and-eval] (quote (menu-item "Eval (viewing buffer)..." ibuffer-do-view-and-eval :help "Evaluate a Lisp form in each marked buffer while viewing it"))) (define-key-after operate-map [diff-with-file] (quote (menu-item "Diff with file" ibuffer-diff-with-file :help "View the differences between this buffer and its file"))) operate-map)) nil [38201 41473])
            ("define-key" code nil nil [41475 41663])
            ("define-key" code nil nil [41664 41868])
            ("ibuffer-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-visit-buffer)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [41870 42123])
            ("ibuffer-filename/process-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-filename/process)) map)) nil [42125 42284])
            ("ibuffer-mode-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-2)] (quote ibuffer-mouse-filter-by-mode)) (define-key map (kbd "RET") (quote ibuffer-interactive-filter-by-mode)) map)) nil [42286 42493])
            ("ibuffer-name-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-alphabetic)) map)) nil [42495 42636])
            ("ibuffer-size-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-size)) map)) nil [42638 42773])
            ("ibuffer-mode-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-major-mode)) map)) nil [42775 42916])
            ("ibuffer-mode-filter-group-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-toggle-filter-group)) (define-key map (kbd "RET") (quote ibuffer-toggle-filter-group)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [42918 43253])
            ("ibuffer-did-modification" variable nil nil [43255 43292])
            ("ibuffer-compiled-formats" variable nil nil [43294 43331])
            ("ibuffer-cached-formats" variable nil nil [43332 43367])
            ("ibuffer-cached-eliding-string" variable nil nil [43368 43410])
            ("ibuffer-cached-elide-long-columns" variable nil nil [43411 43455])
            ("ibuffer-sorting-functions-alist" variable nil nil [43457 43957])
            ("ibuffer-columnize-and-insert-list" function (:arguments ("list" "pad-width")) nil [43981 44668])
            ("ibuffer-current-mark" function nil nil [44670 44785])
            ("ibuffer-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [44787 45343])
            ("ibuffer-find-file" function
               (:user-visible-flag t
                :arguments ("file" "wildcards"))
                nil [45345 45768])
            ("ibuffer-mouse-visit-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [45770 45978])
            ("ibuffer-mouse-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [45980 46640])
            ("ibuffer-skip-properties" function (:arguments ("props" "direction")) nil [46642 46889])
            ("ibuffer-customize" function (:user-visible-flag t) nil [46891 47009])
            ("ibuffer-backward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [47011 47798])
            ("ibuffer-forward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [47800 48843])
            ("ibuffer-visit-buffer" function
               (:user-visible-flag t
                :arguments ("single"))
                nil [48845 49147])
            ("ibuffer-visit-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [49149 49503])
            ("ibuffer-visit-buffer-other-window-noselect" function (:user-visible-flag t) nil [49505 49688])
            ("ibuffer-visit-buffer-other-frame" function (:user-visible-flag t) nil [49690 49918])
            ("ibuffer-visit-buffer-1-window" function (:user-visible-flag t) nil [49920 50064])
            ("ibuffer-bury-buffer" function (:user-visible-flag t) nil [50066 50333])
            ("ibuffer-visit-tags-table" function (:user-visible-flag t) nil [50335 50611])
            ("ibuffer-do-view" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [50613 50985])
            ("ibuffer-do-view-horizontally" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [50987 51187])
            ("ibuffer-do-view-1" function (:arguments ("type")) nil [51189 52145])
            ("ibuffer-do-view-other-frame" function (:user-visible-flag t) nil [52147 52280])
            ("ibuffer-map-marked-lines" function (:arguments ("func")) nil [52282 52407])
            ("ibuffer-shrink-to-fit" function (:arguments ("owin")) nil [52409 52714])
            ("ibuffer-confirm-operation-on" function (:arguments ("operation" "names")) nil [52716 54357])
            ("ibuffer-map-lines-nomodify" function (:arguments ("function")) nil [54359 54505])
            ("ibuffer-buffer-names-with-mark" function (:arguments ("mark")) nil [54507 54804])
            ("ibuffer-marked-buffer-names" function nil nil [54806 54902])
            ("ibuffer-deletion-marked-buffer-names" function nil nil [54904 55011])
            ("ibuffer-count-marked-lines" function (:arguments ("all")) nil [55013 55255])
            ("ibuffer-count-deletion-lines" function nil nil [55257 55391])
            ("ibuffer-map-deletion-lines" function (:arguments ("func")) nil [55393 55488])
            ("ibuffer-assert-ibuffer-mode" function nil nil [55490 55576])
            ("ibuffer-buffer-file-name" function nil nil [55578 55937])
            ("define-ibuffer-op" code nil nil [55939 56361])
            ("define-ibuffer-op" code nil nil [56363 56568])
            ("define-ibuffer-op" code nil nil [56570 56973])
            ("define-ibuffer-op" code nil nil [56975 57344])
            ("define-ibuffer-op" code nil nil [57346 57580])
            ("define-ibuffer-op" code nil nil [57582 57864])
            ("ibuffer-unmark-all" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [57866 58331])
            ("ibuffer-unmark-all-marks" function (:user-visible-flag t) nil [58333 58524])
            ("ibuffer-toggle-marks" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [58526 59188])
            ("ibuffer-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [59190 59802])
            ("ibuffer-get-region-and-prefix" function nil nil [59804 59997])
            ("ibuffer-mark-forward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [59999 60283])
            ("ibuffer-unmark-forward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [60285 60557])
            ("ibuffer-unmark-backward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [60559 60829])
            ("ibuffer-mark-region-or-n-with-char" function (:arguments ("start" "end" "arg" "mark-char")) nil [60831 61139])
            ("ibuffer-mark-interactive" function (:arguments ("arg" "mark" "movement")) nil [61141 61787])
            ("ibuffer-set-mark" function (:arguments ("mark")) nil [61789 62008])
            ("ibuffer-set-mark-1" function (:arguments ("mark")) nil [62010 62218])
            ("ibuffer-mark-for-delete" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [62220 62522])
            ("ibuffer-mark-for-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [62524 62764])
            ("ibuffer-current-buffer" function (:arguments ("must-be-live")) nil [62766 63153])
            ("ibuffer-active-formats-name" function nil nil [63155 63486])
            ("ibuffer-current-formats" function (:arguments ("uncompiledp")) nil [63488 63832])
            ("ibuffer-current-format" function (:arguments ("uncompiledp")) nil [63834 64025])
            ("ibuffer-expand-format-entry" function (:arguments ("form")) nil [64027 64655])
            ("ibuffer-compile-make-eliding-form" function (:arguments ("strvar" "elide" "from-end-p")) nil [64657 65299])
            ("ibuffer-compile-make-substring-form" function (:arguments ("strvar" "maxvar" "from-end-p")) nil [65301 65578])
            ("ibuffer-compile-make-format-form" function (:arguments ("strvar" "widthform" "alignment")) nil [65580 66002])
            ("ibuffer-compile-format" function (:arguments ("format")) nil [66004 70904])
            ("ibuffer-recompile-formats" function (:user-visible-flag t) nil [70906 71353])
            ("ibuffer-clear-summary-columns" function (:arguments ("format")) nil [71355 71566])
            ("ibuffer-check-formats" function nil nil [71568 72732])
            ("ibuffer-inline-columns" variable nil nil [72734 72769])
            ("ibuffer-locked-buffer" variable
               (:user-visible-flag t
                :default-value (quote ((((background dark)) (:foreground "RosyBrown")) (t (:foreground "brown4"))))
                :type "face")
                nil [72771 73007])
            ("ibuffer-locked-buffer" variable (:default-value (quote ibuffer-locked-buffer)) nil [73008 73061])
            ("define-ibuffer-column" code nil nil [73063 73129])
            ("define-ibuffer-column" code nil nil [73131 73256])
            ("define-ibuffer-column" code nil nil [73258 73458])
            ("define-ibuffer-column" code nil nil [73460 73586])
            ("define-ibuffer-column" code nil nil [73588 74461])
            ("define-ibuffer-column" code nil nil [74463 74813])
            ("define-ibuffer-column" code nil nil [74815 75072])
            ("define-ibuffer-column" code nil nil [75074 75409])
            ("define-ibuffer-column" code nil nil [75411 75770])
            ("define-ibuffer-column" code nil nil [75772 76769])
            ("ibuffer-format-column" function (:arguments ("str" "width" "alignment")) nil [76771 77053])
            ("ibuffer-buffer-name-face" function (:arguments ("buf" "mark")) nil [77055 77454])
            ("ibuffer-insert-buffer-line" function (:arguments ("buffer" "mark" "format")) nil [77456 77750])
            ("ibuffer-redisplay-current" function nil nil [77860 78451])
            ("ibuffer-map-on-mark" function (:arguments ("mark" "func")) nil [78453 78595])
            ("ibuffer-map-lines" function (:arguments ("function" "nomodify" "group")) nil [78597 80812])
            ("ibuffer--near-buffers" function (:arguments ("n")) nil [80853 81122])
            ("ibuffer-get-marked-buffers" function nil nil [81124 81340])
            ("ibuffer-current-state-list" function (:arguments ("pos")) nil [81342 82103])
            ("ibuffer-current-buffers-with-marks" function (:arguments ("curbufs")) nil [82105 82373])
            ("ibuffer-buf-matches-predicates" function (:arguments ("buf" "predicates")) nil [82375 82615])
            ("ibuffer-filter-buffers" function (:arguments ("ibuffer-buf" "last" "bmarklist" "all")) nil [82617 83112])
            ("ibuffer-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [83114 83354])
            ("ibuffer-do-sort-by-recency" function (:user-visible-flag t) nil [83440 83757])
            ("ibuffer-update-format" function nil nil [83759 83939])
            ("ibuffer-switch-format" function (:user-visible-flag t) nil [83941 84334])
            ("ibuffer-update-title-and-summary" function (:arguments ("format")) nil [84336 87294])
            ("ibuffer-redisplay" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [87297 88011])
            ("ibuffer-update" function
               (:user-visible-flag t
                :arguments ("arg" "silent"))
                nil [88013 89618])
            ("ibuffer-sort-bufferlist" function (:arguments ("bmarklist")) nil [89620 90130])
            ("ibuffer-insert-filter-group" function (:arguments ("name" "display-name" "filter-string" "format" "bmarklist")) nil [90132 91034])
            ("ibuffer-redisplay-engine" function (:arguments ("bmarklist" "_ignore")) nil [91036 92635])
            ("ibuffer-list-buffers" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [92652 92938])
            ("ibuffer-other-window" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [92955 93253])
            ("ibuffer" function
               (:user-visible-flag t
                :arguments ("other-window-p" "name" "qualifiers" "noselect" "shrink" "filter-groups" "formats"))
                nil [93270 95305])
            ("ibuffer-jump" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [95322 95632])
            ("put" code nil nil [95634 95674])
            ("define-derived-mode" code nil nil [95675 109232])
            ("ibuffer" package nil nil [109234 109252])
            ("run-hooks" code nil nil [109254 109284]))          
      :file "ibuffer.el.gz"
      :pointmax 109311
      :fsize 25075
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax '((close-paren 1242 . 1243) (symbol 1163 . 1180) (open-paren 1162 . 1163)))
    (semanticdb-table "semanticdb-table"
      :file "ibuffer-loaddefs.el"
      :fsize 13025
      :lastmodtime '(24047 52239 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("recentf-list" variable nil nil [13515 13536])
            ("seq" include nil nil [13537 13551])
            ("ido-fractionp" function (:arguments ("n")) nil [13619 13718])
            ("ido" customgroup (:user-visible-flag t) nil [13720 14038])
            ("ido-mode" variable nil nil [14055 15087])
            ("ido-case-fold" variable (:default-value case-fold-search) nil [15089 15232])
            ("ido-ignore-buffers" variable (:default-value (quote ("\\` "))) nil [15234 15592])
            ("ido-ignore-files" variable (:default-value (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./"))) nil [15594 15980])
            ("ido-ignore-extensions" variable (:default-value t) nil [15982 16120])
            ("ido-show-dot-for-dired" variable nil nil [16122 16336])
            ("ido-file-extensions-order" variable nil nil [16338 16722])
            ("ido-ignore-directories" variable (:default-value (quote ("\\`CVS/" "\\`\\.\\./" "\\`\\./"))) nil [16724 16926])
            ("ido-ignore-directories-merge" variable nil nil [16928 17223])
            ("ido-default-file-method" variable (:default-value (quote raise-frame)) nil [17610 18639])
            ("ido-default-buffer-method" variable (:default-value (quote raise-frame)) nil [18641 19180])
            ("ido-enable-flex-matching" variable nil nil [19182 19467])
            ("ido-enable-regexp" variable nil nil [19470 19645])
            ("ido-enable-prefix" variable nil nil [19647 19959])
            ("ido-enable-dot-prefix" variable nil nil [19961 20193])
            ("ido-buffer-disable-smart-matches" variable (:default-value t) nil [20246 20580])
            ("ido-confirm-unique-completion" variable nil nil [20582 20856])
            ("ido-cannot-complete-command" variable (:default-value (quote ido-completion-help)) nil [20858 21184])
            ("ido-record-commands" variable (:default-value t) nil [21187 21373])
            ("ido-max-prospects" variable (:default-value 12) nil [21375 21686])
            ("ido-max-file-prompt-width" variable (:default-value 0.35) nil [21688 22111])
            ("ido-max-window-height" variable nil nil [22113 22446])
            ("ido-enable-last-directory-history" variable (:default-value t) nil [22448 22666])
            ("ido-max-work-directory-list" variable (:default-value 50) nil [22668 22936])
            ("ido-work-directory-list-ignore-regexps" variable nil nil [22938 23217])
            ("ido-use-filename-at-point" variable nil nil [23220 23601])
            ("ido-use-url-at-point" variable nil nil [23604 23778])
            ("ido-enable-tramp-completion" variable (:default-value t) nil [23781 24008])
            ("ido-record-ftp-work-directories" variable (:default-value t) nil [24010 24154])
            ("ido-merge-ftp-work-directories" variable nil nil [24156 24304])
            ("ido-cache-ftp-work-directory-time" variable (:default-value 1.0) nil [24306 24577])
            ("ido-slow-ftp-hosts" variable nil nil [24579 24860])
            ("ido-slow-ftp-host-regexps" variable nil nil [24862 25014])
            ("ido-unc-hosts-cache" variable (:default-value t) nil [25016 25098])
            ("ido-unc-hosts" variable nil nil [25100 25575])
            ("ido-downcase-unc-hosts" variable (:default-value t) nil [25577 25695])
            ("ido-ignore-unc-host-regexps" variable nil nil [25697 25881])
            ("ido-cache-unc-host-shares-time" variable (:default-value 8.0) nil [25883 26144])
            ("ido-max-work-file-list" variable (:default-value 10) nil [26146 26430])
            ("ido-work-directory-match-only" variable (:default-value t) nil [26432 26765])
            ("ido-auto-merge-work-directories-length" variable nil nil [26767 27137])
            ("ido-auto-merge-delay-time" variable (:default-value 0.7) nil [27139 27280])
            ("ido-auto-merge-inhibit-characters-regexp" variable (:default-value "[][*?~]") nil [27282 27515])
            ("ido-merged-indicator" variable (:default-value "^") nil [27517 27661])
            ("ido-max-dir-file-cache" variable (:default-value 100) nil [27663 28295])
            ("ido-max-directory-size" variable nil nil [28297 28682])
            ("ido-rotate-file-list-default" variable nil nil [28684 28840])
            ("ido-enter-matching-directory" variable (:default-value (quote only)) nil [28842 29474])
            ("ido-create-new-buffer" variable (:default-value (quote prompt)) nil [29476 29821])
            ("ido-setup-hook" variable nil nil [29823 30143])
            ("ido-separator" variable nil nil [30145 30296])
            ("make-obsolete-variable" code nil nil [30297 30391])
            ("ido-decorations" variable (:default-value (quote ("{" "}" " | " " | ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]"))) nil [30393 31538])
            ("ido-use-virtual-buffers" variable nil nil [31540 32659])
            ("ido-use-faces" variable (:default-value t) nil [32661 32824])
            ("ido-first-match" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [32826 32937])
            ("ido-only-match" variable
               (:default-value (quote ((((class color)) :foreground "ForestGreen") (t :slant italic)))
                :type "face")
                nil [32939 33106])
            ("ido-subdir" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "red1") (((class color)) :foreground "red") (t :underline t)))
                :type "face")
                nil [33108 33343])
            ("ido-virtual" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [33345 33493])
            ("ido-indicator" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "yellow1" :background "red1" :width condensed) (((class color)) :foreground "yellow" :background "red" :width condensed) (t :inverse-video t)))
                :type "face")
                nil [33495 33794])
            ("ido-incomplete-regexp" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [33796 33930])
            ("ido-make-file-list-hook" variable nil nil [33932 34208])
            ("ido-make-dir-list-hook" variable nil nil [34210 34497])
            ("ido-make-buffer-list-hook" variable nil nil [34499 34786])
            ("ido-rewrite-file-prompt-functions" variable nil nil [34788 35636])
            ("ido-rewrite-file-prompt-rules" variable nil nil [35638 36178])
            ("ido-completion-buffer" variable (:default-value "*Ido Completions*") nil [36180 36359])
            ("ido-completion-buffer-all-completions" variable nil nil [36361 36563])
            ("ido-all-frames" variable (:default-value (quote visible)) nil [36565 36927])
            ("ido-minibuffer-setup-hook" variable nil nil [36929 37439])
            ("ido-save-directory-list-file" variable (:default-value (locate-user-emacs-file "ido.last" ".ido.last")) nil [37441 37856])
            ("ido-read-file-name-as-directory-commands" variable (:default-value (quote nil)) nil [37858 38144])
            ("ido-read-file-name-non-ido" variable (:default-value (quote nil)) nil [38146 38414])
            ("ido-before-fallback-functions" variable (:default-value (quote nil)) nil [38416 38618])
            ("ido-common-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote ido-toggle-ignore)) (define-key map "" (quote ido-toggle-case)) (define-key map "" (quote ido-edit-input)) (define-key map "	" (quote ido-complete)) (define-key map " " (quote ido-complete-space)) (define-key map "
" (quote ido-select-text)) (define-key map "" (quote ido-exit-minibuffer)) (define-key map "" (quote ido-toggle-prefix)) (define-key map "" (quote ido-prev-match)) (define-key map "" (quote ido-next-match)) (define-key map [67108910] (quote ido-next-match)) (define-key map [67108908] (quote ido-prev-match)) (define-key map "" (quote ido-toggle-regexp)) (define-key map "" (quote ido-undo-merge-work-directory)) (define-key map [(control 32)] (quote ido-restrict-to-matches)) (define-key map [(meta 32)] (quote ido-take-first-match)) (define-key map [(control 64)] (quote ido-restrict-to-matches)) (define-key map [right] (quote ido-next-match)) (define-key map [left] (quote ido-prev-match)) (define-key map "?" (quote ido-completion-help)) (define-key map "" (quote ido-magic-backward-char)) (define-key map "" (quote ido-magic-forward-char)) (define-key map "" (quote ido-magic-delete-char)) map)) nil [38634 39911])
            ("ido-file-dir-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ido-common-completion-map) (define-key map "" (quote ido-enter-switch-buffer)) (define-key map "" (quote ido-fallback-command)) (define-key map "" (quote ido-enter-dired)) (define-key map [down] (quote ido-next-match-dir)) (define-key map [up] (quote ido-prev-match-dir)) (define-key map [(meta up)] (quote ido-prev-work-directory)) (define-key map [(meta down)] (quote ido-next-work-directory)) (define-key map [backspace] (quote ido-delete-backward-updir)) (define-key map "" (quote ido-delete-backward-updir)) (define-key map [remap delete-backward-char] (quote ido-delete-backward-updir)) (define-key map [remap backward-kill-word] (quote ido-delete-backward-word-updir)) (define-key map [(control backspace)] (quote ido-up-directory)) (define-key map "" (quote ido-reread-directory)) (define-key map [(meta 100)] (quote ido-wide-find-dir-or-delete-dir)) (define-key map [(meta 98)] (quote ido-push-dir)) (define-key map [(meta 118)] (quote ido-push-dir-first)) (define-key map [(meta 102)] (quote ido-wide-find-file-or-pop-dir)) (define-key map [(meta 107)] (quote ido-forget-work-directory)) (define-key map [(meta 109)] (quote ido-make-directory)) (define-key map [(meta 110)] (quote ido-next-work-directory)) (define-key map [(meta 111)] (quote ido-prev-work-file)) (define-key map [(meta control 111)] (quote ido-next-work-file)) (define-key map [(meta 112)] (quote ido-prev-work-directory)) (define-key map [(meta 115)] (quote ido-merge-work-directories)) map)) nil [39913 41506])
            ("ido-file-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ido-file-dir-completion-map) (define-key map "" (quote ido-delete-file-at-head)) (define-key map "" (quote ido-copy-current-word)) (define-key map "" (quote ido-copy-current-file-name)) (define-key map [(meta 108)] (quote ido-toggle-literal)) map)) nil [41508 41888])
            ("ido-buffer-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map ido-common-completion-map) (define-key map "" (quote ido-enter-find-file)) (define-key map "" (quote ido-fallback-command)) (define-key map "" (quote ido-kill-buffer-at-head)) (define-key map [33554434] (quote ido-bury-buffer-at-head)) (define-key map "" (quote ido-toggle-virtual-buffers)) map)) nil [41890 42332])
            ("ido-file-history" variable nil nil [42361 42444])
            ("ido-buffer-history" variable nil nil [42446 42537])
            ("ido-last-directory-list" variable nil nil [42539 42671])
            ("ido-work-directory-list" variable nil nil [42673 42872])
            ("ido-work-file-list" variable nil nil [42874 43095])
            ("ido-dir-file-cache" variable nil nil [43097 43240])
            ("ido-ignore-item-temp-list" variable nil nil [43242 43433])
            ("ido-completion-map" variable nil nil [43459 43536])
            ("ido-eoinput" variable (:default-value 1) nil [43538 43659])
            ("make-variable-buffer-local" code nil nil [43660 43701])
            ("ido-common-match-string" variable nil nil [43703 43800])
            ("ido-rescan" variable nil nil [43802 43893])
            ("ido-rotate" variable nil nil [43895 43969])
            ("ido-text" variable nil nil [43971 44040])
            ("ido-text-init" variable nil nil [44042 44129])
            ("ido-input-stack" variable nil nil [44131 44213])
            ("ido-matches" variable nil nil [44215 44288])
            ("ido-report-no-match" variable (:default-value t) nil [44290 44386])
            ("ido-exit" variable nil nil [44388 44533])
            ("ido-current-directory" variable nil nil [44535 44612])
            ("ido-auto-merge-timer" variable nil nil [44614 44679])
            ("ido-use-mycompletion-depth" variable nil nil [44681 44882])
            ("ido-incomplete-regexp" variable nil nil [44884 44966])
            ("ido-initial-position" variable nil nil [44968 45129])
            ("ido-virtual-buffers" variable nil nil [45131 45341])
            ("ido-cur-item" variable nil nil [45513 45534])
            ("ido-default-item" variable nil nil [45572 45597])
            ("ido-cur-list" variable nil nil [45869 45890])
            ("ido-choice-list" variable nil nil [45942 45966])
            ("ido-ignored-list" variable nil nil [46076 46101])
            ("ido-directory-nonreadable" variable nil nil [46182 46216])
            ("ido-directory-too-big" variable nil nil [46298 46328])
            ("ido-keep-item-list" variable nil nil [46368 46395])
            ("ido-process-ignore-lists" variable nil nil [46428 46461])
            ("ido-process-ignore-lists-inhibit" variable nil nil [46504 46545])
            ("ido-enable-virtual-buffers" variable nil nil [46580 46615])
            ("ido-entry-buffer" variable nil nil [46655 46680])
            ("ido-require-match" variable nil nil [46728 46754])
            ("ido-show-confirm-message" variable nil nil [46804 46837])
            ("ido-temp-list" variable nil nil [46901 46923])
            ("ido-rotate-temp" variable nil nil [46990 47014])
            ("ido-work-directory-index" variable nil nil [47068 47101])
            ("ido-work-file-index" variable nil nil [47150 47178])
            ("ido-use-merged-list" variable nil nil [47230 47258])
            ("ido-try-merged-list" variable nil nil [47314 47342])
            ("ido-pre-merge-state" variable nil nil [47460 47488])
            ("ido-saved-vc-hb" variable nil nil [47557 47581])
            ("ido-find-literal" variable nil nil [47631 47656])
            ("ido-context-switch-command" variable nil nil [47730 47765])
            ("ido-completing-read" variable nil nil [47810 47838])
            ("ido-fallback" variable nil nil [47918 47943])
            ("ido-active" function (:arguments ("merge")) nil [47960 48157])
            ("ido-trace-enable" variable nil nil [48159 48188])
            ("ido-trace" function (:arguments ("p" "s" "retval")) nil [48190 48476])
            ("ido-toggle-trace" function (:arguments ("arg")) nil [48478 48790])
            ("ido-local-file-exists-p" function (:arguments ("file")) nil [48792 48922])
            ("ido-unc-hosts" function (:arguments ("query")) nil [48924 50006])
            ("ido-unc-hosts-net-view" function nil nil [50008 50332])
            ("ido-is-tramp-root" function (:arguments ("dir")) nil [50334 50490])
            ("ido-is-unc-root" function (:arguments ("dir")) nil [50492 50620])
            ("ido-is-unc-host" function (:arguments ("dir")) nil [50622 50762])
            ("ido-is-root-directory" function (:arguments ("dir")) nil [50764 51091])
            ("ido-is-ftp-directory" function (:arguments ("dir")) nil [51093 51361])
            ("ido-is-slow-ftp-host" function (:arguments ("dir")) nil [51363 51983])
            ("ido-time-stamp" function (:arguments ("time")) nil [51985 52112])
            ("ido-cache-ftp-valid" function (:arguments ("time")) nil [52114 52348])
            ("ido-cache-unc-valid" function (:arguments ("time")) nil [52350 52575])
            ("ido-may-cache-directory" function (:arguments ("dir")) nil [52577 52968])
            ("ido-pp" function (:arguments ("list" "sep")) nil [52970 53497])
            ("ido-save-history" function (:user-visible-flag t) nil [53499 54269])
            ("ido-load-history" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54271 55134])
            ("ido-wash-history" function (:user-visible-flag t) nil [55136 58265])
            ("ido-kill-emacs-hook" function nil nil [58268 58344])
            ("ido-common-initialization" function nil nil [58346 58519])
            ("define-minor-mode" code nil nil [58521 59080])
            ("ido-minor-mode-map-entry" variable nil nil [59082 59119])
            ("ido-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [59136 62073])
            ("defalias" code nil nil [62092 62139])
            ("make-obsolete" code nil nil [62140 62207])
            ("ido-setup-completion-map" function nil nil [62209 63762])
            ("ido-final-slash" function (:arguments ("dir" "fix-it")) nil [63764 64061])
            ("ido-no-final-slash" function (:arguments ("s")) nil [64063 64239])
            ("ido-nonreadable-directory-p" function (:arguments ("dir")) nil [64241 64652])
            ("ido-directory-too-big-p" function (:arguments ("dir")) nil [64654 65144])
            ("ido-set-current-directory" function (:arguments ("dir" "subdir" "no-merge")) nil [65146 66346])
            ("ido-set-current-home" function (:arguments ("dir")) nil [66348 66513])
            ("ido-record-command" function (:arguments ("command" "arg")) nil [66515 66884])
            ("ido-make-prompt" function (:arguments ("item" "prompt")) nil [66886 68224])
            ("ido-read-internal" function (:arguments ("item" "prompt" "hist" "default" "require-match" "initial")) nil [69838 81101])
            ("ido-edit-input" function (:user-visible-flag t) nil [81103 81452])
            ("ido-buffer-internal" function (:arguments ("method" "fallback" "prompt" "default" "initial" "switch-cmd")) nil [81473 84318])
            ("ido-record-work-directory" function (:arguments ("dir")) nil [84320 84985])
            ("ido-forget-work-directory" function nil nil [84987 85419])
            ("ido-record-work-file" function (:arguments ("name")) nil [85421 85857])
            ("ido-expand-directory" function (:arguments ("dir")) nil [85859 86088])
            ("ido-file-internal" function (:arguments ("method" "fallback" "default" "prompt" "item" "initial" "switch-cmd")) nil [86090 92928])
            ("ido-existing-item-p" function nil nil [92930 93035])
            ("ido-set-common-completion" function nil nil [93058 93527])
            ("ido-complete" function (:user-visible-flag t) nil [93529 95620])
            ("ido-complete-space" function (:user-visible-flag t) nil [95622 96255])
            ("ido-undo-merge-work-directory" function
               (:user-visible-flag t
                :arguments ("text" "try" "refresh"))
                nil [96257 97118])
            ("ido-magic-forward-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97135 97837])
            ("ido-magic-backward-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97854 98713])
            ("ido-magic-delete-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98730 99170])
            ("ido-toggle-case" function (:user-visible-flag t) nil [99195 99380])
            ("ido-toggle-regexp" function (:user-visible-flag t) nil [99382 99581])
            ("ido-toggle-prefix" function (:user-visible-flag t) nil [99583 99782])
            ("ido-toggle-ignore" function (:user-visible-flag t) nil [99784 100259])
            ("ido-toggle-vc" function (:user-visible-flag t) nil [100261 100556])
            ("ido-toggle-literal" function (:user-visible-flag t) nil [100558 100825])
            ("ido-toggle-virtual-buffers" function (:user-visible-flag t) nil [100827 101269])
            ("ido-reread-directory" function (:user-visible-flag t) nil [101271 101752])
            ("ido-exit-minibuffer" function (:user-visible-flag t) nil [101754 102223])
            ("ido-select-text" function (:user-visible-flag t) nil [102225 102449])
            ("ido-fallback-command" function
               (:user-visible-flag t
                :arguments ("fallback-command"))
                nil [102451 102853])
            ("ido-enter-find-file" function (:user-visible-flag t) nil [102855 102999])
            ("ido-enter-switch-buffer" function (:user-visible-flag t) nil [103001 103162])
            ("ido-enter-dired" function (:user-visible-flag t) nil [103164 103294])
            ("ido-enter-insert-buffer" function (:user-visible-flag t) nil [103296 103447])
            ("ido-enter-insert-file" function (:user-visible-flag t) nil [103449 103596])
            ("ido-up-directory" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [103599 103811])
            ("ido-delete-backward-updir" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [103813 104464])
            ("ido-delete-backward-word-updir" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [104466 104880])
            ("ido-get-work-directory" function (:arguments ("incr" "must-match")) nil [104882 105683])
            ("ido-prev-work-directory" function (:user-visible-flag t) nil [105685 106029])
            ("ido-next-work-directory" function (:user-visible-flag t) nil [106031 106380])
            ("ido-merge-work-directories" function (:user-visible-flag t) nil [106382 106679])
            ("ido-wide-find-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [106681 107216])
            ("ido-wide-find-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [107218 107771])
            ("ido-wide-find-dir-or-delete-dir" function
               (:user-visible-flag t
                :arguments ("_dir"))
                nil [107773 108078])
            ("ido-take-first-match" function (:user-visible-flag t) nil [108080 108296])
            ("ido-push-dir" function (:user-visible-flag t) nil [108298 108455])
            ("ido-push-dir-first" function (:user-visible-flag t) nil [108457 108688])
            ("ido-pop-dir" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [108690 108922])
            ("ido-wide-find-file-or-pop-dir" function (:arguments ("arg")) nil [108924 109059])
            ("ido-make-directory" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [109061 109620])
            ("ido-get-work-file" function (:arguments ("incr")) nil [109622 109902])
            ("ido-prev-work-file" function (:user-visible-flag t) nil [109904 110137])
            ("ido-next-work-file" function (:user-visible-flag t) nil [110139 110377])
            ("ido-copy-current-file-name" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [110379 111034])
            ("ido-copy-current-word" function
               (:user-visible-flag t
                :arguments ("_all"))
                nil [111036 112170])
            ("ido-next-match" function (:user-visible-flag t) nil [112172 112456])
            ("ido-prev-match" function (:user-visible-flag t) nil [112458 112749])
            ("ido-next-match-dir" function (:user-visible-flag t) nil [112751 113364])
            ("ido-prev-match-dir" function (:user-visible-flag t) nil [113366 113994])
            ("ido-restrict-to-matches" function
               (:user-visible-flag t
                :arguments ("removep"))
                nil [113996 114636])
            ("ido-chop" function (:arguments ("items" "elem")) nil [114638 114997])
            ("ido-name" function (:arguments ("item")) nil [114999 115161])
            ("ido-all-completions" function nil nil [115202 115651])
            ("ido-file-lessp" function (:arguments ("a" "b")) nil [115676 115803])
            ("ido-file-extension-lessp" function (:arguments ("a" "b")) nil [115806 116319])
            ("ido-file-extension-aux" function (:arguments ("a" "b" "n" "lessp")) nil [116321 116636])
            ("ido-file-extension-order" function (:arguments ("s" "n")) nil [116638 116959])
            ("ido-sort-merged-list" function (:arguments ("items" "promote")) nil [116962 117545])
            ("ido-wide-find-dirs-or-files" function (:arguments ("dir" "file" "prefix" "finddir")) nil [117547 118698])
            ("ido-flatten-merged-list" function (:arguments ("items")) nil [118700 119045])
            ("ido-make-merged-file-list-1" function (:arguments ("text" "auto" "wide")) nil [119048 121200])
            ("ido-make-merged-file-list" function (:arguments ("text" "auto" "wide")) nil [121202 121916])
            ("ido-make-buffer-list-1" function (:arguments ("frame" "visible")) nil [121918 122210])
            ("ido-make-buffer-list" function (:arguments ("default")) nil [122212 123109])
            ("ido-add-virtual-buffers-to-list" function nil nil [123111 124727])
            ("ido-make-choice-list" function (:arguments ("default")) nil [124729 125151])
            ("ido-to-end" function (:arguments ("items")) nil [125153 125418])
            ("ido-file-name-all-completions-1" function (:arguments ("dir")) nil [125420 126642])
            ("ido-file-name-all-completions" function (:arguments ("dir")) nil [126644 128335])
            ("ido-remove-cached-dir" function (:arguments ("dir")) nil [128337 128614])
            ("ido-make-file-list-1" function (:arguments ("dir" "merged")) nil [128617 129046])
            ("ido-make-file-list" function (:arguments ("default")) nil [129048 130774])
            ("ido-make-dir-list-1" function (:arguments ("dir" "merged")) nil [130776 131212])
            ("ido-make-dir-list" function (:arguments ("default")) nil [131214 132391])
            ("ido-bufs-in-frame" variable nil nil [132444 132470])
            ("ido-get-buffers-in-frames" function (:arguments ("current")) nil [132472 132886])
            ("ido-get-bufname" function (:arguments ("win")) nil [132888 133326])
            ("ido-set-matches-1" function (:arguments ("items" "do-full")) nil [133353 136801])
            ("ido-set-matches" function nil nil [136804 137011])
            ("ido-ignore-item-p" function (:arguments ("name" "re-list" "ignore-ext")) nil [137013 138203])
            ("ido-change-word-sub" variable nil nil [138264 138292])
            ("ido-find-common-substring" function (:arguments ("items" "subs")) nil [138294 138973])
            ("ido-word-matching-substring" function (:arguments ("word")) nil [138975 139348])
            ("ido-makealist" function (:arguments ("res")) nil [139350 139426])
            ("ido-choose-completion-string" function (:arguments ("choice" "ignored")) nil [139428 140046])
            ("ido-completion-help" function (:user-visible-flag t) nil [140048 142085])
            ("ido-kill-buffer-at-head" function (:user-visible-flag t) nil [142111 143333])
            ("ido-bury-buffer-at-head" function (:user-visible-flag t) nil [143359 143761])
            ("ido-delete-file-at-head" function (:user-visible-flag t) nil [143787 144704])
            ("ido-visit-buffer" function (:arguments ("buffer" "method" "record")) nil [144731 146032])
            ("ido-buffer-window-other-frame" function (:arguments ("buffer")) nil [146035 146457])
            ("ido-switch-buffer" function (:user-visible-flag t) nil [146524 148284])
            ("ido-switch-buffer-other-window" function (:user-visible-flag t) nil [148301 148605])
            ("ido-display-buffer" function (:user-visible-flag t) nil [148622 148914])
            ("ido-display-buffer-other-frame" function (:user-visible-flag t) nil [148931 149274])
            ("ido-kill-buffer" function (:user-visible-flag t) nil [149291 149581])
            ("ido-insert-buffer" function (:user-visible-flag t) nil [149598 149928])
            ("ido-switch-buffer-other-frame" function (:user-visible-flag t) nil [149945 150290])
            ("ido-find-file-in-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [150307 150528])
            ("ido-find-file" function (:user-visible-flag t) nil [150545 153104])
            ("ido-find-file-other-window" function (:user-visible-flag t) nil [153121 153404])
            ("ido-find-alternate-file" function (:user-visible-flag t) nil [153421 153728])
            ("ido-find-alternate-file-other-window" function (:user-visible-flag t) nil [153745 154064])
            ("ido-find-file-read-only" function (:user-visible-flag t) nil [154081 154384])
            ("ido-find-file-read-only-other-window" function (:user-visible-flag t) nil [154401 154766])
            ("ido-find-file-read-only-other-frame" function (:user-visible-flag t) nil [154783 155144])
            ("ido-display-file" function (:user-visible-flag t) nil [155161 155433])
            ("ido-find-file-other-frame" function (:user-visible-flag t) nil [155450 155729])
            ("ido-write-file" function (:user-visible-flag t) nil [155746 156250])
            ("ido-insert-file" function (:user-visible-flag t) nil [156267 156564])
            ("ido-dired" function (:user-visible-flag t) nil [156581 156897])
            ("ido-dired-other-window" function (:user-visible-flag t) nil [156914 157338])
            ("ido-dired-other-frame" function (:user-visible-flag t) nil [157355 157768])
            ("ido-list-directory" function (:user-visible-flag t) nil [157770 158131])
            ("ido-initiate-auto-merge" function (:arguments ("buffer")) nil [158670 159196])
            ("ido-exhibit" function nil nil [159198 167066])
            ("ido-completions" function (:arguments ("name")) nil [167068 170511])
            ("ido-minibuffer-setup" function nil nil [170513 171015])
            ("ido-tidy" function nil nil [171017 171757])
            ("ido-summary-buffers-to-end" function nil nil [171759 172257])
            ("put" code nil nil [172300 172340])
            ("put" code nil nil [172341 172363])
            ("put" code nil nil [172364 172399])
            ("put" code nil nil [172400 172434])
            ("put" code nil nil [172485 172518])
            ("put" code nil nil [172519 172554])
            ("ido-read-buffer" function (:arguments ("prompt" "default" "require-match" "predicate")) nil [172571 173369])
            ("ido-read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [173386 175812])
            ("ido-read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [175829 177122])
            ("ido-completing-read" function (:arguments ("prompt" "choices" "_predicate" "require-match" "initial-input" "hist" "def" "_inherit-input-method")) nil [177139 178447])
            ("ido-unload-function" function nil nil [178449 178641])
            ("ido" package nil nil [178643 178657]))          
      :file "ido.el.gz"
      :pointmax 178680
      :fsize 43176
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [5772 5788])
            ("format-spec" include nil nil [5789 5811])
            ("image-mode" include nil nil [5812 5833])
            ("widget" include nil nil [5834 5851])
            ("wid-edit" include nil nil [5894 5913])
            ("cl-lib" include nil nil [5874 5891])
            ("image-dired" customgroup (:user-visible-flag t) nil [5916 6092])
            ("image-dired-dir" variable (:default-value (locate-user-emacs-file "image-dired/")) nil [6094 6251])
            ("image-dired-thumbnail-storage" variable (:default-value (quote use-image-dired-dir)) nil [6253 7265])
            ("image-dired-db-file" variable (:default-value (expand-file-name ".image-dired_db" image-dired-dir)) nil [7267 7462])
            ("image-dired-temp-image-file" variable (:default-value (expand-file-name ".image-dired_temp" image-dired-dir)) nil [7464 7655])
            ("image-dired-gallery-dir" variable (:default-value (expand-file-name ".image-dired_gallery" image-dired-dir)) nil [7657 7961])
            ("image-dired-gallery-image-root-url" variable (:default-value "http://your.own.server/image-diredpics") nil [7963 8258])
            ("image-dired-gallery-thumb-image-root-url" variable (:default-value "http://your.own.server/image-diredthumbs") nil [8260 8563])
            ("image-dired-cmd-create-thumbnail-program" variable (:default-value "convert") nil [8565 8769])
            ("image-dired-cmd-create-thumbnail-options" variable (:default-value (quote ("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))) nil [8771 9343])
            ("image-dired-cmd-create-temp-image-program" variable (:default-value "convert") nil [9345 9555])
            ("image-dired-cmd-create-temp-image-options" variable (:default-value (quote ("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))) nil [9557 10162])
            ("image-dired-cmd-pngnq-program" variable (:default-value (or (executable-find "pngnq") (executable-find "pngnq-s9"))) nil [10164 10497])
            ("image-dired-cmd-pngnq-options" variable (:default-value (quote ("-f" "%t"))) nil [10499 10784])
            ("image-dired-cmd-pngcrush-program" variable (:default-value (executable-find "pngcrush")) nil [10786 11119])
            ("image-dired-cmd-pngcrush-options" variable (:default-value (\` ("-q" "-text" "b" "Description" "Thumbnail of file://%f" "-text" "b" "Software" (\, (emacs-version)) "-text" "b" "Thumb::MTime" "%m" "-text" "b" "Thumb::URI" "file://%f" "%q" "%t"))) nil [11121 11855])
            ("image-dired-cmd-optipng-program" variable (:default-value (executable-find "optipng")) nil [11857 12062])
            ("image-dired-cmd-optipng-options" variable (:default-value (quote ("-o5" "%t"))) nil [12064 12385])
            ("image-dired-cmd-create-standard-thumbnail-options" variable (:default-value (append (quote ("-size" "%wx%h" "%f[0]")) (unless (or image-dired-cmd-pngcrush-program image-dired-cmd-pngnq-program) (list "-set" "Thumb::MTime" "%m" "-set" "Thumb::URI" "file://%f" "-set" "Description" "Thumbnail of file://%f" "-set" "Software" (emacs-version))) (quote ("-thumbnail" "%wx%h>" "png:%t")))) nil [12387 13141])
            ("image-dired-cmd-rotate-thumbnail-program" variable (:default-value "mogrify") nil [13143 13347])
            ("image-dired-cmd-rotate-thumbnail-options" variable (:default-value (quote ("-rotate" "%d" "%t"))) nil [13349 13845])
            ("image-dired-cmd-rotate-original-program" variable (:default-value "jpegtran") nil [13847 14055])
            ("image-dired-cmd-rotate-original-options" variable (:default-value (quote ("-rotate" "%d" "-copy" "all" "-outfile" "%t" "%o"))) nil [14057 14631])
            ("image-dired-temp-rotate-image-file" variable (:default-value (expand-file-name ".image-dired_rotate_temp" image-dired-dir)) nil [14633 14821])
            ("image-dired-rotate-original-ask-before-overwrite" variable (:default-value t) nil [14823 15105])
            ("image-dired-cmd-write-exif-data-program" variable (:default-value "exiftool") nil [15107 15315])
            ("image-dired-cmd-write-exif-data-options" variable (:default-value (quote ("-%t=%v" "%f"))) nil [15317 15731])
            ("image-dired-cmd-read-exif-data-program" variable (:default-value "exiftool") nil [15733 15938])
            ("image-dired-cmd-read-exif-data-options" variable (:default-value (quote ("-s" "-s" "-s" "-%t" "%f"))) nil [15940 16324])
            ("image-dired-gallery-hidden-tags" variable (:default-value (list "private" "hidden" "pending")) nil [16326 16554])
            ("image-dired-thumb-size" variable (:default-value (cond ((eq (quote standard) image-dired-thumbnail-storage) 128) ((eq (quote standard-large) image-dired-thumbnail-storage) 256) (t 100))) nil [16556 16890])
            ("image-dired-thumb-width" variable (:default-value image-dired-thumb-size) nil [16892 17025])
            ("image-dired-thumb-height" variable (:default-value image-dired-thumb-size) nil [17027 17162])
            ("image-dired-thumb-relief" variable (:default-value 2) nil [17164 17291])
            ("image-dired-thumb-margin" variable (:default-value 2) nil [17293 17446])
            ("image-dired-line-up-method" variable (:default-value (quote dynamic)) nil [17448 18125])
            ("image-dired-thumbs-per-row" variable (:default-value 3) nil [18127 18267])
            ("image-dired-display-window-width-correction" variable (:default-value 1) nil [18269 18511])
            ("image-dired-display-window-height-correction" variable nil nil [18513 18757])
            ("image-dired-track-movement" variable (:default-value t) nil [18759 18979])
            ("image-dired-append-when-browsing" variable nil nil [18981 19537])
            ("image-dired-dired-disp-props" variable (:default-value t) nil [19539 19920])
            ("image-dired-display-properties-format" variable (:default-value "%b: %f (%t): %c") nil [19922 20230])
            ("image-dired-external-viewer" variable (:default-value (cond ((executable-find "display")) ((executable-find "xli")) ((executable-find "qiv") "qiv -t"))) nil [20232 20636])
            ("image-dired-main-image-directory" variable (:default-value "~/pics/") nil [20638 20820])
            ("image-dired-show-all-from-dir-max-files" variable (:default-value 50) nil [20822 21014])
            ("image-dired--with-db-file" function (:arguments ("body")) nil [21016 21317])
            ("image-dired-dir" function nil nil [21319 21743])
            ("image-dired-insert-image" function (:arguments ("file" "type" "relief" "margin")) nil [21745 22032])
            ("image-dired-get-thumbnail-image" function (:arguments ("file")) nil [22034 22679])
            ("image-dired-insert-thumbnail" function (:arguments ("file" "original-file-name" "associated-dired-buffer")) nil [22681 23688])
            ("image-dired-thumb-name" function (:arguments ("file")) nil [23690 25677])
            ("image-dired--check-executable-exists" function (:arguments ("executable")) nil [25679 25840])
            ("image-dired-thumb-size" function (:arguments ("dimension")) nil [25842 26242])
            ("image-dired-queue" variable nil nil [26244 26358])
            ("image-dired-queue-active-jobs" variable nil nil [26360 26450])
            ("image-dired-queue-active-limit" variable (:default-value 2) nil [26452 26586])
            ("image-dired-pngnq-thumb" function (:arguments ("spec")) nil [26588 27722])
            ("image-dired-pngcrush-thumb" function (:arguments ("spec")) nil [27724 28919])
            ("image-dired-optipng-thumb" function (:arguments ("spec")) nil [28921 29615])
            ("image-dired-create-thumb-1" function (:arguments ("original-file" "thumbnail-file")) nil [29617 32771])
            ("image-dired-thumb-queue-run" function nil nil [32773 33162])
            ("image-dired-create-thumb" function (:arguments ("original-file" "thumbnail-file")) nil [33164 33461])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33478 34971])
            ("image-dired-dired-after-readin-hook" function nil nil [34973 35564])
            ("image-dired-next-line-and-display" function (:user-visible-flag t) nil [35566 35866])
            ("image-dired-previous-line-and-display" function (:user-visible-flag t) nil [35868 36180])
            ("image-dired-toggle-append-browsing" function (:user-visible-flag t) nil [36182 36501])
            ("image-dired-mark-and-display-next" function (:user-visible-flag t) nil [36503 36806])
            ("image-dired-toggle-dired-display-properties" function (:user-visible-flag t) nil [36808 37129])
            ("image-dired-thumbnail-buffer" variable (:default-value "*image-dired*") nil [37131 37220])
            ("image-dired-create-thumbnail-buffer" function nil nil [37222 37565])
            ("image-dired-display-image-buffer" variable (:default-value "*image-dired-display-image*") nil [37567 37691])
            ("image-dired-create-display-image-buffer" function nil nil [37693 38064])
            ("image-dired-saved-window-configuration" variable nil nil [38066 38149])
            ("image-dired-dired-with-window-configuration" function
               (:user-visible-flag t
                :arguments ("dir" "arg"))
                nil [38166 39325])
            ("image-dired-restore-window-configuration" function (:user-visible-flag t) nil [39327 39703])
            ("image-dired-display-thumbs" function
               (:user-visible-flag t
                :arguments ("arg" "append" "do-not-pop"))
                nil [39720 41869])
            ("image-dired-show-all-from-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [41886 42760])
            ("defalias" code nil nil [42777 42831])
            ("define-obsolete-function-alias" code nil nil [42848 42907])
            ("image-dired-sane-db-file" function nil nil [42909 43619])
            ("image-dired-write-tags" function (:arguments ("file-tags")) nil [43621 44390])
            ("image-dired-remove-tag" function (:arguments ("files" "tag")) nil [44392 45415])
            ("image-dired-list-tags" function (:arguments ("file")) nil [45417 45979])
            ("image-dired-tag-files" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [45996 46415])
            ("image-dired-tag-thumbnail" function (:user-visible-flag t) nil [46417 46753])
            ("image-dired-delete-tag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46770 47127])
            ("image-dired-tag-thumbnail-remove" function (:user-visible-flag t) nil [47129 47431])
            ("image-dired-original-file-name" function nil nil [47433 47592])
            ("image-dired-file-name-at-point" function nil nil [47594 47797])
            ("image-dired-associated-dired-buffer" function nil nil [47799 47942])
            ("image-dired-get-buffer-window" function (:arguments ("buf")) nil [47944 48126])
            ("image-dired-track-original-file" function (:user-visible-flag t) nil [48128 48795])
            ("image-dired-toggle-movement-tracking" function (:user-visible-flag t) nil [48797 49278])
            ("image-dired-track-thumbnail" function nil nil [49280 50183])
            ("image-dired-dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50185 50488])
            ("image-dired-dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50490 50809])
            ("image-dired-forward-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50811 51551])
            ("image-dired-backward-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51553 52301])
            ("image-dired-next-line" function (:user-visible-flag t) nil [52303 52753])
            ("image-dired-previous-line" function (:user-visible-flag t) nil [52756 53384])
            ("image-dired-format-properties-string" function (:arguments ("buf" "file" "props" "comment")) nil [53386 53807])
            ("image-dired-display-thumb-properties" function nil nil [53809 54455])
            ("image-dired-dired-file-marked-p" function nil nil [54457 54630])
            ("image-dired-modify-mark-on-thumb-original-file" function (:arguments ("command")) nil [54632 55561])
            ("image-dired-mark-thumb-original-file" function (:user-visible-flag t) nil [55563 55770])
            ("image-dired-unmark-thumb-original-file" function (:user-visible-flag t) nil [55772 55985])
            ("image-dired-flag-thumb-original-file" function (:user-visible-flag t) nil [55987 56207])
            ("image-dired-toggle-mark-thumb-original-file" function (:user-visible-flag t) nil [56209 56405])
            ("image-dired-jump-original-dired-buffer" function (:user-visible-flag t) nil [56407 57000])
            ("image-dired-jump-thumbnail-buffer" function (:user-visible-flag t) nil [57017 57415])
            ("image-dired-thumbnail-mode-line-up-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "g" (quote image-dired-line-up-dynamic)) (define-key map "f" (quote image-dired-line-up)) (define-key map "i" (quote image-dired-line-up-interactive)) map)) nil [57417 57873])
            ("image-dired-thumbnail-mode-tag-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "t" (quote image-dired-tag-thumbnail)) (define-key map "r" (quote image-dired-tag-thumbnail-remove)) map)) nil [57875 58223])
            ("image-dired-thumbnail-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [right] (quote image-dired-forward-image)) (define-key map [left] (quote image-dired-backward-image)) (define-key map [up] (quote image-dired-previous-line)) (define-key map [down] (quote image-dired-next-line)) (define-key map "" (quote image-dired-forward-image)) (define-key map "" (quote image-dired-backward-image)) (define-key map "" (quote image-dired-previous-line)) (define-key map "" (quote image-dired-next-line)) (define-key map "d" (quote image-dired-flag-thumb-original-file)) (define-key map [delete] (quote image-dired-flag-thumb-original-file)) (define-key map "m" (quote image-dired-mark-thumb-original-file)) (define-key map "u" (quote image-dired-unmark-thumb-original-file)) (define-key map "." (quote image-dired-track-original-file)) (define-key map [tab] (quote image-dired-jump-original-dired-buffer)) (define-key map "g" image-dired-thumbnail-mode-line-up-map) (define-key map "t" image-dired-thumbnail-mode-tag-map) (define-key map "" (quote image-dired-display-thumbnail-original-image)) (define-key map [C-return] (quote image-dired-thumbnail-display-external)) (define-key map "l" (quote image-dired-rotate-thumbnail-left)) (define-key map "r" (quote image-dired-rotate-thumbnail-right)) (define-key map "L" (quote image-dired-rotate-original-left)) (define-key map "R" (quote image-dired-rotate-original-right)) (define-key map "D" (quote image-dired-thumbnail-set-image-description)) (define-key map "" (quote image-dired-delete-char)) (define-key map " " (quote image-dired-display-next-thumbnail-original)) (define-key map (kbd "DEL") (quote image-dired-display-previous-thumbnail-original)) (define-key map "c" (quote image-dired-comment-thumbnail)) (define-key map [mouse-2] (quote image-dired-mouse-display-image)) (define-key map [mouse-1] (quote image-dired-mouse-select-thumbnail)) (define-key map [C-down-mouse-1] (quote undefined)) (define-key map [C-mouse-1] (quote image-dired-mouse-toggle-mark)) (easy-menu-define nil map "Menu for `image-dired-thumbnail-mode'." (quote ("Image-Dired" ["Quit" quit-window] ["Delete thumbnail from buffer" image-dired-delete-char] ["Remove tag from thumbnail" image-dired-tag-thumbnail-remove] ["Tag thumbnail" image-dired-tag-thumbnail] ["Comment thumbnail" image-dired-comment-thumbnail] ["Refresh thumb" image-dired-refresh-thumb] ["Dynamic line up" image-dired-line-up-dynamic] ["Line up thumbnails" image-dired-line-up] ["Rotate thumbnail left" image-dired-rotate-thumbnail-left] ["Rotate thumbnail right" image-dired-rotate-thumbnail-right] ["Rotate original left" image-dired-rotate-original-left] ["Rotate original right" image-dired-rotate-original-right] ["Toggle movement tracking on/off" image-dired-toggle-movement-tracking] ["Jump to dired buffer" image-dired-jump-original-dired-buffer] ["Track original" image-dired-track-original-file] ["Flag original for deletion" image-dired-flag-thumb-original-file] ["Unmark original" image-dired-unmark-thumb-original-file] ["Mark original" image-dired-mark-thumb-original-file] ["Display in external viewer" image-dired-thumbnail-display-external] ["Display image" image-dired-display-thumbnail-original-image]))) map)) nil [58225 62045])
            ("image-dired-display-image-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote image-dired-display-current-image-full)) (define-key map "s" (quote image-dired-display-current-image-sized)) (define-key map "g" nil) (define-key map [remap forward-char] (quote image-forward-hscroll)) (define-key map [remap backward-char] (quote image-backward-hscroll)) (define-key map [remap right-char] (quote image-forward-hscroll)) (define-key map [remap left-char] (quote image-backward-hscroll)) (define-key map [remap previous-line] (quote image-previous-line)) (define-key map [remap next-line] (quote image-next-line)) (define-key map [remap scroll-up] (quote image-scroll-up)) (define-key map [remap scroll-down] (quote image-scroll-down)) (define-key map [remap scroll-up-command] (quote image-scroll-up)) (define-key map [remap scroll-down-command] (quote image-scroll-down)) (define-key map [remap scroll-left] (quote image-scroll-left)) (define-key map [remap scroll-right] (quote image-scroll-right)) (define-key map [remap move-beginning-of-line] (quote image-bol)) (define-key map [remap move-end-of-line] (quote image-eol)) (define-key map [remap beginning-of-buffer] (quote image-bob)) (define-key map [remap end-of-buffer] (quote image-eob)) (easy-menu-define nil map "Menu for `image-dired-display-image-mode-map'." (quote ("Image-Dired" ["Quit" quit-window] ["Display original, sized to fit" image-dired-display-current-image-sized] ["Display original, full size" image-dired-display-current-image-full]))) map)) nil [62047 63794])
            ("image-dired-display-current-image-full" function (:user-visible-flag t) nil [63796 64121])
            ("image-dired-display-current-image-sized" function (:user-visible-flag t) nil [64123 64465])
            ("define-derived-mode" code nil nil [64467 64787])
            ("define-derived-mode" code nil nil [64789 65148])
            ("image-dired-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote image-dired-dired-previous-line)) (define-key map "n" (quote image-dired-dired-next-line)) (define-key map [up] (quote image-dired-dired-previous-line)) (define-key map [down] (quote image-dired-dired-next-line)) (define-key map (kbd "C-S-n") (quote image-dired-next-line-and-display)) (define-key map (kbd "C-S-p") (quote image-dired-previous-line-and-display)) (define-key map (kbd "C-S-m") (quote image-dired-mark-and-display-next)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map [tab] (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (easy-menu-define nil map "Menu for `image-dired-minor-mode'." (quote ("Image-dired" ["Copy with EXIF file name" image-dired-copy-with-exif-file-name] ["Comment files" image-dired-dired-comment-files] ["Mark tagged files" image-dired-mark-tagged-files] ["Jump to thumbnail buffer" image-dired-jump-thumbnail-buffer] ["Toggle movement tracking" image-dired-toggle-movement-tracking] ["Toggle append browsing" image-dired-toggle-append-browsing] ["Toggle display properties" image-dired-toggle-dired-display-properties] ["Display in external viewer" image-dired-dired-display-external] ["Display image" image-dired-dired-display-image] ["Display this thumbnail" image-dired-display-thumb] ["Display thumbnails append" image-dired-display-thumbs-append] ["Create thumbnails for marked files" image-dired-create-thumbs] ["Mark and display next" image-dired-mark-and-display-next] ["Display thumb for previous file" image-dired-previous-line-and-display] ["Display thumb for next file" image-dired-next-line-and-display]))) map)) nil [65150 67507])
            ("define-minor-mode" code nil nil [67524 67773])
            ("define-obsolete-function-alias" code nil nil [67790 67892])
            ("declare-function" code nil nil [67894 67959])
            ("image-dired-create-thumbs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67961 68715])
            ("image-dired-slideshow-timer" variable nil nil [68717 68778])
            ("image-dired-slideshow-count" variable nil nil [68780 68870])
            ("image-dired-slideshow-times" variable nil nil [68872 68958])
            ("image-dired-slideshow-step" function nil nil [68960 69365])
            ("image-dired-slideshow-start" function (:user-visible-flag t) nil [69367 69890])
            ("image-dired-slideshow-stop" function (:user-visible-flag t) nil [69892 70012])
            ("image-dired-delete-char" function (:user-visible-flag t) nil [70014 70238])
            ("image-dired-display-thumbs-append" function (:user-visible-flag t) nil [70255 70411])
            ("image-dired-display-thumb" function (:user-visible-flag t) nil [70428 70588])
            ("image-dired-line-up" function (:user-visible-flag t) nil [70590 71489])
            ("image-dired-line-up-dynamic" function (:user-visible-flag t) nil [71491 71995])
            ("image-dired-line-up-interactive" function (:user-visible-flag t) nil [71997 72386])
            ("image-dired-thumbnail-display-external" function (:user-visible-flag t) nil [72388 72849])
            ("image-dired-dired-display-external" function (:user-visible-flag t) nil [72866 73116])
            ("image-dired-window-width-pixels" function (:arguments ("window")) nil [73118 73253])
            ("image-dired-window-height-pixels" function (:arguments ("window")) nil [73255 73443])
            ("image-dired-display-window" function nil nil [73445 73696])
            ("image-dired-thumbnail-window" function nil nil [73698 73943])
            ("image-dired-associated-dired-buffer-window" function nil nil [73945 74346])
            ("image-dired-display-window-width" function (:arguments ("window")) nil [74348 74533])
            ("image-dired-display-window-height" function (:arguments ("window")) nil [74535 74724])
            ("image-dired-display-image" function (:arguments ("file" "original-size")) nil [74726 76688])
            ("image-dired-display-thumbnail-original-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76690 77472])
            ("image-dired-dired-display-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77490 77882])
            ("image-dired-image-at-point-p" function nil nil [77884 78039])
            ("image-dired-rotate-thumbnail" function (:arguments ("degrees")) nil [78041 78711])
            ("image-dired-rotate-thumbnail-left" function (:user-visible-flag t) nil [78713 79108])
            ("image-dired-rotate-thumbnail-right" function (:user-visible-flag t) nil [79110 79506])
            ("image-dired-refresh-thumb" function (:user-visible-flag t) nil [79508 79823])
            ("image-dired-rotate-original" function (:arguments ("degrees")) nil [79825 81198])
            ("image-dired-rotate-original-left" function (:user-visible-flag t) nil [81200 81360])
            ("image-dired-rotate-original-right" function (:user-visible-flag t) nil [81362 81515])
            ("image-dired-get-exif-file-name" function (:arguments ("file")) nil [81517 82622])
            ("image-dired-thumbnail-set-image-description" function (:user-visible-flag t) nil [82624 83359])
            ("image-dired-set-exif-data" function (:arguments ("file" "tag-name" "tag-value")) nil [83361 83892])
            ("image-dired-get-exif-data" function (:arguments ("file" "tag-name")) nil [83894 84934])
            ("image-dired-copy-with-exif-file-name" function (:user-visible-flag t) nil [84936 86027])
            ("image-dired-display-next-thumbnail-original" function (:user-visible-flag t) nil [86029 86249])
            ("image-dired-display-previous-thumbnail-original" function (:user-visible-flag t) nil [86251 86455])
            ("image-dired-write-comments" function (:arguments ("file-comments")) nil [86457 87787])
            ("image-dired-update-property" function (:arguments ("prop" "value")) nil [87789 87997])
            ("image-dired-dired-comment-files" function (:user-visible-flag t) nil [88014 88310])
            ("image-dired-comment-thumbnail" function (:user-visible-flag t) nil [88312 88680])
            ("image-dired-read-comment" function (:arguments ("file")) nil [88682 88945])
            ("image-dired-get-comment" function (:arguments ("file")) nil [88947 89540])
            ("image-dired-mark-tagged-files" function (:user-visible-flag t) nil [89557 90900])
            ("image-dired-mouse-display-image" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [90902 91478])
            ("image-dired-mouse-select-thumbnail" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [91480 91865])
            ("image-dired-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [91867 92263])
            ("image-dired-dired-display-properties" function (:user-visible-flag t) nil [92265 92845])
            ("image-dired-tag-file-list" variable nil nil [92847 92923])
            ("image-dired-file-tag-list" variable nil nil [92925 93001])
            ("image-dired-file-comment-list" variable nil nil [93003 93078])
            ("image-dired-add-to-tag-file-list" function (:arguments ("tag" "file")) nil [93080 93558])
            ("image-dired-add-to-tag-file-lists" function (:arguments ("tag" "file")) nil [93560 94839])
            ("image-dired-add-to-file-comment-list" function (:arguments ("file" "comment")) nil [94841 95470])
            ("image-dired-create-gallery-lists" function nil nil [95472 96574])
            ("image-dired-hidden-p" function (:arguments ("file")) nil [96576 96796])
            ("image-dired-gallery-generate" function (:user-visible-flag t) nil [96798 100400])
            ("image-dired-widget-list" variable nil nil [100402 100490])
            ("declare-function" code nil nil [100492 100542])
            ("image-dired-dired-edit-comment-and-tags" function (:user-visible-flag t) nil [100559 103376])
            ("image-dired-save-information-from-widgets" function nil nil [103378 104244])
            ("image-dired" package nil nil [106135 106157]))          
      :file "image-dired.el.gz"
      :pointmax 106188
      :fsize 24006
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 5913 . 5914) (symbol 5854 . 5871) (open-paren 5853 . 5854)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ibuffer" include nil nil [1530 1548])
            ("subr-x" include nil nil [1614 1631])
            ("cl-lib" include nil nil [1594 1611])
            ("ibuf-macs" include nil nil [1571 1591])
            ("ibuffer-remove-alist" function (:arguments ("key" "alist")) nil [1656 1855])
            ("ibuffer-remove-duplicates" function (:arguments ("list")) nil [1879 2147])
            ("ibuffer-split-list" function (:arguments ("ibuffer-split-list-fn" "ibuffer-split-list-elts")) nil [2149 2578])
            ("ibuffer-never-show-predicates" variable nil nil [2580 2974])
            ("ibuffer-always-show-predicates" variable nil nil [2976 3463])
            ("ibuffer-never-search-content-name" variable (:default-value (let* ((names (quote ("Completions" "Help" "Messages" "Pp Eval Output" "CompileLog" "Info" "Buffer List" "Ibuffer" "Apropos"))) (partial (quote ("Customize Option: " "Async Shell Command\\*" "Shell Command Output\\*" "ediff "))) (beg "\\`\\*") (end "\\*\\'") (excluded (mapcar (lambda (x) (format "%s%s" beg x)) partial))) (dolist (str names (nreverse excluded)) (push (format "%s%s%s" beg str end) excluded)))) nil [3465 4269])
            ("ibuffer-never-search-content-mode" variable (:default-value (quote (dired-mode))) nil [4271 4563])
            ("ibuffer-tmp-hide-regexps" variable nil nil [4565 4669])
            ("ibuffer-tmp-show-regexps" variable nil nil [4671 4778])
            ("ibuffer-auto-buffers-changed" variable nil nil [4780 4821])
            ("ibuffer-update-saved-filters-format" function (:arguments ("filters")) nil [4823 5712])
            ("ibuffer-saved-filters" variable (:default-value (quote (("programming" (or (derived-mode . prog-mode) (mode . ess-mode) (mode . compilation-mode))) ("text document" (and (derived-mode . text-mode) (not (starred-name)))) ("TeX" (or (derived-mode . tex-mode) (mode . latex-mode) (mode . context-mode) (mode . ams-tex-mode) (mode . bibtex-mode))) ("web" (or (derived-mode . sgml-mode) (derived-mode . css-mode) (mode . javascript-mode) (mode . js2-mode) (mode . scss-mode) (derived-mode . haml-mode) (mode . sass-mode))) ("gnus" (or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode)))))) nil [5714 8497])
            ("ibuffer-old-saved-filters-warning" variable (:default-value (concat "Deprecated format detected for variable `ibuffer-saved-filters'.

The format has been repaired and the variable modified accordingly.
You can save the current value through the customize system by
either clicking or hitting return " (make-text-button "here" nil (quote face) (quote (:weight bold :inherit button)) (quote mouse-face) (quote (:weight normal :background "gray50" :inherit button)) (quote follow-link) t (quote help-echo) "Click or RET: save new value in customize" (quote action) (lambda (_) (if (not (fboundp (quote customize-save-variable))) (message "Customize not available; value not saved") (customize-save-variable (quote ibuffer-saved-filters) ibuffer-saved-filters) (message "Saved updated ibuffer-saved-filters.")))) ". See below for
an explanation and alternative ways to save the repaired value.

Explanation: For the list variable `ibuffer-saved-filters',
elements of the form (STRING (FILTER-SPECS...)) are deprecated
and should instead have the form (STRING FILTER-SPECS...), where
each filter spec is a cons cell with a symbol in the car. See
`ibuffer-saved-filters' for details. The repaired value fixes
this format without changing the meaning of the saved filters.

Alternative ways to save the repaired value:

  1. Do M-x customize-variable and entering `ibuffer-saved-filters'
     when prompted.

  2. Set the updated value manually by copying the
     following emacs-lisp form to your emacs init file.

%s
")) nil [8499 10163])
            ("ibuffer-filtering-qualifiers" variable nil nil [10165 11767])
            ("ibuffer-filtering-alist" variable nil nil [11820 12253])
            ("ibuffer-filter-format-alist" variable nil nil [12255 12882])
            ("ibuffer-cached-filter-formats" variable nil nil [12884 12926])
            ("ibuffer-compiled-filter-formats" variable nil nil [12927 12971])
            ("ibuffer-filter-groups" variable nil nil [12973 13537])
            ("ibuffer-show-empty-filter-groups" variable (:default-value t) nil [13539 13690])
            ("ibuffer-saved-filter-groups" variable nil nil [13692 14285])
            ("ibuffer-hidden-filter-groups" variable nil nil [14287 14385])
            ("ibuffer-filter-group-kill-ring" variable nil nil [14387 14430])
            ("ibuffer-old-time" variable (:default-value 72) nil [14432 14703])
            ("ibuffer-save-with-custom" variable (:default-value t) nil [14705 14942])
            ("ibuffer-repair-saved-filters" function (:user-visible-flag t) nil [14944 15950])
            ("ibuffer-ext-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [15952 16559])
            ("define-minor-mode" code nil nil [16576 17224])
            ("ibuffer-auto-update-changed" function nil nil [17226 17513])
            ("ibuffer-mouse-filter-by-mode" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17530 17707])
            ("ibuffer-interactive-filter-by-mode" function
               (:user-visible-flag t
                :arguments ("event-or-point"))
                nil [17724 18272])
            ("ibuffer-mouse-toggle-filter-group" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18289 18528])
            ("ibuffer-toggle-filter-group" function (:user-visible-flag t) nil [18545 18705])
            ("ibuffer-toggle-filter-group-1" function (:arguments ("posn")) nil [18707 19109])
            ("ibuffer-forward-filter-group" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [19126 19655])
            ("ibuffer-backward-filter-group" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [19672 20311])
            ("ibuffer--maybe-erase-shell-cmd-output" function nil nil [20313 20599])
            ("define-ibuffer-op" code nil nil [20669 21156])
            ("define-ibuffer-op" code nil nil [21234 21631])
            ("define-ibuffer-op" code nil nil [21701 22559])
            ("define-ibuffer-op" code nil nil [22615 22982])
            ("define-ibuffer-op" code nil nil [23047 23583])
            ("define-ibuffer-op" code nil nil [23650 23802])
            ("define-ibuffer-op" code nil nil [23860 24054])
            ("define-ibuffer-op" code nil nil [24113 24343])
            ("define-ibuffer-op" code nil nil [24409 24667])
            ("define-ibuffer-op" code nil nil [24733 25326])
            ("define-ibuffer-op" code nil nil [25391 25808])
            ("define-ibuffer-op" code nil nil [25880 26325])
            ("define-ibuffer-op" code nil nil [26382 26519])
            ("ibuffer-included-in-filters-p" function (:arguments ("buf" "filters")) nil [26536 26951])
            ("ibuffer-unary-operand" function (:arguments ("filter")) nil [26953 27281])
            ("ibuffer-included-in-filter-p" function (:arguments ("buf" "filter")) nil [27283 27884])
            ("ibuffer-included-in-filter-p-1" function (:arguments ("buf" "filter")) nil [27886 29080])
            ("ibuffer-generate-filter-groups" function (:arguments ("bmarklist" "noempty" "nodefault")) nil [29082 30104])
            ("ibuffer-filters-to-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [30121 30445])
            ("ibuffer-set-filter-groups-by-mode" function (:user-visible-flag t) nil [30462 31037])
            ("ibuffer-pop-filter-group" function (:user-visible-flag t) nil [31054 31348])
            ("ibuffer-read-filter-group-name" function (:arguments ("msg" "nodefault" "noerror")) nil [31350 32012])
            ("ibuffer-decompose-filter-group" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [32029 32431])
            ("ibuffer-clear-filter-groups" function (:user-visible-flag t) nil [32448 32626])
            ("ibuffer-current-filter-groups-with-position" function nil nil [32628 33103])
            ("ibuffer-jump-to-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [33120 33452])
            ("ibuffer-kill-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [33469 34138])
            ("ibuffer-kill-line" function
               (:user-visible-flag t
                :arguments ("arg" "interactive-p"))
                nil [34155 34562])
            ("ibuffer-insert-filter-group-before" function (:arguments ("newgroup" "group")) nil [34564 35188])
            ("ibuffer-yank" function (:user-visible-flag t) nil [35205 35497])
            ("ibuffer-yank-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35514 35972])
            ("ibuffer-save-filter-groups" function
               (:user-visible-flag t
                :arguments ("name" "groups"))
                nil [35989 36564])
            ("ibuffer-delete-saved-filter-groups" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36581 37074])
            ("ibuffer-switch-to-saved-filter-groups" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [37091 37950])
            ("ibuffer-filter-disable" function
               (:user-visible-flag t
                :arguments ("delete-filter-groups"))
                nil [37967 38474])
            ("ibuffer-pop-filter" function (:user-visible-flag t) nil [38491 38827])
            ("ibuffer-push-filter" function (:arguments ("filter-specification")) nil [38829 39002])
            ("ibuffer-decompose-filter" function (:user-visible-flag t) nil [39019 40109])
            ("ibuffer-exchange-filters" function (:user-visible-flag t) nil [40126 40440])
            ("ibuffer-negate-filter" function (:user-visible-flag t) nil [40457 40829])
            ("ibuffer--or-and-filter" function (:arguments ("op" "decompose")) nil [40831 41553])
            ("ibuffer-or-filter" function
               (:user-visible-flag t
                :arguments ("decompose"))
                nil [41570 41835])
            ("ibuffer-and-filter" function
               (:user-visible-flag t
                :arguments ("decompose"))
                nil [41852 42121])
            ("ibuffer-maybe-save-stuff" function nil nil [42123 42484])
            ("ibuffer-save-filters" function
               (:user-visible-flag t
                :arguments ("name" "filters"))
                nil [42501 43051])
            ("ibuffer-delete-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [43068 43490])
            ("ibuffer-add-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [43507 43881])
            ("ibuffer-switch-to-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [43898 44295])
            ("ibuffer-format-filter-group-data" function (:arguments ("filter")) nil [44297 44505])
            ("ibuffer-format-qualifier" function (:arguments ("qualifier")) nil [44507 44750])
            ("ibuffer-format-qualifier-1" function (:arguments ("qualifier")) nil [44752 45360])
            ("ibuffer-list-buffer-modes" function (:arguments ("include-parents")) nil [45362 45902])
            ("define-ibuffer-filter" code nil nil [45999 46665])
            ("define-ibuffer-filter" code nil nil [46733 47442])
            ("define-ibuffer-filter" code nil nil [47513 47859])
            ("define-ibuffer-filter" code nil nil [47922 48152])
            ("define-ibuffer-filter" code nil nil [48223 48528])
            ("define-ibuffer-filter" code nil nil [48595 49005])
            ("define-ibuffer-filter" code nil nil [49072 49530])
            ("define-ibuffer-filter" code nil nil [49603 50151])
            ("define-ibuffer-filter" code nil nil [50219 50861])
            ("define-ibuffer-filter" code nil nil [50928 51213])
            ("define-ibuffer-filter" code nil nil [51280 51558])
            ("define-ibuffer-filter" code nil nil [51625 51791])
            ("define-ibuffer-filter" code nil nil [51863 52059])
            ("define-ibuffer-filter" code nil nil [52125 52436])
            ("define-ibuffer-filter" code nil nil [52504 52747])
            ("ibuffer-filter-chosen-by-completion" function (:user-visible-flag t) nil [52823 53694])
            ("ibuffer-toggle-sorting-mode" function (:user-visible-flag t) nil [53725 54361])
            ("ibuffer-invert-sorting" function (:user-visible-flag t) nil [54378 54670])
            ("define-ibuffer-sorter" code nil nil [54740 55025])
            ("define-ibuffer-sorter" code nil nil [55094 55419])
            ("define-ibuffer-sorter" code nil nil [55489 55685])
            ("define-ibuffer-sorter" code nil nil [55749 55949])
            ("define-ibuffer-sorter" code nil nil [56025 56550])
            ("ibuffer-bs-show" function (:user-visible-flag t) nil [56599 56805])
            ("ibuffer-bs-toggle-all" function (:user-visible-flag t) nil [56807 57055])
            ("ibuffer-add-to-tmp-hide" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [57093 57460])
            ("ibuffer-add-to-tmp-show" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [57477 57848])
            ("ibuffer-forward-next-marked" function
               (:user-visible-flag t
                :arguments ("count" "mark" "direction"))
                nil [57865 58747])
            ("ibuffer-backwards-next-marked" function
               (:user-visible-flag t
                :arguments ("count" "mark"))
                nil [58764 59072])
            ("ibuffer-do-kill-lines" function (:user-visible-flag t) nil [59089 59413])
            ("ibuffer-jump-to-buffer" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [59430 61503])
            ("declare-function" code nil nil [61505 61593])
            ("ibuffer-diff-buffer-with-file-1" function (:arguments ("buffer")) nil [61595 62823])
            ("ibuffer-diff-with-file" function (:user-visible-flag t) nil [62840 63683])
            ("ibuffer-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63700 65367])
            ("ibuffer-copy-buffername-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [65384 66127])
            ("ibuffer-mark-on-buffer" function (:arguments ("func" "ibuffer-mark-on-buffer-mark" "group")) nil [66129 66528])
            ("ibuffer-mark-by-name-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [66545 66774])
            ("ibuffer-locked-buffer-p" function (:arguments ("buf")) nil [66776 67078])
            ("ibuffer-mark-by-locked" function (:user-visible-flag t) nil [67095 67291])
            ("ibuffer-mark-by-mode-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [67308 67600])
            ("ibuffer-mark-by-file-name-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [67617 68037])
            ("ibuffer-mark-by-content-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "all-buffers"))
                nil [68054 69173])
            ("ibuffer-mark-by-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [69190 69850])
            ("ibuffer-mark-modified-buffers" function (:user-visible-flag t) nil [69867 70025])
            ("ibuffer-mark-unsaved-buffers" function (:user-visible-flag t) nil [70042 70280])
            ("ibuffer-mark-dissociated-buffers" function (:user-visible-flag t) nil [70297 70748])
            ("ibuffer-mark-help-buffers" function (:user-visible-flag t) nil [70765 71021])
            ("ibuffer-mark-compressed-file-buffers" function (:user-visible-flag t) nil [71038 71341])
            ("ibuffer-mark-old-buffers" function (:user-visible-flag t) nil [71358 71746])
            ("ibuffer-mark-special-buffers" function (:user-visible-flag t) nil [71763 71974])
            ("ibuffer-mark-read-only-buffers" function (:user-visible-flag t) nil [71991 72170])
            ("ibuffer-mark-dired-buffers" function (:user-visible-flag t) nil [72187 72371])
            ("ibuffer-do-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [72388 73013])
            ("ibuf-ext" package nil nil [73015 73034]))          
      :file "ibuf-ext.el.gz"
      :pointmax 73141
      :fsize 16875
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1631 . 1632) (symbol 1551 . 1568) (open-paren 1550 . 1551)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image" include nil nil [1479 1495])
            ("cl-lib" include nil nil [1515 1532])
            ("defvar-local" code nil nil [1575 1731])
            ("image-mode-new-window-functions" variable nil nil [1733 1898])
            ("image-transform-resize" variable nil nil [1970 2296])
            ("image-transform-scale" variable (:default-value 1.0) nil [2298 2383])
            ("image-transform-rotation" variable nil nil [2385 2489])
            ("image-transform-right-angle-fudge" variable (:default-value 0.0001) nil [2491 2707])
            ("image-mode-winprops" function (:arguments ("window" "cleanup")) nil [2709 4141])
            ("image-mode-window-get" function (:arguments ("prop" "winprops")) nil [4143 4417])
            ("image-mode-window-put" function (:arguments ("prop" "val" "winprops")) nil [4419 4742])
            ("image-set-window-vscroll" function (:arguments ("vscroll")) nil [4744 4885])
            ("image-set-window-hscroll" function (:arguments ("ncol")) nil [4887 5019])
            ("image-mode-reapply-winprops" function nil nil [5021 5828])
            ("image-mode-setup-winprops" function nil nil [5830 6077])
            ("image-get-display-property" function nil nil [6110 6377])
            ("declare-function" code nil nil [6379 6448])
            ("declare-function" code nil nil [6449 6502])
            ("declare-function" code nil nil [6503 6551])
            ("image-display-size" function (:arguments ("spec" "pixels" "frame")) nil [6553 8025])
            ("image-forward-hscroll" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [8027 8589])
            ("image-backward-hscroll" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [8591 8805])
            ("image-next-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [8807 9342])
            ("image-previous-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [9344 9533])
            ("image-scroll-up" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [9535 10412])
            ("image-scroll-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10414 11294])
            ("image-scroll-left" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11296 12139])
            ("image-scroll-right" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12141 12979])
            ("image-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12981 13357])
            ("image-eol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13359 13951])
            ("image-bob" function (:user-visible-flag t) nil [13953 14121])
            ("image-eob" function (:user-visible-flag t) nil [14123 14649])
            ("image-mode-fit-frame" function
               (:user-visible-flag t
                :arguments ("frame" "toggle"))
                nil [14684 16560])
            ("defvar-local" code nil nil [16584 16667])
            ("defvar-local" code nil nil [16669 16781])
            ("image-mode-previous-major-mode" variable nil nil [16783 16891])
            ("image-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote image-toggle-display)) (define-key map "" (quote image-toggle-hex-display)) (define-key map (kbd "SPC") (quote image-scroll-up)) (define-key map (kbd "S-SPC") (quote image-scroll-down)) (define-key map (kbd "DEL") (quote image-scroll-down)) (define-key map (kbd "RET") (quote image-toggle-animation)) (define-key map "F" (quote image-goto-frame)) (define-key map "f" (quote image-next-frame)) (define-key map "b" (quote image-previous-frame)) (define-key map "n" (quote image-next-file)) (define-key map "p" (quote image-previous-file)) (define-key map "a+" (quote image-increase-speed)) (define-key map "a-" (quote image-decrease-speed)) (define-key map "a0" (quote image-reset-speed)) (define-key map "ar" (quote image-reverse-speed)) (define-key map "k" (quote image-kill-buffer)) (define-key map [remap forward-char] (quote image-forward-hscroll)) (define-key map [remap backward-char] (quote image-backward-hscroll)) (define-key map [remap right-char] (quote image-forward-hscroll)) (define-key map [remap left-char] (quote image-backward-hscroll)) (define-key map [remap previous-line] (quote image-previous-line)) (define-key map [remap next-line] (quote image-next-line)) (define-key map [remap scroll-up] (quote image-scroll-up)) (define-key map [remap scroll-down] (quote image-scroll-down)) (define-key map [remap scroll-up-command] (quote image-scroll-up)) (define-key map [remap scroll-down-command] (quote image-scroll-down)) (define-key map [remap scroll-left] (quote image-scroll-left)) (define-key map [remap scroll-right] (quote image-scroll-right)) (define-key map [remap move-beginning-of-line] (quote image-bol)) (define-key map [remap move-end-of-line] (quote image-eol)) (define-key map [remap beginning-of-buffer] (quote image-bob)) (define-key map [remap end-of-buffer] (quote image-eob)) (easy-menu-define image-mode-menu map "Menu for Image mode." (quote ("Image" ["Show as Text" image-toggle-display :active t :help "Show image as text"] ["Show as Hex" image-toggle-hex-display :active t :help "Show image as hex"] "--" ["Fit to Window Height" image-transform-fit-to-height :visible (eq image-type (quote imagemagick)) :help "Resize image to match the window height"] ["Fit to Window Width" image-transform-fit-to-width :visible (eq image-type (quote imagemagick)) :help "Resize image to match the window width"] ["Rotate Image..." image-transform-set-rotation :visible (eq image-type (quote imagemagick)) :help "Rotate the image"] ["Reset Transformations" image-transform-reset :visible (eq image-type (quote imagemagick)) :help "Reset all image transformations"] "--" ["Show Thumbnails" (lambda nil (interactive) (image-dired default-directory)) :active default-directory :help "Show thumbnails for all images in this directory"] ["Next Image" image-next-file :active buffer-file-name :help "Move to next image in this directory"] ["Previous Image" image-previous-file :active buffer-file-name :help "Move to previous image in this directory"] "--" ["Fit Frame to Image" image-mode-fit-frame :active t :help "Resize frame to match image"] "--" ["Animate Image" image-toggle-animation :style toggle :selected (let ((image (image-get-display-property))) (and image (image-animate-timer image))) :active image-multi-frame :help "Toggle image animation"] ["Loop Animation" (lambda nil (interactive) (setq image-animate-loop (not image-animate-loop)) (when (let ((image (image-get-display-property))) (and image (image-animate-timer image))) (image-toggle-animation) (image-toggle-animation))) :style toggle :selected image-animate-loop :active image-multi-frame :help "Animate images once, or forever?"] ["Reverse Animation" image-reverse-speed :style toggle :selected (let ((image (image-get-display-property))) (and image (< (image-animate-get-speed image) 0))) :active image-multi-frame :help "Reverse direction of this image's animation?"] ["Speed Up Animation" image-increase-speed :active image-multi-frame :help "Speed up this image's animation"] ["Slow Down Animation" image-decrease-speed :active image-multi-frame :help "Slow down this image's animation"] ["Reset Animation Speed" image-reset-speed :active image-multi-frame :help "Reset the speed of this image's animation"] ["Next Frame" image-next-frame :active image-multi-frame :help "Show the next frame of this image"] ["Previous Frame" image-previous-frame :active image-multi-frame :help "Show the previous frame of this image"] ["Goto Frame..." image-goto-frame :active image-multi-frame :help "Show a specific frame of this image"]))) (make-composed-keymap (list map image-map) special-mode-map))) nil [16893 21805])
            ("image-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote image-toggle-display)) (define-key map "" (quote image-toggle-hex-display)) map)) nil [21807 22033])
            ("bookmark-make-record-function" variable nil nil [22035 22073])
            ("put" code nil nil [22075 22113])
            ("image-mode" function (:user-visible-flag t) nil [22130 24697])
            ("define-minor-mode" code nil nil [24714 25347])
            ("image-mode-to-text" function nil nil [25364 26681])
            ("image-mode-as-hex" function (:user-visible-flag t) nil [26683 27599])
            ("image-mode-as-text" function (:user-visible-flag t) nil [27601 28481])
            ("define-obsolete-function-alias" code nil nil [28483 28552])
            ("image-toggle-display-text" function nil nil [28554 29043])
            ("archive-superior-buffer" variable nil nil [29045 29077])
            ("tar-superior-buffer" variable nil nil [29078 29106])
            ("declare-function" code nil nil [29107 29170])
            ("image-toggle-display-image" function nil nil [29172 32340])
            ("image-toggle-hex-display" function (:user-visible-flag t) nil [32342 32587])
            ("image-toggle-display" function (:user-visible-flag t) nil [32589 33003])
            ("image-kill-buffer" function (:user-visible-flag t) nil [33005 33111])
            ("image-after-revert-hook" function nil nil [33113 33512])
            ("image-animate-loop" variable nil nil [33537 33696])
            ("image-toggle-animation" function (:user-visible-flag t) nil [33698 34436])
            ("image--set-speed" function (:arguments ("speed" "multiply")) nil [34438 35230])
            ("image-increase-speed" function (:user-visible-flag t) nil [35232 35371])
            ("image-decrease-speed" function (:user-visible-flag t) nil [35373 35514])
            ("image-reverse-speed" function (:user-visible-flag t) nil [35516 35636])
            ("image-reset-speed" function (:user-visible-flag t) nil [35638 35762])
            ("image-goto-frame" function
               (:user-visible-flag t
                :arguments ("n" "relative"))
                nil [35764 36351])
            ("image-next-frame" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [36353 36628])
            ("image-previous-frame" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [36630 36915])
            ("image-next-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [36961 37847])
            ("image-previous-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [37849 38225])
            ("image-mode--images-in-directory" function (:arguments ("file")) nil [38227 38608])
            ("declare-function" code nil nil [38640 38752])
            ("declare-function" code nil nil [38753 38816])
            ("declare-function" code nil nil [38817 38877])
            ("image-bookmark-make-record" function nil nil [38879 39046])
            ("image-bookmark-jump" function (:arguments ("bmk")) nil [39063 39371])
            ("image-transform-width" function (:arguments ("width" "height")) nil [40238 40967])
            ("image-transform-fit-width" function (:arguments ("width" "height" "length")) nil [41868 44577])
            ("image-transform-check-size" function nil nil [44579 45379])
            ("image-transform-properties" function (:arguments ("spec")) nil [45381 46911])
            ("image-transform-set-scale" function
               (:user-visible-flag t
                :arguments ("scale"))
                nil [46913 47198])
            ("image-transform-fit-to-height" function (:user-visible-flag t) nil [47200 47472])
            ("image-transform-fit-to-width" function (:user-visible-flag t) nil [47474 47743])
            ("image-transform-set-rotation" function
               (:user-visible-flag t
                :arguments ("rotation"))
                nil [47745 48114])
            ("image-transform-reset" function (:user-visible-flag t) nil [48116 48430])
            ("image-mode" package nil nil [48432 48453]))          
      :file "image-mode.el.gz"
      :pointmax 48483
      :fsize 12455
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax '((close-paren 1532 . 1533) (symbol 1497 . 1514) (open-paren 1496 . 1497)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2347 2364])
            ("imenu" customgroup (:user-visible-flag t) nil [2533 2685])
            ("imenu-use-markers" variable (:default-value t) nil [2687 3017])
            ("imenu-max-item-length" variable (:default-value 60) nil [3020 3182])
            ("imenu-auto-rescan" variable nil nil [3184 3308])
            ("imenu-auto-rescan-maxout" variable (:default-value 600000) nil [3310 3483])
            ("imenu-always-use-completion-buffer-p" variable nil nil [3485 3534])
            ("make-obsolete-variable" code nil nil [3535 3629])
            ("imenu-use-popup-menu" variable (:default-value (if imenu-always-use-completion-buffer-p (not (eq imenu-always-use-completion-buffer-p (quote never))) (quote on-mouse))) nil [3631 4101])
            ("imenu-eager-completion-buffer" variable (:default-value (not (eq imenu-always-use-completion-buffer-p (quote never)))) nil [4103 4305])
            ("imenu-after-jump-hook" variable nil nil [4307 4555])
            ("imenu-sort-function" variable nil nil [4572 5264])
            ("imenu-max-items" variable (:default-value 25) nil [5266 5387])
            ("imenu-space-replacement" variable (:default-value ".") nil [5909 6143])
            ("imenu-level-separator" variable (:default-value ":") nil [6145 6366])
            ("imenu-generic-skip-comments-and-strings" variable (:default-value t) nil [6368 6689])
            ("imenu-generic-expression" variable nil nil [6706 8270])
            ("make-variable-buffer-local" code nil nil [8357 8411])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [8440 8806])
            ("make-variable-buffer-local" code nil nil [8822 8879])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [8896 9336])
            ("make-variable-buffer-local" code nil nil [9352 9416])
            ("imenu-extract-index-name-function" variable nil nil [9433 9726])
            ("make-variable-buffer-local" code nil nil [9742 9805])
            ("imenu-name-lookup-function" variable nil nil [9822 10180])
            ("make-variable-buffer-local" code nil nil [10196 10252])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [10269 10472])
            ("make-variable-buffer-local" code nil nil [10488 10545])
            ("imenu--subalist-p" function (:arguments ("item")) nil [10548 10691])
            ("imenu-progress-message" function (:arguments ("_prevpos" "_relpos" "_reverse")) nil [10693 11471])
            ("imenu-example--name-and-position" function nil nil [11850 12279])
            ("define-error" code nil nil [12299 12352])
            ("imenu-unavailable-error" function (:arguments ("format" "args")) nil [12354 12489])
            ("imenu-example--lisp-extract-index-name" function nil nil [12491 12968])
            ("imenu-example--create-lisp-index" function nil nil [12970 14449])
            ("imenu-example--function-name-regexp-c" variable (:default-value (concat "^[a-zA-Z0-9]+[ 	]?" "\\([a-zA-Z0-9_*]+[ 	]+\\)?" "\\([a-zA-Z0-9_*]+[ 	]+\\)?" "\\([*&]+[ 	]*\\)?" "\\([a-zA-Z0-9_*]+\\)[ 	]*(")) nil [14493 14783])
            ("imenu-example--create-c-index" function (:arguments ("regexp")) nil [14785 15378])
            ("imenu--rescan-item" variable
               (:constant-flag t
                :default-value (quote ("*Rescan*" . -99)))
                nil [15601 15650])
            ("defvar-local" code nil nil [15680 16547])
            ("defvar-local" code nil nil [16613 16731])
            ("imenu--history-list" variable nil nil [16733 16869])
            ("imenu--sort-by-name" function (:arguments ("item1" "item2")) nil [17041 17230])
            ("imenu--sort-by-position" function (:arguments ("item1" "item2")) nil [17232 17518])
            ("imenu--relative-position" function (:arguments ("reverse")) nil [17520 17886])
            ("imenu--split" function (:arguments ("list" "n")) nil [17888 18552])
            ("imenu--split-menu" function (:arguments ("menulist" "title")) nil [18554 19553])
            ("imenu--split-submenus" function (:arguments ("alist")) nil [19555 19918])
            ("imenu--truncate-items" function (:arguments ("menulist")) nil [19920 20331])
            ("imenu--make-index-alist" function (:arguments ("noerror")) nil [20333 21320])
            ("imenu--cleanup-seen" variable nil nil [21322 21354])
            ("imenu--cleanup" function (:arguments ("alist")) nil [21356 22100])
            ("imenu--create-keymap" function (:arguments ("title" "alist" "cmd")) nil [22102 22581])
            ("imenu--in-alist" function (:arguments ("str" "alist")) nil [22583 23510])
            ("imenu-syntax-alist" variable nil nil [23512 23978])
            ("make-variable-buffer-local" code nil nil [23994 24042])
            ("imenu-default-create-index-function" function nil nil [24044 25689])
            ("imenu-case-fold-search" variable (:default-value t) nil [25738 26041])
            ("make-variable-buffer-local" code nil nil [26057 26109])
            ("imenu--generic-function" function (:arguments ("patterns")) nil [26210 30114])
            ("imenu-find-default" function (:arguments ("guess" "completions")) nil [30330 30798])
            ("imenu--completion-buffer" function (:arguments ("index-alist" "prompt")) nil [30800 32102])
            ("imenu--mouse-menu" function (:arguments ("index-alist" "event" "title")) nil [32104 32652])
            ("imenu-choose-buffer-index" function (:arguments ("prompt" "alist")) nil [32654 34182])
            ("defvar-local" code nil nil [34184 34224])
            ("imenu-add-to-menubar" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [34241 35306])
            ("imenu-add-menubar-index" function (:user-visible-flag t) nil [35323 35554])
            ("imenu-buffer-menubar" variable nil nil [35556 35589])
            ("defvar-local" code nil nil [35591 35728])
            ("imenu-update-menubar" function nil nil [35730 36642])
            ("imenu--menubar-select" function (:arguments ("item")) nil [36644 37045])
            ("imenu-default-goto-function" function (:arguments ("_name" "position" "_rest")) nil [37047 37462])
            ("imenu" function
               (:user-visible-flag t
                :arguments ("index-item"))
                nil [37479 38168])
            ("imenu" package nil nil [38170 38186]))          
      :file "imenu.el.gz"
      :pointmax 38211
      :fsize 11773
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 2364 . 2365) (symbol 2329 . 2346) (open-paren 2328 . 2329)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1005 1070])
            ("standard-indent" variable (:default-value 4) nil [1072 1206])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1208 1594])
            ("tab-always-indent" variable (:default-value t) nil [1596 2351])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2354 3556])
            ("indent--default-inside-comment" function nil nil [3558 4117])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4119 6830])
            ("indent--funcall-widened" function (:arguments ("func")) nil [6832 6922])
            ("insert-tab" function (:arguments ("arg")) nil [6924 7216])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [7218 7703])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [7705 8128])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [8130 10011])
            ("indent-rigidly--pop-undo" function nil nil [10013 10300])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10302 10550])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10552 10802])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10804 11202])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [11204 11600])
            ("indent-line-to" function (:arguments ("column")) nil [11602 12228])
            ("current-left-margin" function nil nil [12230 12634])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [12636 13551])
            ("indent-to-left-margin" function nil nil [13651 13962])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [13964 14528])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14530 15405])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [15407 15966])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [15968 16636])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16638 17472])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17474 17955])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17957 18610])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [18612 19143])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19145 20159])
            ("indent-region-function" variable (:default-value (function indent-region-line-by-line)) nil [20161 20361])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [20363 22426])
            ("indent-region-line-by-line" function (:arguments ("start" "end")) nil [22428 22916])
            ("define-obsolete-function-alias" code nil nil [22918 23018])
            ("indent-relative-first-indent-point" function (:user-visible-flag t) nil [23020 23317])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("first-only" "unindented-ok"))
                nil [23319 24943])
            ("tab-stop-list" variable nil nil [24945 25503])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [25505 25736])
            ("edit-tab-stops-buffer" variable nil nil [25738 25887])
            ("edit-tab-stops" function (:user-visible-flag t) nil [25889 26912])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [26914 27314])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [27316 28315])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [28317 28557])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [28559 28988])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [28990 29850])
            ("define-key" code nil nil [29852 29904])
            ("define-key" code nil nil [29905 29948])
            ("define-key" code nil nil [29949 29992])
            ("define-key" code nil nil [29993 30034]))          
      :file "indent.el.gz"
      :pointmax 30060
      :fsize 8295
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image" include nil nil [1257 1273])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [1291 2069])
            ("image-file-name-regexps" variable nil nil [2086 2797])
            ("image-file-name-regexp" function nil nil [2815 3318])
            ("insert-image-file" function (:arguments ("file" "visit" "beg" "end" "replace")) nil [3336 4937])
            ("image-file-yank-handler" function (:arguments ("string")) nil [5104 5652])
            ("put" code nil nil [5654 5693])
            ("image-file-handler" function (:arguments ("operation" "args")) nil [5694 6131])
            ("image-file-call-underlying" function (:arguments ("function" "operation" "args")) nil [6133 6557])
            ("define-minor-mode" code nil nil [6575 7388])
            ("image-file" package nil nil [7391 7412]))          
      :file "image-file.el.gz"
      :pointmax 7442
      :fsize 2746
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1807 1824])
            ("info" customgroup (:user-visible-flag t) nil [1827 1896])
            ("defvar-local" code nil nil [1899 2039])
            ("defvar-local" code nil nil [2041 2222])
            ("Info-history-list" variable nil nil [2224 2355])
            ("Info-history-skip-intermediate-nodes" variable (:default-value t) nil [2357 2689])
            ("Info-enable-active-nodes" variable nil nil [2691 2849])
            ("put" code nil nil [2850 2905])
            ("info-node" variable
               (:default-value (quote ((((class color) (background light)) :foreground "brown" :weight bold :slant italic) (((class color) (background dark)) :foreground "white" :weight bold :slant italic) (t :weight bold :slant italic)))
                :type "face")
                nil [2907 3182])
            ("info-title-1" variable
               (:default-value (quote ((((type tty pc) (class color) (background light)) :foreground "green" :weight bold) (((type tty pc) (class color) (background dark)) :foreground "yellow" :weight bold) (t :height 1.2 :inherit info-title-2)))
                :type "face")
                nil [3184 3487])
            ("info-title-2" variable
               (:default-value (quote ((((type tty pc) (class color)) :foreground "lightblue" :weight bold) (t :height 1.2 :inherit info-title-3)))
                :type "face")
                nil [3489 3679])
            ("info-title-3" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :height 1.2 :inherit info-title-4)))
                :type "face")
                nil [3681 3847])
            ("info-title-4" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :weight bold :inherit variable-pitch)))
                :type "face")
                nil [3849 4018])
            ("info-menu-header" variable
               (:default-value (quote ((((type tty pc)) :underline t :weight bold) (t :inherit variable-pitch :weight bold)))
                :type "face")
                nil [4020 4211])
            ("info-menu-star" variable
               (:default-value (quote ((((class color)) :foreground "red1") (t :underline t)))
                :type "face")
                nil [4213 4361])
            ("info-xref" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [4363 4466])
            ("info-xref-visited" variable
               (:default-value (quote ((t :inherit (link-visited info-xref))))
                :type "face")
                nil [4468 4615])
            ("Info-fontify-visited-nodes" variable (:default-value t) nil [4617 4787])
            ("Info-fontify-maximum-menu-size" variable (:default-value 400000) nil [4917 5284])
            ("Info-use-header-line" variable (:default-value t) nil [5286 5489])
            ("info-header-xref" variable
               (:default-value (quote ((t :inherit info-xref)))
                :type "face")
                nil [5491 5613])
            ("info-header-node" variable
               (:default-value (quote ((t :inherit info-node)))
                :type "face")
                nil [5615 5726])
            ("info-index-match" variable
               (:default-value (quote ((t :inherit match)))
                :type "face")
                nil [5728 5865])
            ("progn" code nil nil [6469 9211])
            ("Info-directory-list" variable nil nil [9213 10762])
            ("Info-additional-directory-list" variable nil nil [10764 10997])
            ("Info-scroll-prefer-subnodes" variable nil nil [10999 11631])
            ("Info-hide-note-references" variable (:default-value t) nil [11633 12407])
            ("Info-refill-paragraphs" variable nil nil [12409 12774])
            ("Info-breadcrumbs-depth" variable (:default-value 4) nil [12776 12935])
            ("Info-search-whitespace-regexp" variable (:default-value "\\s-+") nil [12937 13331])
            ("Info-isearch-search" variable (:default-value t) nil [13333 14026])
            ("Info-isearch-initial-node" variable nil nil [14028 14066])
            ("Info-isearch-initial-history" variable nil nil [14067 14108])
            ("Info-isearch-initial-history-list" variable nil nil [14109 14155])
            ("Info-mode-hook" variable (:default-value (unless (and (boundp (quote Info-fontify)) (null Info-fontify)) (quote (turn-on-font-lock)))) nil [14157 14386])
            ("Info-selection-hook" variable nil nil [14388 14516])
            ("Info-edit-mode-hook" variable nil nil [14518 14599])
            ("make-obsolete-variable" code nil nil [14601 14705])
            ("defvar-local" code nil nil [14707 14939])
            ("defvar-local" code nil nil [14941 15099])
            ("defvar-local" code nil nil [15101 15191])
            ("defvar-local" code nil nil [15193 15348])
            ("defvar-local" code nil nil [15350 15431])
            ("defvar-local" code nil nil [15433 15531])
            ("Info-file-completions" variable nil nil [15533 15668])
            ("defvar-local" code nil nil [15670 15778])
            ("Info-file-supports-index-cookies-list" variable nil nil [15780 16021])
            ("defvar-local" code nil nil [16023 16125])
            ("Info-point-loc" variable nil nil [16127 16377])
            ("Info-standalone" variable nil nil [16379 16467])
            ("Info-file-attributes" variable nil nil [16469 16609])
            ("Info-toc-nodes" variable nil nil [16611 16975])
            ("Info-index-nodes" variable nil nil [16977 17127])
            ("Info-virtual-files" variable nil nil [17129 17868])
            ("Info-virtual-nodes" variable nil nil [17870 18575])
            ("defvar-local" code nil nil [18577 18670])
            ("Info-virtual-file-p" function (:arguments ("filename")) nil [18672 18799])
            ("Info-virtual-fun" function (:arguments ("op" "filename" "nodename")) nil [18801 19497])
            ("Info-virtual-call" function (:arguments ("virtual-fun" "args")) nil [19499 19682])
            ("Info-suffix-list" variable (:default-value (if (eq system-type (quote ms-dos)) (quote ((".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".inz" . "gunzip") (".igz" . "gunzip") (".info.Z" . "gunzip") (".info.gz" . "gunzip") ("-info.Z" . "gunzip") ("-info.gz" . "gunzip") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") (".inf") (".info") ("-info") ("/index") (""))) (quote ((".info.Z" . "uncompress") (".info.Y" . "unyabba") (".info.gz" . "gunzip") (".info.z" . "gunzip") (".info.bz2" "bzip2" "-dc") (".info.xz" . "unxz") (".info") ("-info.Z" . "uncompress") ("-info.Y" . "unyabba") ("-info.gz" . "gunzip") ("-info.bz2" "bzip2" "-dc") ("-info.z" . "gunzip") ("-info.xz" . "unxz") ("-info") ("/index.Z" . "uncompress") ("/index.Y" . "unyabba") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") ("/index.bz2" "bzip2" "-dc") ("/index.xz" . "unxz") ("/index") (".Z" . "uncompress") (".Y" . "unyabba") (".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".xz" . "unxz") (""))))) nil [19686 21661])
            ("info-insert-file-contents-1" function (:arguments ("filename" "suffix" "lfn")) nil [21844 22761])
            ("info-file-exists-p" function (:arguments ("filename")) nil [22763 22874])
            ("info-insert-file-contents" function (:arguments ("filename" "visit")) nil [22876 25989])
            ("Info-file-supports-index-cookies" function (:arguments ("file")) nil [25991 27146])
            ("Info-default-dirs" function nil nil [27150 28733])
            ("info-initialize" function nil nil [28742 29801])
            ("info-other-window" function
               (:user-visible-flag t
                :arguments ("file-or-node" "buffer"))
                nil [29818 30248])
            ("info" function
               (:user-visible-flag t
                :arguments ("file-or-node" "buffer"))
                nil [30322 31613])
            ("info-setup" function (:arguments ("file-or-node" "buffer")) nil [31615 32357])
            ("info-emacs-manual" function (:user-visible-flag t) nil [32374 32478])
            ("info-emacs-bug" function (:user-visible-flag t) nil [32495 32636])
            ("info-standalone" function nil nil [32653 33255])
            ("Info-node-at-bob-matching" function (:arguments ("regexp")) nil [33837 34155])
            ("Info-find-file" function (:arguments ("filename" "noerror")) nil [34157 36533])
            ("Info-find-node" function (:arguments ("filename" "nodename" "no-going-back" "strict-case")) nil [36535 37386])
            ("Info-on-current-buffer" function
               (:user-visible-flag t
                :arguments ("nodename"))
                nil [37403 38037])
            ("Info-revert-find-node" function (:arguments ("filename" "nodename")) nil [38039 39405])
            ("Info-revert-buffer-function" function (:arguments ("_ignore-auto" "noconfirm")) nil [39407 39635])
            ("Info-find-in-tag-table-1" function (:arguments ("marker" "regexp" "case-fold")) nil [39637 40510])
            ("Info-find-in-tag-table" function (:arguments ("marker" "regexp" "strict-case")) nil [40512 41340])
            ("Info-find-node-in-buffer-1" function (:arguments ("regexp" "case-fold")) nil [41342 42113])
            ("Info-find-node-in-buffer" function (:arguments ("regexp" "strict-case")) nil [42115 42685])
            ("Info-find-node-2" function (:arguments ("filename" "nodename" "no-going-back" "strict-case")) nil [42687 50312])
            ("defvar-local" code nil nil [50443 50479])
            ("defvar-local" code nil nil [50579 50625])
            ("defvar-local" code nil nil [50722 50765])
            ("defvar-local" code nil nil [50767 50804])
            ("Info-insert-dir" function nil nil [51008 57111])
            ("Info-streamline-headings" variable (:default-value (quote (("Emacs" . "Emacs") ("Programming" . "Programming") ("Libraries" . "Libraries") ("World Wide Web\\|Net Utilities" . "Net Utilities")))) nil [57113 57368])
            ("Info-dir-remove-duplicates" function nil nil [57370 59600])
            ("Info-read-subfile" function (:arguments ("nodepos")) nil [59716 61679])
            ("Info-unescape-quotes" function (:arguments ("value")) nil [61681 61982])
            ("Info-split-parameter-string" function (:arguments ("parameter-string")) nil [62118 62893])
            ("Info-node-description" function (:arguments ("file")) nil [62895 63223])
            ("Info-display-images-node" function nil nil [63225 64886])
            ("Info-hide-cookies-node" function nil nil [65068 65580])
            ("Info-select-node" function nil nil [65582 67192])
            ("Info-mode-line-node-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote Info-mouse-scroll-up)) (define-key map [mode-line mouse-3] (quote Info-mouse-scroll-down)) map)) nil [67194 67460])
            ("Info-set-mode-line" function nil nil [67462 68133])
            ("Info-goto-node" function
               (:user-visible-flag t
                :arguments ("nodename" "fork" "strict-case"))
                nil [68379 70073])
            ("Info-read-node-completion-table" variable nil nil [70075 70115])
            ("Info-read-node-name-2" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [70117 72161])
            ("Info-read-node-name-1" function (:arguments ("string" "predicate" "code")) nil [72163 73515])
            ("Info-read-node-name" function (:arguments ("prompt")) nil [73591 74159])
            ("Info-build-node-completions" function (:arguments ("filename")) nil [74161 74602])
            ("Info-build-node-completions-1" function nil nil [74604 75818])
            ("Info-restore-point" function (:arguments ("hl")) nil [75822 76231])
            ("Info-search-history" variable nil nil [76234 76306])
            ("Info-search-case-fold" variable nil nil [76308 76415])
            ("Info--search-loop" function (:arguments ("regexp" "bound" "backward")) nil [76417 77351])
            ("Info-search" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "_noerror" "_count" "direction"))
                nil [77353 81761])
            ("Info-search-case-sensitively" function (:user-visible-flag t) nil [81763 81931])
            ("Info-search-next" function (:user-visible-flag t) nil [81933 82210])
            ("Info-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [82212 82712])
            ("Info-isearch-search" function nil nil [82714 83511])
            ("Info-isearch-wrap" function nil nil [83513 83879])
            ("Info-isearch-push-state" function nil nil [83881 84007])
            ("Info-isearch-pop-state" function (:arguments ("_cmd" "file" "node")) nil [84009 84195])
            ("Info-isearch-start" function nil nil [84197 84599])
            ("Info-isearch-end" function nil nil [84601 85219])
            ("Info-isearch-filter" function (:arguments ("beg-found" "found")) nil [85221 86106])
            ("Info-extract-pointer" function (:arguments ("name" "errorname")) nil [86110 86747])
            ("Info-following-node-name-re" function (:arguments ("allowedchars")) nil [86749 87455])
            ("Info-following-node-name" function nil nil [87545 87669])
            ("Info-next" function (:user-visible-flag t) nil [87671 87937])
            ("Info-prev" function (:user-visible-flag t) nil [87939 88227])
            ("Info-up" function
               (:user-visible-flag t
                :arguments ("same-file"))
                nil [88229 89265])
            ("Info-history-back" function (:user-visible-flag t) nil [89267 89937])
            ("defalias" code nil nil [89939 89979])
            ("Info-history-forward" function (:user-visible-flag t) nil [89981 90532])
            ("add-to-list" code nil nil [90535 90739])
            ("Info-directory-toc-nodes" function (:arguments ("filename")) nil [90741 90882])
            ("Info-directory-find-file" function (:arguments ("filename" "_noerror")) nil [90884 91016])
            ("Info-directory-find-node" function (:arguments ("_filename" "_nodename" "_no-going-back")) nil [91018 91178])
            ("Info-directory" function (:user-visible-flag t) nil [91195 91302])
            ("add-to-list" code nil nil [91305 91513])
            ("Info-history-toc-nodes" function (:arguments ("filename")) nil [91515 91652])
            ("Info-history-find-file" function (:arguments ("filename" "_noerror")) nil [91654 91782])
            ("Info-history-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [91784 92480])
            ("Info-history" function (:user-visible-flag t) nil [92482 92653])
            ("add-to-list" code nil nil [92656 92766])
            ("Info-toc-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [92768 93707])
            ("Info-toc" function (:user-visible-flag t) nil [93709 94142])
            ("Info-toc-insert" function (:arguments ("nodes" "node-list" "level" "curr-file")) nil [94144 94651])
            ("Info-toc-build" function (:arguments ("file")) nil [94653 98157])
            ("Info-toc-nodes" function (:arguments ("filename")) nil [98159 99043])
            ("Info-follow-reference" function
               (:user-visible-flag t
                :arguments ("footnotename" "fork"))
                nil [99047 103207])
            ("Info-menu-entry-name-re" variable
               (:constant-flag t
                :default-value "\\(?:[^:]\\|:[^:,.;() 	
]\\)*")
                nil [103209 103596])
            ("Info-extract-menu-node-name" function (:arguments ("multi-line" "index-node")) nil [103598 104913])
            ("Info-complete-menu-buffer" variable nil nil [105054 105088])
            ("Info-complete-next-re" variable nil nil [105089 105123])
            ("Info-complete-nodes" variable nil nil [105124 105156])
            ("defvar-local" code nil nil [105157 105195])
            ("Info-node-spec-re" variable
               (:constant-flag t
                :default-value (concat (Info-following-node-name-re "^.,:") "[,:.]"))
                nil [105197 105347])
            ("Info-complete-menu-item" function (:arguments ("string" "predicate" "action")) nil [105349 108765])
            ("Info-menu" function
               (:user-visible-flag t
                :arguments ("menu-item" "fork"))
                nil [108768 110466])
            ("Info-extract-menu-item" function (:arguments ("menu-item")) nil [110468 111006])
            ("Info-extract-menu-counting" function (:arguments ("count" "no-detail")) nil [111059 111660])
            ("Info-nth-menu-item" function (:user-visible-flag t) nil [111662 111924])
            ("Info-top-node" function (:user-visible-flag t) nil [111926 112028])
            ("Info-final-node" function (:user-visible-flag t) nil [112030 112778])
            ("Info-forward-node" function
               (:user-visible-flag t
                :arguments ("not-down" "not-up" "no-error"))
                nil [112780 114059])
            ("Info-backward-node" function (:user-visible-flag t) nil [114061 115038])
            ("Info-exit" function (:user-visible-flag t) nil [115040 115195])
            ("Info-next-menu-item" function (:user-visible-flag t) nil [115197 115610])
            ("Info-last-menu-item" function (:user-visible-flag t) nil [115612 116124])
            ("Info-no-error" function (:arguments ("body")) nil [116126 116216])
            ("Info-next-preorder" function (:user-visible-flag t) nil [116218 116907])
            ("Info-last-preorder" function (:user-visible-flag t) nil [116909 118366])
            ("Info-scroll-up" function (:user-visible-flag t) nil [118368 119726])
            ("Info-mouse-scroll-up" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [119728 119974])
            ("Info-scroll-down" function (:user-visible-flag t) nil [119976 120828])
            ("Info-mouse-scroll-down" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [120830 121083])
            ("Info-next-reference-or-link" function (:arguments ("pat" "prop")) nil [121085 122014])
            ("Info-prev-reference-or-link" function (:arguments ("pat" "prop")) nil [122016 122971])
            ("Info-next-reference" function
               (:user-visible-flag t
                :arguments ("recur" "count"))
                nil [122973 123933])
            ("Info-prev-reference" function
               (:user-visible-flag t
                :arguments ("recur" "count"))
                nil [123935 124869])
            ("Info-index-nodes" function (:arguments ("file")) nil [124872 127925])
            ("Info-index-node" function (:arguments ("node" "file")) nil [127927 128869])
            ("Info-goto-index" function nil nil [128871 129030])
            ("Info-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [129047 131850])
            ("Info-index-next" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [131852 133072])
            ("Info-find-index-name" function (:arguments ("name")) nil [133074 134055])
            ("add-to-list" code nil nil [134058 134201])
            ("Info-virtual-index-nodes" variable nil nil [134203 134511])
            ("Info-virtual-index-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [134513 136208])
            ("Info-virtual-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [136210 137649])
            ("add-to-list" code nil nil [137652 137879])
            ("Info-apropos-file" variable (:default-value "*Apropos*") nil [137881 137991])
            ("Info-apropos-nodes" variable nil nil [137993 138314])
            ("Info-apropos-toc-nodes" function (:arguments ("filename")) nil [138316 138584])
            ("Info-apropos-find-file" function (:arguments ("filename" "_noerror")) nil [138586 138714])
            ("Info-apropos-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [138716 140073])
            ("Info-apropos-matches" function (:arguments ("string")) nil [140075 142626])
            ("info-apropos" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [142643 143284])
            ("add-to-list" code nil nil [143287 143449])
            ("Info-finder-file" variable (:default-value "*Finder*") nil [143451 143549])
            ("Info-finder-find-file" function (:arguments ("filename" "_noerror")) nil [143551 143677])
            ("finder-known-keywords" variable nil nil [143679 143709])
            ("declare-function" code nil nil [143710 143768])
            ("declare-function" code nil nil [143769 143823])
            ("declare-function" code nil nil [143824 143884])
            ("finder-keywords-hash" variable nil nil [143885 143914])
            ("package--builtins" variable nil nil [143915 143941])
            ("info--prettify-description" function (:arguments ("desc")) nil [143970 144294])
            ("Info-finder-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [144296 148272])
            ("info-finder" function
               (:user-visible-flag t
                :arguments ("keywords"))
                nil [148289 149075])
            ("Info-undefined" function (:user-visible-flag t) nil [149079 149168])
            ("Info-help" function (:user-visible-flag t) nil [149170 149359])
            ("Info-summary" function (:user-visible-flag t) nil [149361 149982])
            ("Info-get-token" function (:arguments ("pos" "start" "all" "errorstring")) nil [149985 151477])
            ("Info-mouse-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [151479 151941])
            ("Info-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("fork"))
                nil [151943 153033])
            ("Info-try-follow-nearest-node" function (:arguments ("fork")) nil [153057 155003])
            ("Info-mouse-follow-link" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [155005 155666])
            ("Info-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "." (quote beginning-of-buffer)) (define-key map " " (quote Info-scroll-up)) (define-key map [33554464] (quote Info-scroll-down)) (define-key map "" (quote Info-follow-nearest-node)) (define-key map "	" (quote Info-next-reference)) (define-key map "	" (quote Info-prev-reference)) (define-key map [backtab] (quote Info-prev-reference)) (define-key map "1" (quote Info-nth-menu-item)) (define-key map "2" (quote Info-nth-menu-item)) (define-key map "3" (quote Info-nth-menu-item)) (define-key map "4" (quote Info-nth-menu-item)) (define-key map "5" (quote Info-nth-menu-item)) (define-key map "6" (quote Info-nth-menu-item)) (define-key map "7" (quote Info-nth-menu-item)) (define-key map "8" (quote Info-nth-menu-item)) (define-key map "9" (quote Info-nth-menu-item)) (define-key map "0" (quote undefined)) (define-key map "?" (quote Info-summary)) (define-key map "]" (quote Info-forward-node)) (define-key map "[" (quote Info-backward-node)) (define-key map "<" (quote Info-top-node)) (define-key map ">" (quote Info-final-node)) (define-key map "b" (quote beginning-of-buffer)) (put (quote beginning-of-buffer) :advertised-binding "b") (define-key map "d" (quote Info-directory)) (define-key map "e" (quote end-of-buffer)) (define-key map "f" (quote Info-follow-reference)) (define-key map "g" (quote Info-goto-node)) (define-key map "h" (quote Info-help)) (define-key map "H" (quote describe-mode)) (define-key map "i" (quote Info-index)) (define-key map "I" (quote Info-virtual-index)) (define-key map "l" (quote Info-history-back)) (define-key map "L" (quote Info-history)) (define-key map "m" (quote Info-menu)) (define-key map "n" (quote Info-next)) (define-key map "p" (quote Info-prev)) (define-key map "q" (quote Info-exit)) (define-key map "r" (quote Info-history-forward)) (define-key map "s" (quote Info-search)) (define-key map "S" (quote Info-search-case-sensitively)) (define-key map "\356" (quote clone-buffer)) (define-key map "t" (quote Info-top-node)) (define-key map "T" (quote Info-toc)) (define-key map "u" (quote Info-up)) (define-key map "w" (quote Info-copy-current-node-name)) (define-key map "c" (quote Info-copy-current-node-name)) (define-key map "^" (quote Info-up)) (define-key map "," (quote Info-index-next)) (define-key map "" (quote Info-scroll-down)) (define-key map [mouse-2] (quote Info-mouse-follow-nearest-node)) (define-key map [follow-link] (quote mouse-face)) (define-key map [XF86Back] (quote Info-history-back)) (define-key map [XF86Forward] (quote Info-history-forward)) map)) nil [155670 158476])
            ("Info-check-pointer" function (:arguments ("item")) nil [158479 158630])
            ("easy-menu-define" code nil nil [158632 160955])
            ("info-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (tool-bar-local-item-from-menu (quote Info-history-back) "left-arrow" map Info-mode-map :rtl "right-arrow" :label "Back" :vert-only t) (tool-bar-local-item-from-menu (quote Info-history-forward) "right-arrow" map Info-mode-map :rtl "left-arrow" :label "Forward" :vert-only t) (define-key-after map [separator-1] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-prev) "prev-node" map Info-mode-map :rtl "next-node") (tool-bar-local-item-from-menu (quote Info-next) "next-node" map Info-mode-map :rtl "prev-node") (tool-bar-local-item-from-menu (quote Info-up) "up-node" map Info-mode-map :vert-only t) (define-key-after map [separator-2] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-top-node) "home" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-goto-node) "jump-to" map Info-mode-map) (define-key-after map [separator-3] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-index) "index" map Info-mode-map :label "Index") (tool-bar-local-item-from-menu (quote Info-search) "search" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-exit) "exit" map Info-mode-map :vert-only t) map)) nil [160958 162276])
            ("Info-menu-last-node" variable nil nil [162278 162310])
            ("Info-menu-update" function nil nil [162394 164473])
            ("Info-copy-current-node-name" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164477 165276])
            ("put" code nil nil [165340 165377])
            ("put" code nil nil [165378 165415])
            ("tool-bar-map" variable nil nil [165417 165438])
            ("bookmark-make-record-function" variable nil nil [165439 165477])
            ("Info-mode-syntax-table" variable (:default-value (let ((st (copy-syntax-table text-mode-syntax-table))) (modify-syntax-entry 39 "." st) st)) nil [165479 165765])
            ("Info-quoted" variable
               (:default-value (quote ((t :inherit fixed-pitch-serif)))
                :type "face")
                nil [165767 165859])
            ("Info-mode-font-lock-keywords" variable (:default-value (quote (("\342\200\230\\([\342\200\230\342\200\231]\\|[^\342\200\230\342\200\231]*\\)\342\200\231" (1 (quote Info-quoted)))))) nil [166059 166144])
            ("define-derived-mode" code nil nil [166201 171338])
            ("Info-kill-buffer" function nil nil [171429 171564])
            ("Info-clone-buffer" function nil nil [171600 172031])
            ("define-obsolete-variable-alias" code nil nil [172033 172107])
            ("Info-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map "" (quote Info-cease-edit)) map)) nil [172108 172394])
            ("make-obsolete-variable" code nil nil [172396 172502])
            ("put" code nil nil [172569 172611])
            ("define-derived-mode" code nil nil [172613 172920])
            ("make-obsolete" code nil nil [172922 173017])
            ("Info-edit" function (:user-visible-flag t) nil [173019 173237])
            ("put" code nil nil [173239 173354])
            ("make-obsolete" code nil nil [173356 173446])
            ("Info-cease-edit" function (:user-visible-flag t) nil [173448 173888])
            ("make-obsolete" code nil nil [173890 173986])
            ("Info-file-list-for-emacs" variable (:default-value (quote ("ediff" "eudc" "forms" "gnus" "info" ("Info" . "info") ("mh" . "mh-e") "sc" "message" ("dired" . "dired-x") "viper" "vip" "idlwave" ("c" . "ccmode") ("c++" . "ccmode") ("objc" . "ccmode") ("java" . "ccmode") ("idl" . "ccmode") ("pike" . "ccmode") ("skeleton" . "autotype") ("auto-insert" . "autotype") ("copyright" . "autotype") ("executable" . "autotype") ("time-stamp" . "autotype") ("quickurl" . "autotype") ("tempo" . "autotype") ("hippie-expand" . "autotype") ("cvs" . "pcl-cvs") ("ada" . "ada-mode") "calc" ("calcAlg" . "calc") ("calcDigit" . "calc") ("calcVar" . "calc") "ebrowse" "eshell" "cl" "reftex" "speedbar" "widget" "woman" ("mail-header" . "emacs-mime") ("mail-content" . "emacs-mime") ("mail-encode" . "emacs-mime") ("mail-decode" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc2231" . "emacs-mime") ("rfc2047" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc1843" . "emacs-mime") ("ietf-drums" . "emacs-mime") ("quoted-printable" . "emacs-mime") ("binhex" . "emacs-mime") ("uudecode" . "emacs-mime") ("mailcap" . "emacs-mime") ("mm" . "emacs-mime") ("mml" . "emacs-mime") "tramp" "dbus"))) nil [173989 175477])
            ("Info-find-emacs-command-nodes" function (:arguments ("command")) nil [175479 177722])
            ("Info-goto-emacs-command-node" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [177820 179569])
            ("Info-goto-emacs-key-command-node" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [179671 180460])
            ("Info-link-keymap" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [header-line down-mouse-1] (quote mouse-drag-header-line)) (define-key keymap [header-line mouse-1] (quote mouse-select-window)) (define-key keymap [header-line mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [follow-link] (quote mouse-face)) keymap)) nil [180463 181010])
            ("Info-breadcrumbs" function nil nil [181012 182731])
            ("Info-fontify-node" function nil nil [182733 202413])
            ("speedbar" include nil nil [202543 202562])
            ("declare-function" code nil nil [202594 202662])
            ("declare-function" code nil nil [202663 202726])
            ("declare-function" code nil nil [202727 202798])
            ("declare-function" code nil nil [202799 202881])
            ("declare-function" code nil nil [202882 202945])
            ("declare-function" code nil nil [202946 203011])
            ("declare-function" code nil nil [203012 203259])
            ("Info-speedbar-key-map" variable nil nil [203261 203342])
            ("Info-install-speedbar-variables" function nil nil [203344 203981])
            ("Info-speedbar-menu-items" variable (:default-value (quote (["Browse Node" speedbar-edit-line t] ["Expand Node" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract Node" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))]))) nil [203983 204359])
            ("if" code nil nil [204416 204545])
            ("Info-speedbar-browser" function (:user-visible-flag t) nil [204596 204933])
            ("declare-function" code nil nil [204972 205046])
            ("declare-function" code nil nil [205047 205126])
            ("Info-speedbar-hierarchy-buttons" function (:arguments ("_directory" "depth" "node")) nil [205128 206341])
            ("Info-speedbar-goto-node" function (:arguments ("_text" "node" "_indent")) nil [206343 207372])
            ("Info-speedbar-expand-node" function (:arguments ("text" "token" "indent")) nil [207374 208178])
            ("Info-speedbar-fetch-file-nodes" function (:arguments ("nodespec")) nil [208180 209457])
            ("Info-speedbar-buttons" function (:arguments ("_buffer")) nil [209549 209895])
            ("Info-desktop-buffer-misc-data" function (:arguments ("_desktop-dirname")) nil [209920 210290])
            ("Info-restore-desktop-buffer" function (:arguments ("_desktop-buffer-file-name" "desktop-buffer-name" "desktop-buffer-misc")) nil [210292 210986])
            ("add-to-list" code nil nil [210988 211080])
            ("declare-function" code nil nil [211104 211216])
            ("declare-function" code nil nil [211217 211280])
            ("declare-function" code nil nil [211281 211341])
            ("declare-function" code nil nil [211342 211406])
            ("Info-bookmark-make-record" function nil nil [211408 212048])
            ("Info-bookmark-jump" function (:arguments ("bmk")) nil [212065 212694])
            ("info-display-manual" function
               (:user-visible-flag t
                :arguments ("manual"))
                nil [212713 213685])
            ("info--manual-names" function (:arguments ("visited-only")) nil [213687 214268])
            ("info" package nil nil [214270 214285]))          
      :file "info.el.gz"
      :pointmax 214309
      :fsize 54328
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax '((close-paren 202562 . 202563) (symbol 202525 . 202542) (open-paren 202524 . 202525) (close-paren 1824 . 1825) (symbol 1789 . 1806) (open-paren 1788 . 1789)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("info" include nil nil [1628 1643])
            ("cl-lib" include nil nil [1663 1680])
            ("info-xref" customgroup (:user-visible-flag t) nil [1701 1795])
            ("info-xref-case-fold" variable nil nil [1877 2385])
            ("info-xref-lock-file-p" function (:arguments ("filename")) nil [2488 2682])
            ("info-xref-subfile-p" function (:arguments ("filename")) nil [2684 3180])
            ("info-xref-with-file" function (:arguments ("filename" "body")) nil [3182 4246])
            ("info-xref-output-buffer" variable
               (:constant-flag t
                :default-value "*info-xref results*")
                nil [4347 4449])
            ("info-xref-good" variable nil nil [4451 4541])
            ("info-xref-bad" variable nil nil [4542 4630])
            ("info-xref-unavail" variable nil nil [4631 4731])
            ("info-xref-output-heading" variable nil nil [4733 4878])
            ("info-xref-filename" variable nil nil [4880 5074])
            ("info-xref-xfile-alist" variable nil nil [5076 5397])
            ("info-xref-in-progress" variable nil nil [5399 5433])
            ("info-xref-with-output" function (:arguments ("body")) nil [5434 6547])
            ("info-xref-output" function (:arguments ("fmt" "args")) nil [6549 7071])
            ("put" code nil nil [7072 7123])
            ("info-xref-output-error" function (:arguments ("fmt" "args")) nil [7125 7545])
            ("put" code nil nil [7546 7603])
            ("info-xref-goto-node-p" function (:arguments ("node")) nil [8204 8854])
            ("info-xref-check-node" function (:arguments ("node")) nil [8856 10377])
            ("info-xref-check" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [10476 12509])
            ("info-xref-check-all" function (:user-visible-flag t) nil [12526 13159])
            ("info-xref-all-info-files" function nil nil [13523 14691])
            ("info-xref-check-list" function (:arguments ("filename-list")) nil [14693 15752])
            ("info-xref-node-re" variable
               (:constant-flag t
                :default-value "\\(?1:\\(([^)]*)\\)[^.,]+\\)")
                nil [15754 15861])
            ("info-xref-note-re" variable
               (:constant-flag t
                :default-value (concat "\\*[Nn]ote[ 
	]+\\(?:" "[^:]*:[ 
	]+" info-xref-node-re "\\|" info-xref-node-re "::\\)[.,]"))
                nil [16077 16274])
            ("info-xref-check-buffer" function nil nil [16276 16658])
            ("viper-mode" variable nil nil [16660 16679])
            ("gnus-registry-install" variable nil nil [16709 16739])
            ("info-xref-check-all-custom" function (:user-visible-flag t) nil [16756 19907])
            ("info-xref-docstrings" function
               (:user-visible-flag t
                :arguments ("filename-list"))
                nil [19924 22513])
            ("info-xref" package nil nil [22516 22536]))          
      :file "info-xref.el.gz"
      :pointmax 22565
      :fsize 7315
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1680 . 1681) (symbol 1645 . 1662) (open-paren 1644 . 1645)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("info" include nil nil [1710 1725])
            ("subr-x" include nil nil [1745 1762])
            ("info-lookup" customgroup (:user-visible-flag t) nil [1765 1861])
            ("info-lookup-mode" variable nil nil [1863 2069])
            ("make-variable-buffer-local" code nil nil [2070 2116])
            ("info-lookup-other-window-flag" variable (:default-value t) nil [2118 2258])
            ("info-lookup-highlight-face" variable (:default-value (quote match)) nil [2260 2439])
            ("info-lookup-highlight-overlay" variable nil nil [2441 2525])
            ("info-lookup-file-name-alist" variable (:default-value (quote (("\\`ac\\(local\\|site\\|include\\)\\.m4\\'" . autoconf-mode)))) nil [2527 2927])
            ("info-lookup-history" variable nil nil [2929 2998])
            ("info-lookup-alist" variable nil nil [3000 4535])
            ("info-lookup->topic-value" function (:arguments ("topic")) nil [4537 4620])
            ("info-lookup->mode-value" function (:arguments ("topic" "mode")) nil [4622 4717])
            ("info-lookup->regexp" function (:arguments ("topic" "mode")) nil [4719 4809])
            ("info-lookup->ignore-case" function (:arguments ("topic" "mode")) nil [4811 4906])
            ("info-lookup->doc-spec" function (:arguments ("topic" "mode")) nil [4908 5000])
            ("info-lookup->parse-rule" function (:arguments ("topic" "mode")) nil [5002 5096])
            ("info-lookup->other-modes" function (:arguments ("topic" "mode")) nil [5098 5193])
            ("info-lookup-add-help" function (:arguments ("arg")) nil [5195 5752])
            ("info-lookup-maybe-add-help" function (:arguments ("arg")) nil [5754 5967])
            ("info-lookup-add-help*" function (:arguments ("maybe" "arg")) nil [5969 7379])
            ("info-lookup-cache" variable nil nil [7381 7899])
            ("info-lookup->cache" function (:arguments ("topic")) nil [7901 8068])
            ("info-lookup->topic-cache" function (:arguments ("topic")) nil [8070 8145])
            ("info-lookup->mode-cache" function (:arguments ("topic" "mode")) nil [8147 8239])
            ("info-lookup->initialized" function (:arguments ("topic" "mode")) nil [8241 8333])
            ("info-lookup->completions" function (:arguments ("topic" "mode")) nil [8335 8514])
            ("info-lookup->refer-modes" function (:arguments ("topic" "mode")) nil [8516 8695])
            ("info-lookup->all-modes" function (:arguments ("topic" "mode")) nil [8697 8792])
            ("info-lookup-quick-all-modes" function (:arguments ("topic" "mode")) nil [8794 8894])
            ("info-lookup-reset" function (:user-visible-flag t) nil [8911 9176])
            ("info-lookup-symbol" function
               (:user-visible-flag t
                :arguments ("symbol" "mode"))
                nil [9253 9789])
            ("info-lookup-file" function
               (:user-visible-flag t
                :arguments ("file" "mode"))
                nil [9864 10352])
            ("info-lookup-interactive-arguments" function (:arguments ("topic" "query")) nil [10354 11214])
            ("info-lookup-select-mode" function nil nil [11216 12468])
            ("info-lookup-change-mode" function (:arguments ("topic")) nil [12470 12976])
            ("info-lookup" function (:arguments ("topic" "item" "mode")) nil [12978 17161])
            ("info-lookup-setup-mode" function (:arguments ("topic" "mode")) nil [17163 18451])
            ("info-lookup-make-completions" function (:arguments ("topic" "mode")) nil [18453 20425])
            ("info-lookup-guess-default" function (:arguments ("topic" "mode")) nil [20427 21070])
            ("info-lookup-guess-default*" function (:arguments ("topic" "mode")) nil [21072 21993])
            ("info-lookup-guess-c-symbol" function nil nil [21995 22962])
            ("info-lookup-guess-custom-symbol" function nil nil [22964 24387])
            ("info-lookup-guess-gdb-script-symbol" function nil nil [24389 25264])
            ("info-complete-symbol" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [25281 25572])
            ("info-complete-file" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [25589 25870])
            ("info-lookup-completions-at-point" function (:arguments ("topic" "mode")) nil [25872 27066])
            ("info-complete" function (:arguments ("topic" "mode")) nil [27068 27390])
            ("info-lookup-maybe-add-help" code nil nil [27429 28286])
            ("info-lookup-maybe-add-help" code nil nil [28288 28408])
            ("info-lookup-maybe-add-help" code nil nil [28410 28665])
            ("info-lookup-maybe-add-help" code nil nil [28667 28898])
            ("info-lookup-maybe-add-help" code nil nil [28900 30143])
            ("info-lookup-maybe-add-help" code nil nil [30145 30495])
            ("info-lookup-maybe-add-help" code nil nil [30497 30638])
            ("info-lookup-maybe-add-help" code nil nil [30640 32767])
            ("info-lookup-maybe-add-help" code nil nil [32769 33446])
            ("info-lookup-maybe-add-help" code nil nil [33448 34307])
            ("info-lookup-maybe-add-help" code nil nil [34309 34453])
            ("info-lookup-maybe-add-help" code nil nil [34455 34881])
            ("info-lookup-maybe-add-help" code nil nil [34884 35994])
            ("info-lookup-maybe-add-help" code nil nil [36072 36219])
            ("info-lookup-maybe-add-help" code nil nil [36221 36365])
            ("info-lookup-maybe-add-help" code nil nil [36367 36497])
            ("info-lookup-maybe-add-help" code nil nil [36499 36742])
            ("info-lookup-maybe-add-help" code nil nil [36744 37361])
            ("info-lookup-maybe-add-help" code nil nil [37363 37562])
            ("info-lookup-maybe-add-help" code nil nil [37564 37676])
            ("info-lookup-maybe-add-help" code nil nil [38395 40493])
            ("info-lookup-maybe-add-help" code nil nil [40681 41109])
            ("info-lookup-maybe-add-help" code nil nil [41111 41287])
            ("info-lookup-maybe-add-help" code nil nil [41289 41401])
            ("info-lookup-maybe-add-help" code nil nil [41403 41643])
            ("info-look" package nil nil [41646 41666]))          
      :file "info-look.el.gz"
      :pointmax 41695
      :fsize 12014
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1762 . 1763) (symbol 1727 . 1744) (open-paren 1726 . 1727)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2213 2307])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) (define-key map [mode-line mouse-2] (quote push-button)) (define-key map [header-line mouse-2] (quote push-button)) map)) nil [2309 2920])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2922 3246])
            ("put" code nil nil [3282 3317])
            ("put" code nil nil [3318 3362])
            ("put" code nil nil [3363 3403])
            ("put" code nil nil [3404 3439])
            ("put" code nil nil [3505 3542])
            ("put" code nil nil [3543 3619])
            ("put" code nil nil [3689 3723])
            ("put" code nil nil [3819 3858])
            ("put" code nil nil [3920 3973])
            ("button-category-symbol" function (:arguments ("type")) nil [4534 4804])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4806 6444])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6446 6585])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6587 6718])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6720 6948])
            ("button-start" function (:arguments ("button")) nil [6995 7241])
            ("button-end" function (:arguments ("button")) nil [7243 7474])
            ("button-get" function (:arguments ("button" "prop")) nil [7476 7882])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7884 8853])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8855 9685])
            ("button-label" function (:arguments ("button")) nil [9687 9941])
            ("button-type" function (:arguments ("button")) nil [9943 10035])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [10037 10205])
            ("button--area-button-p" function (:arguments ("b")) nil [10207 10386])
            ("defalias" code nil nil [10388 10479])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [10511 11439])
            ("insert-button" function (:arguments ("label" "properties")) nil [11441 11908])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [11947 14158])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [14160 14845])
            ("button-at" function (:arguments ("pos")) nil [14881 15271])
            ("next-button" function (:arguments ("pos" "count-current")) nil [15273 15839])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [15841 16848])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [16870 18202])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18204 19728])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [19730 20234])
            ("button" package nil nil [20237 20254]))          
      :file "button.el.gz"
      :pointmax 20280
      :fsize 6055
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [1203 1220])
            ("pp" include nil nil [1221 1234])
            ("ielm" customgroup (:user-visible-flag t) nil [1256 1327])
            ("ielm-noisy" variable (:default-value t) nil [1330 1427])
            ("ielm-prompt-read-only" variable (:default-value t) nil [1429 2752])
            ("ielm-prompt" variable (:default-value "ELISP> ") nil [2754 3500])
            ("ielm-prompt-internal" variable (:default-value "ELISP> ") nil [3502 3757])
            ("ielm-dynamic-return" variable (:default-value t) nil [3759 4060])
            ("ielm-dynamic-multiline-inputs" variable (:default-value t) nil [4062 4460])
            ("ielm-mode-hook" variable nil nil [4462 4617])
            ("defvaralias" code nil nil [4618 4678])
            ("*" variable nil nil [4680 4735])
            ("**" variable nil nil [4737 4800])
            ("***" variable nil nil [4802 4865])
            ("ielm-match-data" variable nil nil [4867 4944])
            ("*1" variable nil nil [4946 5286])
            ("*2" variable nil nil [5288 5637])
            ("*3" variable nil nil [5639 5989])
            ("ielm-working-buffer" variable nil nil [6013 6126])
            ("ielm-header" variable (:default-value "*** Welcome to IELM ***  Type (describe-mode) for help.
") nil [6128 6255])
            ("ielm-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ielm-tab)) (define-key map "" (quote ielm-return)) (define-key map "" (quote ielm-return-for-effect)) (define-key map "
" (quote ielm-send-input)) (define-key map "" (quote eval-defun)) (define-key map "	" (quote completion-at-point)) (define-key map "" (quote indent-sexp)) (define-key map "" (quote backward-delete-char-untabify)) (define-key map "" (quote ielm-change-working-buffer)) (define-key map "" (quote ielm-display-working-buffer)) (define-key map "" (quote ielm-print-working-buffer)) map)) nil [6257 7122])
            ("defvaralias" code nil nil [7123 7176])
            ("easy-menu-define" code nil nil [7178 7424])
            ("ielm-font-lock-keywords" variable (:default-value (quote (("\\(^\\*\\*\\*[^*]+\\*\\*\\*\\)\\(.*$\\)" (1 font-lock-comment-face) (2 font-lock-constant-face))))) nil [7426 7629])
            ("ielm-tab" function (:user-visible-flag t) nil [7653 7851])
            ("ielm-complete-filename" function nil nil [7854 8055])
            ("ielm-indent-line" function nil nil [8057 8225])
            ("ielm-print-working-buffer" function (:user-visible-flag t) nil [8260 8462])
            ("ielm-display-working-buffer" function (:user-visible-flag t) nil [8464 8738])
            ("ielm-change-working-buffer" function
               (:user-visible-flag t
                :arguments ("buf"))
                nil [8740 9227])
            ("ielm-return" function
               (:user-visible-flag t
                :arguments ("for-effect"))
                nil [9249 10157])
            ("ielm-return-for-effect" function (:user-visible-flag t) nil [10159 10279])
            ("ielm-input" variable nil nil [10281 10300])
            ("ielm-input-sender" function (:arguments ("_proc" "input")) nil [10302 10462])
            ("ielm-send-input" function
               (:user-visible-flag t
                :arguments ("for-effect"))
                nil [10464 10766])
            ("ielm-is-whitespace-or-comment" function (:arguments ("string")) nil [10791 10984])
            ("ielm-standard-output-impl" function (:arguments ("process")) nil [11002 12354])
            ("ielm-eval-input" function (:arguments ("input-string" "for-effect")) nil [12356 18944])
            ("ielm-process" function nil nil [18980 19086])
            ("ielm-pm" function nil nil [19088 19214])
            ("ielm-set-pm" function (:arguments ("pos")) nil [19216 19369])
            ("define-derived-mode" code nil nil [19387 24803])
            ("ielm-get-old-input" function nil nil [24805 25113])
            ("ielm" function (:user-visible-flag t) nil [25148 25646])
            ("ielm" package nil nil [25648 25663]))          
      :file "ielm.el.gz"
      :pointmax 25687
      :fsize 7911
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("name-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [1199 1911])
            ("insert-kbd-macro" function
               (:user-visible-flag t
                :arguments ("macroname" "keys"))
                nil [1928 5456])
            ("kbd-macro-query" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [5473 7744])
            ("apply-macro-to-region-lines" function
               (:user-visible-flag t
                :arguments ("top" "bottom" "macro"))
                nil [7761 9866])
            ("macros" package nil nil [9928 9945]))          
      :file "macros.el.gz"
      :pointmax 9971
      :fsize 3422
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("iswitchb" include nil nil [3208 3227])
            ("isearchb" customgroup (:user-visible-flag t) nil [3281 3382])
            ("isearchb-idle-timeout" variable nil nil [3384 3603])
            ("isearchb-show-completions" variable (:default-value t) nil [3605 3741])
            ("isearchb-start-buffer" variable nil nil [3743 3777])
            ("isearchb-last-buffer" variable nil nil [3778 3811])
            ("isearchb-idle-timer" variable nil nil [3812 3844])
            ("isearchb-stop" function (:arguments ("return-to-buffer" "ignore-command")) nil [3846 4351])
            ("isearchb-iswitchb" function (:user-visible-flag t) nil [4353 4920])
            ("isearchb" function (:user-visible-flag t) nil [4922 5810])
            ("isearchb-set-keybindings" function (:arguments ("modifier")) nil [5812 6054])
            ("isearchb-follow-char" function nil nil [6056 7308])
            ("isearchb-activate" function (:user-visible-flag t) nil [7325 8015])
            ("isearchb" package nil nil [8017 8036]))          
      :file "isearchb.el.gz"
      :pointmax 8064
      :fsize 3092
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [2948 2965])
            ("defalias" code nil nil [2983 3029])
            ("defalias" code nil nil [3045 3095])
            ("defalias" code nil nil [3111 3149])
            ("defalias" code nil nil [3165 3225])
            ("comment" customgroup (:user-visible-flag t) nil [3227 3342])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3429 3757])
            ("comment-fill-column" variable nil nil [3759 3926])
            ("comment-column" variable (:default-value 32) nil [3943 4340])
            ("make-variable-buffer-local" code nil nil [4341 4385])
            ("put" code nil nil [4401 4453])
            ("comment-start" variable nil nil [4470 4570])
            ("put" code nil nil [4586 4645])
            ("comment-start-skip" variable nil nil [4662 4931])
            ("put" code nil nil [4947 5002])
            ("comment-end-skip" variable nil nil [5019 5123])
            ("put" code nil nil [5139 5192])
            ("comment-end" variable (:default-value (purecopy "")) nil [5209 5355])
            ("put" code nil nil [5371 5419])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5436 5840])
            ("comment-insert-comment-function" variable nil nil [5857 6107])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6109 6460])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6462 6821])
            ("block-comment-start" variable nil nil [6839 6871])
            ("block-comment-end" variable nil nil [6872 6902])
            ("comment-quote-nested" variable (:default-value t) nil [6904 7041])
            ("comment-quote-nested-function" variable (:default-value (function comment-quote-nested-default)) nil [7043 7286])
            ("comment-continue" variable nil nil [7288 7763])
            ("comment-add" variable nil nil [7765 8123])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [8140 10343])
            ("comment-style" variable (:default-value (quote indent)) nil [10360 10786])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10803 11227])
            ("comment-inline-offset" variable (:default-value 1) nil [11229 11678])
            ("comment-multi-line" variable nil nil [11695 12131])
            ("comment-empty-lines" variable nil nil [12133 12547])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12573 12826])
            ("comment-string-reverse" function (:arguments ("s")) nil [12828 13001])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [13018 16251])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [16253 16396])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16398 16725])
            ("comment-quote-nested-default" function (:arguments ("cs" "ce" "unp")) nil [16727 18066])
            ("comment-use-global-state" variable (:default-value t) nil [18095 18549])
            ("make-obsolete-variable" code nil nil [18551 18628])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [18630 20218])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [20220 21432])
            ("comment-beginning" function nil nil [21434 23320])
            ("comment-forward" function (:arguments ("n")) nil [23322 23825])
            ("comment-enter-backward" function nil nil [23827 25391])
            ("comment-indent-default" function nil nil [25433 25780])
            ("comment-choose-indent" function (:arguments ("indent")) nil [25782 28647])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [28664 31354])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31371 32202])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32219 32786])
            ("comment-padright" function (:arguments ("str" "n")) nil [32788 34536])
            ("comment-padleft" function (:arguments ("str" "n")) nil [34563 36250])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [36267 36882])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [36884 40852])
            ("comment-make-bol-ws" function (:arguments ("len")) nil [40854 41175])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [41177 42703])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [42705 43761])
            ("comment-add" function (:arguments ("arg")) nil [43763 44162])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [44164 47666])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [47683 48683])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [48685 51193])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [51210 51672])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [51674 51868])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [51885 52277])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52294 53896])
            ("comment-auto-fill-only-comments" variable nil nil [53913 54113])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [54115 56207])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [56225 61142])
            ("comment-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [61159 62256])
            ("newcomment" package nil nil [62258 62279]))          
      :file "newcomment.el.gz"
      :pointmax 62309
      :fsize 17390
      :lastmodtime '(23727 39259 0 0)
      :unmatched-syntax '((close-paren 2965 . 2966) (symbol 2928 . 2945) (open-paren 2927 . 2928)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("icomplete" customgroup (:user-visible-flag t) nil [1979 2135])
            ("icomplete-separator" variable (:default-value " | ") nil [2137 2281])
            ("icomplete-hide-common-prefix" variable (:default-value t) nil [2283 2460])
            ("icomplete-show-matches-on-no-input" variable nil nil [2462 2614])
            ("icomplete-with-completion-tables" variable (:default-value t) nil [2616 3062])
            ("icomplete-first-match" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [3064 3190])
            ("icomplete-prospects-height" variable (:default-value 2) nil [3227 3626])
            ("icomplete-compute-delay" variable (:default-value 0.3) nil [3628 3803])
            ("icomplete-delay-completions-threshold" variable (:default-value 400) nil [3805 3953])
            ("icomplete-max-delay-chars" variable (:default-value 3) nil [3955 4083])
            ("icomplete-in-buffer" variable nil nil [4085 4189])
            ("icomplete-minibuffer-setup-hook" variable nil nil [4191 4713])
            ("icomplete-overlay" variable (:default-value (make-overlay (point-min) (point-min) nil t t)) nil [4794 4920])
            ("icomplete-pre-command-hook" function nil nil [4922 5006])
            ("icomplete-post-command-hook" function nil nil [5008 5131])
            ("icomplete-minibuffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217737] (quote minibuffer-force-complete)) (define-key map [10] (quote icomplete-force-complete-and-exit)) (define-key map [67108910] (quote icomplete-forward-completions)) (define-key map [67108908] (quote icomplete-backward-completions)) map)) nil [5133 5511])
            ("icomplete-force-complete-and-exit" function (:user-visible-flag t) nil [5513 5884])
            ("icomplete-forward-completions" function (:user-visible-flag t) nil [5886 6375])
            ("icomplete-backward-completions" function (:user-visible-flag t) nil [6377 6964])
            ("define-minor-mode" code nil nil [7022 8125])
            ("icomplete--completion-table" function nil nil [8127 8356])
            ("icomplete--completion-predicate" function nil nil [8357 8499])
            ("icomplete--field-string" function nil nil [8500 8702])
            ("icomplete--field-beg" function nil nil [8703 8826])
            ("icomplete--field-end" function nil nil [8827 8938])
            ("icomplete-simple-completing-p" function nil nil [8980 9714])
            ("icomplete-minibuffer-setup" function nil nil [9753 10402])
            ("icomplete--in-region-buffer" variable nil nil [10404 10444])
            ("icomplete--in-region-setup" function nil nil [10446 11586])
            ("icomplete-tidy" function nil nil [11634 11866])
            ("icomplete-exhibit" function nil nil [11896 14143])
            ("icomplete-completions" function (:arguments ("name" "candidates" "predicate" "require-match")) nil [14216 20623])
            ("icomplete" package nil nil [21249 21269]))          
      :file "icomplete.el.gz"
      :pointmax 21372
      :fsize 6770
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image-file" include nil nil [1302 1323])
            ("iimage" customgroup (:user-visible-flag t) nil [1326 1412])
            ("iimage-mode-image-search-path" variable nil nil [1414 1592])
            ("iimage-mode-image-filename-regex" variable (:default-value (concat "[-+./_0-9a-zA-Z]+\\." (regexp-opt (nconc (mapcar (function upcase) image-file-name-extensions) image-file-name-extensions) t))) nil [1594 1792])
            ("iimage-mode-image-regex-alist" variable (:default-value (\` (((\, (concat "\\(`?file://\\|\\[\\[\\|<\\|`\\)?" "\\(" iimage-mode-image-filename-regex "\\)" "\\(\\]\\]\\|>\\|'\\)?")) . 2)))) nil [1794 2324])
            ("iimage-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote iimage-recenter)) map)) nil [2326 2474])
            ("iimage-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2476 2637])
            ("define-obsolete-function-alias" code nil nil [2654 2727])
            ("turn-off-iimage-mode" function (:user-visible-flag t) nil [2729 2836])
            ("iimage-modification-hook" function (:arguments ("beg" "end")) nil [2838 3534])
            ("iimage-mode-buffer" function (:arguments ("arg")) nil [3536 4689])
            ("define-minor-mode" code nil nil [4706 4834])
            ("iimage" package nil nil [4836 4853]))          
      :file "iimage.el.gz"
      :pointmax 4879
      :fsize 1991
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1323 . 1324) (symbol 1282 . 1299) (open-paren 1281 . 1282)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1159 1176])
            ("rectangle" customgroup (:user-visible-flag t) nil [1179 1269])
            ("operate-on-rectangle" function (:arguments ("function" "start" "end" "coerce-tabs")) nil [1338 2617])
            ("defvar-local" code nil nil [2735 2838])
            ("rectangle--pos-cols" function (:arguments ("start" "end" "window")) nil [2840 4473])
            ("rectangle--col-pos" function (:arguments ("col" "kind")) nil [4475 5271])
            ("rectangle--point-col" function (:arguments ("pos")) nil [5273 5453])
            ("rectangle--crutches" function nil nil [5455 5577])
            ("rectangle--reset-crutches" function nil nil [5578 5788])
            ("apply-on-rectangle" function (:arguments ("function" "start" "end" "args")) nil [5817 6946])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [6948 7154])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [7156 7552])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [7721 8685])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value (quote ["" " " "  " "   " "    " "     " "      " "       " "        "]))
                nil [8687 8780])
            ("spaces-string" function (:arguments ("n")) nil [8782 8906])
            ("delete-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [8923 9414])
            ("delete-extract-rectangle" function (:arguments ("start" "end" "fill")) nil [9431 9915])
            ("extract-rectangle" function (:arguments ("start" "end")) nil [9932 10230])
            ("extract-rectangle-bounds" function (:arguments ("start" "end")) nil [10232 10656])
            ("killed-rectangle" variable nil nil [10658 10733])
            ("kill-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10750 11818])
            ("copy-rectangle-as-kill" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11835 12154])
            ("yank-rectangle" function (:user-visible-flag t) nil [12171 12322])
            ("insert-rectangle" function (:arguments ("rectangle")) nil [12339 12996])
            ("open-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [13013 13528])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13530 13733])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [13735 14002])
            ("defalias" code nil nil [14019 14075])
            ("delete-whitespace-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [14104 14669])
            ("string-rectangle-history" variable nil nil [14671 14708])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [14709 14882])
            ("defvar-local" code nil nil [14884 14934])
            ("defvar-local" code nil nil [14935 14986])
            ("rectangle--string-flush-preview" function nil nil [14988 15155])
            ("rectangle--string-erase-preview" function nil nil [15157 15295])
            ("rectangle--space-to" function (:arguments ("col")) nil [15297 15382])
            ("rectangle-preview" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [15384 15508])
            ("rectangle-preview" variable (:default-value t) nil [15510 15644])
            ("rectangle--string-preview" function nil nil [15646 17366])
            ("rectangle--inhibit-region-highlight" variable nil nil [17487 17535])
            ("string-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [17552 19640])
            ("defalias" code nil nil [19657 19704])
            ("string-insert-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [19721 20393])
            ("clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [20410 20816])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [20818 21231])
            ("rectangle-number-line-counter" variable nil nil [21287 21325])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [21327 21558])
            ("rectangle--default-line-number-format" function (:arguments ("start" "end" "start-at")) nil [21560 21739])
            ("rectangle-number-lines" function
               (:user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [21756 22714])
            ("add-function" code nil nil [22917 23026])
            ("add-function" code nil nil [23027 23140])
            ("add-function" code nil nil [23141 23229])
            ("add-function" code nil nil [23230 23316])
            ("rectangle-mark-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [15] (quote open-rectangle)) (define-key map [20] (quote string-rectangle)) (define-key map [remap exchange-point-and-mark] (quote rectangle-exchange-point-and-mark)) (dolist (cmd (quote (right-char left-char forward-char backward-char next-line previous-line))) (define-key map (vector (quote remap) cmd) (intern (format "rectangle-%s" cmd)))) map)) nil [23318 23834])
            ("define-minor-mode" code nil nil [23851 24271])
            ("rectangle-exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [24273 25099])
            ("rectangle--*-char" function (:arguments ("cmd" "n" "other-cmd")) nil [25101 26949])
            ("rectangle-right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26951 27128])
            ("rectangle-left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27129 27304])
            ("rectangle-forward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27306 27493])
            ("rectangle-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27494 27683])
            ("rectangle-next-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27685 27945])
            ("rectangle-previous-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27946 28218])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [28221 29068])
            ("rectangle--insert-region" function (:arguments ("orig" "strings")) nil [29070 29232])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [29234 29631])
            ("rectangle--place-cursor" function (:arguments ("leftcol" "left" "str")) nil [29633 29850])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [29852 35136])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [35138 35332])
            ("rect" package nil nil [35334 35349]))          
      :file "rect.el.gz"
      :pointmax 35373
      :fsize 8770
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1176 . 1177) (symbol 1141 . 1158) (open-paren 1140 . 1141)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("epg-config" include nil nil [899 920])
            ("cl-lib" include nil nil [940 957])
            ("epg-user-id" variable nil nil [960 1023])
            ("epg-user-id-alist" variable nil nil [1025 1100])
            ("epg-last-status" variable nil nil [1102 1130])
            ("epg-read-point" variable nil nil [1131 1158])
            ("epg-process-filter-running" variable nil nil [1159 1198])
            ("epg-pending-status-list" variable nil nil [1199 1235])
            ("epg-key-id" variable nil nil [1236 1259])
            ("epg-context" variable nil nil [1260 1284])
            ("epg-debug-buffer" variable nil nil [1285 1314])
            ("epg-agent-file" variable nil nil [1315 1342])
            ("epg-agent-mtime" variable nil nil [1343 1371])
            ("epg-cipher-algorithm-alist" variable
               (:constant-flag t
                :default-value (quote ((0 . "NONE") (1 . "IDEA") (2 . "3DES") (3 . "CAST5") (4 . "BLOWFISH") (7 . "AES") (8 . "AES192") (9 . "AES256") (10 . "TWOFISH") (11 . "CAMELLIA128") (12 . "CAMELLIA256") (110 . "DUMMY"))))
                nil [1404 1677])
            ("epg-pubkey-algorithm-alist" variable
               (:constant-flag t
                :default-value (quote ((1 . "RSA") (2 . "RSA_E") (3 . "RSA_S") (16 . "ELGAMAL_E") (17 . "DSA") (20 . "ELGAMAL"))))
                nil [1710 1861])
            ("epg-digest-algorithm-alist" variable
               (:constant-flag t
                :default-value (quote ((1 . "MD5") (2 . "SHA1") (3 . "RIPEMD160") (8 . "SHA256") (9 . "SHA384") (10 . "SHA512") (11 . "SHA224"))))
                nil [1894 2065])
            ("epg-compress-algorithm-alist" variable
               (:constant-flag t
                :default-value (quote ((0 . "NONE") (1 . "ZIP") (2 . "ZLIB") (3 . "BZIP2"))))
                nil [2098 2206])
            ("epg-invalid-recipients-reason-alist" variable
               (:constant-flag t
                :default-value (quote ((0 . "No specific reason given") (1 . "Not Found") (2 . "Ambiguous specification") (3 . "Wrong key usage") (4 . "Key revoked") (5 . "Key expired") (6 . "No CRL known") (7 . "CRL too old") (8 . "Policy mismatch") (9 . "Not a secret key") (10 . "Key not trusted"))))
                nil [2208 2561])
            ("epg-delete-problem-reason-alist" variable
               (:constant-flag t
                :default-value (quote ((1 . "No such key") (2 . "Must delete secret key first") (3 . "Ambiguous specification"))))
                nil [2563 2707])
            ("epg-import-ok-reason-alist" variable
               (:constant-flag t
                :default-value (quote ((0 . "Not actually changed") (1 . "Entirely new key") (2 . "New user IDs") (4 . "New signatures") (8 . "New subkeys") (16 . "Contains private key"))))
                nil [2709 2919])
            ("epg-import-problem-reason-alist" variable
               (:constant-flag t
                :default-value (quote ((0 . "No specific reason given") (1 . "Invalid Certificate") (2 . "Issuer Certificate missing") (3 . "Certificate Chain too long") (4 . "Error storing certificate"))))
                nil [2921 3149])
            ("epg-no-data-reason-alist" variable
               (:constant-flag t
                :default-value (quote ((1 . "No armored data") (2 . "Expected a packet but did not found one") (3 . "Invalid packet found, this may indicate a non OpenPGP message") (4 . "Signature expected but not found"))))
                nil [3151 3386])
            ("epg-unexpected-reason-alist" variable (:constant-flag t) nil [3388 3430])
            ("epg-key-validity-alist" variable (:default-value (quote ((111 . unknown) (105 . invalid) (100 . disabled) (114 . revoked) (101 . expired) (45 . none) (113 . undefined) (110 . never) (109 . marginal) (102 . full) (117 . ultimate)))) nil [3432 3670])
            ("epg-key-capability-alist" variable (:default-value (quote ((101 . encrypt) (115 . sign) (99 . certify) (97 . authentication) (68 . disabled)))) nil [3672 3806])
            ("epg-new-signature-type-alist" variable (:default-value (quote ((68 . detached) (67 . clear) (83 . normal)))) nil [3808 3901])
            ("epg-dn-type-alist" variable (:default-value (quote (("1.2.840.113549.1.9.1" . "EMail") ("2.5.4.12" . "T") ("2.5.4.42" . "GN") ("2.5.4.4" . "SN") ("0.2.262.1.10.7.20" . "NameDistinguisher") ("2.5.4.16" . "ADDR") ("2.5.4.15" . "BC") ("2.5.4.13" . "D") ("2.5.4.17" . "PostalCode") ("2.5.4.65" . "Pseudo") ("2.5.4.5" . "SerialNumber")))) nil [3903 4253])
            ("epg-prompt-alist" variable nil nil [4255 4284])
            ("define-error" code nil nil [4286 4323])
            ("cl-defstruct" code nil nil [4325 4625])
            ("epg--gv-nreverse" function (:arguments ("place")) nil [4627 4741])
            ("cl-defstruct" code nil nil [4743 5803])
            ("epg-make-context" function (:arguments ("protocol" "armor" "textmode" "include-certs" "cipher-algorithm" "digest-algorithm" "compress-algorithm")) nil [5883 6243])
            ("epg-context-set-armor" function (:arguments ("context" "armor")) nil [6245 6430])
            ("epg-context-set-textmode" function (:arguments ("context" "textmode")) nil [6432 6629])
            ("epg-context-set-passphrase-callback" function (:arguments ("context" "passphrase-callback")) nil [6631 7468])
            ("epg-context-set-progress-callback" function (:arguments ("context" "progress-callback")) nil [7470 8065])
            ("epg-context-set-signers" function (:arguments ("context" "signers")) nil [8067 8238])
            ("cl-defstruct" code nil nil [8240 8601])
            ("cl-defstruct" code nil nil [8603 9093])
            ("cl-defstruct" code nil nil [9095 9332])
            ("cl-defstruct" code nil nil [9334 9722])
            ("cl-defstruct" code nil nil [9724 9945])
            ("cl-defstruct" code nil nil [9947 10385])
            ("cl-defstruct" code nil nil [10387 10667])
            ("cl-defstruct" code nil nil [10669 11010])
            ("cl-defstruct" code nil nil [11012 11718])
            ("epg-context-result-for" function (:arguments ("context" "name")) nil [11720 11869])
            ("epg-context-set-result-for" function (:arguments ("context" "name" "value")) nil [11871 12176])
            ("epg-signature-to-string" function (:arguments ("signature")) nil [12178 13585])
            ("epg-verify-result-to-string" function (:arguments ("verify-result")) nil [13587 13751])
            ("epg-new-signature-to-string" function (:arguments ("new-signature")) nil [13753 14388])
            ("epg-import-result-to-string" function (:arguments ("import-result")) nil [14390 16567])
            ("epg-error-to-string" function (:arguments ("error")) nil [16569 18160])
            ("epg-errors-to-string" function (:arguments ("errors")) nil [18162 18247])
            ("epg--start" function (:arguments ("context" "args")) nil [18249 22615])
            ("epg--process-filter" function (:arguments ("process" "input")) nil [22617 24245])
            ("epg-read-output" function (:arguments ("context")) nil [24247 24619])
            ("epg-wait-for-status" function (:arguments ("context" "status-list")) nil [24621 25151])
            ("epg-wait-for-completion" function (:arguments ("context")) nil [25153 25969])
            ("epg-reset" function (:arguments ("context")) nil [25971 26403])
            ("epg-delete-output-file" function (:arguments ("context")) nil [26405 26639])
            ("if" code nil nil [26661 26815])
            ("epg--status-USERID_HINT" function (:arguments ("_context" "string")) nil [26818 27314])
            ("epg--status-NEED_PASSPHRASE" function (:arguments ("_context" "string")) nil [27316 27463])
            ("epg--status-NEED_PASSPHRASE_SYM" function (:arguments ("_context" "_string")) nil [27465 27548])
            ("epg--status-NEED_PASSPHRASE_PIN" function (:arguments ("_context" "_string")) nil [27550 27633])
            ("if" code nil nil [27655 27799])
            ("if" code nil nil [27822 27976])
            ("epg--status-GET_HIDDEN" function (:arguments ("context" "string")) nil [27979 29668])
            ("epg--prompt-GET_BOOL" function (:arguments ("_context" "string")) nil [29670 29825])
            ("epg--prompt-GET_BOOL-untrusted_key.override" function (:arguments ("_context" "_string")) nil [29827 30360])
            ("epg--status-GET_BOOL" function (:arguments ("context" "string")) nil [30362 30885])
            ("epg--status-GET_LINE" function (:arguments ("context" "string")) nil [30887 31367])
            ("epg--status-*SIG" function (:arguments ("context" "status" "string")) nil [31369 32251])
            ("epg--status-GOODSIG" function (:arguments ("context" "string")) nil [32253 32339])
            ("epg--status-EXPSIG" function (:arguments ("context" "string")) nil [32341 32429])
            ("epg--status-EXPKEYSIG" function (:arguments ("context" "string")) nil [32431 32526])
            ("epg--status-REVKEYSIG" function (:arguments ("context" "string")) nil [32528 32623])
            ("epg--status-BADSIG" function (:arguments ("context" "string")) nil [32625 32709])
            ("epg--status-NO_PUBKEY" function (:arguments ("context" "string")) nil [32711 33193])
            ("epg--status-NO_SECKEY" function (:arguments ("context" "string")) nil [33195 33367])
            ("epg--time-from-seconds" function (:arguments ("seconds")) nil [33369 33559])
            ("epg--status-ERRSIG" function (:arguments ("context" "string")) nil [33561 34416])
            ("epg--status-VALIDSIG" function (:arguments ("context" "string")) nil [34418 35573])
            ("epg--status-TRUST_UNDEFINED" function (:arguments ("context" "_string")) nil [35575 35826])
            ("epg--status-TRUST_NEVER" function (:arguments ("context" "_string")) nil [35828 36071])
            ("epg--status-TRUST_MARGINAL" function (:arguments ("context" "_string")) nil [36073 36322])
            ("epg--status-TRUST_FULLY" function (:arguments ("context" "_string")) nil [36324 36566])
            ("epg--status-TRUST_ULTIMATE" function (:arguments ("context" "_string")) nil [36568 36817])
            ("epg--status-NOTATION_NAME" function (:arguments ("context" "string")) nil [36819 37063])
            ("epg--status-NOTATION_DATA" function (:arguments ("context" "string")) nil [37065 37332])
            ("epg--status-POLICY_URL" function (:arguments ("context" "string")) nil [37334 37575])
            ("epg--status-PROGRESS" function (:arguments ("context" "string")) nil [37577 38057])
            ("epg--status-ENC_TO" function (:arguments ("context" "string")) nil [38059 38439])
            ("epg--status-DECRYPTION_FAILED" function (:arguments ("context" "_string")) nil [38441 38556])
            ("epg--status-DECRYPTION_OKAY" function (:arguments ("context" "_string")) nil [38558 38669])
            ("epg--status-NODATA" function (:arguments ("context" "string")) nil [38671 38857])
            ("epg--status-UNEXPECTED" function (:arguments ("context" "string")) nil [38859 39052])
            ("epg--status-KEYEXPIRED" function (:arguments ("context" "string")) nil [39054 39280])
            ("epg--status-KEYREVOKED" function (:arguments ("context" "_string")) nil [39282 39442])
            ("epg--status-BADARMOR" function (:arguments ("context" "_string")) nil [39444 39604])
            ("epg--status-INV_RECP" function (:arguments ("context" "string")) nil [39606 39968])
            ("epg--status-INV_SGNR" function (:arguments ("context" "string")) nil [39970 40329])
            ("epg--status-NO_RECP" function (:arguments ("context" "_string")) nil [40331 40494])
            ("epg--status-NO_SGNR" function (:arguments ("context" "_string")) nil [40496 40656])
            ("epg--status-DELETE_PROBLEM" function (:arguments ("context" "string")) nil [40658 40944])
            ("epg--status-SIG_CREATED" function (:arguments ("context" "string")) nil [40946 41582])
            ("epg--status-KEY_CREATED" function (:arguments ("context" "string")) nil [41584 41931])
            ("epg--status-KEY_NOT_CREATED" function (:arguments ("context" "_string")) nil [41933 42106])
            ("epg--status-IMPORTED" function (:arguments ("_context" "string")) nil [42108 42601])
            ("epg--status-IMPORT_OK" function (:arguments ("context" "string")) nil [42603 43176])
            ("epg--status-IMPORT_PROBLEM" function (:arguments ("context" "string")) nil [43178 43560])
            ("epg--status-IMPORT_RES" function (:arguments ("context" "string")) nil [43562 44677])
            ("epg-passphrase-callback-function" function (:arguments ("context" "key-id" "_handback")) nil [44679 45183])
            ("epg--list-keys-1" function (:arguments ("context" "name" "mode")) nil [45185 46554])
            ("epg--make-sub-key-1" function (:arguments ("line")) nil [46556 47049])
            ("epg-list-keys" function (:arguments ("context" "name" "mode")) nil [47051 50242])
            ("if" code nil nil [50264 52265])
            ("epg--args-from-sig-notations" function (:arguments ("notations")) nil [52268 52983])
            ("epg-cancel" function (:arguments ("context")) nil [52985 53395])
            ("epg-start-decrypt" function (:arguments ("context" "cipher")) nil [53397 54214])
            ("epg--check-error-for-decrypt" function (:arguments ("context")) nil [54216 54611])
            ("epg-decrypt-file" function (:arguments ("context" "cipher" "plain")) nil [54613 55175])
            ("epg-decrypt-string" function (:arguments ("context" "cipher")) nil [55177 55850])
            ("epg-start-verify" function (:arguments ("context" "signature" "signed-text")) nil [55852 57736])
            ("epg-verify-file" function (:arguments ("context" "signature" "signed-text" "plain")) nil [57738 59038])
            ("epg-verify-string" function (:arguments ("context" "signature" "signed-text")) nil [59040 60514])
            ("epg-start-sign" function (:arguments ("context" "plain" "mode")) nil [60516 62351])
            ("epg-sign-file" function (:arguments ("context" "plain" "signature" "mode")) nil [62353 63284])
            ("epg-sign-string" function (:arguments ("context" "plain" "mode")) nil [63286 64489])
            ("epg-start-encrypt" function (:arguments ("context" "plain" "recipients" "sign" "always-trust")) nil [64491 66330])
            ("epg-encrypt-file" function (:arguments ("context" "plain" "recipients" "cipher" "sign" "always-trust")) nil [66332 67316])
            ("epg-encrypt-string" function (:arguments ("context" "plain" "recipients" "sign" "always-trust")) nil [67318 68523])
            ("epg-start-export-keys" function (:arguments ("context" "keys")) nil [68525 69168])
            ("epg-export-keys-to-file" function (:arguments ("context" "keys" "file")) nil [69170 69751])
            ("epg-export-keys-to-string" function (:arguments ("context" "keys")) nil [69753 69899])
            ("epg-start-import-keys" function (:arguments ("context" "keys")) nil [69901 70829])
            ("epg--import-keys-1" function (:arguments ("context" "keys")) nil [70831 71175])
            ("epg-import-keys-from-file" function (:arguments ("context" "keys")) nil [71177 71318])
            ("epg-import-keys-from-string" function (:arguments ("context" "keys")) nil [71320 71467])
            ("epg-start-receive-keys" function (:arguments ("context" "key-id-list")) nil [71469 72013])
            ("epg-receive-keys" function (:arguments ("context" "keys")) nil [72015 72411])
            ("defalias" code nil nil [72413 72470])
            ("epg-start-delete-keys" function (:arguments ("context" "keys" "allow-secret")) nil [72472 73158])
            ("epg-delete-keys" function (:arguments ("context" "keys" "allow-secret")) nil [73160 73572])
            ("epg-start-sign-keys" function (:arguments ("context" "keys" "local")) nil [73574 74264])
            ("epg-sign-keys" function (:arguments ("context" "keys" "local")) nil [74266 74690])
            ("epg-start-generate-key" function (:arguments ("context" "parameters")) nil [74692 75798])
            ("epg-generate-key-from-file" function (:arguments ("context" "parameters")) nil [75800 76277])
            ("epg-generate-key-from-string" function (:arguments ("context" "parameters")) nil [76279 76762])
            ("epg-start-edit-key" function (:arguments ("context" "key" "edit-callback" "handback")) nil [76764 77543])
            ("epg-edit-key" function (:arguments ("context" "key" "edit-callback" "handback")) nil [77545 77950])
            ("epg--decode-percent-escape" function (:arguments ("string")) nil [77952 78370])
            ("epg--decode-hexstring" function (:arguments ("string")) nil [78372 78663])
            ("epg--decode-quotedstring" function (:arguments ("string")) nil [78665 79125])
            ("epg-dn-from-string" function (:arguments ("string")) nil [79127 80880])
            ("epg-decode-dn" function (:arguments ("alist")) nil [80882 81321])
            ("epg" package nil nil [81323 81337]))          
      :file "epg.el.gz"
      :pointmax 81360
      :fsize 15494
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 52265 . 52266) (symbol 50245 . 50261) (open-paren 50244 . 50245) (close-paren 27976 . 27977) (symbol 27803 . 27819) (open-paren 27802 . 27803) (close-paren 27799 . 27800) (symbol 27636 . 27652) (open-paren 27635 . 27636) (close-paren 26815 . 26816) (symbol 26642 . 26658) (open-paren 26641 . 26642) (close-paren 957 . 958) (symbol 922 . 939) (open-paren 921 . 922)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4858 4873])
            ("ansi-color" include nil nil [4874 4895])
            ("regexp-opt" include nil nil [4896 4917])
            ("comint" customgroup (:user-visible-flag t) nil [6629 6721])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6723 6809])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6946 7468])
            ("comint-prompt-read-only" variable nil nil [7470 8513])
            ("comint-delimiter-argument-list" variable nil nil [8515 8945])
            ("comint-input-autoexpand" variable nil nil [8947 9500])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9502 9614])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9616 9740])
            ("comint-input-ignoredups" variable nil nil [9742 9960])
            ("comint-input-ring-file-name" variable nil nil [9962 10336])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10338 10772])
            ("comint-move-point-for-output" variable nil nil [10774 11499])
            ("comint-move-point-for-matching-input" variable (:default-value (quote after-input)) nil [11501 12174])
            ("defvaralias" code nil nil [12176 12254])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [12256 12919])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12921 13206])
            ("comint-input-ring-size" variable (:default-value 500) nil [13208 13351])
            ("comint-input-ring-separator" variable (:default-value "
") nil [13353 13446])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [13448 13568])
            ("comint-process-echoes" variable nil nil [13570 13826])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "PEM" "SUDO" "[sudo]" "Repeat" "Bad" "Retype")) t) " +\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?" "\\(?: [[:alpha:]]+ .+\\)?[:\357\274\232\341\237\226]\\s *\\'")) nil [14418 15159])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [15200 15684])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [15686 15973])
            ("comint-input-filter" variable (:default-value (function comint-nonblank-p)) nil [15975 16229])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [16231 16404])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [16421 17089])
            ("comint-input-sender-no-newline" variable nil nil [17091 17212])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [17214 17659])
            ("comint-eol-on-send" variable (:default-value t) nil [17661 17818])
            ("define-obsolete-variable-alias" code nil nil [17820 17931])
            ("comint-use-prompt-regexp" variable nil nil [18107 18491])
            ("comint-mode-hook" variable nil nil [18493 18644])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [18646 19043])
            ("comint-terminfo-terminal" variable (:default-value "dumb") nil [19045 19196])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-forward-char)) (define-key map [kp-delete] (quote delete-forward-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "\357" (quote comint-clear-buffer)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [19198 25311])
            ("comint-ptyp" variable (:default-value t) nil [25347 25498])
            ("comint-input-ring" variable nil nil [25500 25530])
            ("comint-last-input-start" variable nil nil [25531 25567])
            ("comint-last-input-end" variable nil nil [25568 25602])
            ("comint-last-output-start" variable nil nil [25603 25640])
            ("comint-input-ring-index" variable nil nil [25641 25720])
            ("comint-matching-input-from-input-string" variable nil nil [25721 25822])
            ("comint-save-input-ring-index" variable nil nil [25823 25973])
            ("comint-accum-marker" variable nil nil [25975 26127])
            ("comint-stored-incomplete-input" variable nil nil [26129 26210])
            ("put" code nil nil [26212 26291])
            ("put" code nil nil [26292 26335])
            ("put" code nil nil [26336 26385])
            ("put" code nil nil [26386 26440])
            ("put" code nil nil [26441 26490])
            ("put" code nil nil [26491 26546])
            ("put" code nil nil [26547 26603])
            ("put" code nil nil [26604 26663])
            ("put" code nil nil [26664 26722])
            ("put" code nil nil [26723 26777])
            ("put" code nil nil [26778 26837])
            ("put" code nil nil [26838 26875])
            ("put" code nil nil [26877 26916])
            ("define-derived-mode" code nil nil [26918 31658])
            ("comint-check-proc" function (:arguments ("buffer")) nil [31660 31979])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31996 33321])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [33338 34120])
            ("comint-run" function (:arguments ("program")) nil [34137 34691])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [34693 36557])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [36660 38007])
            ("comint-term-environment" function nil nil [38009 38783])
            ("comint-nonblank-p" function (:arguments ("str")) nil [38785 38915])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [38917 40721])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [41853 44554])
            ("comint-write-input-ring" function nil nil [44556 45792])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [45795 45846])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [45848 46633])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [46635 47964])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [47967 48528])
            ("comint-search-arg" function (:arguments ("arg")) nil [48530 48952])
            ("comint-restore-input" function (:user-visible-flag t) nil [48954 49265])
            ("comint-search-start" function (:arguments ("arg")) nil [49267 49748])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [49782 50079])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50081 50568])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50570 50698])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [50700 50997])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [50999 52199])
            ("comint-delete-input" function nil nil [52201 52486])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52488 53450])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [53452 53845])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53847 54778])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [54780 55148])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [55151 56167])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [56169 57186])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [57189 61421])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61424 61691])
            ("comint-history-isearch" variable nil nil [61730 62432])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [62434 62623])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [62625 62840])
            ("defvar-local" code nil nil [62842 62899])
            ("comint-history-isearch-setup" function nil nil [62901 63703])
            ("comint-history-isearch-end" function nil nil [63705 64199])
            ("comint-goto-input" function (:arguments ("pos")) nil [64201 64786])
            ("comint-history-isearch-search" function nil nil [64788 67141])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [67143 68895])
            ("comint-history-isearch-wrap" function nil nil [68897 69486])
            ("comint-history-isearch-push-state" function nil nil [69488 69802])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [69804 70004])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [70008 70334])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [70336 70601])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [70603 71378])
            ("comint-delim-arg" function (:arguments ("arg")) nil [71380 72396])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [72398 74859])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [74894 75564])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [75566 83984])
            ("comint-preoutput-filter-functions" variable nil nil [83986 84634])
            ("comint-inhibit-carriage-motion" variable nil nil [84636 84796])
            ("comint-last-prompt" variable nil nil [84798 84994])
            ("comint-snapshot-last-prompt" function nil nil [84996 85539])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [85541 87791])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [87934 92072])
            ("comint-preinput-scroll-to-bottom" function nil nil [92074 93175])
            ("follow-mode" variable nil nil [93177 93197])
            ("declare-function" code nil nil [93198 93275])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [93277 94227])
            ("comint-adjust-window-point" function (:arguments ("window" "process")) nil [94230 94901])
            ("comint-adjust-point" function (:arguments ("selected")) nil [94937 95573])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [95575 96014])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [96016 96545])
            ("defalias" code nil nil [96546 96597])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [96599 96771])
            ("comint-get-old-input-default" function nil nil [96773 97722])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [97724 98118])
            ("comint-skip-prompt" function nil nil [98120 98404])
            ("comint-after-pmark-p" function nil nil [98406 98607])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [98609 99184])
            ("comint-line-beginning-position" function nil nil [99186 100273])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [100275 100804])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [100828 100904])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [101096 101941])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [101943 102525])
            ("comint-send-string" function (:arguments ("process" "string")) nil [102564 102923])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [102925 103290])
            ("comint-delete-output" function (:user-visible-flag t) nil [103319 103963])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [103965 105066])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [105203 105445])
            ("comint-show-output" function (:user-visible-flag t) nil [105447 105961])
            ("comint-clear-buffer" function (:user-visible-flag t) nil [105963 106108])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [106110 106293])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [106295 106439])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [106441 106585])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [106587 106986])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [106988 107188])
            ("comint-skip-input" function nil nil [107190 107683])
            ("comint-kill-input" function (:user-visible-flag t) nil [107685 107940])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [107942 108320])
            ("comint-send-eof" function (:user-visible-flag t) nil [108322 108460])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [108463 109545])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [109548 110021])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [110024 111199])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [111202 111522])
            ("defvar-local" code nil nil [111589 111654])
            ("defvar-local" code nil nil [111655 111716])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [111802 113841])
            ("comint-update-fence" function nil nil [113906 115323])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [115325 115997])
            ("comint-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [115999 117579])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [119063 120778])
            ("comint-check-source" function (:arguments ("fname")) nil [120781 121400])
            ("comint-extract-string" function nil nil [121402 121712])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [121714 123215])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [124338 125374])
            ("comint-completion-autolist" variable nil nil [126368 126571])
            ("comint-completion-addsuffix" variable (:default-value t) nil [126573 127116])
            ("comint-completion-recexact" variable nil nil [127118 127395])
            ("comint-completion-fignore" variable nil nil [127397 127691])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [127708 127928])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [127930 128287])
            ("comint-file-name-quote-list" variable nil nil [128289 128436])
            ("comint-directory" function (:arguments ("directory")) nil [128439 128673])
            ("comint-word" function (:arguments ("word-chars")) nil [128676 129719])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [129721 130343])
            ("comint--match-partial-filename" function nil nil [130345 130509])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [130511 131804])
            ("comint--unquote-argument" function (:arguments ("str")) nil [131806 131891])
            ("define-obsolete-function-alias" code nil nil [131892 131993])
            ("comint-match-partial-filename" function nil nil [131995 132280])
            ("comint-quote-filename" function (:arguments ("filename")) nil [132282 132750])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [132752 133024])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [133026 133208])
            ("comint-completion-at-point" function nil nil [133210 133319])
            ("define-obsolete-function-alias" code nil nil [133321 133410])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [133412 134343])
            ("comint-filename-completion" function nil nil [134345 134520])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [134522 135231])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [135233 135410])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [135411 135588])
            ("comint--complete-file-name-data" function nil nil [135590 136888])
            ("comint-dynamic-complete-as-filename" function nil nil [136890 137225])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [137227 137830])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [137833 140101])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [140103 140600])
            ("comint-displayed-dynamic-completions" variable nil nil [140812 140861])
            ("comint-dynamic-list-completions-config" variable nil nil [140863 140914])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [140916 143987])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [143990 144439])
            ("comint-accumulate" function (:user-visible-flag t) nil [144441 144957])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [144959 145389])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [145391 146146])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [146148 146420])
            ("comint-redirect-verbose" variable nil nil [148668 148869])
            ("comint-redirect-filter-functions" variable nil nil [148930 149573])
            ("comint-redirect-output-buffer" variable nil nil [149598 149694])
            ("comint-redirect-finished-regexp" variable nil nil [149696 149957])
            ("comint-redirect-insert-matching-regexp" variable nil nil [149959 150276])
            ("comint-redirect-echo-input" variable nil nil [150278 150393])
            ("comint-redirect-completed" variable nil nil [150395 150497])
            ("comint-redirect-original-mode-line-process" variable nil nil [150499 150601])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [150603 151104])
            ("comint-redirect-subvert-readonly" variable nil nil [151106 151412])
            ("comint-redirect-previous-input-string" variable nil nil [151414 151613])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [151751 152918])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [152920 153441])
            ("defalias" code nil nil [153542 153613])
            ("comint-redirect-filter" function (:arguments ("orig-filter" "process" "input-string")) nil [153615 154284])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [154287 156846])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [156863 157408])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [157425 158922])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [158939 159286])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [159303 160401])
            ("comint" package nil nil [163930 163947]))          
      :file "comint.el.gz"
      :pointmax 163973
      :fsize 44424
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [10482 10499])
            ("cl-lib" include nil nil [10519 10536])
            ("font-lock" customgroup
               (:user-visible-flag t
                :value (quote ((jit-lock custom-group))))
                nil [10573 10815])
            ("font-lock-faces" customgroup (:user-visible-flag t) nil [10817 10923])
            ("font-lock-extra-types" customgroup (:user-visible-flag t) nil [10925 11047])
            ("font-lock-maximum-size" variable (:default-value 256000) nil [11070 12126])
            ("make-obsolete-variable" code nil nil [12127 12186])
            ("font-lock-maximum-decoration" variable (:default-value t) nil [12188 13318])
            ("font-lock-verbose" variable nil nil [13320 13633])
            ("font-lock-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [14307 14398])
            ("font-lock-comment-delimiter-face" variable (:default-value (quote font-lock-comment-delimiter-face)) nil [14400 14520])
            ("font-lock-string-face" variable (:default-value (quote font-lock-string-face)) nil [14522 14610])
            ("font-lock-doc-face" variable (:default-value (quote font-lock-doc-face)) nil [14612 14700])
            ("font-lock-keyword-face" variable (:default-value (quote font-lock-keyword-face)) nil [14702 14793])
            ("font-lock-builtin-face" variable (:default-value (quote font-lock-builtin-face)) nil [14795 14886])
            ("font-lock-function-name-face" variable (:default-value (quote font-lock-function-name-face)) nil [14888 14996])
            ("font-lock-variable-name-face" variable (:default-value (quote font-lock-variable-name-face)) nil [14998 15106])
            ("font-lock-type-face" variable (:default-value (quote font-lock-type-face)) nil [15108 15205])
            ("font-lock-constant-face" variable (:default-value (quote font-lock-constant-face)) nil [15207 15316])
            ("font-lock-warning-face" variable (:default-value (quote font-lock-warning-face)) nil [15318 15429])
            ("font-lock-negation-char-face" variable (:default-value (quote font-lock-negation-char-face)) nil [15431 15599])
            ("font-lock-preprocessor-face" variable (:default-value (quote font-lock-preprocessor-face)) nil [15601 15716])
            ("define-obsolete-variable-alias" code nil nil [15718 15810])
            ("font-lock-keywords" variable nil nil [15841 21692])
            ("font-lock-keywords-alist" variable nil nil [21694 22298])
            ("put" code nil nil [22299 22354])
            ("font-lock-removed-keywords-alist" variable nil nil [22356 22756])
            ("font-lock-keywords-only" variable nil nil [22758 22909])
            ("font-lock-keywords-case-fold-search" variable nil nil [22911 23148])
            ("make-variable-buffer-local" code nil nil [23149 23214])
            ("font-lock-syntactically-fontified" variable nil nil [23216 23435])
            ("make-variable-buffer-local" code nil nil [23436 23499])
            ("font-lock-syntactic-face-function" variable (:default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face))) nil [23501 23918])
            ("font-lock-syntactic-keywords" variable nil nil [23920 25141])
            ("make-obsolete-variable" code nil nil [25142 25255])
            ("font-lock-syntax-table" variable nil nil [25257 25450])
            ("font-lock-mark-block-function" variable nil nil [25452 25718])
            ("font-lock-fontify-buffer-function" variable (:default-value (function font-lock-default-fontify-buffer)) nil [25720 25891])
            ("font-lock-unfontify-buffer-function" variable (:default-value (function font-lock-default-unfontify-buffer)) nil [25893 26116])
            ("font-lock-fontify-region-function" variable (:default-value (function font-lock-default-fontify-region)) nil [26118 26614])
            ("font-lock-unfontify-region-function" variable (:default-value (function font-lock-default-unfontify-region)) nil [26616 26853])
            ("font-lock-inhibit-thing-lock" variable nil nil [26855 27103])
            ("make-obsolete-variable" code nil nil [27104 27169])
            ("defvar-local" code nil nil [27171 27504])
            ("defvar-local" code nil nil [27506 27544])
            ("font-lock-face-attributes" variable nil nil [28036 28070])
            ("save-buffer-state" function (:arguments ("body")) nil [27745 27996])
            ("defvar-local" code nil nil [28106 28147])
            ("font-lock-specified-p" function (:arguments ("mode")) nil [28184 28571])
            ("font-lock-initial-fontify" function nil nil [28573 29135])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29137 29560])
            ("font-lock-add-keywords" function (:arguments ("mode" "keywords" "how")) nil [29562 33303])
            ("font-lock-update-removed-keyword-alist" function (:arguments ("mode" "keywords" "how")) nil [33305 34393])
            ("font-lock-remove-keywords" function (:arguments ("mode" "keywords")) nil [35191 37903])
            ("font-lock-support-mode" variable (:default-value (quote jit-lock-mode)) nil [38247 39926])
            ("fast-lock-mode" variable nil nil [39928 39951])
            ("lazy-lock-mode" variable nil nil [39952 39975])
            ("jit-lock-mode" variable nil nil [39976 39998])
            ("declare-function" code nil nil [40000 40061])
            ("declare-function" code nil nil [40062 40125])
            ("declare-function" code nil nil [40126 40171])
            ("declare-function" code nil nil [40172 40233])
            ("declare-function" code nil nil [40234 40297])
            ("declare-function" code nil nil [40298 40343])
            ("font-lock-turn-on-thing-lock" function nil nil [40345 41667])
            ("font-lock-turn-off-thing-lock" function nil nil [41669 42028])
            ("font-lock-after-fontify-buffer" function nil nil [42030 42352])
            ("font-lock-after-unfontify-buffer" function nil nil [42354 42890])
            ("font-lock-extend-after-change-region-function" variable nil nil [45542 46292])
            ("make-variable-buffer-local" code nil nil [46293 46368])
            ("font-lock-fontify-buffer" function (:arguments ("interactively")) nil [46370 47350])
            ("font-lock-unfontify-buffer" function nil nil [47352 47437])
            ("font-lock-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [47439 47749])
            ("font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [47751 47980])
            ("font-lock-flush-function" variable (:default-value (function font-lock-after-change-function)) nil [47982 48146])
            ("font-lock-flush" function (:arguments ("beg" "end")) nil [48148 48506])
            ("font-lock-ensure-function" variable (:default-value (lambda (_beg _end) (unless font-lock-fontified (font-lock-default-fontify-buffer) (unless font-lock-mode (setq font-lock-fontified nil))))) nil [48508 49014])
            ("font-lock-ensure" function (:arguments ("beg" "end")) nil [49016 49325])
            ("font-lock-default-fontify-buffer" function nil nil [49327 50081])
            ("font-lock-default-unfontify-buffer" function nil nil [50083 50422])
            ("font-lock-dont-widen" variable nil nil [50424 50627])
            ("font-lock-beg" variable nil nil [50630 50652])
            ("font-lock-end" variable nil nil [50653 50675])
            ("font-lock-extend-region-functions" variable (:default-value (quote (font-lock-extend-region-wholelines font-lock-extend-region-multiline))) nil [50676 51983])
            ("make-variable-buffer-local" code nil nil [52114 52177])
            ("font-lock-extend-region-multiline" function nil nil [52179 52948])
            ("font-lock-extend-region-wholelines" function nil nil [52950 53441])
            ("font-lock-default-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [53443 55446])
            ("font-lock-extra-managed-props" variable nil nil [55889 56102])
            ("font-lock-default-unfontify-region" function (:arguments ("beg" "end")) nil [56104 56475])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [56533 57680])
            ("jit-lock-start" variable nil nil [57682 57705])
            ("jit-lock-end" variable nil nil [57706 57727])
            ("font-lock-extend-jit-lock-region-after-change" function (:arguments ("beg" "end" "old-len")) nil [57728 61204])
            ("font-lock-fontify-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61206 62328])
            ("font-lock-prepend-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [62762 63691])
            ("font-lock-append-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [63693 64619])
            ("font-lock-fillin-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [64621 65254])
            ("font-lock--remove-face-from-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [65256 66516])
            ("font-lock-apply-syntactic-highlight" function (:arguments ("highlight")) nil [67120 68451])
            ("font-lock-fontify-syntactic-anchored-keywords" function (:arguments ("keywords" "limit")) nil [68453 69502])
            ("font-lock-fontify-syntactic-keywords-region" function (:arguments ("start" "end")) nil [69504 71314])
            ("font-lock-comment-start-skip" variable nil nil [71411 71526])
            ("font-lock-comment-end-skip" variable nil nil [71528 71634])
            ("font-lock-fontify-syntactically-region" function (:arguments ("start" "end" "loudly")) nil [71636 73372])
            ("font-lock-apply-highlight" function (:arguments ("highlight")) nil [73467 74991])
            ("font-lock-fontify-anchored-keywords" function (:arguments ("keywords" "limit")) nil [74993 76405])
            ("font-lock-fontify-keywords-region" function (:arguments ("start" "end" "loudly")) nil [76407 78796])
            ("font-lock-compile-keywords" function (:arguments ("keywords" "syntactic-keywords")) nil [78874 80712])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [80714 81592])
            ("font-lock-eval-keywords" function (:arguments ("keywords")) nil [81594 81850])
            ("font-lock-value-in-major-mode" function (:arguments ("values")) nil [81852 82205])
            ("font-lock-choose-keywords" function (:arguments ("keywords" "level")) nil [82207 82595])
            ("font-lock-refresh-defaults" function nil nil [82597 83173])
            ("font-lock-major-mode" variable nil nil [83175 83273])
            ("make-variable-buffer-local" code nil nil [83274 83324])
            ("font-lock-set-defaults" function nil nil [83326 85988])
            ("font-lock-comment-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic)))
                :type "face")
                nil [86113 86950])
            ("font-lock-comment-delimiter-face" variable
               (:default-value (quote ((default :inherit font-lock-comment-face)))
                :type "face")
                nil [86952 87129])
            ("font-lock-string-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic)))
                :type "face")
                nil [87131 87812])
            ("font-lock-doc-face" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [87814 87965])
            ("font-lock-keyword-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold)))
                :type "face")
                nil [87967 88639])
            ("font-lock-builtin-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [88641 89340])
            ("font-lock-function-name-face" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold)))
                :type "face")
                nil [89342 89893])
            ("font-lock-variable-name-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic)))
                :type "face")
                nil [89895 90656])
            ("font-lock-type-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t)))
                :type "face")
                nil [90658 91352])
            ("font-lock-constant-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t)))
                :type "face")
                nil [91354 92093])
            ("font-lock-warning-face" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [92095 92229])
            ("font-lock-negation-char-face" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [92231 92377])
            ("font-lock-preprocessor-face" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [92379 92550])
            ("font-lock-regexp-grouping-backslash" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [92552 92722])
            ("font-lock-regexp-grouping-construct" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [92724 92897])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function (:arguments ("limit")) nil [97738 99767])
            ("cpp-font-lock-keywords-source-directives" variable
               (:constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [100392 100638])
            ("cpp-font-lock-keywords-source-depth" variable (:constant-flag t) nil [100893 101075])
            ("cpp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list (quote ("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend)) (quote ("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend)) (quote ("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend)))) (quote ("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t)))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") (quote (1 font-lock-preprocessor-face prepend)) (list (+ 2 directives-depth) (quote font-lock-variable-name-face) nil t)))))
                nil [101077 102884])
            ("font-lock" package nil nil [102887 102907]))          
      :file "font-lock.el.gz"
      :pointmax 102936
      :fsize 26774
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 28070 . 28071) (symbol 27608 . 27625) (open-paren 27607 . 27608) (close-paren 10536 . 10537) (symbol 10501 . 10518) (open-paren 10500 . 10501)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1239 2285])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2287 2983])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2985 3105])
            ("make-obsolete" code nil nil [3106 3168])
            ("copy-case-table" function (:arguments ("case-table")) nil [3170 3585])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3587 4421])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4423 5201])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5203 5804])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5806 6411])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6413 7061])
            ("case-table" package nil nil [7063 7084]))          
      :file "case-table.el.gz"
      :pointmax 7114
      :fsize 2027
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1574 1591])
            ("midnight" customgroup (:user-visible-flag t) nil [1593 1694])
            ("midnight-timer" variable nil nil [1696 1892])
            ("define-minor-mode" code nil nil [1909 2397])
            ("clean-buffer-list-delay-general" variable (:default-value 3) nil [2428 2827])
            ("clean-buffer-list-delay-special" variable (:default-value 3600) nil [2829 3139])
            ("clean-buffer-list-kill-regexps" variable (:default-value (quote ("\\`\\*Man "))) nil [3141 4086])
            ("clean-buffer-list-kill-buffer-names" variable (:default-value (quote ("*Help*" "*Apropos*" "*Buffer List*" "*Compile-Log*" "*info*" "*vc*" "*vc-diff*" "*diff*"))) nil [4088 4811])
            ("clean-buffer-list-kill-never-buffer-names" variable (:default-value (quote ("*scratch*" "*Messages*"))) nil [4813 5272])
            ("clean-buffer-list-kill-never-regexps" variable (:default-value (quote ("\\` \\*Minibuf-.*\\*\\'"))) nil [5274 6066])
            ("clean-buffer-list-delay" function (:arguments ("name")) nil [6068 6807])
            ("clean-buffer-list" function (:user-visible-flag t) nil [6824 8580])
            ("midnight-period" variable (:default-value (* 24 60 60)) nil [8601 8706])
            ("midnight-hook" variable (:default-value (quote (clean-buffer-list))) nil [8708 8878])
            ("midnight-next" function nil nil [8880 9061])
            ("midnight-delay-set" function (:arguments ("symb" "tm")) nil [9078 9606])
            ("midnight-delay" variable (:default-value 3600) nil [9608 9997])
            ("midnight" package nil nil [9999 10018]))          
      :file "midnight.el.gz"
      :pointmax 10046
      :fsize 3051
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [942 973])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [998 1434])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1458 8955])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8957 9592])
            ("custom-set-faces" function (:arguments ("args")) nil [9613 10035])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10037 12340])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12502 12858])
            ("custom-reset-faces" function (:arguments ("args")) nil [12860 13176])
            ("cus-face" package nil nil [13192 13211]))          
      :file "cus-face.el.gz"
      :pointmax 13239
      :fsize 3966
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [1383 1402])
            ("tree-widget" include nil nil [1403 1425])
            ("timer" include nil nil [1426 1442])
            ("recentf-list" variable nil nil [1465 1525])
            ("recentf-enabled-p" function nil nil [1527 1659])
            ("recentf" customgroup (:user-visible-flag t) nil [1683 1785])
            ("recentf-filters" customgroup (:user-visible-flag t) nil [1787 1945])
            ("recentf-max-saved-items" variable (:default-value 20) nil [1947 2232])
            ("recentf-save-file" variable (:default-value (locate-user-emacs-file "recentf" ".recentf")) nil [2234 2668])
            ("recentf-save-file-modes" variable (:default-value 384) nil [2670 3042])
            ("recentf-exclude" variable nil nil [3044 3436])
            ("recentf-keep-default-predicate" function (:arguments ("file")) nil [3438 3708])
            ("recentf-keep" variable (:default-value (quote (recentf-keep-default-predicate))) nil [3710 4449])
            ("recentf-menu-customization-changed" function (:arguments ("variable" "value")) nil [4451 4892])
            ("recentf-menu-title" variable (:default-value "Open Recent") nil [4894 5045])
            ("recentf-menu-path" variable (:default-value (quote ("File"))) nil [5047 5335])
            ("recentf-menu-before" variable (:default-value "Open File...") nil [5337 5652])
            ("recentf-menu-action" variable (:default-value (quote find-file)) nil [5654 5859])
            ("recentf-max-menu-items" variable (:default-value 10) nil [5861 5982])
            ("recentf-menu-filter" variable nil nil [5984 8416])
            ("recentf-menu-open-all-flag" variable nil nil [8418 8598])
            ("define-obsolete-variable-alias" code nil nil [8600 8770])
            ("recentf-menu-append-commands-flag" variable (:default-value t) nil [8772 8909])
            ("recentf-auto-cleanup" variable (:default-value (quote mode)) nil [8911 10019])
            ("recentf-initialize-file-name-history" variable (:default-value t) nil [10021 10230])
            ("recentf-load-hook" variable nil nil [10232 10359])
            ("recentf-filename-handlers" variable nil nil [10361 10755])
            ("recentf-show-file-shortcuts-flag" variable (:default-value t) nil [10757 11004])
            ("recentf-case-fold-search" variable
               (:constant-flag t
                :default-value (memq system-type (quote (windows-nt cygwin))))
                nil [11024 11165])
            ("recentf-string-equal" function (:arguments ("s1" "s2")) nil [11167 11431])
            ("recentf-string-lessp" function (:arguments ("s1" "s2")) nil [11433 11704])
            ("recentf-string-member" function (:arguments ("elt" "list")) nil [11706 12054])
            ("recentf-trunc-list" function (:arguments ("l" "n")) nil [12056 12281])
            ("recentf-dump-variable" function (:arguments ("variable" "limit")) nil [12283 12930])
            ("recentf-auto-cleanup-timer" variable nil nil [12932 13072])
            ("recentf-auto-cleanup" function nil nil [13074 13662])
            ("recentf-push" function (:arguments ("filename")) nil [13687 14075])
            ("recentf-apply-filename-handlers" function (:arguments ("name")) nil [14077 14576])
            ("recentf-expand-file-name" function (:arguments ("name")) nil [14578 14849])
            ("recentf-include-p" function (:arguments ("filename")) nil [14851 15617])
            ("recentf-keep-p" function (:arguments ("filename")) nil [15619 16299])
            ("recentf-add-file" function (:arguments ("filename")) nil [16301 16608])
            ("recentf-remove-if-non-kept" function (:arguments ("filename")) nil [16610 16968])
            ("recentf-directory-compare" function (:arguments ("f1" "f2")) nil [16970 17420])
            ("recentf-digit-shortcut-command-name" function (:arguments ("n")) nil [17444 17665])
            ("recentf--shortcuts-keymap" variable (:default-value (let ((km (make-sparse-keymap))) (dolist (k (quote (0 9 8 7 6 5 4 3 2 1))) (let ((cmd (recentf-digit-shortcut-command-name k))) (defalias cmd (\` (lambda nil (interactive) (recentf-open-most-recent-file (\, k))))) (define-key km (vector (+ k 48)) cmd))) km)) nil [17667 18112])
            ("recentf-menu-items-for-commands" variable (:default-value (list ["Cleanup list" recentf-cleanup :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Edit list..." recentf-edit-list :help "Manually remove files from the recent list" :active t] ["Save list now" recentf-save-list :help "Save the list of recently opened files now" :active t] ["Options..." (customize-group "recentf") :help "Customize recently opened files menu and options" :active t])) nil [18114 18686])
            ("recentf-menu-filter-commands" variable nil nil [18688 18989])
            ("recentf-elements" function (:arguments ("n")) nil [18991 19122])
            ("recentf-make-menu-element" function (:arguments ("menu-item" "menu-value")) nil [19124 19582])
            ("recentf-menu-element-item" function (:arguments ("e")) nil [19584 19682])
            ("recentf-menu-element-value" function (:arguments ("e")) nil [19684 19784])
            ("recentf-set-menu-element-item" function (:arguments ("e" "item")) nil [19786 19905])
            ("recentf-set-menu-element-value" function (:arguments ("e" "value")) nil [19907 20031])
            ("recentf-sub-menu-element-p" function (:arguments ("e")) nil [20033 20172])
            ("recentf-make-default-menu-element" function (:arguments ("file")) nil [20174 20347])
            ("recentf-menu-elements" function (:arguments ("n")) nil [20349 20585])
            ("recentf-apply-menu-filter" function (:arguments ("filter" "l")) nil [20587 21689])
            ("recentf-menu-shortcuts" variable nil nil [21739 21770])
            ("recentf-make-menu-items" function (:arguments ("_menu")) nil [21772 23056])
            ("recentf-menu-value-shortcut" function (:arguments ("name")) nil [23058 23460])
            ("recentf-make-menu-item" function (:arguments ("elt")) nil [23462 24323])
            ("recentf-menu-bar" function nil nil [24325 24438])
            ("recentf-show-menu" function nil nil [24440 24660])
            ("recentf-hide-menu" function nil nil [24662 24841])
            ("recentf-sort-ascending" function (:arguments ("l")) nil [24875 25199])
            ("recentf-sort-descending" function (:arguments ("l")) nil [25201 25527])
            ("recentf-sort-basenames-ascending" function (:arguments ("l")) nil [25529 25906])
            ("recentf-sort-basenames-descending" function (:arguments ("l")) nil [25908 26287])
            ("recentf-sort-directories-ascending" function (:arguments ("l")) nil [26289 26634])
            ("recentf-sort-directories-descending" function (:arguments ("l")) nil [26636 26983])
            ("recentf-show-basenames" function (:arguments ("l" "no-dir")) nil [26985 27885])
            ("recentf-show-basenames-ascending" function (:arguments ("l")) nil [27887 28210])
            ("recentf-show-basenames-descending" function (:arguments ("l")) nil [28212 28539])
            ("recentf-relative-filter" function (:arguments ("l")) nil [28541 29021])
            ("recentf-arrange-rules" variable (:default-value (quote (("Elisp files (%d)" ".\\.el\\'") ("Java files (%d)" ".\\.java\\'") ("C/C++ files (%d)" "c\\(pp\\)?\\'")))) nil [29055 30032])
            ("recentf-arrange-by-rule-others" variable (:default-value "Other files (%d)") nil [30034 30509])
            ("recentf-arrange-by-rules-min-items" variable nil nil [30511 30872])
            ("recentf-arrange-by-rule-subfilter" variable nil nil [30874 31458])
            ("recentf-match-rule" function (:arguments ("file")) nil [31460 31926])
            ("recentf-arrange-by-rule" function (:arguments ("l")) nil [31928 34295])
            ("recentf-indirect-mode-rule" function (:arguments ("file")) nil [34340 34502])
            ("recentf-build-mode-rules" function nil nil [34504 35739])
            ("recentf-arrange-by-mode" function (:arguments ("l")) nil [35741 35992])
            ("recentf-file-name-nondir" function (:arguments ("l")) nil [35994 36464])
            ("recentf-dir-rule" function (:arguments ("file")) nil [36466 36595])
            ("recentf-arrange-by-dir" function (:arguments ("l")) nil [36597 36902])
            ("recentf-filter-changer-current" variable nil nil [36933 37029])
            ("recentf-filter-changer-alist" variable (:default-value (quote ((recentf-arrange-by-mode . "Grouped by Mode") (recentf-arrange-by-dir . "Grouped by Directory") (recentf-arrange-by-rule . "Grouped by Custom Rules")))) nil [37031 37643])
            ("recentf-filter-changer-select" function (:arguments ("filter")) nil [37645 37814])
            ("recentf-filter-changer" function (:arguments ("l")) nil [37816 38827])
            ("recentf-track-opened-file" function nil nil [38843 39098])
            ("recentf-track-closed-file" function nil nil [39100 39320])
            ("recentf-used-hooks" variable
               (:constant-flag t
                :default-value (quote ((find-file-hook recentf-track-opened-file) (write-file-functions recentf-track-opened-file) (kill-buffer-hook recentf-track-closed-file) (kill-emacs-hook recentf-save-list))))
                nil [39322 39593])
            ("recentf-cancel-dialog" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [39640 39813])
            ("recentf-dialog-goto-first" function (:arguments ("widget-type")) nil [39815 40252])
            ("recentf-dialog-mode-map" variable (:default-value (let ((km (copy-keymap recentf--shortcuts-keymap))) (set-keymap-parent km widget-keymap) (define-key km "q" (quote recentf-cancel-dialog)) (define-key km "n" (quote next-line)) (define-key km "p" (quote previous-line)) km)) nil [40254 40546])
            ("define-derived-mode" code nil nil [40548 40740])
            ("recentf-dialog" function (:arguments ("name" "forms")) nil [40742 41205])
            ("recentf-edit-list" variable nil nil [41232 41262])
            ("recentf-edit-list-select" function (:arguments ("widget" "_ignore")) nil [41264 41667])
            ("recentf-edit-list-validate" function (:arguments ("_ignore")) nil [41669 42093])
            ("recentf-edit-list" function (:user-visible-flag t) nil [42095 43182])
            ("recentf-open-files-action" function (:arguments ("widget" "_ignore")) nil [43209 43434])
            ("recentf--files-with-key" variable nil nil [43489 43525])
            ("recentf-show-digit-shortcut-filter" function (:arguments ("l")) nil [43527 43805])
            ("recentf-open-files-item" function (:arguments ("menu-element")) nil [43807 44744])
            ("recentf-open-files-items" function (:arguments ("files")) nil [44746 45585])
            ("recentf-open-files" function
               (:user-visible-flag t
                :arguments ("files" "buffer-name"))
                nil [45587 46794])
            ("recentf-open-more-files" function (:user-visible-flag t) nil [46796 47043])
            ("recentf-open-most-recent-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [47045 47719])
            ("recentf-save-file-header" variable
               (:constant-flag t
                :default-value ";;; Automatically generated by `recentf' on %s.
")
                nil [47763 47907])
            ("recentf-save-file-coding-system" variable
               (:constant-flag t
                :default-value (if (coding-system-p (quote utf-8-emacs)) (quote utf-8-emacs) (quote emacs-mule)))
                nil [47909 48075])
            ("recentf-save-list" function (:user-visible-flag t) nil [48077 48969])
            ("recentf-load-list" function (:user-visible-flag t) nil [48971 49630])
            ("recentf-cleanup" function (:user-visible-flag t) nil [49632 50405])
            ("recentf-mode-map" variable (:default-value (make-sparse-keymap)) nil [50430 50511])
            ("define-minor-mode" code nil nil [50528 51344])
            ("recentf-unload-function" function nil nil [51346 51471])
            ("recentf" package nil nil [51473 51491])
            ("run-hooks" code nil nil [51493 51523]))          
      :file "recentf.el.gz"
      :pointmax 51551
      :fsize 13012
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("file-name-shadow-properties-custom-type" variable
               (:constant-flag t
                :default-value (quote (list (checklist :inline t (const :tag "Invisible" :doc "Make shadowed part of filename invisible" :format "%t%n%h" :inline t (invisible t intangible t)) (list :inline t :format "%v" :tag "Face" :doc "Display shadowed part of filename using a different face" (const :format "" face) (face :value file-name-shadow)) (list :inline t :format "%t: %v%h" :tag "Brackets" :doc "    Surround shadowed part of filename with brackets" (const :format "" before-string) (string :format "%v" :size 4 :value "{") (const :format "" after-string) (string :format " and: %v" :value "} ")) (list :inline t :format "%t: %v%n%h" :tag "String" :doc "Display a string instead of the shadowed part of filename" (const :format "" display) (string :format "%v" :size 15 :value "<...ignored...>")) (const :tag "Avoid" :doc "Try to keep cursor out of shadowed part of filename" :format "%t%n%h" :inline t (field shadow))) (repeat :inline t :tag "Other Properties" (list :inline t :format "%v" (symbol :tag "Property") (sexp :tag "Value"))))))
                nil [1460 3319])
            ("file-name-shadow-properties" variable (:default-value (quote (face file-name-shadow field shadow))) nil [3321 3747])
            ("file-name-shadow-tty-properties" variable (:default-value (purecopy (quote (before-string "{" after-string "} " field shadow)))) nil [3749 4208])
            ("file-name-shadow" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [4210 4357])
            ("rfn-eshadow-setup-minibuffer-hook" variable nil nil [4359 4457])
            ("rfn-eshadow-update-overlay-hook" variable nil nil [4459 4554])
            ("rfn-eshadow-frobbed-minibufs" variable nil nil [4649 4690])
            ("defvar-local" code nil nil [4779 4817])
            ("rfn-eshadow-setup-minibuffer" function nil nil [4887 5917])
            ("rfn-eshadow-sifn-equal" function (:arguments ("goal" "pos")) nil [5919 6155])
            ("rfn-eshadow-update-overlay" function nil nil [6196 7931])
            ("define-minor-mode" code nil nil [7934 9405])
            ("rfn-eshadow" package nil nil [9408 9430]))          
      :file "rfn-eshadow.el.gz"
      :pointmax 9461
      :fsize 3213
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1442 1479])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1481 2283])
            ("setenv-history" variable nil nil [2331 2358])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2360 2462])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2464 4018])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4020 4402])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4404 5396])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5466 7869])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7871 8921])
            ("env" package nil nil [8923 8937]))          
      :file "env.el.gz"
      :pointmax 8960
      :fsize 3296
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint-last-output-start" variable nil nil [2798 2831])
            ("ansi-colors" customgroup (:user-visible-flag t) nil [2851 3331])
            ("ansi-color-faces-vector" variable (:default-value [default bold default italic underline success warning error]) nil [3333 4299])
            ("ansi-color-names-vector" variable (:default-value ["black" "red3" "green3" "yellow3" "blue2" "magenta3" "cyan3" "gray90"]) nil [4301 5588])
            ("ansi-color-control-seq-regexp" variable
               (:constant-flag t
                :default-value "\\[[0-?]*[ -/]*[@-~]")
                nil [5590 5772])
            ("ansi-color-parameter-regexp" variable
               (:constant-flag t
                :default-value "\\([0-9]*\\)[m;]")
                nil [5774 5888])
            ("ansi-color-for-comint-mode" variable (:default-value t) nil [5951 6698])
            ("ansi-color-apply-face-function" variable (:default-value (quote ansi-color-apply-overlay-face)) nil [6700 6964])
            ("ansi-color-for-comint-mode-on" function (:user-visible-flag t) nil [6981 7118])
            ("ansi-color-for-comint-mode-off" function (:user-visible-flag t) nil [7120 7262])
            ("ansi-color-for-comint-mode-filter" function (:user-visible-flag t) nil [7264 7425])
            ("ansi-color-process-output" function (:arguments ("ignored")) nil [7442 8537])
            ("define-obsolete-function-alias" code nil nil [8539 8645])
            ("defvar-local" code nil nil [8671 9031])
            ("ansi-color-filter-apply" function (:arguments ("string")) nil [9033 10379])
            ("ansi-color--find-face" function (:arguments ("codes")) nil [10381 10829])
            ("ansi-color-apply" function (:arguments ("string")) nil [10831 13186])
            ("defvar-local" code nil nil [13213 13584])
            ("ansi-color-filter-region" function (:arguments ("begin" "end")) nil [13586 14559])
            ("ansi-color-apply-on-region" function (:arguments ("begin" "end")) nil [14561 17144])
            ("ansi-color-apply-overlay-face" function (:arguments ("beg" "end" "face")) nil [17146 17379])
            ("ansi-color-make-face" function (:arguments ("property" "color")) nil [18359 19020])
            ("ansi-color-make-extent" function (:arguments ("from" "to" "object")) nil [19022 19923])
            ("ansi-color-freeze-overlay" function (:arguments ("overlay" "is-after" "begin" "end" "len")) nil [19925 20337])
            ("ansi-color-set-extent-face" function (:arguments ("extent" "face")) nil [20339 20590])
            ("ansi-color-parse-sequence" function (:arguments ("escape-seq")) nil [20613 21215])
            ("ansi-color-apply-sequence" function (:arguments ("escape-sequence" "codes")) nil [21217 22717])
            ("ansi-color-make-color-map" function nil nil [22719 23881])
            ("ansi-color-map" variable (:default-value (ansi-color-make-color-map)) nil [23883 24368])
            ("ansi-color-map-update" function (:arguments ("symbol" "value")) nil [24370 24735])
            ("ansi-color-get-face-1" function (:arguments ("ansi-code")) nil [24737 24961])
            ("ansi-color" package nil nil [24963 24984]))          
      :file "ansi-color.el.gz"
      :pointmax 25014
      :fsize 7403
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("password-cache" include nil nil [1478 1503])
            ("cl-lib" include nil nil [1524 1541])
            ("eieio" include nil nil [1543 1559])
            ("secrets-create-item" function (:prototype-flag t) nil [1561 1602])
            ("secrets-delete-item" function (:prototype-flag t) nil [1603 1644])
            ("secrets-get-alias" function (:prototype-flag t) nil [1645 1684])
            ("secrets-get-attributes" function (:prototype-flag t) nil [1685 1729])
            ("secrets-get-secret" function (:prototype-flag t) nil [1730 1770])
            ("secrets-list-collections" function (:prototype-flag t) nil [1771 1817])
            ("secrets-search-items" function (:prototype-flag t) nil [1818 1860])
            ("rfc2104-hash" function (:prototype-flag t) nil [1862 1896])
            ("plstore-open" function (:prototype-flag t) nil [1898 1932])
            ("plstore-find" function (:prototype-flag t) nil [1933 1967])
            ("plstore-put" function (:prototype-flag t) nil [1968 2001])
            ("plstore-delete" function (:prototype-flag t) nil [2002 2038])
            ("plstore-save" function (:prototype-flag t) nil [2039 2073])
            ("plstore-get-file" function (:prototype-flag t) nil [2074 2112])
            ("epg" include nil nil [2133 2147])
            ("epg-make-context" function (:prototype-flag t) nil [2188 2222])
            ("epg-context-set-passphrase-callback" function (:prototype-flag t) nil [2223 2276])
            ("epg-decrypt-string" function (:prototype-flag t) nil [2277 2313])
            ("epg-encrypt-string" function (:prototype-flag t) nil [2314 2350])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2352 2391])
            ("secrets-enabled" variable nil nil [2393 2417])
            ("auth-source" customgroup (:user-visible-flag t) nil [2419 2517])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [2534 2968])
            ("auth-source-backend" type
               (:members 
                  ( ("type" variable
                       (:documentation "The backend type."
                        :default-value "(quote netrc)"
                        :type ":initform")
                        nil nil)
                    ("source" variable
                       (:documentation "The backend source."
                        :type "string")
                        nil nil)
                    ("host" variable
                       (:documentation "The backend host."
                        :default-value "t"
                        :type "t")
                        nil nil)
                    ("user" variable
                       (:documentation "The backend user."
                        :default-value "t"
                        :type "t")
                        nil nil)
                    ("port" variable
                       (:documentation "The backend protocol."
                        :default-value "t"
                        :type "t")
                        nil nil)
                    ("data" variable
                       (:documentation "Internal backend data."
                        :default-value "nil")
                        nil nil)
                    ("create-function" variable
                       (:documentation "The create function."
                        :default-value "ignore"
                        :type "function")
                        nil nil)
                    ("search-function" variable
                       (:documentation "The search function."
                        :default-value "ignore"
                        :type "function")
                        nil nil))                  
                :type "class")
                nil [3150 4374])
            ("auth-source-protocols" variable (:default-value (quote ((imap "imap" "imaps" "143" "993") (pop3 "pop3" "pop" "pop3s" "110" "995") (ssh "ssh" "22") (sftp "sftp" "115") (smtp "smtp" "25")))) nil [4376 5029])
            ("auth-source-protocols-customize" variable
               (:constant-flag t
                :default-value (mapcar (lambda (a) (let ((p (car-safe a))) (list (quote const) :tag (upcase (symbol-name p)) p))) auth-source-protocols))
                nil [5148 5383])
            ("auth-source-creation-defaults" variable nil nil [5385 5547])
            ("auth-source-creation-prompts" variable nil nil [5549 5648])
            ("make-obsolete" code nil nil [5650 5710])
            ("auth-source-save-behavior" variable (:default-value (quote ask)) nil [5712 6047])
            ("auth-source-netrc-use-gpg-tokens" variable (:default-value (quote never)) nil [6305 7443])
            ("auth-source-do-cache" variable (:default-value t) nil [7445 7619])
            ("auth-source-debug" variable nil nil [7621 8435])
            ("auth-sources" variable (:default-value (quote ("~/.authinfo" "~/.authinfo.gpg" "~/.netrc"))) nil [8437 12925])
            ("auth-source-gpg-encrypt-to" variable (:default-value t) nil [12927 13315])
            ("auth-source-do-debug" function (:arguments ("msg")) nil [13317 13422])
            ("auth-source-do-trivia" function (:arguments ("msg")) nil [13424 13590])
            ("auth-source-do-warn" function (:arguments ("msg")) nil [13592 13862])
            ("auth-source-read-char-choice" function (:arguments ("prompt" "choices")) nil [13864 14554])
            ("auth-source-backend-parser-functions" variable nil nil [14556 14938])
            ("auth-source-backend-parse" function (:arguments ("entry")) nil [14940 15553])
            ("auth-source-backends-parser-file" function (:arguments ("entry")) nil [15555 16441])
            ("add-hook" code nil nil [16524 16606])
            ("auth-source-backends-parser-macos-keychain" function (:arguments ("entry")) nil [16608 18754])
            ("add-hook" code nil nil [18756 18848])
            ("auth-source-backends-parser-secrets" function (:arguments ("entry")) nil [18850 20821])
            ("add-hook" code nil nil [20823 20908])
            ("auth-source-backend-parse-parameters" function (:arguments ("entry" "backend")) nil [20910 21443])
            ("cl-defun" code nil nil [21498 30463])
            ("auth-source-search-backends" function (:arguments ("backends" "spec" "max" "create" "delete" "require")) nil [30465 31618])
            ("auth-source-delete" function (:arguments ("spec")) nil [31620 31938])
            ("auth-source-search-collection" function (:arguments ("collection" "value")) nil [31940 32327])
            ("auth-source-netrc-cache" variable nil nil [32329 32365])
            ("auth-source-forget-all-cached" function (:user-visible-flag t) nil [32367 32692])
            ("auth-source-format-cache-entry" function (:arguments ("spec")) nil [32694 32819])
            ("auth-source-remember" function (:arguments ("spec" "found")) nil [32821 33039])
            ("auth-source-recall" function (:arguments ("spec")) nil [33041 33183])
            ("auth-source-remembered-p" function (:arguments ("spec")) nil [33185 33322])
            ("auth-source-forget" function (:arguments ("spec")) nil [33324 33575])
            ("auth-source-forget+" function (:arguments ("spec")) nil [33577 34291])
            ("auth-source-specmatchp" function (:arguments ("spec" "stored")) nil [34293 34679])
            ("auth-source-pick-first-password" function (:arguments ("spec")) nil [34681 35002])
            ("auth-source-format-prompt" function (:arguments ("prompt" "alist")) nil [35004 35424])
            ("auth-source-ensure-strings" function (:arguments ("values")) nil [35426 35667])
            ("auth-source--aput-1" function (:arguments ("alist" "key" "val")) nil [35723 36056])
            ("auth-source--aput" function (:arguments ("var" "key" "val")) nil [36057 36151])
            ("auth-source--aget" function (:arguments ("alist" "key")) nil [36153 36216])
            ("cl-defun" code nil nil [36271 40665])
            ("auth-source-netrc-parse-next-interesting" function nil nil [40667 41039])
            ("auth-source-netrc-parse-one" function nil nil [41041 41444])
            ("auth-source-current-line" function (:arguments ("pos")) nil [41473 41696])
            ("auth-source-netrc-parse-entries" function (:arguments ("check" "max")) nil [41698 43332])
            ("auth-source-passphrase-alist" variable nil nil [43334 43375])
            ("auth-source-token-passphrase-callback-function" function (:arguments ("_context" "_key-id" "file")) nil [43377 44004])
            ("auth-source-epa-extract-gpg-token" function (:arguments ("secret" "file")) nil [44006 44511])
            ("pp-escape-newlines" variable nil nil [44513 44540])
            ("auth-source-epa-make-gpg-token" function (:arguments ("secret" "file")) nil [44542 45144])
            ("auth-source--symbol-keyword" function (:arguments ("symbol")) nil [45146 45223])
            ("auth-source-netrc-normalize" function (:arguments ("alist" "filename")) nil [45225 47030])
            ("cl-defun" code nil nil [47032 48644])
            ("auth-source-netrc-element-or-first" function (:arguments ("v")) nil [48646 48731])
            ("cl-defun" code nil nil [48918 58307])
            ("auth-source-netrc-saver" function (:arguments ("file" "add")) nil [58309 61651])
            ("auth-source-secrets-listify-pattern" function (:arguments ("pattern")) nil [61704 62653])
            ("cl-defun" code nil nil [62655 67085])
            ("auth-source-secrets-create" function (:arguments ("spec")) nil [67087 67234])
            ("cl-defun" code nil nil [67317 72015])
            ("auth-source--decode-octal-string" function (:arguments ("string")) nil [72018 72647])
            ("cl-defun" code nil nil [72649 75283])
            ("auth-source-macos-keychain-result-append" function (:arguments ("result" "generic" "k" "v")) nil [75285 75845])
            ("auth-source-macos-keychain-create" function (:arguments ("spec")) nil [75847 75926])
            ("cl-defun" code nil nil [75975 79536])
            ("cl-defun" code nil nil [79538 85734])
            ("make-obsolete" code nil nil [85865 85958])
            ("make-obsolete" code nil nil [85959 86059])
            ("auth-source-user-or-password" function (:arguments ("mode" "host" "port" "username" "create-missing" "delete-existing")) nil [86061 88978])
            ("auth-source-user-and-password" function (:arguments ("host" "user")) nil [88980 89740])
            ("auth-source" package nil nil [89742 89764]))          
      :file "auth-source.el.gz"
      :pointmax 89795
      :fsize 19784
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 2147 . 2148) (symbol 2115 . 2132) (open-paren 2114 . 2115) (close-paren 1541 . 1542) (symbol 1506 . 1523) (open-paren 1505 . 1506)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("array-max-column" variable nil nil [1473 1536])
            ("array-columns-per-line" variable nil nil [1537 1608])
            ("array-buffer-column" variable nil nil [1609 1689])
            ("array-line-length" variable nil nil [1690 1753])
            ("array-buffer-line" variable nil nil [1754 1830])
            ("array-lines-per-row" variable nil nil [1831 1896])
            ("array-max-row" variable nil nil [1897 1954])
            ("array-field-width" variable nil nil [1955 2018])
            ("array-row" variable nil nil [2019 2080])
            ("array-column" variable nil nil [2081 2148])
            ("array-rows-numbered" variable nil nil [2149 2216])
            ("array-copy-string" variable nil nil [2217 2284])
            ("array-respect-tabs" variable nil nil [2285 2354])
            ("array-cursor-in-array-range" function nil nil [2393 3209])
            ("array-current-row" function nil nil [3211 3476])
            ("array-current-column" function nil nil [3478 4140])
            ("array-update-array-position" function (:arguments ("a-row" "a-column")) nil [4142 4519])
            ("array-update-buffer-position" function nil nil [4521 4719])
            ("array-what-position" function (:user-visible-flag t) nil [4751 5087])
            ("array-display-local-variables" function (:user-visible-flag t) nil [5089 6095])
            ("array-beginning-of-field" function (:arguments ("go-there")) nil [6134 6530])
            ("array-end-of-field" function (:arguments ("go-there")) nil [6532 6937])
            ("array-move-to-cell" function (:arguments ("a-row" "a-column")) nil [6939 7441])
            ("array-move-to-row" function (:arguments ("a-row")) nil [7443 7981])
            ("array-move-to-column" function (:arguments ("a-column")) nil [7983 8602])
            ("array-move-one-row" function (:arguments ("sign")) nil [8604 9336])
            ("array-move-one-column" function (:arguments ("sign")) nil [9338 10492])
            ("array-normalize-cursor" function nil nil [10494 10888])
            ("array-maybe-scroll-horizontally" function nil nil [10890 11641])
            ("array-next-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11670 12165])
            ("array-previous-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12167 12370])
            ("array-forward-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12372 12959])
            ("array-backward-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12961 13253])
            ("array-goto-cell" function
               (:user-visible-flag t
                :arguments ("a-row" "a-column"))
                nil [13255 13526])
            ("array-field-string" function nil nil [13564 13833])
            ("array-copy-once-vertically" function (:arguments ("sign")) nil [13835 14414])
            ("array-copy-once-horizontally" function (:arguments ("sign")) nil [14416 15047])
            ("array-copy-to-row" function (:arguments ("a-row")) nil [15049 15716])
            ("array-copy-to-column" function (:arguments ("a-column")) nil [15718 16404])
            ("array-copy-to-cell" function (:arguments ("a-row" "a-column")) nil [16406 16815])
            ("array-copy-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16847 17399])
            ("array-copy-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17401 17589])
            ("array-copy-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17591 18185])
            ("array-copy-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18187 18408])
            ("array-copy-column-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18410 19255])
            ("array-copy-column-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19257 19488])
            ("array-copy-row-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19490 20782])
            ("array-copy-row-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20784 20987])
            ("array-fill-rectangle" function (:user-visible-flag t) nil [20989 23017])
            ("array-make-template" function (:user-visible-flag t) nil [23057 24270])
            ("array-reconfigure-rows" function
               (:user-visible-flag t
                :arguments ("new-columns-per-line" "new-rows-numbered"))
                nil [24272 27922])
            ("array-expand-rows" function (:user-visible-flag t) nil [27924 28084])
            ("limit-index" function (:arguments ("index" "limit")) nil [28105 28199])
            ("xor" function (:arguments ("pred1" "pred2")) nil [28201 28349])
            ("current-line" function nil nil [28351 28495])
            ("move-to-column-untabify" function (:arguments ("column")) nil [28497 28851])
            ("untabify-backward" function nil nil [28853 29015])
            ("array-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map "\341d" (quote array-display-local-variables)) (define-key map "\341m" (quote array-make-template)) (define-key map "\341e" (quote array-expand-rows)) (define-key map "\341r" (quote array-reconfigure-rows)) (define-key map "\341=" (quote array-what-position)) (define-key map "\341g" (quote array-goto-cell)) (define-key map "\341f" (quote array-fill-rectangle)) (define-key map "" (quote array-next-row)) (define-key map "" (quote array-previous-row)) (define-key map "" (quote array-forward-column)) (define-key map "" (quote array-backward-column)) (define-key map "\356" (quote array-copy-down)) (define-key map "\360" (quote array-copy-up)) (define-key map "\346" (quote array-copy-forward)) (define-key map "\342" (quote array-copy-backward)) (define-key map "\216" (quote array-copy-row-down)) (define-key map "\220" (quote array-copy-row-up)) (define-key map "\206" (quote array-copy-column-forward)) (define-key map "\202" (quote array-copy-column-backward)) map)) nil [29037 30122])
            ("put" code nil nil [30125 30163])
            ("define-derived-mode" code nil nil [30180 34393])
            ("array" package nil nil [34398 34414]))          
      :file "array.el.gz"
      :pointmax 34439
      :fsize 7467
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [12507 12546])
            ("ange-ftp" include nil nil [12567 12586])
            ("cl-lib" include nil nil [12607 12624])
            ("ring" include nil nil [12626 12641])
            ("ehelp" include nil nil [12642 12658])
            ("comint" include nil nil [12659 12676])
            ("declare-function" code nil nil [12697 12742])
            ("declare-function" code nil nil [12743 12790])
            ("declare-function" code nil nil [12791 12853])
            ("declare-function" code nil nil [12854 12898])
            ("declare-function" code nil nil [12899 12948])
            ("term" customgroup (:user-visible-flag t) nil [12950 13034])
            ("term-input-ring-size" variable (:default-value 32) nil [13515 13577])
            ("term-height" variable nil nil [14312 14332])
            ("term-width" variable nil nil [14381 14400])
            ("term-home-marker" variable nil nil [14452 14477])
            ("term-saved-home-marker" variable nil nil [14529 14659])
            ("term-start-line-column" variable nil nil [14660 14758])
            ("term-current-column" variable nil nil [14759 14834])
            ("term-current-row" variable nil nil [14835 14932])
            ("term-insert-mode" variable nil nil [14933 14962])
            ("term-vertical-motion" variable nil nil [14963 14992])
            ("term-terminal-state" variable nil nil [14993 15392])
            ("term-kill-echo-list" variable nil nil [15393 15479])
            ("term-terminal-parameter" variable nil nil [15480 15512])
            ("term-terminal-undecoded-bytes" variable nil nil [15513 15555])
            ("term-terminal-previous-parameter" variable nil nil [15556 15597])
            ("term-current-face" variable (:default-value (quote term)) nil [15598 15630])
            ("term-scroll-start" variable nil nil [15631 15708])
            ("term-scroll-end" variable nil nil [15709 15733])
            ("term-pager-count" variable nil nil [15788 15889])
            ("term-saved-cursor" variable nil nil [15890 15920])
            ("term-command-hook" variable nil nil [15921 15947])
            ("term-log-buffer" variable nil nil [15948 15976])
            ("term-scroll-with-delete" variable nil nil [15977 16258])
            ("term-pending-delete-marker" variable nil nil [16259 16294])
            ("term-old-mode-map" variable nil nil [16466 16538])
            ("term-old-mode-line-format" variable nil nil [16539 16573])
            ("term-pager-old-local-map" variable nil nil [16617 16687])
            ("term-pager-old-filter" variable nil nil [16688 16718])
            ("defvar-local" code nil nil [16756 16867])
            ("explicit-shell-file-name" variable nil nil [16869 17036])
            ("term-prompt-regexp" variable (:default-value "^") nil [17038 17475])
            ("term-delimiter-argument-list" variable nil nil [17477 17906])
            ("term-input-autoexpand" variable nil nil [17908 18426])
            ("term-input-ignoredups" variable nil nil [18428 18642])
            ("term-input-ring-file-name" variable nil nil [18644 18914])
            ("term-char-mode-buffer-read-only" variable (:default-value t) nil [18916 19425])
            ("term-char-mode-point-at-process-mark" variable (:default-value t) nil [19427 20261])
            ("term-scroll-to-bottom-on-output" variable nil nil [20263 20696])
            ("term-scroll-show-maximum-output" variable nil nil [20698 20988])
            ("term-suppress-hard-newline" variable nil nil [20990 21222])
            ("term-pending-frame" variable nil nil [21393 21424])
            ("term-get-old-input" variable (:default-value (function term-get-old-input-default)) nil [21466 21846])
            ("term-dynamic-complete-functions" variable (:default-value (quote (term-replace-by-expanded-history term-dynamic-complete-filename))) nil [21848 22148])
            ("term-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [22150 22436])
            ("term-input-filter-functions" variable (:default-value (quote nil)) nil [22438 22641])
            ("term-input-sender" variable (:default-value (function term-simple-send)) nil [22643 22995])
            ("term-partial-ansi-terminal-message" variable nil nil [22997 23107])
            ("term-eol-on-send" variable (:default-value t) nil [23109 23260])
            ("term-mode-hook" variable (:default-value (quote nil)) nil [23262 23405])
            ("term-exec-hook" variable (:default-value (quote nil)) nil [23407 23792])
            ("term-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote term-previous-input)) (define-key map "n" (quote term-next-input)) (define-key map "r" (quote term-previous-matching-input)) (define-key map "s" (quote term-next-matching-input)) (unless (featurep (quote xemacs)) (define-key map [138412146] (quote term-previous-matching-input-from-input)) (define-key map [138412147] (quote term-next-matching-input-from-input))) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-send-input)) (define-key map "" (quote term-delchar-or-maybe-eof)) (define-key map "" (quote term-bol)) (define-key map "" (quote term-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote term-interrupt-subjob)) (define-key map "" (quote term-stop-subjob)) (define-key map "" (quote term-quit-subjob)) (define-key map "" (quote term-copy-old-input)) (define-key map "" (quote term-kill-output)) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-show-maximum-output)) (define-key map "" (quote term-dynamic-list-input-ring)) (define-key map "" (quote term-next-prompt)) (define-key map "" (quote term-previous-prompt)) (define-key map "" (quote term-send-eof)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map "" (quote term-pager-toggle)) (easy-menu-define nil map "Complete menu for Term mode." (quote ("Complete" ["Complete Before Point" term-dynamic-complete t] ["Complete File Name" term-dynamic-complete-filename t] ["File Completion Listing" term-dynamic-list-filename-completions t] ["Expand File Name" term-replace-by-expanded-filename t]))) (easy-menu-define nil map "In/Out menu for Term mode." (quote ("In/Out" ["Expand History Before Point" term-replace-by-expanded-history term-input-autoexpand] ["List Input History" term-dynamic-list-input-ring t] ["Previous Input" term-previous-input t] ["Next Input" term-next-input t] ["Previous Matching Current Input" term-previous-matching-input-from-input t] ["Next Matching Current Input" term-next-matching-input-from-input t] ["Previous Matching Input..." term-previous-matching-input t] ["Next Matching Input..." term-next-matching-input t] ["Backward Matching Input..." term-backward-matching-input t] ["Forward Matching Input..." term-forward-matching-input t] ["Copy Old Input" term-copy-old-input t] ["Kill Current Input" term-kill-input t] ["Show Current Output Group" term-show-output t] ["Show Maximum Output" term-show-maximum-output t] ["Backward Output Group" term-previous-prompt t] ["Forward Output Group" term-next-prompt t] ["Kill Current Output Group" term-kill-output t]))) map)) nil [23794 26865])
            ("term-escape-char" variable nil nil [26867 27012])
            ("term-pager-break-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map " " (quote term-pager-page)) (define-key map "" (quote term-pager-line)) (define-key map "?" (quote term-pager-help)) (define-key map "h" (quote term-pager-help)) (define-key map "b" (quote term-pager-back-page)) (define-key map "" (quote term-pager-back-line)) (define-key map "q" (quote term-pager-discard)) (define-key map "D" (quote term-pager-disable)) (define-key map "<" (quote term-pager-bob)) (define-key map ">" (quote term-pager-eob)) map)) nil [27014 27842])
            ("term-ptyp" variable (:default-value t) nil [27844 27990])
            ("term-last-input-match" variable nil nil [27992 28123])
            ("term-input-ring" variable nil nil [28125 28153])
            ("term-last-input-start" variable nil nil [28154 28184])
            ("term-last-input-end" variable nil nil [28185 28213])
            ("term-input-ring-index" variable nil nil [28214 28291])
            ("term-matching-input-from-input-string" variable nil nil [28292 28391])
            ("term-pager-filter" variable (:default-value t) nil [28506 28534])
            ("put" code nil nil [28536 28577])
            ("put" code nil nil [28578 28625])
            ("put" code nil nil [28626 28673])
            ("put" code nil nil [28674 28727])
            ("put" code nil nil [28728 28785])
            ("put" code nil nil [28786 28843])
            ("put" code nil nil [28844 28879])
            ("term-in-char-mode" function nil nil [28881 28951])
            ("term-in-line-mode" function nil nil [28952 29010])
            ("term-pager-enabled" function nil nil [29054 29104])
            ("term-handling-pager" function nil nil [29105 29164])
            ("term-using-alternate-sub-buffer" function nil nil [29165 29234])
            ("term-ansi-at-host" variable nil nil [29275 29305])
            ("term-ansi-at-dir" variable nil nil [29306 29335])
            ("term-ansi-at-user" variable nil nil [29336 29366])
            ("term-ansi-at-message" variable nil nil [29367 29400])
            ("term-ansi-at-save-user" variable nil nil [29401 29436])
            ("term-ansi-at-save-pwd" variable nil nil [29437 29471])
            ("term-ansi-at-save-anon" variable nil nil [29472 29507])
            ("term-ansi-current-bold" variable nil nil [29508 29543])
            ("term-ansi-current-color" variable nil nil [29544 29578])
            ("term-ansi-face-already-done" variable nil nil [29579 29619])
            ("term-ansi-current-bg-color" variable nil nil [29620 29657])
            ("term-ansi-current-underline" variable nil nil [29658 29698])
            ("term-ansi-current-reverse" variable nil nil [29699 29737])
            ("term-ansi-current-invisible" variable nil nil [29738 29778])
            ("term-terminal-more-parameters" variable nil nil [29838 29878])
            ("term-terminal-previous-parameter-2" variable (:default-value -1) nil [29879 29925])
            ("term-terminal-previous-parameter-3" variable (:default-value -1) nil [29926 29972])
            ("term-terminal-previous-parameter-4" variable (:default-value -1) nil [29973 30019])
            ("ansi-term-color-vector" variable (:default-value [term term-color-black term-color-red term-color-green term-color-yellow term-color-blue term-color-magenta term-color-cyan term-color-white]) nil [30031 30230])
            ("term-default-fg-color" variable nil nil [30232 30395])
            ("make-obsolete-variable" code nil nil [30396 30505])
            ("term-default-bg-color" variable nil nil [30507 30670])
            ("make-obsolete-variable" code nil nil [30671 30780])
            ("term" variable
               (:default-value (\` ((t :foreground (\, term-default-fg-color) :background (\, term-default-bg-color) :inherit default)))
                :type "face")
                nil [30782 30960])
            ("term-bold" variable
               (:default-value (quote ((t :bold t)))
                :type "face")
                nil [30962 31052])
            ("term-underline" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [31054 31160])
            ("term-color-black" variable
               (:default-value (quote ((t :foreground "black" :background "black")))
                :type "face")
                nil [31162 31294])
            ("term-color-red" variable
               (:default-value (quote ((t :foreground "red3" :background "red3")))
                :type "face")
                nil [31296 31422])
            ("term-color-green" variable
               (:default-value (quote ((t :foreground "green3" :background "green3")))
                :type "face")
                nil [31424 31558])
            ("term-color-yellow" variable
               (:default-value (quote ((t :foreground "yellow3" :background "yellow3")))
                :type "face")
                nil [31560 31698])
            ("term-color-blue" variable
               (:default-value (quote ((t :foreground "blue2" :background "blue2")))
                :type "face")
                nil [31700 31830])
            ("term-color-magenta" variable
               (:default-value (quote ((t :foreground "magenta3" :background "magenta3")))
                :type "face")
                nil [31832 31974])
            ("term-color-cyan" variable
               (:default-value (quote ((t :foreground "cyan3" :background "cyan3")))
                :type "face")
                nil [31976 32106])
            ("term-color-white" variable
               (:default-value (quote ((t :foreground "white" :background "white")))
                :type "face")
                nil [32108 32240])
            ("term-buffer-maximum-size" variable (:default-value 2048) nil [32281 32571])
            ("term-raw-map" variable (:default-value (let* ((map (make-keymap)) (esc-map (make-keymap)) (i 0)) (while (< i 128) (define-key map (make-string 1 i) (quote term-send-raw)) (unless (or (eq i 79) (eq i 91)) (define-key esc-map (make-string 1 i) (quote term-send-raw-meta))) (setq i (1+ i))) (define-key map [remap self-insert-command] (quote term-send-raw)) (define-key map "" esc-map) (if (featurep (quote xemacs)) (define-key map [button2] (quote term-mouse-paste)) (define-key map [mouse-2] (quote term-mouse-paste))) (define-key map [up] (quote term-send-up)) (define-key map [down] (quote term-send-down)) (define-key map [right] (quote term-send-right)) (define-key map [left] (quote term-send-left)) (define-key map [C-up] (quote term-send-ctrl-up)) (define-key map [C-down] (quote term-send-ctrl-down)) (define-key map [C-right] (quote term-send-ctrl-right)) (define-key map [C-left] (quote term-send-ctrl-left)) (define-key map [delete] (quote term-send-del)) (define-key map [deletechar] (quote term-send-del)) (define-key map [backspace] (quote term-send-backspace)) (define-key map [home] (quote term-send-home)) (define-key map [end] (quote term-send-end)) (define-key map [insert] (quote term-send-insert)) (define-key map [S-prior] (quote scroll-down)) (define-key map [S-next] (quote scroll-up)) (define-key map [S-insert] (quote term-paste)) (define-key map [prior] (quote term-send-prior)) (define-key map [next] (quote term-send-next)) (define-key map [xterm-paste] (function term--xterm-paste)) map)) nil [32604 34277])
            ("easy-menu-define" code nil nil [34279 34773])
            ("easy-menu-define" code nil nil [34775 35460])
            ("easy-menu-define" code nil nil [35462 35954])
            ("term-raw-escape-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (quote Control-X-prefix)) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (quote term-pager-toggle)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map [134217848] (quote execute-extended-command)) map)) nil [35956 36593])
            ("term-set-escape-char" function (:arguments ("key")) nil [36595 37123])
            ("term-set-escape-char" code nil nil [37125 37175])
            ("put" code nil nil [37179 37216])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37276 37714])
            ("term-ansi-reset" function nil nil [37716 38231])
            ("define-derived-mode" code nil nil [38233 44949])
            ("term-reset-size" function (:arguments ("height" "width")) nil [44952 45573])
            ("term-check-kill-echo-list" function nil nil [46008 46634])
            ("term-send-raw-string" function (:arguments ("chars")) nil [46636 47082])
            ("term-send-raw" function (:user-visible-flag t) nil [47084 47320])
            ("term-send-raw-meta" function nil nil [47322 47915])
            ("term-mouse-paste" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [47917 48403])
            ("term-paste" function (:user-visible-flag t) nil [48405 48538])
            ("term--xterm-paste" function (:user-visible-flag t) nil [48540 48696])
            ("declare-function" code nil nil [48698 48751])
            ("term-send-up" function nil nil [49026 49096])
            ("term-send-down" function nil nil [49097 49167])
            ("term-send-right" function nil nil [49168 49238])
            ("term-send-left" function nil nil [49239 49309])
            ("term-send-ctrl-up" function nil nil [49310 49388])
            ("term-send-ctrl-down" function nil nil [49389 49467])
            ("term-send-ctrl-right" function nil nil [49468 49546])
            ("term-send-ctrl-left" function nil nil [49547 49625])
            ("term-send-home" function nil nil [49626 49697])
            ("term-send-insert" function nil nil [49698 49769])
            ("term-send-end" function nil nil [49770 49841])
            ("term-send-prior" function nil nil [49842 49913])
            ("term-send-next" function nil nil [49914 49985])
            ("term-send-del" function nil nil [49986 50057])
            ("term-send-backspace" function nil nil [50058 50133])
            ("term-char-mode" function (:user-visible-flag t) nil [50136 51357])
            ("term-line-mode" function (:user-visible-flag t) nil [51359 51931])
            ("term-line-mode-buffer-read-only-update" function nil nil [51933 52202])
            ("term-update-mode-line" function nil nil [52204 54562])
            ("term-check-proc" function (:arguments ("buffer")) nil [54564 54844])
            ("make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [54861 55664])
            ("term" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [55681 56177])
            ("term-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [56179 57569])
            ("term-sentinel" function (:arguments ("proc" "msg")) nil [57571 58334])
            ("term-handle-exit" function (:arguments ("process-name" "msg")) nil [58336 59000])
            ("term-term-name" variable (:default-value "eterm-color") nil [59003 59138])
            ("term-termcap-format" variable (:default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E[24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:") nil [59229 59978])
            ("term--bash-needs-EMACS-status" variable nil nil [60441 60598])
            ("term--bash-needs-EMACSp" function nil nil [60599 61104])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [61205 62702])
            ("term-read-input-ring" function (:arguments ("silent")) nil [63802 65719])
            ("term-write-input-ring" function nil nil [65721 66904])
            ("term-dynamic-list-input-ring" function (:user-visible-flag t) nil [66907 67944])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [67947 68396])
            ("term-search-arg" function (:arguments ("arg")) nil [68398 68800])
            ("term-search-start" function (:arguments ("arg")) nil [68802 69269])
            ("term-previous-input-string" function (:arguments ("arg")) nil [69303 69588])
            ("term-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69590 69728])
            ("term-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69730 69854])
            ("term-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [69856 70147])
            ("term-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [70149 71339])
            ("term-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [71341 72131])
            ("term-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72133 72520])
            ("term-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [72522 73258])
            ("term-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [73260 73624])
            ("term-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [73627 74853])
            ("term-replace-by-expanded-history-before-point" function (:arguments ("silent")) nil [74856 78483])
            ("term-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78486 78747])
            ("term-within-quotes" function (:arguments ("beg" "end")) nil [78750 79070])
            ("term-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [79072 79335])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [79337 80106])
            ("term-delim-arg" function (:arguments ("arg")) nil [80244 80782])
            ("term-arguments" function (:arguments ("string" "nth" "mth")) nil [80784 82276])
            ("term-send-input" function (:user-visible-flag t) nil [82327 86254])
            ("term-get-old-input-default" function nil nil [86256 86563])
            ("term-copy-old-input" function (:user-visible-flag t) nil [86565 86949])
            ("term-skip-prompt" function nil nil [86951 87257])
            ("term-after-pmark-p" function nil nil [87260 87730])
            ("term-simple-send" function (:arguments ("proc" "string")) nil [87732 87981])
            ("term-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87983 88379])
            ("term-read-noecho" function (:arguments ("prompt" "stars")) nil [88574 90577])
            ("term-send-invisible" function
               (:user-visible-flag t
                :arguments ("str" "proc"))
                nil [90579 91212])
            ("term-watch-for-password-prompt" function (:arguments ("string")) nil [91283 91671])
            ("term-input-chunk-size" variable (:default-value 512) nil [91712 91926])
            ("term-send-string" function (:arguments ("proc" "str")) nil [91928 92589])
            ("term-send-region" function (:arguments ("proc" "start" "end")) nil [92591 92877])
            ("term-kill-output" function (:user-visible-flag t) nil [92907 93213])
            ("term-show-output" function (:user-visible-flag t) nil [93215 93525])
            ("term-interrupt-subjob" function (:user-visible-flag t) nil [93527 93645])
            ("term-kill-subjob" function (:user-visible-flag t) nil [93647 93765])
            ("term-quit-subjob" function (:user-visible-flag t) nil [93767 93885])
            ("term-stop-subjob" function (:user-visible-flag t) nil [93887 94257])
            ("term-continue-subjob" function (:user-visible-flag t) nil [94259 94455])
            ("term-kill-input" function (:user-visible-flag t) nil [94457 94734])
            ("term-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [94736 94938])
            ("term-send-eof" function (:user-visible-flag t) nil [94940 95050])
            ("term-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [95052 95681])
            ("term-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [95683 96083])
            ("term-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [96086 96341])
            ("term-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [96343 96502])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [99688 99971])
            ("term-check-source" function (:arguments ("fname")) nil [100413 100687])
            ("term-extract-string" function nil nil [101808 102259])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [102261 103011])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [104293 105179])
            ("term-horizontal-column" function nil nil [105297 105383])
            ("term-vertical-motion" function (:arguments ("count")) nil [105448 105533])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [105682 107033])
            ("term-start-line-column" function nil nil [107094 107323])
            ("term-current-column" function nil nil [107395 107503])
            ("term-move-columns" function (:arguments ("delta")) nil [107578 108037])
            ("term-insert-char" function (:arguments ("char" "count")) nil [108091 108254])
            ("term-current-row" function nil nil [108256 108476])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [108478 108615])
            ("term-terminal-pos" function nil nil [108617 108881])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [108977 111405])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [111558 127406])
            ("defvar-local" code nil nil [127408 127595])
            ("term-set-goto-process-mark" function nil nil [127597 128147])
            ("term-goto-process-mark-maybe" function nil nil [128149 128798])
            ("term-process-mark" function nil nil [128800 128943])
            ("term-handle-deferred-scroll" function nil nil [128945 129229])
            ("term-reset-terminal" function nil nil [129231 129640])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [129776 132839])
            ("term-handle-ansi-escape" function (:arguments ("proc" "char")) nil [132953 137252])
            ("term-set-scroll-region" function (:arguments ("top" "bottom")) nil [137254 137915])
            ("term-command-hook" function (:arguments ("string")) nil [139167 139905])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [140137 140244])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [140246 140807])
            ("term-goto-home" function nil nil [141030 141244])
            ("term-goto" function (:arguments ("row" "col")) nil [141246 141599])
            ("term-process-pager" function nil nil [141666 142247])
            ("term-pager-line" function (:arguments ("lines")) nil [142249 142565])
            ("term-pager-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [142567 142737])
            ("term-pager-bob" function nil nil [142791 142963])
            ("term-pager-eob" function nil nil [143011 143165])
            ("term-pager-back-line" function (:arguments ("lines")) nil [143167 143429])
            ("term-pager-back-page" function (:arguments ("arg")) nil [143431 143530])
            ("term-pager-discard" function nil nil [143532 143677])
            ("term-pager-disable" function nil nil [143778 143942])
            ("term-pager-enable" function nil nil [143972 144143])
            ("term-pager-toggle" function nil nil [144145 144258])
            ("term-pager-help" function (:user-visible-flag t) nil [144260 145451])
            ("term-pager-continue" function (:arguments ("new-count")) nil [145453 145889])
            ("term-handle-scroll" function (:arguments ("down")) nil [146030 147625])
            ("term-down" function (:arguments ("down" "check-for-scroll")) nil [147627 148747])
            ("term-unwrap-line" function nil nil [148932 149009])
            ("term-erase-in-line" function (:arguments ("kind")) nil [149011 150266])
            ("term-erase-in-display" function (:arguments ("kind")) nil [150268 151049])
            ("term-delete-chars" function (:arguments ("count")) nil [151051 151288])
            ("term-insert-spaces" function (:arguments ("count")) nil [151467 152190])
            ("term-delete-lines" function (:arguments ("lines")) nil [152192 153083])
            ("term-insert-lines" function (:arguments ("lines")) nil [153085 154360])
            ("term-start-output-log" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [154363 155070])
            ("term-stop-output-log" function (:user-visible-flag t) nil [155072 155195])
            ("term-show-maximum-output" function (:user-visible-flag t) nil [155197 155349])
            ("term-load-hook" variable nil nil [155388 155501])
            ("run-hooks" code nil nil [155503 155530])
            ("term-completion-autolist" variable nil nil [156487 156675])
            ("term-completion-addsuffix" variable (:default-value t) nil [156677 157163])
            ("term-completion-recexact" variable nil nil [157165 157425])
            ("term-completion-fignore" variable nil nil [157427 157750])
            ("term-file-name-prefix" variable nil nil [157752 157957])
            ("term-directory" function (:arguments ("directory")) nil [157960 158189])
            ("term-word" function (:arguments ("word-chars")) nil [158192 158806])
            ("term-match-partial-filename" function nil nil [158809 159076])
            ("term-dynamic-complete" function (:user-visible-flag t) nil [159079 159494])
            ("term-dynamic-complete-filename" function (:user-visible-flag t) nil [159497 160428])
            ("term-dynamic-complete-as-filename" function nil nil [160430 163008])
            ("term-replace-by-expanded-filename" function (:user-visible-flag t) nil [163011 163659])
            ("term-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [163662 165641])
            ("term-dynamic-list-filename-completions" function (:user-visible-flag t) nil [165643 166211])
            ("term-dynamic-list-completions" function (:arguments ("completions")) nil [166214 167288])
            ("term-ansi-make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [167346 168115])
            ("term-ansi-buffer-name" variable nil nil [168117 168151])
            ("term-ansi-default-program" variable nil nil [168152 168190])
            ("term-ansi-buffer-base-name" variable nil nil [168191 168230])
            ("ansi-term" function
               (:user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [168247 169962])
            ("serial-port-is-file-p" function nil nil [170066 170397])
            ("serial-name-history" variable (:default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1"))) nil [170399 170665])
            ("serial-speed-history" variable (:default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200")) nil [170667 170978])
            ("serial-nice-speed-history" function nil nil [170980 171369])
            ("serial-no-speed" variable
               (:constant-flag t
                :default-value "nil")
                nil [171371 171638])
            ("serial-supported-or-barf" function nil nil [171640 171840])
            ("serial-read-name" function nil nil [171842 173932])
            ("serial-read-speed" function nil nil [173934 174907])
            ("serial-term" function
               (:user-visible-flag t
                :arguments ("port" "speed"))
                nil [174924 176092])
            ("serial-mode-line-speed-menu" variable nil nil [176094 176134])
            ("serial-mode-line-config-menu" variable nil nil [176135 176176])
            ("serial-speed" function nil nil [176178 176394])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [176396 176790])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [176792 176886])
            ("serial-update-speed-menu" function nil nil [176888 177885])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [177887 178327])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [178329 178425])
            ("serial-update-config-menu" function nil nil [178427 179771])
            ("term" package nil nil [183322 183337]))          
      :file "term.el.gz"
      :pointmax 183361
      :fsize 50382
      :lastmodtime '(23868 45261 0 0)
      :unmatched-syntax '((close-paren 12624 . 12625) (symbol 12589 . 12606) (open-paren 12588 . 12589) (close-paren 12586 . 12587) (symbol 12549 . 12566) (open-paren 12548 . 12549)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("autoarg-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (dotimes (i 10) (define-key map (\` [(\, (+ 48 i))]) (quote digit-argument)) (define-key map (\` [(control (\, (+ 48 i)))]) (quote self-insert-command))) (define-key map " " (quote autoarg-terminate)) map)) nil [1726 2061])
            ("autoarg-kp-digits" variable (:default-value (let (alist) (dotimes (i 10 alist) (push (cons (intern (format "kp-%d" i)) i) alist)))) nil [2294 2419])
            ("autoarg-kp-digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2421 2950])
            ("autoarg-kp-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (dotimes (i 10) (let ((sym (intern (format "kp-%d" i)))) (define-key map (vector sym) (quote autoarg-kp-digit-argument)))) (define-key map [kp-subtract] (quote negative-argument)) map)) nil [2952 3290])
            ("define-minor-mode" code nil nil [3307 4419])
            ("define-minor-mode" code nil nil [4436 5189])
            ("autoarg-terminate" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [5191 5695])
            ("autoarg" package nil nil [5697 5715]))          
      :file "autoarg.el.gz"
      :pointmax 5742
      :fsize 2160
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
