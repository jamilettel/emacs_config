;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1579 1596])
            ("thingatpt" include nil nil [1597 1617])
            ("ibuffer" include nil nil [1618 1636])
            ("ibuf-ext" include nil nil [1637 1656])
            ("compile" include nil nil [1657 1675])
            ("grep" include nil nil [1676 1691])
            ("subr-x" include nil nil [1737 1754])
            ("find-dired" include nil nil [1713 1734])
            ("explicit-shell-file-name" variable nil nil [1957 1990])
            ("eshell-buffer-name" variable nil nil [1927 1954])
            ("tags-loop-operate" variable nil nil [1898 1924])
            ("tags-loop-scan" variable nil nil [1872 1895])
            ("tags-completion-table" variable nil nil [1839 1869])
            ("ggtags-completion-table" variable nil nil [1804 1836])
            ("ag-ignore-list" variable nil nil [1778 1801])
            ("declare-function" code nil nil [1993 2041])
            ("declare-function" code nil nil [2042 2077])
            ("declare-function" code nil nil [2078 2113])
            ("declare-function" code nil nil [2114 2154])
            ("declare-function" code nil nil [2155 2202])
            ("declare-function" code nil nil [2203 2237])
            ("declare-function" code nil nil [2238 2277])
            ("declare-function" code nil nil [2278 2317])
            ("declare-function" code nil nil [2318 2365])
            ("declare-function" code nil nil [2366 2423])
            ("declare-function" code nil nil [2425 2478])
            ("declare-function" code nil nil [2479 2529])
            ("declare-function" code nil nil [2530 2585])
            ("declare-function" code nil nil [2586 2633])
            ("declare-function" code nil nil [2634 2670])
            ("declare-function" code nil nil [2671 2719])
            ("declare-function" code nil nil [2720 2768])
            ("grep-files-aliases" variable nil nil [2770 2797])
            ("grep-find-ignored-directories" variable nil nil [2798 2836])
            ("grep-find-ignored-files" variable nil nil [2837 2869])
            ("projectile" customgroup (:user-visible-flag t) nil [2891 3204])
            ("projectile-indexing-method" variable (:default-value (if (eq system-type (quote windows-nt)) (quote native) (quote alien))) nil [3206 4816])
            ("projectile-enable-caching" variable (:default-value (eq projectile-indexing-method (quote native))) nil [4818 5072])
            ("projectile-kill-buffers-filter" variable (:default-value (quote kill-all)) nil [5074 5621])
            ("projectile-file-exists-local-cache-expire" variable nil nil [5623 5986])
            ("projectile-file-exists-remote-cache-expire" variable (:default-value (* 5 60)) nil [5988 6374])
            ("projectile-files-cache-expire" variable nil nil [6376 6640])
            ("projectile-auto-update-cache" variable (:default-value t) nil [6642 6809])
            ("projectile-require-project-root" variable (:default-value (quote prompt)) nil [6811 7261])
            ("projectile-completion-system" variable (:default-value (quote ido)) nil [7263 7584])
            ("projectile-keymap-prefix" variable nil nil [7586 7693])
            ("make-obsolete-variable" code nil nil [7695 7835])
            ("projectile-cache-file" variable (:default-value (expand-file-name "projectile.cache" user-emacs-directory)) nil [7837 8009])
            ("projectile-tags-file-name" variable (:default-value "TAGS") nil [8011 8141])
            ("projectile-tags-command" variable (:default-value "ctags -Re -f \"%s\" %s \"%s\"") nil [8143 8314])
            ("projectile-tags-backend" variable (:default-value (quote auto)) nil [8316 9166])
            ("projectile-sort-order" variable (:default-value (quote default)) nil [9168 9705])
            ("projectile-verbose" variable (:default-value t) nil [9707 9816])
            ("projectile-buffers-filter-function" variable nil nil [9818 10178])
            ("projectile-project-name" variable nil nil [10180 10432])
            ("projectile-project-name-function" variable (:default-value (quote projectile-default-project-name)) nil [10434 10753])
            ("projectile-project-root-files" variable (:default-value (quote ("rebar.config" "project.clj" "build.boot" "deps.edn" "SConstruct" "pom.xml" "build.sbt" "gradlew" "build.gradle" ".ensime" "Gemfile" "requirements.txt" "setup.py" "pyproject.toml" "tox.ini" "composer.json" "Cargo.toml" "mix.exs" "stack.yaml" "info.rkt" "DESCRIPTION" "TAGS" "GTAGS" "configure.in" "configure.ac" "cscope.out"))) nil [10755 12192])
            ("projectile-project-root-files-bottom-up" variable (:default-value (quote (".projectile" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs"))) nil [12194 12704])
            ("projectile-project-root-files-top-down-recurring" variable (:default-value (quote (".svn" "CVS" "Makefile"))) nil [12706 13160])
            ("projectile-project-root-files-functions" variable (:default-value (quote (projectile-root-local projectile-root-bottom-up projectile-root-top-down projectile-root-top-down-recurring))) nil [13162 13437])
            ("projectile-globally-ignored-files" variable (:default-value (list projectile-tags-file-name)) nil [13439 13617])
            ("projectile-globally-unignored-files" variable nil nil [13619 13848])
            ("projectile-globally-ignored-file-suffixes" variable nil nil [13850 14015])
            ("projectile-globally-ignored-directories" variable (:default-value (quote (".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".tox" ".svn" ".stack-work"))) nil [14017 14425])
            ("projectile-globally-unignored-directories" variable nil nil [14427 14634])
            ("projectile-globally-ignored-modes" variable (:default-value (quote ("erc-mode" "help-mode" "completion-list-mode" "Buffer-menu-mode" "gnus-.*-mode" "occur-mode"))) nil [14636 15022])
            ("projectile-globally-ignored-buffers" variable nil nil [15024 15367])
            ("projectile-find-file-hook" variable nil nil [15369 15510])
            ("projectile-find-dir-hook" variable nil nil [15512 15656])
            ("projectile-switch-project-action" variable (:default-value (quote projectile-find-file)) nil [15658 15893])
            ("projectile-find-dir-includes-top-level" variable nil nil [15895 16063])
            ("projectile-use-git-grep" variable nil nil [16065 16190])
            ("projectile-grep-finished-hook" variable nil nil [16192 16363])
            ("projectile-test-prefix-function" variable (:default-value (quote projectile-test-prefix)) nil [16365 16533])
            ("projectile-test-suffix-function" variable (:default-value (quote projectile-test-suffix)) nil [16535 16703])
            ("projectile-related-files-fn-function" variable (:default-value (quote projectile-related-files-fn)) nil [16705 16879])
            ("projectile-dynamic-mode-line" variable (:default-value t) nil [16881 17212])
            ("projectile-mode-line-function" variable (:default-value (quote projectile-default-mode-line)) nil [17214 17541])
            ("projectile-idle-timer" variable nil nil [17560 17671])
            ("projectile-idle-timer-seconds" variable (:default-value 30) nil [17673 17829])
            ("projectile-idle-timer-hook" variable (:default-value (quote (projectile-regenerate-tags))) nil [17831 18010])
            ("projectile-enable-idle-timer" variable nil nil [18012 18923])
            ("projectile-projects-cache" variable nil nil [18925 19042])
            ("projectile-projects-cache-time" variable nil nil [19044 19163])
            ("projectile-project-root-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [19165 19290])
            ("projectile-project-type-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [19292 19434])
            ("projectile-known-projects" variable nil nil [19436 19725])
            ("projectile-known-projects-on-file" variable nil nil [19727 19934])
            ("projectile-known-projects-file" variable (:default-value (expand-file-name "projectile-bookmarks.eld" user-emacs-directory)) nil [19936 20167])
            ("projectile-ignored-projects" variable nil nil [20169 20396])
            ("projectile-ignored-project-function" variable nil nil [20398 21044])
            ("projectile-track-known-projects-automatically" variable (:default-value t) nil [21046 21359])
            ("projectile-project-search-path" variable nil nil [21361 21704])
            ("projectile-git-command" variable (:default-value "git ls-files -zco --exclude-standard") nil [21706 21882])
            ("projectile-git-submodule-command" variable (:default-value "git submodule --quiet foreach 'echo $path' | tr '\\n' '\\0'") nil [21884 22155])
            ("projectile-git-ignored-command" variable (:default-value "git ls-files -zcoi --exclude-standard") nil [22157 22394])
            ("projectile-hg-command" variable (:default-value "hg locate -f -0 -I .") nil [22396 22554])
            ("projectile-fossil-command" variable (:default-value (concat "fossil ls | " (when (string-equal system-type "windows-nt") "dos2unix | ") "tr '\\n' '\\0'")) nil [22556 23003])
            ("projectile-bzr-command" variable (:default-value "bzr ls -R --versioned -0") nil [23005 23172])
            ("projectile-darcs-command" variable (:default-value "darcs show files -0 . ") nil [23174 23340])
            ("projectile-svn-command" variable (:default-value "svn list -R . | grep -v '$/' | tr '\\n' '\\0'") nil [23342 23527])
            ("projectile-generic-command" variable (:default-value (if (executable-find "fd") "fd . -0 --type f --color=never" "find . -type f -print0")) nil [23529 23772])
            ("projectile-vcs-dirty-state" variable (:default-value (quote ("edited" "unregistered" "needs-update" "needs-merge" "unlocked-changes" "conflict"))) nil [23774 24211])
            ("projectile-other-file-alist" variable (:default-value (quote (("cpp" "h" "hpp" "ipp") ("ipp" "h" "hpp" "cpp") ("hpp" "h" "ipp" "cpp" "cc") ("cxx" "h" "hxx" "ixx") ("ixx" "h" "hxx" "cxx") ("hxx" "h" "ixx" "cxx") ("c" "h") ("m" "h") ("mm" "h") ("h" "c" "cc" "cpp" "ipp" "hpp" "cxx" "ixx" "hxx" "m" "mm") ("cc" "h" "hh" "hpp") ("hh" "cc") ("vert" "frag") ("frag" "vert") (nil "lock" "gpg") ("lock" "") ("gpg" "")))) nil [24213 25035])
            ("projectile-create-missing-test-files" variable nil nil [25037 25399])
            ("projectile-after-switch-project-hook" variable nil nil [25401 25535])
            ("projectile-before-switch-project-hook" variable nil nil [25537 25678])
            ("projectile-current-project-on-switch" variable (:default-value (quote remove)) nil [25680 26173])
            ("projectile-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [26217 26965])
            ("projectile-difference" function (:arguments ("list1" "list2")) nil [26994 27096])
            ("projectile-unixy-system-p" function nil nil [27098 27265])
            ("projectile-symbol-or-selection-at-point" function nil nil [27267 27489])
            ("projectile-symbol-at-point" function nil nil [27491 27643])
            ("projectile-generate-process-name" function (:arguments ("process" "make-new")) nil [27645 28021])
            ("projectile-serialize" function (:arguments ("data" "filename")) nil [28043 28307])
            ("projectile-unserialize" function (:arguments ("filename")) nil [28309 28714])
            ("projectile-file-exists-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [28730 28847])
            ("projectile-file-exists-cache-timer" variable nil nil [28849 28960])
            ("projectile-file-exists-cache-cleanup" function nil nil [28962 29527])
            ("projectile-file-exists-p" function (:arguments ("filename")) nil [29529 31283])
            ("projectile-invalidate-cache" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [31300 32255])
            ("projectile-time-seconds" function nil nil [32257 32436])
            ("projectile-cache-project" function (:arguments ("project" "files")) nil [32438 32772])
            ("projectile-purge-file-from-cache" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [32789 33480])
            ("projectile-purge-dir-from-cache" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [33497 34011])
            ("projectile-file-cached-p" function (:arguments ("file" "project")) nil [34013 34167])
            ("projectile-cache-current-file" function (:user-visible-flag t) nil [34184 35248])
            ("projectile-cache-files-find-file-hook" function nil nil [35328 35652])
            ("projectile-track-known-projects-find-file-hook" function nil nil [35654 35913])
            ("projectile-maybe-invalidate-cache" function (:arguments ("force")) nil [35915 36204])
            ("projectile-discover-projects-in-directory" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [36221 36828])
            ("projectile-discover-projects-in-search-path" function (:user-visible-flag t) nil [36845 37117])
            ("delete-file-projectile-remove-from-cache" function (:arguments ("filename" "_trash")) nil [37121 37615])
            ("projectile-parent" function (:arguments ("path")) nil [37654 37893])
            ("projectile-locate-dominating-file" function (:arguments ("file" "name")) nil [37895 39004])
            ("defvar-local" code nil nil [39006 39148])
            ("projectile-root-local" function (:arguments ("_dir")) nil [39150 39267])
            ("projectile-root-top-down" function (:arguments ("dir" "list")) nil [39269 39725])
            ("projectile-root-bottom-up" function (:arguments ("dir" "list")) nil [39727 40129])
            ("projectile-root-top-down-recurring" function (:arguments ("dir" "list")) nil [40131 40883])
            ("projectile-project-root" function (:arguments ("dir")) nil [40885 43115])
            ("projectile-ensure-project" function (:arguments ("dir")) nil [43117 43638])
            ("projectile-project-p" function (:arguments ("dir")) nil [43640 43832])
            ("projectile-default-project-name" function (:arguments ("project-root")) nil [43834 44048])
            ("projectile-project-name" function (:arguments ("project")) nil [44050 44390])
            ("projectile-get-project-directories" function (:arguments ("project-dir")) nil [44415 44669])
            ("projectile--directory-p" function (:arguments ("directory")) nil [44671 44838])
            ("projectile-dir-files" function (:arguments ("directory")) nil [44840 45797])
            ("projectile-dir-files-native" function (:arguments ("directory")) nil [45903 46469])
            ("projectile-index-directory" function (:arguments ("directory" "patterns" "progress-reporter")) nil [46471 47446])
            ("projectile-dir-files-alien" function (:arguments ("directory")) nil [47703 48124])
            ("define-obsolete-function-alias" code nil nil [48126 48225])
            ("define-obsolete-function-alias" code nil nil [48226 48321])
            ("projectile-get-ext-command" function (:arguments ("vcs")) nil [48323 48760])
            ("projectile-get-sub-projects-command" function (:arguments ("vcs")) nil [48762 49004])
            ("projectile-get-ext-ignored-command" function (:arguments ("vcs")) nil [49006 49233])
            ("projectile-flatten" function (:arguments ("lst")) nil [49235 49442])
            ("projectile-get-all-sub-projects" function (:arguments ("project")) nil [49444 49973])
            ("projectile-get-immediate-sub-projects" function (:arguments ("path")) nil [49975 51181])
            ("projectile-get-sub-projects-files" function (:arguments ("project-root" "_vcs")) nil [51183 51858])
            ("projectile-get-repo-ignored-files" function (:arguments ("project" "vcs")) nil [51860 52102])
            ("projectile-get-repo-ignored-directory" function (:arguments ("project" "dir" "vcs")) nil [52104 52413])
            ("projectile-files-via-ext-command" function (:arguments ("root" "command")) nil [52415 52766])
            ("projectile-adjust-files" function (:arguments ("project" "vcs" "files")) nil [52768 52968])
            ("projectile-remove-ignored" function (:arguments ("files")) nil [52970 54381])
            ("projectile-keep-ignored-files" function (:arguments ("project" "vcs" "files")) nil [54383 54669])
            ("projectile-keep-ignored-directories" function (:arguments ("project" "vcs" "directories")) nil [54671 55006])
            ("projectile-add-unignored" function (:arguments ("project" "vcs" "files")) nil [55008 55702])
            ("projectile-buffers-with-file" function (:arguments ("buffers")) nil [55704 55860])
            ("projectile-buffers-with-file-or-process" function (:arguments ("buffers")) nil [55862 56106])
            ("projectile-project-buffers" function (:arguments ("project")) nil [56108 56657])
            ("projectile-process-current-project-buffers" function (:arguments ("action")) nil [56659 56899])
            ("projectile-project-buffer-files" function (:arguments ("project")) nil [56901 57335])
            ("projectile-project-buffer-p" function (:arguments ("buffer" "project-root")) nil [57337 57888])
            ("projectile-ignored-buffer-p" function (:arguments ("buffer")) nil [57890 58373])
            ("projectile-recently-active-files" function nil nil [58375 58764])
            ("projectile-project-buffer-names" function nil nil [58766 58902])
            ("projectile-prepend-project-name" function (:arguments ("string")) nil [58904 59056])
            ("projectile-read-buffer-to-switch" function (:arguments ("prompt")) nil [59058 59372])
            ("projectile-switch-to-buffer" function (:user-visible-flag t) nil [59389 59555])
            ("projectile-switch-to-buffer-other-window" function (:user-visible-flag t) nil [59572 59794])
            ("projectile-switch-to-buffer-other-frame" function (:user-visible-flag t) nil [59811 60031])
            ("projectile-display-buffer" function (:user-visible-flag t) nil [60048 60281])
            ("projectile-project-buffers-other-buffer" function (:user-visible-flag t) nil [60298 60552])
            ("projectile-project-buffers-non-visible" function nil nil [60554 60771])
            ("projectile-multi-occur" function
               (:user-visible-flag t
                :arguments ("nlines"))
                nil [60788 61156])
            ("projectile-normalise-paths" function (:arguments ("patterns")) nil [61158 61475])
            ("projectile-expand-paths" function (:arguments ("paths")) nil [61477 61999])
            ("projectile-normalise-patterns" function (:arguments ("patterns")) nil [62001 62148])
            ("projectile-make-relative-to-root" function (:arguments ("files")) nil [62150 62362])
            ("projectile-ignored-directory-p" function (:arguments ("directory")) nil [62364 62594])
            ("projectile-ignored-file-p" function (:arguments ("file")) nil [62596 62800])
            ("projectile-check-pattern-p" function (:arguments ("file" "pattern")) nil [62802 63041])
            ("projectile-ignored-rel-p" function (:arguments ("file" "directory" "patterns")) nil [63043 63461])
            ("projectile-ignored-files" function nil nil [63463 63723])
            ("projectile-ignored-directories" function nil nil [63725 64061])
            ("projectile-ignored-directories-rel" function nil nil [64063 64240])
            ("projectile-ignored-files-rel" function nil nil [64242 64401])
            ("projectile-project-ignored-files" function nil nil [64403 64586])
            ("projectile-project-ignored-directories" function nil nil [64588 64793])
            ("projectile-paths-to-ignore" function nil nil [64795 64949])
            ("projectile-patterns-to-ignore" function nil nil [64951 65112])
            ("projectile-project-ignored" function nil nil [65114 65334])
            ("projectile-unignored-files" function nil nil [65336 65541])
            ("projectile-unignored-directories" function nil nil [65543 65816])
            ("projectile-unignored-directories-rel" function nil nil [65818 66001])
            ("projectile-unignored-files-rel" function nil nil [66003 66168])
            ("projectile-project-unignored-files" function nil nil [66170 66325])
            ("projectile-project-unignored-directories" function nil nil [66327 66498])
            ("projectile-paths-to-ensure" function nil nil [66500 66656])
            ("projectile-files-to-ensure" function nil nil [66658 66834])
            ("projectile-patterns-to-ensure" function nil nil [66836 66997])
            ("projectile-filtering-patterns" function nil nil [66999 67120])
            ("projectile-project-unignored" function nil nil [67122 67373])
            ("projectile-dirconfig-file" function nil nil [67376 67535])
            ("projectile-parse-dirconfig-file" function nil nil [67537 69009])
            ("projectile-expand-root" function (:arguments ("name")) nil [69011 69223])
            ("cl-defun" code nil nil [69225 70977])
            ("projectile-project-files" function (:arguments ("project-root")) nil [70979 73356])
            ("projectile-current-project-files" function nil nil [73358 73511])
            ("projectile-process-current-project-files" function (:arguments ("action")) nil [73513 73809])
            ("projectile-project-dirs" function (:arguments ("project")) nil [73811 74013])
            ("projectile-current-project-dirs" function nil nil [74015 74190])
            ("projectile-get-other-files" function (:arguments ("file-name" "flex-matching")) nil [74192 74783])
            ("projectile--find-other-file" function (:arguments ("flex-matching" "ff-variant")) nil [74785 75638])
            ("projectile-find-other-file" function
               (:user-visible-flag t
                :arguments ("flex-matching"))
                nil [75681 76046])
            ("projectile-find-other-file-other-window" function
               (:user-visible-flag t
                :arguments ("flex-matching"))
                nil [76063 76513])
            ("projectile-find-other-file-other-frame" function
               (:user-visible-flag t
                :arguments ("flex-matching"))
                nil [76530 76978])
            ("projectile--file-name-sans-extensions" function (:arguments ("file-name")) nil [76980 77293])
            ("projectile--file-name-extensions" function (:arguments ("file-name")) nil [77295 77837])
            ("projectile-associated-file-name-extensions" function (:arguments ("file-name")) nil [77839 78583])
            ("projectile--other-extension-files" function (:arguments ("current-file" "project-file-list" "flex-matching")) nil [78585 81053])
            ("projectile-select-files" function (:arguments ("project-files" "invalidate-cache")) nil [81055 81862])
            ("projectile--find-file-dwim" function (:arguments ("invalidate-cache" "ff-variant")) nil [81864 82936])
            ("projectile-find-file-dwim" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [82953 84348])
            ("projectile-find-file-dwim-other-window" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [84365 85838])
            ("projectile-find-file-dwim-other-frame" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [85855 87323])
            ("projectile--find-file" function
               (:user-visible-flag t
                :arguments ("invalidate-cache" "ff-variant"))
                nil [87325 88110])
            ("projectile-find-file" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [88127 88358])
            ("projectile-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [88375 88675])
            ("projectile-find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [88692 88989])
            ("projectile-toggle-project-read-only" function (:user-visible-flag t) nil [89006 89496])
            ("projectile-sort-files" function (:arguments ("files")) nil [89527 89923])
            ("projectile-sort-by-recentf-first" function (:arguments ("files")) nil [89925 90174])
            ("projectile-sort-by-recently-active-first" function (:arguments ("files")) nil [90176 90488])
            ("projectile-sort-by-modification-time" function (:arguments ("files")) nil [90490 90877])
            ("projectile-sort-by-access-time" function (:arguments ("files")) nil [90879 91254])
            ("projectile--find-dir" function (:arguments ("invalidate-cache" "dired-variant")) nil [91303 91951])
            ("projectile-find-dir" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [91968 92203])
            ("projectile-find-dir-other-window" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [92220 92505])
            ("projectile-find-dir-other-frame" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [92522 92805])
            ("projectile-complete-dir" function (:arguments ("project")) nil [92807 93062])
            ("projectile-find-test-file" function
               (:user-visible-flag t
                :arguments ("invalidate-cache"))
                nil [93079 93546])
            ("projectile-test-files" function (:arguments ("files")) nil [93548 93668])
            ("projectile--merge-related-files-fns" function (:arguments ("related-files-fns")) nil [93670 94272])
            ("projectile--related-files-plist" function (:arguments ("project-root" "file")) nil [94274 95009])
            ("projectile--related-files-plist-by-kind" function (:arguments ("file" "kind")) nil [95011 96384])
            ("projectile--related-files-from-plist" function (:arguments ("plist")) nil [96386 96775])
            ("projectile--related-files-kinds" function (:arguments ("file")) nil [96777 97088])
            ("projectile--related-files" function (:arguments ("file" "kind")) nil [97090 97281])
            ("projectile--find-related-file" function (:arguments ("file" "kind")) nil [97283 98033])
            ("projectile-find-related-file-other-window" function (:user-visible-flag t) nil [98050 98238])
            ("projectile-find-related-file-other-frame" function (:user-visible-flag t) nil [98255 98440])
            ("projectile-find-related-file" function (:user-visible-flag t) nil [98457 98602])
            ("projectile-related-files-fn-groups" function (:arguments ("kind" "groups")) nil [98619 99001])
            ("projectile-related-files-fn-extensions" function (:arguments ("kind" "extensions")) nil [99018 99750])
            ("projectile-related-files-fn-test-with-prefix" function (:arguments ("extension" "test-prefix")) nil [99767 100571])
            ("projectile-related-files-fn-test-with-suffix" function (:arguments ("extension" "test-suffix")) nil [100588 101634])
            ("projectile-test-file-p" function (:arguments ("file")) nil [101636 102278])
            ("projectile-current-project-test-files" function nil nil [102280 102446])
            ("projectile-project-types" variable nil nil [102448 102667])
            ("cl-defun" code nil nil [102669 105113])
            ("projectile-cabal-project-p" function nil nil [105115 105326])
            ("projectile-dotnet-project-p" function nil nil [105328 105471])
            ("projectile-go-project-p" function nil nil [105473 105644])
            ("define-obsolete-variable-alias" code nil nil [105646 105747])
            ("projectile-go-project-test-function" variable (:default-value (function projectile-go-project-p)) nil [105748 105911])
            ("projectile-register-project-type" code nil nil [106388 106681])
            ("projectile-register-project-type" code nil nil [106682 106918])
            ("projectile-register-project-type" code nil nil [106919 107158])
            ("projectile-register-project-type" code nil nil [107211 107426])
            ("projectile-register-project-type" code nil nil [107427 107704])
            ("projectile-register-project-type" code nil nil [107705 107868])
            ("projectile-register-project-type" code nil nil [107885 108041])
            ("projectile-register-project-type" code nil nil [108042 108333])
            ("projectile-register-project-type" code nil nil [108341 108608])
            ("projectile-register-project-type" code nil nil [108628 108848])
            ("projectile-register-project-type" code nil nil [108849 109117])
            ("projectile-register-project-type" code nil nil [109132 109295])
            ("projectile-register-project-type" code nil nil [109296 109455])
            ("projectile-register-project-type" code nil nil [109456 109676])
            ("projectile-register-project-type" code nil nil [109688 109923])
            ("projectile-register-project-type" code nil nil [109934 110236])
            ("projectile-register-project-type" code nil nil [110237 110551])
            ("projectile-register-project-type" code nil nil [110552 110858])
            ("projectile-register-project-type" code nil nil [110859 111134])
            ("projectile-register-project-type" code nil nil [111135 111427])
            ("projectile-register-project-type" code nil nil [111446 111780])
            ("projectile-register-project-type" code nil nil [111781 112007])
            ("projectile-register-project-type" code nil nil [112008 112236])
            ("projectile-register-project-type" code nil nil [112237 112492])
            ("projectile-register-project-type" code nil nil [112493 112709])
            ("projectile-register-project-type" code nil nil [112710 112937])
            ("projectile-register-project-type" code nil nil [112938 113177])
            ("projectile-register-project-type" code nil nil [113178 113399])
            ("projectile-register-project-type" code nil nil [113400 113516])
            ("projectile-register-project-type" code nil nil [113517 113887])
            ("projectile-register-project-type" code nil nil [113896 114247])
            ("projectile-register-project-type" code nil nil [114248 114549])
            ("projectile-register-project-type" code nil nil [114685 115016])
            ("projectile-register-project-type" code nil nil [115017 115397])
            ("projectile-register-project-type" code nil nil [115409 115684])
            ("projectile-register-project-type" code nil nil [115695 115919])
            ("projectile-register-project-type" code nil nil [115926 116157])
            ("projectile-register-project-type" code nil nil [116170 116407])
            ("projectile-register-project-type" code nil nil [116417 116640])
            ("projectile-register-project-type" code nil nil [116652 116762])
            ("defvar-local" code nil nil [116765 116920])
            ("put" code nil nil [116921 116982])
            ("projectile-detect-project-type" function nil nil [116984 117755])
            ("projectile-project-type" function (:arguments ("dir")) nil [117757 118361])
            ("projectile-project-info" function (:user-visible-flag t) nil [118378 118645])
            ("projectile-verify-files" function (:arguments ("files")) nil [118647 118788])
            ("projectile-verify-file" function (:arguments ("file")) nil [118790 118929])
            ("projectile-verify-file-wildcard" function (:arguments ("file")) nil [118931 119152])
            ("projectile-project-vcs" function (:arguments ("project-root")) nil [119154 120455])
            ("projectile--test-name-for-impl-name" function (:arguments ("impl-file-path")) nil [120457 121162])
            ("projectile-create-test-file-for" function (:arguments ("impl-file-path")) nil [121164 121985])
            ("projectile-find-implementation-or-test" function (:arguments ("file-name")) nil [121987 123001])
            ("projectile-find-implementation-or-test-other-window" function (:user-visible-flag t) nil [123018 123249])
            ("projectile-find-implementation-or-test-other-frame" function (:user-visible-flag t) nil [123266 123494])
            ("projectile-toggle-between-implementation-and-test" function (:user-visible-flag t) nil [123511 123725])
            ("projectile-project-type-attribute" function (:arguments ("project-type" "key" "default-value")) nil [123728 124105])
            ("projectile-test-prefix" function (:arguments ("project-type")) nil [124107 124274])
            ("projectile-test-suffix" function (:arguments ("project-type")) nil [124276 124443])
            ("projectile-related-files-fn" function (:arguments ("project-type")) nil [124445 124610])
            ("projectile-src-directory" function (:arguments ("project-type")) nil [124612 124780])
            ("projectile-test-directory" function (:arguments ("project-type")) nil [124782 124954])
            ("projectile-dirname-matching-count" function (:arguments ("a" "b")) nil [124956 125317])
            ("projectile-group-file-candidates" function (:arguments ("file" "candidates")) nil [125319 125981])
            ("projectile--best-or-all-candidates-based-on-parents-dirs" function (:arguments ("file" "candidates")) nil [125983 126396])
            ("projectile--impl-to-test-predicate" function (:arguments ("impl-file")) nil [126398 127139])
            ("projectile--find-matching-test" function (:arguments ("impl-file")) nil [127141 127592])
            ("projectile--test-to-impl-predicate" function (:arguments ("test-file")) nil [127594 128265])
            ("projectile--find-matching-file" function (:arguments ("test-file")) nil [128267 128724])
            ("projectile--choose-from-candidates" function (:arguments ("candidates")) nil [128726 128932])
            ("projectile-find-matching-test" function (:arguments ("impl-file")) nil [128934 129159])
            ("projectile-find-matching-file" function (:arguments ("test-file")) nil [129161 129384])
            ("projectile-grep-default-files" function nil nil [129386 130535])
            ("projectile--globally-ignored-file-suffixes-glob" function nil nil [130537 130741])
            ("projectile--read-search-string-with-default" function (:arguments ("prefix-label")) nil [130743 131244])
            ("projectile-grep-find-ignored-paths" variable nil nil [131246 131289])
            ("projectile-grep-find-unignored-paths" variable nil nil [131290 131335])
            ("projectile-grep-find-ignored-patterns" variable nil nil [131336 131382])
            ("projectile-grep-find-unignored-patterns" variable nil nil [131383 131431])
            ("projectile-rgrep-default-command" function (:arguments ("regexp" "files" "dir")) nil [131433 136833])
            ("projectile-grep" function
               (:user-visible-flag t
                :arguments ("regexp" "arg"))
                nil [136850 139858])
            ("projectile-ag" function
               (:user-visible-flag t
                :arguments ("search-term" "arg"))
                nil [139875 141335])
            ("projectile-ripgrep" function
               (:user-visible-flag t
                :arguments ("search-term" "arg"))
                nil [141352 142253])
            ("projectile-tags-exclude-patterns" function nil nil [142255 142535])
            ("projectile-regenerate-tags" function (:user-visible-flag t) nil [142552 143668])
            ("projectile-visit-project-tags-table" function nil nil [143670 144007])
            ("projectile-determine-find-tag-fn" function nil nil [144009 144775])
            ("projectile-find-tag" function (:user-visible-flag t) nil [144792 145049])
            ("projectile-with-default-dir" function (:arguments ("dir" "body")) nil [145051 145215])
            ("projectile-run-command-in-root" function (:user-visible-flag t) nil [145232 145488])
            ("projectile-run-shell-command-in-root" function (:user-visible-flag t) nil [145505 145745])
            ("projectile-run-async-shell-command-in-root" function (:user-visible-flag t) nil [145762 146020])
            ("projectile-run-gdb" function (:user-visible-flag t) nil [146037 146238])
            ("projectile-run-shell" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [146255 146637])
            ("projectile-run-eshell" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [146654 147076])
            ("projectile-run-ielm" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [147093 147738])
            ("projectile-run-term" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [147755 148653])
            ("projectile-run-vterm" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [148670 149298])
            ("projectile-files-in-project-directory" function (:arguments ("directory")) nil [149300 149685])
            ("projectile-files-from-cmd" function (:arguments ("cmd" "directory")) nil [149687 150307])
            ("projectile-files-with-string" function (:arguments ("string" "directory")) nil [150309 151761])
            ("projectile-replace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [151778 153582])
            ("projectile-replace-regexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [153599 154874])
            ("projectile-kill-buffers" function (:user-visible-flag t) nil [154891 156071])
            ("projectile-save-project-buffers" function (:user-visible-flag t) nil [156088 156874])
            ("projectile-dired" function (:user-visible-flag t) nil [156891 157043])
            ("projectile-dired-other-window" function (:user-visible-flag t) nil [157060 157257])
            ("projectile-dired-other-frame" function (:user-visible-flag t) nil [157274 157467])
            ("projectile-vc" function
               (:user-visible-flag t
                :arguments ("project-root"))
                nil [157484 158665])
            ("projectile-recentf" function (:user-visible-flag t) nil [158682 159034])
            ("projectile-recentf-files" function nil nil [159036 159450])
            ("projectile-serialize-cache" function nil nil [159452 159613])
            ("projectile-configure-cmd-map" variable (:default-value (make-hash-table :test (quote equal))) nil [159615 159761])
            ("projectile-compilation-cmd-map" variable (:default-value (make-hash-table :test (quote equal))) nil [159763 159913])
            ("projectile-test-cmd-map" variable (:default-value (make-hash-table :test (quote equal))) nil [159915 160051])
            ("projectile-run-cmd-map" variable (:default-value (make-hash-table :test (quote equal))) nil [160053 160187])
            ("projectile-project-configure-cmd" variable nil nil [160189 160404])
            ("projectile-project-compilation-cmd" variable nil nil [160406 160621])
            ("projectile-project-compilation-dir" variable nil nil [160623 160816])
            ("projectile-project-test-cmd" variable nil nil [160818 161023])
            ("projectile-project-run-cmd" variable nil nil [161025 161228])
            ("projectile-default-generic-command" function (:arguments ("project-type" "command-type")) nil [161230 161934])
            ("projectile-default-configure-command" function (:arguments ("project-type")) nil [161936 162123])
            ("projectile-default-compilation-command" function (:arguments ("project-type")) nil [162125 162314])
            ("projectile-default-compilation-dir" function (:arguments ("project-type")) nil [162316 162503])
            ("projectile-default-test-command" function (:arguments ("project-type")) nil [162505 162677])
            ("projectile-default-run-command" function (:arguments ("project-type")) nil [162679 162848])
            ("projectile-configure-command" function (:arguments ("compile-dir")) nil [162850 163571])
            ("projectile-compilation-command" function (:arguments ("compile-dir")) nil [163573 164172])
            ("projectile-test-command" function (:arguments ("compile-dir")) nil [164174 164714])
            ("projectile-run-command" function (:arguments ("compile-dir")) nil [164716 165247])
            ("projectile-read-command" function (:arguments ("prompt" "command")) nil [165249 165535])
            ("projectile-compilation-dir" function nil nil [165537 165998])
            ("projectile-maybe-read-command" function (:arguments ("arg" "default-cmd" "prompt")) nil [166000 166302])
            ("projectile-run-compilation" function (:arguments ("cmd")) nil [166304 166456])
            ("projectile-project-command-history" variable (:default-value (make-hash-table :test (quote equal))) nil [166458 166647])
            ("projectile--get-command-history" function (:arguments ("project-root")) nil [166649 166877])
            ("cl-defun" code nil nil [166879 168285])
            ("projectile-configure-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168302 168864])
            ("projectile-compile-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168881 169445])
            ("projectile-test-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [169462 169999])
            ("projectile-run-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170016 170499])
            ("projectile-repeat-last-command" function
               (:user-visible-flag t
                :arguments ("show-prompt"))
                nil [170516 171583])
            ("compilation-find-file-projectile-find-compilation-buffer" function (:arguments ("orig-fun" "marker" "filename" "directory" "formats")) nil [171585 172508])
            ("projectile-open-projects" function nil nil [172510 172905])
            ("projectile--remove-current-project" function (:arguments ("projects")) nil [172907 173195])
            ("projectile--move-current-project-to-end" function (:arguments ("projects")) nil [173197 173508])
            ("projectile-relevant-known-projects" function nil nil [173510 173838])
            ("projectile-relevant-open-projects" function nil nil [173840 174191])
            ("projectile-switch-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174208 174806])
            ("projectile-switch-open-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174823 175431])
            ("projectile-switch-project-by-name" function (:arguments ("project-to-switch" "arg")) nil [175433 177080])
            ("projectile-find-file-in-directory" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [177097 177868])
            ("projectile-all-project-files" function nil nil [177870 178186])
            ("projectile-find-file-in-known-projects" function (:user-visible-flag t) nil [178203 178417])
            ("projectile-keep-project-p" function (:arguments ("project")) nil [178419 178802])
            ("projectile--cleanup-known-projects" function nil nil [178804 179280])
            ("projectile-cleanup-known-projects" function (:user-visible-flag t) nil [179297 179627])
            ("projectile-clear-known-projects" function (:user-visible-flag t) nil [179644 179857])
            ("projectile-remove-known-project" function
               (:user-visible-flag t
                :arguments ("project"))
                nil [179874 180515])
            ("projectile-remove-current-project-from-known-projects" function (:user-visible-flag t) nil [180532 180761])
            ("projectile-ignored-projects" function nil nil [180763 180935])
            ("projectile-ignored-project-p" function (:arguments ("project-root")) nil [180937 181258])
            ("projectile-add-known-project" function
               (:user-visible-flag t
                :arguments ("project-root"))
                nil [181275 181725])
            ("projectile-load-known-projects" function nil nil [181727 182118])
            ("projectile-save-known-projects" function nil nil [182120 182487])
            ("projectile-merge-known-projects" function nil nil [182489 183374])
            ("define-ibuffer-filter" code nil nil [183402 183738])
            ("projectile-ibuffer-by-project" function (:arguments ("project-root")) nil [183740 184050])
            ("projectile-ibuffer" function
               (:user-visible-flag t
                :arguments ("prompt-for-project"))
                nil [184067 184587])
            ("projectile-commander-help-buffer" variable
               (:constant-flag t
                :default-value "*Projectile Commander Help*")
                nil [184618 184691])
            ("projectile-commander-methods" variable nil nil [184693 184923])
            ("projectile-commander" function (:user-visible-flag t) nil [184940 185498])
            ("def-projectile-commander-method" function (:arguments ("key" "description" "body")) nil [185500 186144])
            ("def-projectile-commander-method" code nil nil [186146 186612])
            ("projectile-commander-bindings" function nil nil [186614 188346])
            ("projectile-check-vcs-status" function (:arguments ("project-path")) nil [188407 189112])
            ("projectile-cached-dirty-projects-status" variable nil nil [189114 189210])
            ("projectile-check-vcs-status-of-known-projects" function nil nil [189212 190055])
            ("projectile-browse-dirty-projects" function
               (:user-visible-flag t
                :arguments ("cached"))
                nil [190072 190728])
            ("projectile--repeat-until-project-buffer" function (:arguments ("orig-fun" "args")) nil [190770 191589])
            ("projectile-next-project-buffer" function (:user-visible-flag t) nil [191591 191837])
            ("projectile-previous-project-buffer" function (:user-visible-flag t) nil [191839 192101])
            ("projectile-read-variable" function nil nil [192141 192394])
            ("define-skeleton" code nil nil [192396 192565])
            ("define-skeleton" code nil nil [192567 192730])
            ("projectile-edit-dir-locals" function (:user-visible-flag t) nil [192747 193079])
            ("define-obsolete-variable-alias" code nil nil [193109 193200])
            ("projectile-mode-line-prefix" variable (:default-value " Projectile") nil [193201 193519])
            ("defvar-local" code nil nil [193521 193585])
            ("projectile-default-mode-line" function nil nil [193587 193965])
            ("projectile-update-mode-line" function nil nil [193967 194174])
            ("projectile-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "4 a") (function projectile-find-other-file-other-window)) (define-key map (kbd "4 b") (function projectile-switch-to-buffer-other-window)) (define-key map (kbd "4 C-o") (function projectile-display-buffer)) (define-key map (kbd "4 d") (function projectile-find-dir-other-window)) (define-key map (kbd "4 D") (function projectile-dired-other-window)) (define-key map (kbd "4 f") (function projectile-find-file-other-window)) (define-key map (kbd "4 g") (function projectile-find-file-dwim-other-window)) (define-key map (kbd "4 t") (function projectile-find-implementation-or-test-other-window)) (define-key map (kbd "5 a") (function projectile-find-other-file-other-frame)) (define-key map (kbd "5 b") (function projectile-switch-to-buffer-other-frame)) (define-key map (kbd "5 d") (function projectile-find-dir-other-frame)) (define-key map (kbd "5 D") (function projectile-dired-other-frame)) (define-key map (kbd "5 f") (function projectile-find-file-other-frame)) (define-key map (kbd "5 g") (function projectile-find-file-dwim-other-frame)) (define-key map (kbd "5 t") (function projectile-find-implementation-or-test-other-frame)) (define-key map (kbd "!") (function projectile-run-shell-command-in-root)) (define-key map (kbd "&") (function projectile-run-async-shell-command-in-root)) (define-key map (kbd "a") (function projectile-find-other-file)) (define-key map (kbd "b") (function projectile-switch-to-buffer)) (define-key map (kbd "C") (function projectile-configure-project)) (define-key map (kbd "c") (function projectile-compile-project)) (define-key map (kbd "d") (function projectile-find-dir)) (define-key map (kbd "D") (function projectile-dired)) (define-key map (kbd "e") (function projectile-recentf)) (define-key map (kbd "E") (function projectile-edit-dir-locals)) (define-key map (kbd "f") (function projectile-find-file)) (define-key map (kbd "g") (function projectile-find-file-dwim)) (define-key map (kbd "F") (function projectile-find-file-in-known-projects)) (define-key map (kbd "i") (function projectile-invalidate-cache)) (define-key map (kbd "I") (function projectile-ibuffer)) (define-key map (kbd "j") (function projectile-find-tag)) (define-key map (kbd "k") (function projectile-kill-buffers)) (define-key map (kbd "l") (function projectile-find-file-in-directory)) (define-key map (kbd "m") (function projectile-commander)) (define-key map (kbd "o") (function projectile-multi-occur)) (define-key map (kbd "p") (function projectile-switch-project)) (define-key map (kbd "q") (function projectile-switch-open-project)) (define-key map (kbd "P") (function projectile-test-project)) (define-key map (kbd "r") (function projectile-replace)) (define-key map (kbd "R") (function projectile-regenerate-tags)) (define-key map (kbd "s g") (function projectile-grep)) (define-key map (kbd "s r") (function projectile-ripgrep)) (define-key map (kbd "s s") (function projectile-ag)) (define-key map (kbd "S") (function projectile-save-project-buffers)) (define-key map (kbd "t") (function projectile-toggle-between-implementation-and-test)) (define-key map (kbd "T") (function projectile-find-test-file)) (define-key map (kbd "u") (function projectile-run-project)) (define-key map (kbd "v") (function projectile-vc)) (define-key map (kbd "V") (function projectile-browse-dirty-projects)) (define-key map (kbd "x e") (function projectile-run-eshell)) (define-key map (kbd "x i") (function projectile-run-ielm)) (define-key map (kbd "x t") (function projectile-run-term)) (define-key map (kbd "x s") (function projectile-run-shell)) (define-key map (kbd "x g") (function projectile-run-gdb)) (define-key map (kbd "x v") (function projectile-run-vterm)) (define-key map (kbd "z") (function projectile-cache-current-file)) (define-key map (kbd "<left>") (function projectile-previous-project-buffer)) (define-key map (kbd "<right>") (function projectile-next-project-buffer)) (define-key map (kbd "ESC") (function projectile-project-buffers-other-buffer)) map)) nil [194176 198030])
            ("fset" code nil nil [198031 198084])
            ("projectile-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (when projectile-keymap-prefix (define-key map projectile-keymap-prefix (quote projectile-command-map))) (easy-menu-define projectile-mode-menu map "Menu for Projectile" (quote ("Projectile" ["Find file" projectile-find-file] ["Find file in known projects" projectile-find-file-in-known-projects] ["Find test file" projectile-find-test-file] ["Find directory" projectile-find-dir] ["Find file in directory" projectile-find-file-in-directory] ["Find other file" projectile-find-other-file] ["Switch to buffer" projectile-switch-to-buffer] ["Jump between implementation file and test file" projectile-toggle-between-implementation-and-test] ["Kill project buffers" projectile-kill-buffers] ["Save project buffers" projectile-save-project-buffers] ["Recent files" projectile-recentf] ["Previous buffer" projectile-previous-project-buffer] ["Next buffer" projectile-next-project-buffer] "--" ["Toggle project wide read-only" projectile-toggle-project-read-only] ["Edit .dir-locals.el" projectile-edit-dir-locals] "--" ["Switch to project" projectile-switch-project] ["Switch to open project" projectile-switch-open-project] ["Discover projects in directory" projectile-discover-projects-in-directory] ["Browse dirty projects" projectile-browse-dirty-projects] ["Open project in dired" projectile-dired] "--" ["Search in project (grep)" projectile-grep] ["Search in project (ag)" projectile-ag] ["Replace in project" projectile-replace] ["Multi-occur in project" projectile-multi-occur] "--" ["Run GDB" projectile-run-gdb] "--" ["Run shell" projectile-run-shell] ["Run eshell" projectile-run-eshell] ["Run ielm" projectile-run-ielm] ["Run term" projectile-run-term] "--" ["Cache current file" projectile-cache-current-file] ["Invalidate cache" projectile-invalidate-cache] ["Regenerate [e|g]tags" projectile-regenerate-tags] "--" ["Configure project" projectile-configure-project] ["Compile project" projectile-compile-project] ["Test project" projectile-test-project] ["Run project" projectile-run-project] ["Repeat last external command" projectile-repeat-last-command] "--" ["Project info" projectile-project-info] ["About" projectile-version]))) map)) nil [198086 200724])
            ("projectile-find-file-hook-function" function nil nil [200726 201278])
            ("define-minor-mode" code nil nil [201295 203311])
            ("define-obsolete-function-alias" code nil nil [203328 203407])
            ("projectile" package nil nil [203409 203430]))          
      :file "projectile.el"
      :pointmax 203460
      :fsize 203460
      :lastmodtime '(24222 54103 35569 196000)
      :unmatched-syntax '((close-paren 1990 . 1991) (symbol 1758 . 1775) (open-paren 1757 . 1758) (close-paren 1754 . 1755) (symbol 1693 . 1710) (open-paren 1692 . 1693))))
  :file "!home!Jamil!.emacs.d!elpa!projectile-20200329.1908!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
