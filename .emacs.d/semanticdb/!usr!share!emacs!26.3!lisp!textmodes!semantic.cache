;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dns-mode" customgroup (:user-visible-flag t) nil [1758 1836])
            ("dns-mode-control-entities" variable
               (:constant-flag t
                :default-value (quote ("INCLUDE" "ORIGIN" "TTL")))
                nil [1838 1956])
            ("dns-mode-classes" variable
               (:constant-flag t
                :default-value (quote ("IN" "CS" "CH" "HS")))
                nil [1958 2052])
            ("dns-mode-types" variable
               (:constant-flag t
                :default-value (quote ("A" "NS" "MD" "MF" "CNAME" "SOA" "MB" "MG" "MR" "NULL" "WKS" "PTR" "HINFO" "MINFO" "MX" "TXT" "RP" "AFSDB" "X25" "ISDN" "RT" "NSAP" "SIG" "KEY" "PX" "GPOS" "AAAA" "LOC" "NXT" "EID" "NIMLOC" "SRV" "ATMA" "NAPTR" "KX" "CERT" "A6" "DNAME" "SINK" "OPT" "APL" "DS" "SSHFP" "RRSIG" "NSEC" "DNSKEY" "UINFO" "UID" "GID" "UNSPEC" "TKEY" "TSIG" "IXFR" "AXFR" "MAILB" "MAILA" "TLSA" "NSEC3" "CAA")))
                nil [2054 2558])
            ("dns-mode-control-entity" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [2560 2723])
            ("dns-mode-bad-control-entity" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [2725 2902])
            ("dns-mode-type" variable
               (:default-value (quote ((t :inherit font-lock-type-face)))
                :type "face")
                nil [2904 3040])
            ("dns-mode-class" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [3042 3184])
            ("dns-mode-control-entity-face" variable (:default-value (quote (quote dns-mode-control-entity))) nil [3186 3307])
            ("make-obsolete-variable" code nil nil [3308 3436])
            ("dns-mode-bad-control-entity-face" variable (:default-value (quote (quote dns-mode-bad-control-entity))) nil [3438 3577])
            ("make-obsolete-variable" code nil nil [3578 3711])
            ("dns-mode-type-face" variable (:default-value (quote (quote dns-mode-type))) nil [3713 3804])
            ("make-obsolete-variable" code nil nil [3805 3913])
            ("dns-mode-class-face" variable (:default-value (quote (quote dns-mode-class))) nil [3915 4009])
            ("make-obsolete-variable" code nil nil [4010 4115])
            ("dns-mode-font-lock-keywords" variable (:default-value (\` (((\, (concat "^$" (regexp-opt dns-mode-control-entities))) 0 (\, dns-mode-control-entity-face)) ("^$[a-z0-9A-Z]+" 0 (\, dns-mode-bad-control-entity-face)) ((\, (regexp-opt dns-mode-classes)) 0 (\, dns-mode-class-face)) ((\, (regexp-opt dns-mode-types)) 0 (\, dns-mode-type-face))))) nil [4117 4552])
            ("dns-mode-soa-auto-increment-serial" variable (:default-value t) nil [4554 5047])
            ("dns-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 59 "<   " table) (modify-syntax-entry 10 ">   " table) table)) nil [5067 5283])
            ("dns-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote dns-mode-soa-increment-serial)) (define-key map "" (quote dns-mode-ipv6-to-nibbles)) map)) nil [5297 5521])
            ("dns-mode-menu" variable nil nil [5533 5601])
            ("easy-menu-define" code nil nil [5603 5801])
            ("define-derived-mode" code nil nil [5828 6654])
            ("dns-mode-soa-increment-serial" function (:user-visible-flag t) nil [6730 8735])
            ("dns-mode-soa-maybe-increment-serial" function nil nil [8737 9339])
            ("dns-mode-ipv6-to-nibbles" function
               (:user-visible-flag t
                :arguments ("negate-prefix"))
                nil [9341 10921])
            ("dns-mode-reverse-and-expand-ipv6" function (:arguments ("address" "prefix-length")) nil [10923 13167])
            ("dns-mode" package nil nil [13169 13188]))          
      :file "dns-mode.el.gz"
      :pointmax 13216
      :fsize 4526
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [1165 1184])
            ("cl-lib" include nil nil [1145 1162])
            ("compare-w" include nil nil [1122 1142])
            ("font-lock-comment-face" variable nil nil [1187 1218])
            ("font-lock-doc-face" variable nil nil [1219 1246])
            ("shell" include nil nil [1248 1264])
            ("compile" include nil nil [1265 1283])
            ("tex-file" customgroup (:user-visible-flag t) nil [1285 1370])
            ("tex-run" customgroup (:user-visible-flag t) nil [1372 1470])
            ("tex-view" customgroup (:user-visible-flag t) nil [1472 1562])
            ("tex-flymake" customgroup (:user-visible-flag t) nil [1564 1664])
            ("tex-shell-file-name" variable nil nil [1681 1862])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1879 2207])
            ("tex-first-line-header-regexp" variable nil nil [2224 2589])
            ("tex-main-file" variable nil nil [2606 2883])
            ("tex-offer-save" variable (:default-value t) nil [2900 3042])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [3059 3257])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [3274 3480])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [3497 3707])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [3724 4075])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [4092 4564])
            ("latex-standard-block-names" variable (:default-value (quote ("abstract" "array" "center" "description" "displaymath" "document" "enumerate" "eqnarray" "eqnarray*" "equation" "figure" "figure*" "flushleft" "flushright" "itemize" "letter" "list" "minipage" "picture" "quotation" "quote" "slide" "sloppypar" "tabbing" "table" "table*" "tabular" "tabular*" "thebibliography" "theindex*" "titlepage" "trivlist" "verbatim" "verbatim*" "verse" "math"))) nil [4566 5063])
            ("latex-block-names" variable nil nil [5080 5262])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [5279 5575])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5592 5880])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5897 6601])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [6618 7186])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [7203 7417])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [7434 7767])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [7784 7968])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [7985 8171])
            ("tex-fontify-script" variable (:default-value t) nil [8173 8313])
            ("put" code nil nil [8314 8370])
            ("tex-font-script-display" variable (:default-value (quote (-0.2 0.2))) nil [8372 8827])
            ("tex-chktex-program" variable (:default-value "chktex") nil [8829 9012])
            ("tex-chktex-extra-flags" variable nil nil [9014 9172])
            ("tex-last-temp-file" variable nil nil [9174 9376])
            ("tex-command" variable (:default-value "tex") nil [9378 9736])
            ("tex-trailer" variable nil nil [9738 9839])
            ("tex-start-of-header" variable nil nil [9841 9951])
            ("tex-end-of-header" variable nil nil [9953 10059])
            ("tex-shell-cd-command" variable (:default-value "cd") nil [10061 10229])
            ("tex-zap-file" variable nil nil [10231 10397])
            ("tex-last-buffer-texed" variable nil nil [10399 10466])
            ("tex-print-file" variable nil nil [10468 10593])
            ("tex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 12 ">" st) (modify-syntax-entry 0 "w" st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 9 " " st) (modify-syntax-entry 126 "." st) (modify-syntax-entry 36 "$$" st) (modify-syntax-entry 92 "/" st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 95 "." st) (modify-syntax-entry 94 "." st) st)) nil [10595 11399])
            ("latex-imenu-indent-string" variable (:default-value ". ") nil [11432 11650])
            ("latex-section-alist" variable (:default-value (quote (("part" . 0) ("chapter" . 1) ("section" . 2) ("subsection" . 3) ("subsubsection" . 4) ("paragraph" . 5) ("subparagraph" . 6)))) nil [11652 11822])
            ("latex-metasection-list" variable (:default-value (quote ("documentstyle" "documentclass" "begin{document}" "end{document}" "appendix" "frontmatter" "mainmatter" "backmatter"))) nil [11824 11985])
            ("latex-imenu-create-index" function nil nil [11987 14128])
            ("latex-outline-regexp" variable (:default-value (concat "\\\\" (regexp-opt (append latex-metasection-list (mapcar (function car) latex-section-alist)) t))) nil [14163 14326])
            ("latex-outline-level" function nil nil [14328 14478])
            ("tex-current-defun-name" function nil nil [14480 14857])
            ("tex-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((headings (regexp-opt (quote ("title" "begin" "end" "chapter" "part" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "subsubparagraph" "newcommand" "renewcommand" "providecommand" "newenvironment" "renewenvironment" "newtheorem" "renewtheorem")) t)) (variables (regexp-opt (quote ("newcounter" "newcounter*" "setcounter" "addtocounter" "setlength" "addtolength" "settowidth")) t)) (includes (regexp-opt (quote ("input" "include" "includeonly" "bibliography" "epsfig" "psfig" "epsf" "nofiles" "usepackage" "documentstyle" "documentclass" "verbatiminput" "includegraphics" "includegraphics*")) t)) (verbish (regexp-opt (quote ("url" "nolinkurl" "path")) t)) (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (inbraces-re (lambda (re) (concat "\\(?:[^{}\\]\\|\\\\.\\|" re "\\)"))) (arg (concat "{\\(" (funcall inbraces-re "{[^}]*}") "+\\)"))) (\` (((\, (concat "\\$\\$?\\(?:[^$\\{}]\\|\\\\.\\|{" (funcall inbraces-re (concat "{" (funcall inbraces-re "{[^}]*}") "*}")) "*}\\)+\\$?\\$")) (0 (quote tex-math))) ((\, (concat slash headings "\\*?" opt arg)) 3 font-lock-function-name-face keep) ((\, (concat slash "\\(?:provide\\|\\(?:re\\)?new\\)command\\** *\\(\\\\[A-Za-z@]+\\)")) 1 font-lock-function-name-face keep) ((\, (concat slash variables " *" arg)) 2 font-lock-variable-name-face) ((\, (concat slash includes opt arg)) 3 font-lock-builtin-face) ((\, (concat slash verbish opt arg)) 3 (quote tex-verbatim)) ("^[ 	]*\\\\def *\\\\\\(\\(\\w\\|@\\)+\\)" 1 font-lock-function-name-face))))))
                nil [16616 19834])
            ("tex-font-lock-append-prop" function (:arguments ("prop")) nil [19836 19984])
            ("tex-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-1 (eval-when-compile (let* ((bold (regexp-opt (quote ("textbf" "textsc" "textup" "boldsymbol" "pmb")) t)) (italic (regexp-opt (quote ("textit" "textsl" "emph")) t)) (citations (regexp-opt (quote ("label" "ref" "pageref" "vref" "eqref" "cite" "nocite" "index" "glossary" "bibitem" "citep" "citet")) t)) (specials-1 (regexp-opt (quote ("\\" "\\*")) t)) (specials-2 (regexp-opt (quote ("linebreak" "nolinebreak" "pagebreak" "nopagebreak" "newline" "newpage" "clearpage" "cleardoublepage" "displaybreak" "allowdisplaybreaks" "enlargethispage")) t)) (general "\\([a-zA-Z@]+\\**\\|[^ 	
]\\)") (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (args "\\(\\(?:[^{}&\\]+\\|\\\\.\\|{[^}]*}\\)+\\)") (arg "{\\(\\(?:[^{}\\]+\\|\\\\.\\|{[^}]*}\\)+\\)")) (list (list (concat slash citations opt arg) 3 (quote font-lock-constant-face)) (cons (concat (regexp-opt (\` ("``" "\"<" "\"`" "<<" "«")) t) "[^'\">{]+" (regexp-opt (\` ("''" "\">" "\"'" ">>" "»")) t)) (quote font-lock-string-face)) (cons (concat slash specials-1) (quote font-lock-warning-face)) (list (concat "\\(" slash specials-2 "\\)\\([^a-zA-Z@]\\|\\'\\)") 1 (quote font-lock-warning-face)) (concat slash general) (list (concat slash bold " *" arg) 2 (quote (tex-font-lock-append-prop (quote bold))) (quote append)) (list (concat slash italic " *" arg) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(em\\|it\\|sl\\)\\>" args) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(bf\\(series\\)?\\)\\>" args) 3 (quote (tex-font-lock-append-prop (quote bold))) (quote append)))))))
                nil [19986 22834])
            ("tex-font-lock-suscript" function (:arguments ("pos")) nil [22836 23359])
            ("tex-font-lock-match-suscript" function (:arguments ("limit")) nil [23361 23935])
            ("tex-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-2 (quote ((tex-font-lock-match-suscript (1 (tex-font-lock-suscript (match-beginning 0)) append))))))
                nil [23937 24163])
            ("tex-font-lock-keywords" variable
               (:constant-flag t
                :default-value tex-font-lock-keywords-1)
                nil [24165 24274])
            ("tex-verbatim-environments" variable (:default-value (quote ("verbatim" "verbatim*"))) nil [24276 24338])
            ("put" code nil nil [24339 24447])
            ("latex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules tex-syntax-propertize-rules ("\\\\\\(?:end\\|begin\\) *\\({[^
{}]*}\\)" (1 (ignore (tex-env-mark (match-beginning 0) (match-beginning 1) (match-end 1)))))))
                nil [24708 24995])
            ("tex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\\\verb\\**\\([^a-z@*]\\)" (1 (prog1 "\"" (tex-font-lock-verb (match-beginning 0) (char-after (match-beginning 1))))))))
                nil [24470 24704])
            ("tex-env-mark" function (:arguments ("cmd" "start" "end")) nil [24998 26246])
            ("define-minor-mode" code nil nil [26248 26891])
            ("latex-env-before-change" function (:arguments ("start" "end")) nil [26893 28721])
            ("tex-font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [28723 29155])
            ("tex-suscript-height-ratio" variable (:default-value 0.8) nil [29157 29445])
            ("tex-suscript-height-minimum" variable nil nil [29447 29859])
            ("tex-suscript-height" function (:arguments ("height")) nil [29861 30353])
            ("superscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30355 30473])
            ("subscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30474 30589])
            ("tex-math" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [30591 30712])
            ("tex-verbatim" variable
               (:default-value (quote ((t :inherit fixed-pitch-serif)))
                :type "face")
                nil [30714 30840])
            ("tex-font-lock-verb" function (:arguments ("start" "delim")) nil [30842 31891])
            ("tex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [31939 32199])
            ("tex-define-common-keys" function (:arguments ("keymap")) nil [32203 33443])
            ("tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (tex-define-common-keys map) (define-key map "\"" (quote tex-insert-quote)) (define-key map "
" (quote tex-handle-newline)) (define-key map "\215" (quote latex-insert-item)) (define-key map "}" (quote up-list)) (define-key map "{" (quote tex-insert-braces)) (define-key map "" (quote tex-region)) (define-key map "" (quote tex-buffer)) (define-key map "" (quote tex-file)) (define-key map "" (quote tex-compile)) (define-key map "	" (quote tex-bibtex-file)) (define-key map "" (quote latex-insert-block)) (define-key map "" (quote latex-insert-block)) (define-key map "]" (quote latex-close-block)) (define-key map "/" (quote latex-close-block)) (define-key map "" (quote latex-close-block)) (define-key map "" (quote tex-goto-last-unclosed-latex-block)) (define-key map "" (quote tex-feed-input)) (define-key map [(control return)] (quote tex-feed-input)) (define-key map [menu-bar tex tex-bibtex-file] (quote ("BibTeX File" . tex-bibtex-file))) (define-key map [menu-bar tex tex-validate-region] (quote (menu-item "Validate Region" tex-validate-region :enable mark-active))) (define-key map [menu-bar tex tex-validate-buffer] (quote ("Validate Buffer" . tex-validate-buffer))) (define-key map [menu-bar tex tex-region] (quote (menu-item "TeX Region" tex-region :enable mark-active))) (define-key map [menu-bar tex tex-buffer] (quote ("TeX Buffer" . tex-buffer))) (define-key map [menu-bar tex tex-file] (quote ("TeX File" . tex-file))) map)) nil [33445 35145])
            ("latex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) (define-key map "" (quote latex-split-block)) map)) nil [35147 35362])
            ("plain-tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) map)) nil [35364 35536])
            ("tex-shell-map" variable (:default-value (let ((m (make-sparse-keymap))) (set-keymap-parent m shell-mode-map) (tex-define-common-keys m) m)) nil [35538 35751])
            ("tex-face-alist" variable (:default-value (quote ((bold . "{\\bf ") (italic . "{\\it ") (bold-italic . "{\\bi ") (underline . "\\underline{") (default . "{\\rm ")))) nil [35753 35976])
            ("tex-latex-face-alist" variable (:default-value (\` ((italic . "{\\em ") (\,@ tex-face-alist)))) nil [35978 36105])
            ("tex-facemenu-add-face-function" function (:arguments ("face" "_end")) nil [36107 36629])
            ("tex-guess-mode" function nil nil [36729 37658])
            ("define-derived-mode" code nil nil [37913 37997])
            ("defalias" code nil nil [38289 38346])
            ("if" code nil nil [38551 38768])
            ("tex-mode" function (:user-visible-flag t) nil [38786 39336])
            ("defalias" code nil nil [39798 39828])
            ("defalias" code nil nil [39844 39886])
            ("defalias" code nil nil [39902 39936])
            ("define-derived-mode" code nil nil [39953 41895])
            ("define-derived-mode" code nil nil [41912 45525])
            ("define-derived-mode" code nil nil [45542 47446])
            ("tildify-space-string" variable nil nil [47448 47477])
            ("tildify-foreach-region-function" variable nil nil [47478 47518])
            ("declare-function" code nil nil [47519 47627])
            ("tex--prettify-symbols-alist" variable nil nil [47628 47664])
            ("tex-common-initialization" function nil nil [47666 50661])
            ("tex-categorize-whitespace" function (:arguments ("backward-limit")) nil [50663 51624])
            ("tex-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51626 54124])
            ("tex-validate-buffer" function (:user-visible-flag t) nil [54126 56865])
            ("tex-validate-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [56867 58025])
            ("tex-handle-newline" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58027 58600])
            ("tex-terminate-paragraph" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58602 59285])
            ("define-skeleton" code nil nil [59287 59403])
            ("latex-fill-nobreak-predicate" function nil nil [59556 60005])
            ("latex-block-default" variable (:default-value "enumerate") nil [60007 60047])
            ("latex-block-args-alist" variable (:default-value (quote (("array" nil 123 (skeleton-read "Format: ") 125) ("tabular" nil 123 (skeleton-read "Format: ") 125) ("minipage" nil 123 (skeleton-read "Size: ") 125) ("picture" nil 40 (skeleton-read "SizeX,SizeY: ") 41)))) nil [60049 60669])
            ("latex-block-body-alist" variable (:default-value (quote (("enumerate" nil (quote (latex-insert-item)) > _) ("itemize" nil (quote (latex-insert-item)) > _) ("table" nil "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))) n _) ("figure" nil > _ n "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))))))) nil [60671 61345])
            ("defalias" code nil nil [61389 61436])
            ("define-skeleton" code nil nil [61437 62205])
            ("define-skeleton" code nil nil [62207 62293])
            ("latex-complete-bibtex-cache" variable nil nil [62321 62361])
            ("define-obsolete-function-alias" code nil nil [62363 62444])
            ("bibtex-reference-key" variable nil nil [62446 62475])
            ("declare-function" code nil nil [62476 62538])
            ("latex-complete-bibtex-keys" function nil nil [62540 63794])
            ("latex-complete-envnames" function nil nil [63796 64589])
            ("latex-complete-refkeys" function nil nil [64591 64710])
            ("latex-complete-alist" variable (:default-value (\` (("\\`\\\\\\(short\\)?cite\\'" \, (function latex-complete-bibtex-keys)) ("\\`\\\\\\(begin\\|end\\)\\'" \, (function latex-complete-envnames)) ("\\`\\\\[vf]?ref\\'" \, (function latex-complete-refkeys))))) nil [64712 64929])
            ("latex-complete-data" function nil nil [64931 66431])
            ("tex-search-noncomment" function (:arguments ("body")) nil [66473 66868])
            ("tex-last-unended-begin" function nil nil [66870 67216])
            ("tex-next-unmatched-end" function nil nil [67218 67540])
            ("tex-next-unmatched-eparen" function (:arguments ("otype")) nil [67542 68249])
            ("tex-last-unended-eparen" function (:arguments ("ctype")) nil [68251 68898])
            ("tex-goto-last-unclosed-latex-block" function (:user-visible-flag t) nil [68900 69178])
            ("latex-handle-escaped-parens" variable (:default-value t) nil [69180 69218])
            ("latex-backward-sexp-1" function nil nil [69396 70249])
            ("latex-forward-sexp-1" function nil nil [70532 71627])
            ("latex-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71629 72134])
            ("latex-syntax-after" function nil nil [72136 72303])
            ("latex-skip-close-parens" function nil nil [72305 72549])
            ("latex-down-list" function nil nil [72551 72912])
            ("defalias" code nil nil [72914 72966])
            ("define-skeleton" code nil nil [72967 73234])
            ("define-skeleton" code nil nil [73236 73720])
            ("tex-discount-args-cmds" variable
               (:constant-flag t
                :default-value (quote ("begin" "end" "input" "special" "cite" "ref" "include" "includeonly" "documentclass" "usepackage" "label")))
                nil [73722 73934])
            ("tex-count-words" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [73936 75000])
            ("tex-error-parse-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 123 "_" st) (modify-syntax-entry 125 "_" st) (modify-syntax-entry 91 "_" st) (modify-syntax-entry 93 "_" st) (modify-syntax-entry 34 "_" st) st)) nil [75185 75665])
            ("tex-old-error-file-name" function nil nil [75667 76426])
            ("tex-error-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (gnu ("^l\\.\\([1-9][0-9]*\\) \\(?:\\.\\.\\.\\)?\\(.*\\)$" tex-old-error-file-name 1 nil nil nil (2 compilation-error-face)) ("^\\(?:Und\\|Ov\\)erfull \\\\[hv]box .* at lines? \\(\\([1-9][0-9]*\\)\\(?:--\\([1-9][0-9]*\\)\\)?\\)$" tex-old-error-file-name (2 . 3) nil 1 nil (1 compilation-warning-face)) ("^(Font) *\\([^ 
].* on input line \\([1-9][0-9]*\\)\\)\\.$" tex-old-error-file-name 2 nil 1 1 (2 compilation-warning-face)))))
                nil [76428 77595])
            ("define-derived-mode" code nil nil [77624 77782])
            ("tex-start-shell" function nil nil [77799 78258])
            ("tex-feed-input" function (:user-visible-flag t) nil [78260 78572])
            ("tex-display-shell" function nil nil [78574 78723])
            ("tex-shell-sentinel" function (:arguments ("proc" "_msg")) nil [78725 78991])
            ("tex-set-buffer-directory" function (:arguments ("buffer" "directory")) nil [78993 79333])
            ("tex-send-command-modified-tick" variable nil nil [79335 79376])
            ("make-variable-buffer-local" code nil nil [79377 79437])
            ("tex-shell-proc" function nil nil [79439 79519])
            ("tex-shell-buf" function nil nil [79520 79580])
            ("tex-shell-buf-no-error" function nil nil [79581 79688])
            ("tex-send-command" function (:arguments ("command" "file" "background")) nil [79690 81194])
            ("tex-delete-last-temp-files" function (:arguments ("not-all")) nil [81196 81824])
            ("add-hook" code nil nil [81826 81881])
            ("tex-compile-history" variable nil nil [81956 81988])
            ("tex-input-files-re" variable (:default-value (eval-when-compile (concat "\\." (regexp-opt (quote ("tex" "texi" "texinfo" "bbl" "ind" "sty" "cls")) t) "\\'\\|\\`[^.]+\\'"))) nil [81990 82206])
            ("tex-use-reftex" variable (:default-value t) nil [82208 82344])
            ("tex-compile-commands" variable (:default-value (\` ((\,@ (mapcar (lambda (prefix) (\` ((concat (\, prefix) tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.pdf"))) (quote ("pdf" "xe" "lua")))) ((concat tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.dvi") ("xdvi %r &" "%r.dvi") ("\\doc-view \"%r.pdf\"" "%r.pdf") ("xpdf %r.pdf &" "%r.pdf") ("gv %r.ps &" "%r.ps") ("yap %r &" "%r.dvi") ("advi %r &" "%r.dvi") ("gv %r.pdf &" "%r.pdf") ("bibtex %r" "%r.aux" "%r.bbl") ("makeindex %r" "%r.idx" "%r.ind") ("texindex %r.??") ("dvipdfm %r" "%r.dvi" "%r.pdf") ("dvipdf %r" "%r.dvi" "%r.pdf") ("dvips -o %r.ps %r" "%r.dvi" "%r.ps") ("ps2pdf %r.ps" "%r.ps" "%r.pdf") ("lpr %r.ps" "%r.ps")))) nil [82346 83892])
            ("define-obsolete-function-alias" code nil nil [83894 83971])
            ("tex-guess-main-file" function (:arguments ("all")) nil [83973 85316])
            ("tex-main-file" function nil nil [85318 86321])
            ("tex-summarize-command" function (:arguments ("cmd")) nil [86323 86535])
            ("tex-uptodate-p" function (:arguments ("file")) nil [86537 88841])
            ("format-spec" function (:prototype-flag t) nil [88844 88881])
            ("tex-executable-cache" variable nil nil [88883 88916])
            ("tex-executable-exists-p" function (:arguments ("name")) nil [88917 89393])
            ("tex-command-executable" function (:arguments ("cmd")) nil [89395 89536])
            ("tex-command-active-p" function (:arguments ("cmd" "fspec")) nil [89538 89943])
            ("tex-cmd-bibtex-args" variable (:default-value "--min-crossref=100") nil [89945 90096])
            ("tex-format-cmd" function (:arguments ("format" "fspec")) nil [90098 90733])
            ("tex-compile-default" function (:arguments ("fspec")) nil [90735 93696])
            ("tex-cmd-doc-view" function (:arguments ("file")) nil [93698 93773])
            ("tex-compile" function
               (:user-visible-flag t
                :arguments ("dir" "cmd"))
                nil [93775 95210])
            ("tex-start-tex" function (:arguments ("command" "file" "dir")) nil [95212 95762])
            ("tex-send-tex-command" function (:arguments ("cmd" "dir")) nil [95764 96418])
            ("tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [96440 99127])
            ("tex-region-header" function (:arguments ("file" "beg")) nil [99129 100801])
            ("tex-buffer" function (:user-visible-flag t) nil [100803 101064])
            ("tex-file" function (:user-visible-flag t) nil [101066 101636])
            ("tex-generate-zap-file-name" function nil nil [101638 102094])
            ("tex-expand-files" function (:arguments ("s")) nil [102216 102590])
            ("tex-shell-running" function nil nil [102592 103041])
            ("tex-kill-job" function (:user-visible-flag t) nil [103043 103474])
            ("tex-recenter-output-buffer" function
               (:user-visible-flag t
                :arguments ("linenum"))
                nil [103476 104060])
            ("tex-print-file-extension" variable (:default-value ".dvi") nil [104062 104357])
            ("tex-print" function
               (:user-visible-flag t
                :arguments ("alt"))
                nil [104359 105470])
            ("tex-alt-print" function (:user-visible-flag t) nil [105472 105671])
            ("tex-view" function (:user-visible-flag t) nil [105673 106297])
            ("tex-append" function (:arguments ("file-name" "suffix")) nil [106299 107282])
            ("tex-show-print-queue" function (:user-visible-flag t) nil [107284 107588])
            ("tex-bibtex-file" function (:user-visible-flag t) nil [107590 108110])
            ("tex-indent-allhanging" variable (:default-value t) nil [108147 108179])
            ("tex-indent-arg" variable (:default-value 4) nil [108180 108205])
            ("tex-indent-basic" variable (:default-value 2) nil [108206 108233])
            ("tex-indent-item" variable (:default-value tex-indent-basic) nil [108234 108275])
            ("tex-indent-item-re" variable (:default-value "\\\\\\(bib\\)?item\\>") nil [108276 108327])
            ("latex-noindent-environments" variable (:default-value (quote ("document"))) nil [108328 108378])
            ("put" code nil nil [108379 108489])
            ("tex-latex-indent-syntax-table" variable (:default-value (let ((st (make-syntax-table tex-mode-syntax-table))) (modify-syntax-entry 36 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) st)) nil [108491 108754])
            ("latex-indent" function (:arguments ("_arg")) nil [108756 109458])
            ("latex-indent-within-escaped-parens" variable nil nil [109460 109846])
            ("latex-find-indent" function (:arguments ("virtual")) nil [109848 113821])
            ("doctex-font-lock-^^A" function nil nil [113842 114596])
            ("doctex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [114598 114972])
            ("doctex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules latex-syntax-propertize-rules ("\\(\\^\\)\\^A" (1 (doctex-font-lock-^^A)))))
                nil [114995 115197])
            ("doctex-font-lock-keywords" variable (:default-value (append tex-font-lock-keywords (quote (("^%<[^>]*>" (0 font-lock-preprocessor-face t)))))) nil [115200 115322])
            ("define-derived-mode" code nil nil [115339 115844])
            ("tex--prettify-symbols-alist" variable (:default-value (quote (("\\alpha" . 945) ("\\beta" . 946) ("\\gamma" . 947) ("\\delta" . 948) ("\\epsilon" . 1013) ("\\zeta" . 950) ("\\eta" . 951) ("\\theta" . 952) ("\\iota" . 953) ("\\kappa" . 954) ("\\lambda" . 955) ("\\mu" . 956) ("\\nu" . 957) ("\\xi" . 958) ("\\pi" . 960) ("\\rho" . 961) ("\\sigma" . 963) ("\\tau" . 964) ("\\upsilon" . 965) ("\\phi" . 981) ("\\chi" . 967) ("\\psi" . 968) ("\\omega" . 969) ("\\Gamma" . 915) ("\\Delta" . 916) ("\\Lambda" . 923) ("\\Phi" . 934) ("\\Pi" . 928) ("\\Psi" . 936) ("\\Sigma" . 931) ("\\Theta" . 920) ("\\Upsilon" . 933) ("\\Xi" . 926) ("\\Omega" . 937) ("\\Box" . 9633) ("\\Bumpeq" . 8782) ("\\Cap" . 8914) ("\\Cup" . 8915) ("\\Diamond" . 9671) ("\\Downarrow" . 8659) ("\\H{o}" . 337) ("\\Im" . 8465) ("\\Join" . 8904) ("\\Leftarrow" . 8656) ("\\Leftrightarrow" . 8660) ("\\Ll" . 8920) ("\\Lleftarrow" . 8666) ("\\Longleftarrow" . 8656) ("\\Longleftrightarrow" . 8660) ("\\Longrightarrow" . 8658) ("\\Lsh" . 8624) ("\\Re" . 8476) ("\\Rightarrow" . 8658) ("\\Rrightarrow" . 8667) ("\\Rsh" . 8625) ("\\Subset" . 8912) ("\\Supset" . 8913) ("\\Uparrow" . 8657) ("\\Updownarrow" . 8661) ("\\Vdash" . 8873) ("\\Vert" . 8214) ("\\Vvdash" . 8874) ("\\aleph" . 8501) ("\\amalg" . 8720) ("\\angle" . 8736) ("\\approx" . 8776) ("\\approxeq" . 8778) ("\\ast" . 8727) ("\\asymp" . 8781) ("\\backcong" . 8780) ("\\backepsilon" . 8717) ("\\backprime" . 8245) ("\\backsim" . 8765) ("\\backsimeq" . 8909) ("\\backslash" . 92) ("\\barwedge" . 8892) ("\\because" . 8757) ("\\beth" . 8502) ("\\between" . 8812) ("\\bigcap" . 8898) ("\\bigcirc" . 9711) ("\\bigcup" . 8899) ("\\bigstar" . 9733) ("\\bigtriangledown" . 9661) ("\\bigtriangleup" . 9651) ("\\bigvee" . 8897) ("\\bigwedge" . 8896) ("\\blacklozenge" . 10022) ("\\blacksquare" . 9642) ("\\blacktriangle" . 9652) ("\\blacktriangledown" . 9662) ("\\blacktriangleleft" . 9666) ("\\blacktriangleright" . 9656) ("\\bot" . 8869) ("\\bowtie" . 8904) ("\\boxminus" . 8863) ("\\boxplus" . 8862) ("\\boxtimes" . 8864) ("\\bullet" . 8226) ("\\bumpeq" . 8783) ("\\cap" . 8745) ("\\cdots" . 8943) ("\\centerdot" . 183) ("\\checkmark" . 10003) ("\\chi" . 967) ("\\cdot" . 8901) ("\\cdots" . 8943) ("\\circ" . 8728) ("\\circeq" . 8791) ("\\circlearrowleft" . 8634) ("\\circlearrowright" . 8635) ("\\circledR" . 174) ("\\circledS" . 9416) ("\\circledast" . 8859) ("\\circledcirc" . 8858) ("\\circleddash" . 8861) ("\\clubsuit" . 9827) ("\\coloneq" . 8788) ("\\complement" . 8705) ("\\cong" . 8773) ("\\coprod" . 8720) ("\\cup" . 8746) ("\\curlyeqprec" . 8926) ("\\curlyeqsucc" . 8927) ("\\curlypreceq" . 8828) ("\\curlyvee" . 8910) ("\\curlywedge" . 8911) ("\\curvearrowleft" . 8630) ("\\curvearrowright" . 8631) ("\\dag" . 8224) ("\\dagger" . 8224) ("\\daleth" . 8504) ("\\dashv" . 8867) ("\\ddag" . 8225) ("\\ddagger" . 8225) ("\\ddots" . 8945) ("\\diamond" . 8900) ("\\diamondsuit" . 9826) ("\\divideontimes" . 8903) ("\\doteq" . 8784) ("\\doteqdot" . 8785) ("\\dotplus" . 8724) ("\\dotsquare" . 8865) ("\\downarrow" . 8595) ("\\downdownarrows" . 8650) ("\\downleftharpoon" . 8643) ("\\downrightharpoon" . 8642) ("\\ell" . 8467) ("\\emptyset" . 8709) ("\\eqcirc" . 8790) ("\\eqcolon" . 8789) ("\\eqslantgtr" . 8925) ("\\eqslantless" . 8924) ("\\equiv" . 8801) ("\\exists" . 8707) ("\\fallingdotseq" . 8786) ("\\flat" . 9837) ("\\forall" . 8704) ("\\frown" . 8994) ("\\ge" . 8805) ("\\geq" . 8805) ("\\geqq" . 8807) ("\\geqslant" . 8805) ("\\gets" . 8592) ("\\gg" . 8811) ("\\ggg" . 8921) ("\\gimel" . 8503) ("\\gnapprox" . 8935) ("\\gneq" . 8809) ("\\gneqq" . 8809) ("\\gnsim" . 8935) ("\\gtrapprox" . 8819) ("\\gtrdot" . 8919) ("\\gtreqless" . 8923) ("\\gtreqqless" . 8923) ("\\gtrless" . 8823) ("\\gtrsim" . 8819) ("\\gvertneqq" . 8809) ("\\hbar" . 8463) ("\\heartsuit" . 9829) ("\\hookleftarrow" . 8617) ("\\hookrightarrow" . 8618) ("\\iff" . 8660) ("\\imath" . 305) ("\\in" . 8712) ("\\infty" . 8734) ("\\int" . 8747) ("\\intercal" . 8890) ("\\langle" . 10216) ("\\lbrace" . 123) ("\\lbrack" . 91) ("\\lceil" . 8968) ("\\ldots" . 8230) ("\\le" . 8804) ("\\leadsto" . 8605) ("\\leftarrow" . 8592) ("\\leftarrowtail" . 8610) ("\\leftharpoondown" . 8637) ("\\leftharpoonup" . 8636) ("\\leftleftarrows" . 8647) ("\\leftrightarrow" . 8596) ("\\leftrightarrows" . 8646) ("\\leftrightharpoons" . 8651) ("\\leftrightsquigarrow" . 8621) ("\\leftthreetimes" . 8907) ("\\leq" . 8804) ("\\leqq" . 8806) ("\\leqslant" . 8804) ("\\lessapprox" . 8818) ("\\lessdot" . 8918) ("\\lesseqgtr" . 8922) ("\\lesseqqgtr" . 8922) ("\\lessgtr" . 8822) ("\\lesssim" . 8818) ("\\lfloor" . 8970) ("\\lhd" . 9665) ("\\rhd" . 9655) ("\\ll" . 8810) ("\\llcorner" . 8990) ("\\lnapprox" . 8934) ("\\lneq" . 8808) ("\\lneqq" . 8808) ("\\lnsim" . 8934) ("\\longleftarrow" . 8592) ("\\longleftrightarrow" . 8596) ("\\longmapsto" . 8614) ("\\longrightarrow" . 8594) ("\\looparrowleft" . 8619) ("\\looparrowright" . 8620) ("\\lozenge" . 10023) ("\\lq" . 8216) ("\\lrcorner" . 8991) ("\\ltimes" . 8905) ("\\lvertneqq" . 8808) ("\\maltese" . 10016) ("\\mapsto" . 8614) ("\\measuredangle" . 8737) ("\\mho" . 8487) ("\\mid" . 8739) ("\\models" . 8871) ("\\mp" . 8723) ("\\multimap" . 8888) ("\\nLeftarrow" . 8653) ("\\nLeftrightarrow" . 8654) ("\\nRightarrow" . 8655) ("\\nVDash" . 8879) ("\\nVdash" . 8878) ("\\nabla" . 8711) ("\\napprox" . 8777) ("\\natural" . 9838) ("\\ncong" . 8775) ("\\ne" . 8800) ("\\nearrow" . 8599) ("\\neg" . 172) ("\\neq" . 8800) ("\\nequiv" . 8802) ("\\newline" . 8232) ("\\nexists" . 8708) ("\\ngeq" . 8817) ("\\ngeqq" . 8817) ("\\ngeqslant" . 8817) ("\\ngtr" . 8815) ("\\ni" . 8715) ("\\nleftarrow" . 8602) ("\\nleftrightarrow" . 8622) ("\\nleq" . 8816) ("\\nleqq" . 8816) ("\\nleqslant" . 8816) ("\\nless" . 8814) ("\\nmid" . 8740) ("\\notin" . 8713) ("\\nparallel" . 8742) ("\\nprec" . 8832) ("\\npreceq" . 8928) ("\\nrightarrow" . 8603) ("\\nshortmid" . 8740) ("\\nshortparallel" . 8742) ("\\nsim" . 8769) ("\\nsimeq" . 8772) ("\\nsubset" . 8836) ("\\nsubseteq" . 8840) ("\\nsubseteqq" . 8840) ("\\nsucc" . 8833) ("\\nsucceq" . 8929) ("\\nsupset" . 8837) ("\\nsupseteq" . 8841) ("\\nsupseteqq" . 8841) ("\\ntriangleleft" . 8938) ("\\ntrianglelefteq" . 8940) ("\\ntriangleright" . 8939) ("\\ntrianglerighteq" . 8941) ("\\nvDash" . 8877) ("\\nvdash" . 8876) ("\\nwarrow" . 8598) ("\\odot" . 8857) ("\\oint" . 8750) ("\\ominus" . 8854) ("\\oplus" . 8853) ("\\oslash" . 8856) ("\\otimes" . 8855) ("\\par" . 8233) ("\\parallel" . 8741) ("\\partial" . 8706) ("\\perp" . 8869) ("\\pitchfork" . 8916) ("\\prec" . 8826) ("\\precapprox" . 8830) ("\\preceq" . 8828) ("\\precnapprox" . 8936) ("\\precnsim" . 8936) ("\\precsim" . 8830) ("\\prime" . 8242) ("\\prod" . 8719) ("\\propto" . 8733) ("\\qed" . 8718) ("\\qquad" . 10722) ("\\quad" . 9251) ("\\rangle" . 10217) ("\\rbrace" . 125) ("\\rbrack" . 93) ("\\rceil" . 8969) ("\\rfloor" . 8971) ("\\rightarrow" . 8594) ("\\rightarrowtail" . 8611) ("\\rightharpoondown" . 8641) ("\\rightharpoonup" . 8640) ("\\rightleftarrows" . 8644) ("\\rightleftharpoons" . 8652) ("\\rightrightarrows" . 8649) ("\\rightthreetimes" . 8908) ("\\risingdotseq" . 8787) ("\\rtimes" . 8906) ("\\times" . 215) ("\\sbs" . 65128) ("\\searrow" . 8600) ("\\setminus" . 8726) ("\\sharp" . 9839) ("\\shortmid" . 8739) ("\\shortparallel" . 8741) ("\\sim" . 8764) ("\\simeq" . 8771) ("\\smallamalg" . 8720) ("\\smallsetminus" . 8726) ("\\smallsmile" . 8995) ("\\smile" . 8995) ("\\spadesuit" . 9824) ("\\sphericalangle" . 8738) ("\\sqcap" . 8851) ("\\sqcup" . 8852) ("\\sqsubset" . 8847) ("\\sqsubseteq" . 8849) ("\\sqsupset" . 8848) ("\\sqsupseteq" . 8850) ("\\square" . 9633) ("\\squigarrowright" . 8669) ("\\star" . 8902) ("\\straightphi" . 966) ("\\subset" . 8834) ("\\subseteq" . 8838) ("\\subseteqq" . 8838) ("\\subsetneq" . 8842) ("\\subsetneqq" . 8842) ("\\succ" . 8827) ("\\succapprox" . 8831) ("\\succcurlyeq" . 8829) ("\\succeq" . 8829) ("\\succnapprox" . 8937) ("\\succnsim" . 8937) ("\\succsim" . 8831) ("\\sum" . 8721) ("\\supset" . 8835) ("\\supseteq" . 8839) ("\\supseteqq" . 8839) ("\\supsetneq" . 8843) ("\\supsetneqq" . 8843) ("\\surd" . 8730) ("\\swarrow" . 8601) ("\\therefore" . 8756) ("\\thickapprox" . 8776) ("\\thicksim" . 8764) ("\\to" . 8594) ("\\top" . 8868) ("\\triangle" . 9653) ("\\triangledown" . 9663) ("\\triangleleft" . 9667) ("\\trianglelefteq" . 8884) ("\\triangleq" . 8796) ("\\triangleright" . 9657) ("\\trianglerighteq" . 8885) ("\\twoheadleftarrow" . 8606) ("\\twoheadrightarrow" . 8608) ("\\ulcorner" . 8988) ("\\uparrow" . 8593) ("\\updownarrow" . 8597) ("\\upleftharpoon" . 8639) ("\\uplus" . 8846) ("\\uprightharpoon" . 8638) ("\\upuparrows" . 8648) ("\\urcorner" . 8989) ("\\u{i}" . 301) ("\\vDash" . 8872) ("\\varepsilon" . 949) ("\\varphi" . 966) ("\\varprime" . 8242) ("\\varpropto" . 8733) ("\\varrho" . 1009) ("\\varsigma" 962) ("\\vartriangleleft" . 8882) ("\\vartriangleright" . 8883) ("\\vdash" . 8866) ("\\vdots" . 8942) ("\\vee" . 8744) ("\\veebar" . 8891) ("\\vert" . 124) ("\\wedge" . 8743) ("\\wp" . 8472) ("\\wr" . 8768) ("\\Bbb{N}" . 8469) ("\\Bbb{P}" . 8473) ("\\Bbb{Q}" . 8474) ("\\Bbb{R}" . 8477) ("\\Bbb{Z}" . 8484) ("--" . 8211) ("---" . 8212) ("\\ordfeminine" . 170) ("\\ordmasculine" . 186) ("\\lambdabar" . 411) ("\\celsius" . 8451) ("\\textmu" . 181) ("\\textfractionsolidus" . 8260) ("\\textbigcircle" . 8413) ("\\textmusicalnote" . 9834) ("\\textdied" . 10013) ("\\textcolonmonetary" . 8353) ("\\textwon" . 8361) ("\\textnaira" . 8358) ("\\textpeso" . 8369) ("\\textlira" . 8356) ("\\textrecipe" . 8478) ("\\textinterrobang" . 8253) ("\\textpertenthousand" . 8241) ("\\textbaht" . 3647) ("\\textnumero" . 8470) ("\\textdiscount" . 8274) ("\\textestimated" . 8494) ("\\textopenbullet" . 9702) ("\\textlquill" . 8261) ("\\textrquill" . 8262) ("\\textcircledP" . 8471) ("\\textreferencemark" . 8251)))) nil [115876 127250])
            ("tex--prettify-symbols-compose-p" function (:arguments ("_start" "end" "_match")) nil [127252 128125])
            ("defvar-local" code nil nil [128150 128188])
            ("tex-chktex-command" function nil nil [128190 128394])
            ("tex-chktex" function (:arguments ("report-fn" "_args")) nil [128396 130195])
            ("run-hooks" code nil nil [130197 130228])
            ("tex-mode" package nil nil [130230 130249]))          
      :file "tex-mode.el.gz"
      :pointmax 130277
      :fsize 36796
      :lastmodtime '(23603 24959 0 0)
      :unmatched-syntax '((close-paren 115197 . 115198) (symbol 114975 . 114992) (open-paren 114974 . 114975) (close-paren 38768 . 38769) (symbol 38531 . 38548) (open-paren 38530 . 38531) (close-paren 24995 . 24996) (symbol 24450 . 24467) (open-paren 24449 . 24450) (close-paren 1184 . 1185) (symbol 1102 . 1119) (open-paren 1101 . 1102)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("compile" include nil nil [3000 3018])
            ("css-mode" include nil nil [3019 3038])
            ("derived" include nil nil [3039 3057])
            ("subr-x" include nil nil [3077 3094])
            ("less-css" customgroup (:user-visible-flag t) nil [3097 3193])
            ("less-css-lessc-command" variable (:default-value "lessc") nil [3195 3395])
            ("less-css-compile-at-save" variable nil nil [3397 3520])
            ("put" code nil nil [3536 3598])
            ("less-css-lessc-options" variable (:default-value (quote ("--no-color"))) nil [3600 3750])
            ("put" code nil nil [3766 3818])
            ("less-css-output-directory" variable nil nil [3820 4153])
            ("put" code nil nil [4169 4231])
            ("less-css-output-file-name" variable nil nil [4233 4592])
            ("make-variable-buffer-local" code nil nil [4593 4648])
            ("less-css-input-file-name" variable nil nil [4650 5230])
            ("put" code nil nil [5246 5307])
            ("make-variable-buffer-local" code nil nil [5308 5362])
            ("less-css-default-error-regex" variable
               (:constant-flag t
                :default-value "^\\(?:\\[31m\\)?\\([^
]*\\|FileError:.*
\\)\\(?:\\[39m\\[31m\\)? in \\(?:\\[39m\\)?\\([^ 
	]+\\)\\(?:\\[90m\\)?\\(?::\\| on line \\)\\([0-9]+\\)\\(?::\\|, column \\)\\([0-9]+\\):?\\(?:\\[39m\\)?")
                nil [5364 5624])
            ("add-to-list" code nil nil [5650 5772])
            ("add-to-list" code nil nil [5773 5828])
            ("less-css-compile-maybe" function nil nil [5830 5989])
            ("less-css--output-path" function nil nil [5991 6301])
            ("less-css-compile" function (:user-visible-flag t) nil [6303 7202])
            ("less-css-font-lock-keywords" variable
               (:constant-flag t
                :default-value (quote (("@[a-z_-][a-z-_0-9]*" . font-lock-variable-name-face) ("&" . font-lock-preprocessor-face) ("\\(?:[ 	{;]\\|^\\)\\(\\.[a-z_-][a-z-_0-9]*\\)[ 	]*;" 1 font-lock-keyword-face))))
                nil [7329 7594])
            ("less-css-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table css-mode-syntax-table))) (modify-syntax-entry 47 ". 124b" st) (modify-syntax-entry 42 ". 23" st) (modify-syntax-entry 10 "> b" st) (modify-syntax-entry 46 "'" st) st)) nil [7596 7945])
            ("less-css-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote less-css-compile)) map)) nil [7947 8068])
            ("define-derived-mode" code nil nil [8163 8643])
            ("less-css-mode" package nil nil [8645 8669]))          
      :file "less-css-mode.el.gz"
      :pointmax 8701
      :fsize 3269
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 3094 . 3095) (symbol 3059 . 3076) (open-paren 3058 . 3059)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4484 4501])
            ("subr-x" include nil nil [4522 4539])
            ("mail-yank-prefix" variable nil nil [4542 4567])
            ("ispell" customgroup (:user-visible-flag t) nil [4569 4660])
            ("defalias" code nil nil [4662 4716])
            ("declare-function" code nil nil [4718 4777])
            ("ispell-highlight-p" variable (:default-value (quote block)) nil [5095 5331])
            ("ispell-lazy-highlight" variable (:default-value (boundp (quote lazy-highlight-cleanup))) nil [5333 5726])
            ("ispell-highlight-face" variable (:default-value (if ispell-lazy-highlight (quote isearch) (quote highlight))) nil [5728 6030])
            ("ispell-check-comments" variable (:default-value t) nil [6032 6393])
            ("put" code nil nil [6409 6504])
            ("ispell-query-replace-choices" variable nil nil [6506 6695])
            ("ispell-skip-tib" variable nil nil [6697 7130])
            ("ispell-tib-ref-beginning" variable (:default-value "[[<]\\.") nil [7132 7229])
            ("ispell-tib-ref-end" variable (:default-value "\\.[]>]") nil [7231 7316])
            ("ispell-keep-choices-win" variable (:default-value t) nil [7318 7502])
            ("ispell-choices-win-default-height" variable (:default-value 2) nil [7504 7682])
            ("ispell-program-name" variable (:default-value (or (executable-find "hunspell") (executable-find "aspell") (executable-find "ispell") "ispell")) nil [7952 8350])
            ("ispell-alternate-dictionary" variable (:default-value (cond ((file-readable-p "/usr/dict/web2") "/usr/dict/web2") ((file-readable-p "/usr/share/dict/web2") "/usr/share/dict/web2") ((file-readable-p "/usr/dict/words") "/usr/dict/words") ((file-readable-p "/usr/lib/dict/words") "/usr/lib/dict/words") ((file-readable-p "/usr/share/dict/words") "/usr/share/dict/words") ((file-readable-p "/usr/share/lib/dict/words") "/usr/share/lib/dict/words") ((file-readable-p "/sys/dict") "/sys/dict"))) nil [8352 8960])
            ("ispell-complete-word-dict" variable nil nil [8962 9172])
            ("ispell-message-dictionary-alist" variable nil nil [9174 9676])
            ("ispell-message-fcc-skip" variable (:default-value 50000) nil [9679 9909])
            ("ispell-grep-command" variable (:default-value "grep") nil [9912 10036])
            ("ispell-grep-options" variable (:default-value "-Ei") nil [10038 10218])
            ("ispell-look-command" variable (:default-value (cond ((file-exists-p "/bin/look") "/bin/look") ((file-exists-p "/usr/local/bin/look") "/usr/local/bin/look") ((file-exists-p "/usr/bin/look") "/usr/bin/look") (t "look"))) nil [10220 10546])
            ("ispell-look-p" variable (:default-value (file-exists-p ispell-look-command)) nil [10548 10750])
            ("ispell-have-new-look" variable nil nil [10752 10890])
            ("ispell-look-options" variable (:default-value (if ispell-have-new-look "-dfr" "-df")) nil [10892 11052])
            ("ispell-use-ptys-p" variable nil nil [11054 11211])
            ("ispell-following-word" variable nil nil [11213 11406])
            ("ispell-help-in-bufferp" variable nil nil [11408 11992])
            ("ispell-quietly" variable nil nil [11994 12112])
            ("ispell-format-word-function" variable (:default-value (function upcase)) nil [12114 12335])
            ("defvaralias" code nil nil [12336 12398])
            ("ispell-use-framepop-p" variable nil nil [12400 12772])
            ("ispell-personal-dictionary" variable nil nil [12789 13036])
            ("ispell-silently-savep" variable nil nil [13038 13185])
            ("ispell-local-dictionary-overridden" variable nil nil [13187 13313])
            ("make-variable-buffer-local" code nil nil [13314 13378])
            ("ispell-local-dictionary" variable nil nil [13380 14029])
            ("put" code nil nil [14045 14114])
            ("make-variable-buffer-local" code nil nil [14116 14169])
            ("ispell-dictionary" variable nil nil [14171 14343])
            ("ispell-extra-args" variable nil nil [14345 14666])
            ("ispell-skip-html" variable (:default-value (quote use-mode-name)) nil [14670 15082])
            ("make-variable-buffer-local" code nil nil [15084 15130])
            ("ispell-local-dictionary-alist" variable nil nil [15133 16108])
            ("ispell-dictionary-base-alist" variable (:default-value (quote ((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[^A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[']" nil nil nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("castellano" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B") "~tex" iso-8859-1) ("castellano8" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "[^A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "" nil ("-B") nil iso-8859-2) ("dansk" "[A-Z\306\330\305a-z\346\370\345]" "[^A-Z\306\330\305a-z\346\370\345]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[^A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[-']" t ("-C") "~latin3" iso-8859-3) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-3) ("finnish" "[A-Za-z\345\344\366\305\304\326]" "[^A-Za-z\345\344\366\305\304\326]" "[:]" nil ("-C") "~list" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^-]" t nil nil iso-8859-1) ("francais" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[-'.@]" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[-'^`\".@]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[^A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[-.]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[^A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[\"]" nil nil "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[^A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[.]" nil nil nil iso-8859-2) ("portugues" "[a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[^a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[']" t ("-C") "~latin1" iso-8859-1) ("russiannil nil nil koi8-r) ("russianwnil nil nil windows-1251) ("slovak" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B") nil iso-8859-2) ("slovenian" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B" "-d" "slovenian") nil iso-8859-2) ("svenska" "[A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[^A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[']" nil ("-C") "~list" iso-8859-1) ("hebrew" "[\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "[^\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "" nil ("-B") nil cp1255)))) nil [16111 24649])
            ("ispell-dictionary-alist" variable nil nil [24651 27210])
            ("ispell-really-aspell" variable nil nil [27212 27290])
            ("ispell-really-hunspell" variable nil nil [27291 27373])
            ("ispell-really-enchant" variable nil nil [27374 27454])
            ("ispell-encoding8-command" variable nil nil [27455 28114])
            ("ispell-aspell-supports-utf8" variable nil nil [28116 28415])
            ("make-obsolete-variable" code nil nil [28417 28527])
            ("ispell-dicts-name2locale-equivs-alist" variable (:default-value (quote (("american" "en_US") ("brasileiro" "pt_BR") ("british" "en_GB") ("castellano" "es_ES") ("castellano8" "es_ES") ("czech" "cs_CZ") ("dansk" "da_DK") ("deutsch" "de_DE") ("deutsch8" "de_DE") ("english" "en_US") ("esperanto" "eo") ("esperanto-tex" "eo") ("finnish" "fi_FI") ("francais7" "fr_FR") ("francais" "fr_FR") ("francais-tex" "fr_FR") ("german" "de_DE") ("german8" "de_DE") ("italiano" "it_IT") ("nederlands" "nl_NL") ("nederlands8" "nl_NL") ("norsk" "nn_NO") ("norsk7-tex" "nn_NO") ("polish" "pl_PL") ("portugues" "pt_PT") ("russian" "ru_RU") ("russianw" "ru_RU") ("slovak" "sk_SK") ("slovenian" "sl_SI") ("svenska" "sv_SE") ("hebrew" "he_IL")))) nil [28529 29599])
            ("ispell-check-version" function
               (:user-visible-flag t
                :arguments ("interactivep"))
                nil [29818 34163])
            ("ispell-call-process" function (:arguments ("args")) nil [34165 34468])
            ("ispell-call-process-region" function (:arguments ("args")) nil [34470 34794])
            ("ispell-debug-buffer" variable nil nil [34796 34824])
            ("ispell-create-debug-buffer" function (:arguments ("append")) nil [34826 35365])
            ("ispell-print-if-debug" function (:arguments ("format" "args")) nil [35367 35652])
            ("ispell-menu-map" variable nil nil [35872 35927])
            ("setq" code nil nil [35993 36019])
            ("ispell-menu-map-needed" variable (:default-value (unless ispell-menu-map (quote reload))) nil [36058 36124])
            ("ispell-library-directory" variable (:default-value (condition-case nil (ispell-check-version) (error nil))) nil [36126 36278])
            ("ispell-process" variable nil nil [36280 36342])
            ("ispell-async-processp" variable (:default-value (and (fboundp (quote delete-process)) (fboundp (quote process-send-string)) (fboundp (quote accept-process-output)))) nil [36344 36547])
            ("ispell-aspell-dictionary-alist" variable nil nil [36593 36713])
            ("ispell-find-aspell-dictionaries" function nil nil [36715 37738])
            ("ispell-aspell-data-dir" variable nil nil [37740 37805])
            ("ispell-aspell-dict-dir" variable nil nil [37807 37878])
            ("ispell-get-aspell-config-value" function (:arguments ("key")) nil [37880 38151])
            ("ispell-aspell-find-dictionary" function (:arguments ("dict-name")) nil [38153 40703])
            ("ispell-aspell-add-aliases" function (:arguments ("alist")) nil [40705 41903])
            ("ispell-hunspell-dict-paths-alist" variable nil nil [41951 42208])
            ("ispell-hunspell-dictionary-alist" variable nil nil [42210 42462])
            ("ispell-hunspell-fill-dictionary-entry" function (:arguments ("dict")) nil [42464 44088])
            ("ispell-parse-hunspell-affix-file" function (:arguments ("dict-key")) nil [44090 46844])
            ("ispell-hunspell-add-multi-dic" function
               (:user-visible-flag t
                :arguments ("dict"))
                nil [46846 47785])
            ("ispell-find-hunspell-dictionaries" function nil nil [47787 52489])
            ("ispell-enchant-dictionary-alist" variable nil nil [52536 52658])
            ("ispell--call-enchant-lsmod" function (:arguments ("args")) nil [52660 53041])
            ("ispell--get-extra-word-characters" function (:arguments ("lang")) nil [53043 53454])
            ("ispell-find-enchant-dictionaries" function nil nil [53456 54486])
            ("ispell-last-program-name" variable nil nil [54542 54635])
            ("ispell-base-dicts-override-alist" variable nil nil [54774 54815])
            ("ispell-initialize-spellchecker-hook" variable nil nil [54817 55360])
            ("ispell-set-spellchecker-params" function nil nil [55362 60551])
            ("ispell-valid-dictionary-list" function nil nil [60553 61979])
            ("if" code nil nil [62066 64067])
            ("if" code nil nil [64084 64849])
            ("if" code nil nil [64866 65559])
            ("ispell-current-dictionary" variable nil nil [65638 65884])
            ("ispell-current-personal-dictionary" variable nil nil [65886 66066])
            ("ispell-get-decoded-string" function (:arguments ("n")) nil [66139 66657])
            ("ispell-get-casechars" function nil nil [66659 66722])
            ("ispell-get-not-casechars" function nil nil [66723 66790])
            ("ispell-get-otherchars" function nil nil [66791 66855])
            ("ispell-get-many-otherchars-p" function nil nil [66856 67038])
            ("ispell-get-ispell-args" function nil nil [67039 67215])
            ("ispell-get-extended-character-mode" function nil nil [67216 67562])
            ("ispell-get-coding-system" function nil nil [67563 67741])
            ("ispell-pdict-modified-p" variable nil nil [67744 67849])
            ("ispell-quit" variable nil nil [68056 68080])
            ("ispell-process-directory" variable nil nil [68082 68173])
            ("ispell-filter" variable nil nil [68175 68247])
            ("ispell-filter-continue" variable nil nil [68249 68333])
            ("ispell-output-buffer" variable nil nil [68335 68439])
            ("ispell-session-buffer" variable nil nil [68441 68545])
            ("ispell-cmd-args" variable nil nil [68547 68646])
            ("ispell-query-replace-marker" variable (:default-value (make-marker)) nil [68648 68741])
            ("ispell-recursive-edit-marker" variable (:default-value (make-marker)) nil [68743 68843])
            ("ispell-checking-message" variable nil nil [68845 68988])
            ("ispell-choices-buffer" variable
               (:constant-flag t
                :default-value "*Choices*")
                nil [68990 69034])
            ("ispell-overlay" variable nil nil [69036 69107])
            ("ispell-words-keyword" variable
               (:constant-flag t
                :default-value "LocalWords: ")
                nil [69147 69379])
            ("ispell-dictionary-keyword" variable
               (:constant-flag t
                :default-value "Local IspellDict: ")
                nil [69381 69685])
            ("ispell-pdict-keyword" variable
               (:constant-flag t
                :default-value "Local IspellPersDict: ")
                nil [69687 69924])
            ("ispell-parsing-keyword" variable
               (:constant-flag t
                :default-value "Local IspellParsing: ")
                nil [69926 70361])
            ("ispell--\\w-filter" function (:arguments ("char")) nil [70363 70591])
            ("ispell--make-\\w-expression" function (:arguments ("chars")) nil [70593 71353])
            ("ispell--make-filename-or-URL-re" function nil nil [71355 71891])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage"))))) nil [71908 73861])
            ("put" code nil nil [73862 73917])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [73935 75322])
            ("put" code nil nil [75323 75375])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [75393 76042])
            ("put" code nil nil [76043 76097])
            ("ispell-local-pdict" variable (:default-value ispell-personal-dictionary) nil [76099 76594])
            ("make-variable-buffer-local" code nil nil [76596 76644])
            ("ispell-buffer-local-name" variable nil nil [76716 76884])
            ("ispell-buffer-session-localwords" variable nil nil [76886 76986])
            ("make-variable-buffer-local" code nil nil [76988 77050])
            ("ispell-parser" variable (:default-value (quote use-mode-name)) nil [77052 77448])
            ("ispell-region-end" variable (:default-value (make-marker)) nil [77450 77537])
            ("ispell-check-only" variable nil nil [77539 77633])
            ("ispell-accept-output" function (:arguments ("timeout-secs" "timeout-msecs")) nil [77844 78618])
            ("ispell-send-replacement" function (:arguments ("misspelled" "replacement")) nil [78620 78988])
            ("ispell-send-string" function (:arguments ("string")) nil [78991 82004])
            ("ispell-word" function
               (:user-visible-flag t
                :arguments ("following" "quietly" "continue" "region"))
                nil [82022 87378])
            ("ispell-get-word" function (:arguments ("following" "extra-otherchars")) nil [87381 90044])
            ("ispell-pdict-save" function
               (:user-visible-flag t
                :arguments ("no-query" "force-save"))
                nil [90289 90950])
            ("ispell-update-post-hook" variable nil nil [90953 91118])
            ("ispell-command-loop" function (:arguments ("miss" "guess" "word" "start" "end")) nil [91120 101189])
            ("ispell-show-choices" function nil nil [101193 101643])
            ("ispell-help" function nil nil [101661 105064])
            ("define-obsolete-function-alias" code nil nil [105066 105140])
            ("ispell-lookup-words" function (:arguments ("word" "lookup-dict")) nil [105142 108231])
            ("ispell-filter" function (:arguments ("_process" "output")) nil [108901 110104])
            ("ispell-highlight-spelling-error-generic" function (:arguments ("start" "end" "highlight" "refresh")) nil [110235 111956])
            ("ispell-highlight-spelling-error-overlay" function (:arguments ("start" "end" "highlight")) nil [111959 113203])
            ("ispell-highlight-spelling-error" function (:arguments ("start" "end" "highlight" "refresh")) nil [113206 113452])
            ("ispell-display-buffer" function (:arguments ("buffer")) nil [113454 114992])
            ("ispell-parse-output" function (:arguments ("output" "accept-list" "shift")) nil [115047 117616])
            ("ispell-process-status" function nil nil [117619 117866])
            ("ispell-start-process" function nil nil [117869 120306])
            ("ispell-init-process" function nil nil [120308 125093])
            ("ispell-kill-ispell" function
               (:user-visible-flag t
                :arguments ("no-error" "clear"))
                nil [125110 126154])
            ("ispell-change-dictionary" function
               (:user-visible-flag t
                :arguments ("dict" "arg"))
                nil [126326 128151])
            ("ispell-internal-change-dictionary" function nil nil [128153 128778])
            ("ispell-start" variable nil nil [128848 128869])
            ("ispell-end" variable nil nil [128870 128889])
            ("ispell-region" function
               (:user-visible-flag t
                :arguments ("reg-start" "reg-end" "recheckp" "shift"))
                nil [128982 135396])
            ("ispell-begin-skip-region-regexp" function nil nil [135399 137069])
            ("ispell-begin-skip-region" function (:arguments ("skip-alist")) nil [137072 137392])
            ("ispell-begin-tex-skip-regexp" function nil nil [137395 137865])
            ("ispell-skip-region-list" function nil nil [137868 138959])
            ("ispell-tex-arg-end" function (:arguments ("arg")) nil [138962 139265])
            ("ispell-ignore-fcc" function (:arguments ("start" "end")) nil [139268 140202])
            ("ispell-skip-region" function (:arguments ("key")) nil [140205 142036])
            ("ispell-get-line" function (:arguments ("start" "end" "in-comment")) nil [142039 142783])
            ("ispell-looking-at" function (:arguments ("string")) nil [142786 143089])
            ("ispell-process-line" function (:arguments ("string" "shift")) nil [143091 151019])
            ("ispell-comments-and-strings" function (:user-visible-flag t) nil [151037 151681])
            ("ispell-buffer" function (:user-visible-flag t) nil [151699 151845])
            ("ispell-buffer-with-debug" function
               (:user-visible-flag t
                :arguments ("append"))
                nil [151862 152161])
            ("ispell-continue" function (:user-visible-flag t) nil [152178 152735])
            ("ispell-horiz-scroll" function nil nil [152763 153217])
            ("ispell-complete-word" function
               (:user-visible-flag t
                :arguments ("interior-frag"))
                nil [153344 155713])
            ("ispell-complete-word-interior-frag" function (:user-visible-flag t) nil [155731 155881])
            ("ispell" function (:user-visible-flag t) nil [155899 156512])
            ("ispell-minor-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote ispell-minor-check)) (define-key map "" (quote ispell-minor-check)) map)) nil [156691 156894])
            ("define-minor-mode" code nil nil [156911 157566])
            ("ispell-minor-check" function (:user-visible-flag t) nil [157568 158138])
            ("ispell-message-text-end" variable (:default-value (mapconcat (function identity) (quote ("^-- $" "^#! /bin/[ck]?sh" "\\(\\(^cd .*
\\)?diff -c .*\\)?
\\*\\*\\* .*
--- .*
\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" "\\(diff -u .*\\)?
--- .*
\\+\\+\\+ .*
@@ [-+][0-9]+,[0-9]+ [-+][0-9]+,[0-9]+ @@" "^current state:
==============
" "^\\(- \\)?[-=_]+\\s ?\\(cut here\\|Environment Follows\\)")) "\\|")) nil [158314 159403])
            ("put" code nil nil [159404 159458])
            ("ispell-mime-multipartp" function (:arguments ("limit")) nil [159461 160226])
            ("ispell-mime-skip-part" function (:arguments ("boundary")) nil [160229 162674])
            ("ispell-message" function (:user-visible-flag t) nil [162692 168468])
            ("ispell-non-empty-string" function (:arguments ("string")) nil [168471 168645])
            ("ispell-accept-buffer-local-defs" function nil nil [168830 169099])
            ("ispell-buffer-local-parsing" function nil nil [169102 171335])
            ("ispell-buffer-local-dict" function (:arguments ("no-reload")) nil [171378 172726])
            ("ispell-buffer-local-words" function nil nil [172729 174203])
            ("declare-function" code nil nil [174324 174398])
            ("ispell-add-per-file-word-list" function (:arguments ("word")) nil [174400 175948])
            ("ispell" package nil nil [175950 175967]))          
      :file "ispell.el.gz"
      :pointmax 177327
      :fsize 48150
      :lastmodtime '(24047 51336 0 0)
      :unmatched-syntax '((close-paren 4539 . 4540) (symbol 4504 . 4521) (open-paren 4503 . 4504) (close-paren 4501 . 4502) (symbol 4466 . 4483) (open-paren 4465 . 4466)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode-hook" variable (:default-value (quote (text-mode-hook-identify))) nil [1155 1354])
            ("text-mode-variant" variable nil nil [1356 1497])
            ("text-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 ".   " st) (modify-syntax-entry 92 ".   " st) (modify-syntax-entry 39 "w p" st) (modify-syntax-entry 1523 "w   ") (modify-syntax-entry 1524 "w   ") (modify-syntax-entry 183 "w   ") (modify-syntax-entry 8231 "w   ") (modify-syntax-entry 65306 "w   ") st)) nil [1499 2783])
            ("text-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ispell-complete-word)) (define-key map [menu-bar text] (cons "Text" (make-sparse-keymap "Text"))) (bindings--define-key map [menu-bar text toggle-text-mode-auto-fill] (quote (menu-item "Auto Fill" toggle-text-mode-auto-fill :button (:toggle memq (quote turn-on-auto-fill) text-mode-hook) :help "Automatically fill text while typing in text modes (Auto Fill mode)"))) (bindings--define-key map [menu-bar text paragraph-indent-minor-mode] (quote (menu-item "Paragraph Indent" paragraph-indent-minor-mode :button (:toggle bound-and-true-p paragraph-indent-minor-mode) :help "Toggle paragraph indent minor mode"))) (bindings--define-key map [menu-bar text sep] menu-bar-separator) (bindings--define-key map [menu-bar text center-region] (quote (menu-item "Center Region" center-region :help "Center the marked region" :enable (region-active-p)))) (bindings--define-key map [menu-bar text center-paragraph] (quote (menu-item "Center Paragraph" center-paragraph :help "Center the current paragraph"))) (bindings--define-key map [menu-bar text center-line] (quote (menu-item "Center Line" center-line :help "Center the current line"))) map)) nil [2785 4336])
            ("define-derived-mode" code nil nil [4340 4892])
            ("define-derived-mode" code nil nil [4894 5468])
            ("define-minor-mode" code nil nil [5470 6653])
            ("defalias" code nil nil [6655 6696])
            ("text-mode-hook-identify" function nil nil [6912 7123])
            ("toggle-text-mode-auto-fill" function (:user-visible-flag t) nil [7125 7832])
            ("define-key" code nil nil [7836 7888])
            ("center-paragraph" function (:user-visible-flag t) nil [7890 8190])
            ("center-region" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [8192 8616])
            ("define-key" code nil nil [8618 8665])
            ("center-line" function
               (:user-visible-flag t
                :arguments ("nlines"))
                nil [8667 9564])
            ("text-mode" package nil nil [9566 9586]))          
      :file "text-mode.el.gz"
      :pointmax 9615
      :fsize 3384
      :lastmodtime '(23603 24959 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("newcomment" include nil nil [1150 1171])
            ("outline-heading-end-regexp" variable nil nil [1173 1208])
            ("conf" customgroup (:user-visible-flag t) nil [1225 1302])
            ("conf-assignment-column" variable (:default-value 24) nil [1304 1598])
            ("conf-javaprop-assignment-column" variable (:default-value 32) nil [1600 1745])
            ("conf-colon-assignment-column" variable (:default-value (- (abs conf-assignment-column))) nil [1747 1919])
            ("conf-assignment-space" variable (:default-value t) nil [1921 2049])
            ("conf-colon-assignment-space" variable nil nil [2051 2198])
            ("conf-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (define-key map "" (quote conf-unix-mode)) (define-key map "" (quote conf-windows-mode)) (define-key map "
" (quote conf-javaprop-mode)) (define-key map "" (quote conf-space-keywords)) (define-key map " " (quote conf-space-keywords)) (define-key map "" (quote conf-colon-mode)) (define-key map ":" (quote conf-colon-mode)) (define-key map "" (quote conf-xdefaults-mode)) (define-key map "" (quote conf-ppd-mode)) (define-key map "" (quote conf-quote-normal)) (define-key map "\"" (quote conf-quote-normal)) (define-key map "'" (quote conf-quote-normal)) (define-key map "" (quote conf-align-assignments)) (define-key map [menu-bar sh-script] (cons "Conf" menu-map)) (define-key menu-map [conf-windows-mode] (quote (menu-item "Windows mode" conf-windows-mode :help "Conf Mode starter for Windows style Conf files" :button (:radio eq major-mode (quote conf-windows-mode))))) (define-key menu-map [conf-javaprop-mode] (quote (menu-item "Java properties mode" conf-javaprop-mode :help "Conf Mode starter for Java properties files" :button (:radio eq major-mode (quote conf-javaprop-mode))))) (define-key menu-map [conf-space-keywords] (quote (menu-item "Space keywords mode..." conf-space-keywords :help "Enter Conf Space mode using regexp KEYWORDS to match the keywords" :button (:radio eq major-mode (quote conf-space-keywords))))) (define-key menu-map [conf-ppd-mode] (quote (menu-item "PPD mode" conf-ppd-mode :help "Conf Mode starter for Adobe/CUPS PPD files" :button (:radio eq major-mode (quote conf-ppd-mode))))) (define-key menu-map [conf-colon-mode] (quote (menu-item "Colon mode" conf-colon-mode :help "Conf Mode starter for Colon files" :button (:radio eq major-mode (quote conf-colon-mode))))) (define-key menu-map [conf-unix-mode] (quote (menu-item "Unix mode" conf-unix-mode :help "Conf Mode starter for Unix style Conf files" :button (:radio eq major-mode (quote conf-unix-mode))))) (define-key menu-map [conf-xdefaults-mode] (quote (menu-item "Xdefaults mode" conf-xdefaults-mode :help "Conf Mode starter for Xdefaults files" :button (:radio eq major-mode (quote conf-xdefaults-mode))))) (define-key menu-map [c-s0] (quote ("--"))) (define-key menu-map [conf-quote-normal] (quote (menu-item "Set quote syntax normal" conf-quote-normal :help "Set the syntax of \\=' and \" to punctuation"))) (define-key menu-map [conf-align-assignments] (quote (menu-item "Align assignments" conf-align-assignments :help "Align assignments"))) map)) nil [2200 4929])
            ("conf-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 61 "." table) (modify-syntax-entry 95 "_" table) (modify-syntax-entry 45 "_" table) (modify-syntax-entry 46 "_" table) (modify-syntax-entry 39 "\"" table) (modify-syntax-entry 59 "<" table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 13 ">" table) table)) nil [4931 5393])
            ("conf-unix-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table conf-mode-syntax-table))) (modify-syntax-entry 35 "<" table) (modify-syntax-entry 59 "." table) table)) nil [5395 5657])
            ("conf-javaprop-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table conf-unix-mode-syntax-table))) (modify-syntax-entry 47 ". 124" table) (modify-syntax-entry 42 ". 23b" table) table)) nil [5659 5915])
            ("conf-ppd-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table conf-mode-syntax-table))) (modify-syntax-entry 42 ". 1" table) (modify-syntax-entry 37 ". 2" table) (modify-syntax-entry 39 "." table) (modify-syntax-entry 59 "." table) table)) nil [5917 6255])
            ("conf-xdefaults-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table conf-mode-syntax-table))) (modify-syntax-entry 33 "<" table) (modify-syntax-entry 59 "." table) table)) nil [6257 6529])
            ("conf-toml-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table conf-mode-syntax-table))) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 39 "\"" table) (modify-syntax-entry 92 "\\" table) (modify-syntax-entry 35 "<" table) (modify-syntax-entry 59 "." table) table)) nil [6531 6915])
            ("conf-font-lock-keywords" variable (:default-value (quote (("^[ 	]*\\[\\(.+\\)\\]" 1 (quote font-lock-type-face)) ("^[ 	]*\\(.+?\\)\\(?:\\[\\(.*?\\)\\]\\)?[ 	]*=" (1 (quote font-lock-variable-name-face)) (2 (quote font-lock-constant-face) nil t)) ("^[ 	]*\\([^=:
]+?\\)[ 	
]*{[^{}]*?$" 1 (quote font-lock-type-face) prepend)))) nil [6917 7426])
            ("conf-javaprop-font-lock-keywords" variable (:default-value (quote (("^[ 	]*\\(.+?\\)\\(?:\\.\\([0-9]+\\)\\(?:\\.\\(.+?\\)\\(?:\\.\\([0-9]+\\)\\(?:\\.\\(.+?\\)\\(?:\\.\\([0-9]+\\)\\(\\..+?\\)?\\)?\\)?\\)?\\)?\\)?\\([:= 	]\\|$\\)" (1 (quote font-lock-variable-name-face)) (2 (quote font-lock-constant-face) nil t) (3 (quote font-lock-variable-name-face) nil t) (4 (quote font-lock-constant-face) nil t) (5 (quote font-lock-variable-name-face) nil t) (6 (quote font-lock-constant-face) nil t) (7 (quote font-lock-variable-name-face) nil t))))) nil [7428 8004])
            ("conf-space-keywords-alist" variable (:default-value (quote (("\\`/etc/gpm/" . "key\\|name\\|foreground\\|background\\|border\\|head") ("\\`/etc/magic\\'" . "[^ 	]+[ 	]+\\(?:[bl]?e?\\(?:short\\|long\\)\\|byte\\|string\\)[^ 	]*") ("/mod\\(?:ules\\|probe\\)\\.conf" . "alias\\|in\\(?:clude\\|stall\\)\\|options\\|remove") ("/manpath\\.config" . "MAN\\(?:DATORY_MANPATH\\|PATH_MAP\\|DB_MAP\\)") ("/sensors\\.conf" . "chip\\|bus\\|label\\|compute\\|set\\|ignore") ("/sane\\(\\.d\\)?/" . "option\\|device\\|port\\|usb\\|sc\\(?:si\\|anner\\)") ("/resmgr\\.conf" . "class\\|add\\|allow\\|deny") ("/dictionary\\.lst\\'" . "DICT\\|HYPH\\|THES") ("/tuxracer/options" . "set")))) nil [8006 8754])
            ("conf-space-keywords" variable nil nil [8756 8999])
            ("put" code nil nil [9000 9056])
            ("conf-space-font-lock-keywords" variable (:default-value (\` (("^[ 	]*\\[\\(.+\\)\\]" 1 (quote font-lock-type-face)) ("^[ 	]*\\(.+?\\)[ 	
]*{[^{}]*?$" 1 (quote font-lock-type-face)) (eval if conf-space-keywords (list (concat "^[ 	]*\\(" conf-space-keywords "\\)[ 	]+\\([^ - ]+\\)") (quote (1 (quote font-lock-keyword-face))) (quote (2 (quote font-lock-variable-name-face)))) (quote ("^[ 	]*\\([^ - ]+\\)" 1 (quote font-lock-variable-name-face))))))) nil [9058 9665])
            ("conf-colon-font-lock-keywords" variable (:default-value (\` (("^[ 	]*\\[\\(.+\\)\\]" 1 (quote font-lock-type-face)) ("^[ 	]*\\(.+?\\)[ 	]*:" (1 (quote font-lock-variable-name-face))) ("^[ 	]*\\([^:
]+\\)[ 	
]*{[^{}]*?$" 1 (quote font-lock-type-face) prepend)))) nil [9667 10105])
            ("conf-toml-font-lock-keywords" variable (:default-value (quote ((conf-toml-recognize-section 0 (quote font-lock-type-face) prepend) ("^\\s-*\\(.+?\\)\\(?:\\[\\(.*?\\)\\]\\)?\\s-*=" (1 (quote font-lock-variable-name-face)) (2 (quote font-lock-constant-face) nil t)) ("\\_<false\\|true\\_>" 0 (quote font-lock-keyword-face))))) nil [10107 10546])
            ("conf-desktop-font-lock-keywords" variable (:default-value (\` ((\,@ conf-font-lock-keywords) ("\\_<false\\|true\\_>" 0 (quote font-lock-constant-face)) ("\\_<%[uUfFick%]\\_>" 0 (quote font-lock-constant-face))))) nil [10548 10778])
            ("conf-assignment-sign" variable (:default-value 61) nil [10780 10860])
            ("conf-assignment-regexp" variable (:default-value ".+?\\([ 	]*=[ 	]*\\)") nil [10862 11096])
            ("conf-align-assignments" function (:arguments ("arg")) nil [11203 12614])
            ("conf-quote-normal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12617 13426])
            ("conf-outline-level" function nil nil [13429 13612])
            ("conf-mode" function (:user-visible-flag t) nil [13632 17411])
            ("conf-mode-initialize" function (:arguments ("comment" "font-lock")) nil [17413 17912])
            ("define-derived-mode" code nil nil [17929 18121])
            ("define-derived-mode" code nil nil [18138 18647])
            ("define-derived-mode" code nil nil [18913 19737])
            ("define-derived-mode" code nil nil [19754 21271])
            ("conf-space-keywords" function
               (:user-visible-flag t
                :arguments ("keywords"))
                nil [21288 21656])
            ("conf-space-mode-internal" function nil nil [21658 22748])
            ("define-derived-mode" code nil nil [22765 23608])
            ("define-derived-mode" code nil nil [23625 24120])
            ("define-derived-mode" code nil nil [24137 24502])
            ("conf-toml-recognize-section" function (:arguments ("limit")) nil [24504 25572])
            ("define-derived-mode" code nil nil [25589 26014])
            ("define-derived-mode" code nil nil [26031 26518])
            ("conf-mode" package nil nil [26520 26540]))          
      :file "conf-mode.el.gz"
      :pointmax 26569
      :fsize 7690
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.3!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
