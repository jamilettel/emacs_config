;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("SMART_BUFFER_H" variable (:constant-flag t) nil [113 127])
            ("SMART_BUFFER_ORIGINAL_SIZE" variable (:constant-flag t) nil [137 163])
            ("SMART_BUFFER_MAX_WRITE" variable (:constant-flag t) nil [177 199])
            ("SMART_BUFFER_MAX_READ" variable (:constant-flag t) nil [212 233])
            ("stdbool.h" include (:system-flag t) nil [240 260])
            ("stdlib.h" include (:system-flag t) nil [261 280])
            ("string.h" include (:system-flag t) nil [281 300])
            ("unistd.h" include (:system-flag t) nil [301 320])
            ("smart_buffer" type
               (:members 
                  ( ("buffer" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [356 369])
                    ("end" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [374 385])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [390 402]))                  
                :type "struct")
                nil [322 420])
            ("smart_buffer_t" type
               (:typedef ("smart_buffer" type (:type "struct") nil nil)
                :type "typedef")
                nil [322 420])
            ("smart_buffer_create" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [458 463]))                  
                :type ("smart_buffer_t" type (:type "class") nil nil))
                nil [422 464])
            ("smart_buffer_destroy" function
               (:prototype-flag t
                :arguments 
                  ( ("smart_buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [491 520]))                  
                :type "void")
                nil [465 521])
            ("smart_buffer_add_string" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [552 575])
                    ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [576 592]))                  
                :type "bool")
                nil [523 593])
            ("smart_buffer_add_data" function
               (:prototype-flag t
                :arguments 
                  ( ("buff" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [621 642])
                    ("data" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [643 660])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [661 673]))                  
                :type "bool")
                nil [594 674])
            ("smart_buffer_get_data" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [703 726])
                    ("var" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [727 737])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [738 750]))                  
                :type "bool")
                nil [676 751])
            ("smart_buffer_get_data_if" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [787 810])
                    ("var" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [811 821])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [822 834])
                    ("fct" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("smart_buffer_t" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [851 868])
                            ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [869 876]))                          
                        :type "bool")
                        nil nil))                  
                :type "bool")
                nil [752 878])
            ("smart_buffer_get_size" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [909 938]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [880 939])
            ("smart_buffer_empty" function
               (:prototype-flag t
                :arguments 
                  ( ("buff" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [964 985]))                  
                :type "void")
                nil [940 986])
            ("smart_buffer_read" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1014 1037])
                    ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [1038 1045]))                  
                :type ("ssize_t" type (:type "class") nil nil))
                nil [988 1046])
            ("smart_buffer_write" function
               (:prototype-flag t
                :arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("smart_buffer_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1074 1097])
                    ("fd" variable (:type "int") (reparse-symbol arg-sub-list) [1098 1105]))                  
                :type ("ssize_t" type (:type "class") nil nil))
                nil [1047 1106]))          
      :file "smart_buffer.h"
      :pointmax 1137
      :fsize 1136
      :lastmodtime '(24237 48530 449968 900000)
      :unmatched-syntax nil
      :lexical-table 
        '(("SMART_BUFFER_MAX_WRITE" . ((number "512" 200 . 203)))
          ("SMART_BUFFER_H")
          ("SMART_BUFFER_ORIGINAL_SIZE" . ((number "1024" 164 . 168)))
          ("SMART_BUFFER_MAX_READ" . ((number "2048" 234 . 238)))
          )
))
  :file "!home!Jamil!delivery!NWP_myteams_2019!lib!include!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
