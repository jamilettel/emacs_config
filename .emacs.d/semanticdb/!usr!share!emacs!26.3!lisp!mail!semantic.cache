;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mail-utils" include nil nil [1011 1032])
            ("rfc2047" include nil nil [1033 1051])
            ("message-make-date" function (:prototype-flag t) nil [1052 1091])
            ("sendmail" customgroup (:user-visible-flag t) nil [1093 1186])
            ("mail-setup-with-from" variable (:default-value t) nil [1188 1344])
            ("sendmail-program" variable (:default-value (or (executable-find "sendmail") (cond ((file-exists-p "/usr/sbin/sendmail") "/usr/sbin/sendmail") ((file-exists-p "/usr/lib/sendmail") "/usr/lib/sendmail") ((file-exists-p "/usr/ucblib/sendmail") "/usr/ucblib/sendmail") (t "sendmail")))) nil [1346 1770])
            ("mail-from-style" variable (:default-value (quote default)) nil [1787 2383])
            ("mail-specify-envelope-from" variable nil nil [2400 2913])
            ("mail-envelope-from" variable nil nil [2915 3482])
            ("mail-self-blind" variable nil nil [3499 3739])
            ("mail-interactive" variable (:default-value t) nil [3756 4231])
            ("mail-yank-ignored-headers" variable (:default-value (concat "^" (regexp-opt (quote ("via" "mail-from" "origin" "status" "remailed" "received" "message-id" "summary-line" "to" "subject" "in-reply-to" "return-path" "mail-reply-to" "x-rmail-attributes" "x-rmail-keywords" "mail-followup-to")) "\\(?:") ":")) nil [4233 4958])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [5008 5954])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [5971 6151])
            ("put" code nil nil [6222 6278])
            ("mail-archive-file-name" variable nil nil [6664 6914])
            ("mail-default-reply-to" variable nil nil [6931 7189])
            ("mail-alias-file" variable nil nil [7191 7686])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [7703 8022])
            ("mail-setup-hook" variable nil nil [8039 8233])
            ("mail-aliases" variable (:default-value t) nil [8250 8556])
            ("mail-alias-modtime" variable nil nil [8558 8666])
            ("mail-yank-prefix" variable (:default-value "> ") nil [8683 8911])
            ("mail-indentation-spaces" variable (:default-value 3) nil [8928 9126])
            ("mail-yank-hooks" variable nil nil [9128 9505])
            ("make-obsolete-variable" code nil nil [9506 9575])
            ("mail-citation-hook" variable nil nil [9592 10124])
            ("mail-citation-header" variable nil nil [10126 10373])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [10390 10823])
            ("mail-abbrevs-loaded" variable nil nil [10825 10857])
            ("mail-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\211" (quote completion-at-point)) (define-key map "?" (quote describe-mode)) (define-key map "" (quote mail-to)) (define-key map "" (quote mail-bcc)) (define-key map "" (quote mail-fcc)) (define-key map "" (quote mail-cc)) (define-key map "" (quote mail-subject)) (define-key map "" (quote mail-reply-to)) (define-key map "" (quote mail-mail-reply-to)) (define-key map "" (quote mail-mail-followup-to)) (define-key map "" (quote mail-text)) (define-key map "" (quote mail-yank-original)) (define-key map "" (quote mail-yank-region)) (define-key map [remap split-line] (quote mail-split-line)) (define-key map "" (quote mail-fill-yanked-message)) (define-key map "" (quote mail-signature)) (define-key map "" (quote mail-send-and-exit)) (define-key map "" (quote mail-send)) (define-key map "	" (quote mail-insert-file)) (define-key map [menu-bar mail] (cons "Mail" (make-sparse-keymap "Mail"))) (define-key map [menu-bar mail attachment] (quote ("Attach File" . mail-add-attachment))) (define-key map [menu-bar mail fill] (quote ("Fill Citation" . mail-fill-yanked-message))) (define-key map [menu-bar mail yank] (quote (menu-item "Cite Original" mail-yank-original :enable mail-reply-action))) (define-key map [menu-bar mail signature] (quote ("Insert Signature" . mail-signature))) (define-key map [menu-bar mail mail-sep] (quote ("--"))) (define-key map [menu-bar mail cancel] (quote ("Cancel" . mail-dont-send))) (define-key map [menu-bar mail send-stay] (quote ("Send, Keep Editing" . mail-send))) (define-key map [menu-bar mail send] (quote ("Send Message" . mail-send-and-exit))) (define-key map [menu-bar headers] (cons "Headers" (make-sparse-keymap "Move to Header"))) (define-key map [menu-bar headers text] (quote ("Text" . mail-text))) (define-key map [menu-bar headers expand-aliases] (quote ("Expand Aliases" . expand-mail-aliases))) (define-key map [menu-bar headers mail-reply-to] (quote ("Mail-Reply-To" . mail-mail-reply-to))) (define-key map [menu-bar headers mail-followup-to] (quote ("Mail-Followup-To" . mail-mail-followup-to))) (define-key map [menu-bar headers reply-to] (quote ("Reply-To" . mail-reply-to))) (define-key map [menu-bar headers bcc] (quote ("Bcc" . mail-bcc))) (define-key map [menu-bar headers fcc] (quote ("Fcc" . mail-fcc))) (define-key map [menu-bar headers cc] (quote ("Cc" . mail-cc))) (define-key map [menu-bar headers subject] (quote ("Subject" . mail-subject))) (define-key map [menu-bar headers to] (quote ("To" . mail-to))) map)) nil [10858 13754])
            ("build-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13756 13943])
            ("mail-signature" variable (:default-value t) nil [13960 14590])
            ("put" code nil nil [14591 14636])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [14653 14804])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [14821 15167])
            ("mail-reply-action" variable nil nil [15169 15199])
            ("mail-send-actions" variable nil nil [15200 15306])
            ("mail-return-action" variable nil nil [15307 15338])
            ("mail-default-headers" variable nil nil [15355 15652])
            ("mail-bury-selects-summary" variable (:default-value t) nil [15654 15956])
            ("mail-send-nonascii" variable (:default-value (quote mime)) nil [15958 16469])
            ("mail-use-dsn" variable nil nil [16471 16837])
            ("mail-mailer-swallows-blank-line" variable nil nil [16935 17251])
            ("put" code nil nil [17253 17315])
            ("make-obsolete-variable" code nil nil [17331 17471])
            ("mail-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 ". " st) st)) nil [17473 17944])
            ("mail-font-lock-keywords" variable (:default-value (eval-when-compile (let* ((cite-chars "[>|}]") (cite-prefix "[:alpha:]") (cite-suffix (concat cite-prefix "0-9_.@-`'\""))) (list (quote ("^\\(To\\|Newsgroups\\):" . font-lock-function-name-face)) (quote ("^\\(B?CC\\|Reply-to\\|Mail-\\(reply\\|followup\\)-to\\):" . font-lock-keyword-face)) (quote ("^\\(Subject:\\)[ 	]*\\(.+\\)?" (1 font-lock-comment-face))) (quote (eval let ((separator (if (zerop (length mail-header-separator)) " \\`\\' " (regexp-quote mail-header-separator)))) (cons (concat "^" separator "$") (quote font-lock-warning-face)))) (\` ((\, cite-chars) ((\, (concat "\\=[ 	]*" "\\(\\(\\([" cite-prefix "]+[" cite-suffix "]*\\)?" "\\(" cite-chars "[ 	]*\\)\\)+\\)" "\\(.*\\)")) (beginning-of-line) (end-of-line) (1 font-lock-comment-delimiter-face nil t) (5 font-lock-comment-face nil t)))) (quote ("^\\(X-[A-Za-z0-9-]+\\|In-reply-to\\):.*\\(
[ 	]+.*\\)*$" . font-lock-string-face)))))) nil [17946 19199])
            ("sendmail-query-once" function nil nil [19218 19657])
            ("sendmail-query-user-about-smtp" function nil nil [19659 21397])
            ("sendmail-sync-aliases" function nil nil [21400 21639])
            ("define-mail-user-agent" code nil nil [21658 21756])
            ("sendmail-user-agent-compose" function (:arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action" "ignored")) nil [21773 22706])
            ("mail-setup" function (:arguments ("to" "subject" "in-reply-to" "cc" "replybuffer" "actions" "return-action")) nil [22708 25350])
            ("mail-mode-hook" variable nil nil [25353 25599])
            ("mail-mode-abbrev-table" variable (:default-value text-mode-abbrev-table) nil [25601 25655])
            ("mail-encode-mml" variable nil nil [25656 25680])
            ("define-derived-mode" code nil nil [25696 28786])
            ("mail-header-end" function nil nil [28789 28974])
            ("mail-text-start" function nil nil [28976 29183])
            ("mail-sendmail-delimit-header" function nil nil [29185 29429])
            ("mail-sendmail-undelimit-header" function nil nil [29431 29673])
            ("mail-mode-auto-fill" function nil nil [29675 30221])
            ("mail-mode-fill-paragraph" function (:arguments ("arg")) nil [30223 31338])
            ("mail-send-and-exit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31378 31593])
            ("mail-dont-send" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31595 31764])
            ("mail-bury" function (:arguments ("arg")) nil [31766 32496])
            ("mail-send-hook" variable nil nil [32498 32637])
            ("mail-mailing-lists" variable nil nil [32654 32911])
            ("declare-function" code nil nil [32913 32952])
            ("mail-send" function (:user-visible-flag t) nil [32954 36416])
            ("mail-envelope-from" function nil nil [36418 36695])
            ("sendmail-coding-system" variable nil nil [36829 37148])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [37165 37641])
            ("mail-insert-from-field" function nil nil [37643 40060])
            ("mail-combine-fields" function (:arguments ("field")) nil [40062 42988])
            ("mail-encode-header" function (:arguments ("beg" "end")) nil [42990 43781])
            ("sendmail-error-reporting-interactive" variable (:default-value (quote ("-oep" "-odi"))) nil [44141 44277])
            ("sendmail-error-reporting-non-interactive" variable (:default-value (quote ("-oem" "-odb"))) nil [44278 44415])
            ("sendmail-send-it" function nil nil [44417 51850])
            ("rmail-output-to-rmail-buffer" function (:prototype-flag t) nil [51852 51903])
            ("mail-do-fcc" function (:arguments ("header-end")) nil [51905 56047])
            ("mail-sent-via" function nil nil [56049 56903])
            ("mail-to" function (:user-visible-flag t) nil [56906 57051])
            ("mail-subject" function (:user-visible-flag t) nil [57053 57213])
            ("mail-cc" function (:user-visible-flag t) nil [57215 57435])
            ("mail-bcc" function (:user-visible-flag t) nil [57437 57661])
            ("mail-fcc" function
               (:user-visible-flag t
                :arguments ("folder"))
                nil [57663 57936])
            ("mail-reply-to" function (:user-visible-flag t) nil [57938 58101])
            ("mail-mail-reply-to" function (:user-visible-flag t) nil [58103 58372])
            ("mail-mail-followup-to" function (:user-visible-flag t) nil [58374 58655])
            ("mail-position-on-field" function (:arguments ("field" "soft")) nil [58657 59330])
            ("mail-text" function (:user-visible-flag t) nil [59332 59461])
            ("mail-signature" function
               (:user-visible-flag t
                :arguments ("atpoint"))
                nil [59464 60636])
            ("mail-fill-yanked-message" function
               (:user-visible-flag t
                :arguments ("justifyp"))
                nil [60638 60965])
            ("mail-indent-citation" function nil nil [60967 61682])
            ("mail-yank-original" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61684 64323])
            ("mail-yank-clear-headers" function (:arguments ("start" "end")) nil [64325 64894])
            ("mail-yank-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [64896 66517])
            ("mail-split-line" function (:user-visible-flag t) nil [66519 66737])
            ("mail-insert-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [66741 67369])
            ("define-obsolete-function-alias" code nil nil [67371 67446])
            ("declare-function" code nil nil [67448 67538])
            ("declare-function" code nil nil [67539 67601])
            ("mail-add-attachment" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [67603 67885])
            ("mail" function
               (:user-visible-flag t
                :arguments ("noerase" "to" "subject" "in-reply-to" "cc" "replybuffer" "actions" "return-action"))
                nil [68009 71959])
            ("declare-function" code nil nil [71961 72006])
            ("declare-function" code nil nil [72007 72093])
            ("mail-recover-1" function (:user-visible-flag t) nil [72095 75272])
            ("declare-function" code nil nil [75274 75351])
            ("declare-function" code nil nil [75352 75438])
            ("declare-function" code nil nil [75439 75484])
            ("mail-recover" function (:user-visible-flag t) nil [75486 77332])
            ("mail-other-window" function
               (:user-visible-flag t
                :arguments ("noerase" "to" "subject" "in-reply-to" "cc" "replybuffer" "sendactions"))
                nil [77349 77642])
            ("mail-other-frame" function
               (:user-visible-flag t
                :arguments ("noerase" "to" "subject" "in-reply-to" "cc" "replybuffer" "sendactions"))
                nil [77659 77949])
            ("sendmail" package nil nil [78010 78029]))          
      :file "sendmail.el.gz"
      :pointmax 78113
      :fsize 22542
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1531 1544])
            ("ietf-drums-no-ws-ctl-token" variable (:default-value "--") nil [1547 1681])
            ("ietf-drums-text-token" variable (:default-value "-	-") nil [1682 1786])
            ("ietf-drums-specials-token" variable (:default-value "()<>[]:;@\\,.\"") nil [1787 1863])
            ("ietf-drums-quote-token" variable (:default-value "\\") nil [1864 1921])
            ("ietf-drums-wsp-token" variable (:default-value " 	") nil [1922 1974])
            ("ietf-drums-fws-regexp" variable (:default-value (concat "[" ietf-drums-wsp-token "]*
[" ietf-drums-wsp-token "]+")) nil [1975 2100])
            ("ietf-drums-atext-token" variable (:default-value "-^a-zA-Z0-9!#$%&'*+/=?_`{|}~") nil [2101 2182])
            ("ietf-drums-dot-atext-token" variable (:default-value "-^a-zA-Z0-9!#$%&'*+/=?_`{|}~.") nil [2183 2289])
            ("ietf-drums-qtext-token" variable (:default-value (concat ietf-drums-no-ws-ctl-token "!#-[]-")) nil [2290 2484])
            ("ietf-drums-tspecials" variable (:default-value "][()<>@,;:\\\"/?=") nil [2485 2549])
            ("ietf-drums-syntax-table" variable (:default-value (let ((table (copy-syntax-table emacs-lisp-mode-syntax-table))) (modify-syntax-entry 92 "/" table) (modify-syntax-entry 60 "(" table) (modify-syntax-entry 62 ")" table) (modify-syntax-entry 64 "w" table) (modify-syntax-entry 47 "w" table) (modify-syntax-entry 42 "_" table) (modify-syntax-entry 59 "_" table) (modify-syntax-entry 39 "_" table) table)) nil [2551 2975])
            ("ietf-drums-token-to-list" function (:arguments ("token")) nil [2977 3499])
            ("ietf-drums-init" function (:arguments ("string")) nil [3501 3651])
            ("ietf-drums-remove-comments" function (:arguments ("string")) nil [3653 4248])
            ("ietf-drums-remove-whitespace" function (:arguments ("string")) nil [4250 4621])
            ("ietf-drums-get-comment" function (:arguments ("string")) nil [4623 5015])
            ("ietf-drums-strip" function (:arguments ("string")) nil [5017 5167])
            ("ietf-drums-remove-garbage" function (:arguments ("string")) nil [5169 5417])
            ("ietf-drums-strip-cte" function (:arguments ("string")) nil [5419 5682])
            ("ietf-drums-parse-address" function (:arguments ("string")) nil [5684 7386])
            ("ietf-drums-parse-addresses" function (:arguments ("string" "rawp")) nil [7388 8466])
            ("ietf-drums-unfold-fws" function nil nil [8468 8692])
            ("ietf-drums-parse-date" function (:arguments ("string")) nil [8694 8825])
            ("ietf-drums-narrow-to-header" function nil nil [8827 9081])
            ("ietf-drums-quote-string" function (:arguments ("string")) nil [9083 9302])
            ("ietf-drums-make-address" function (:arguments ("name" "address")) nil [9304 9437])
            ("ietf-drums" package nil nil [9439 9460]))          
      :file "ietf-drums.el.gz"
      :pointmax 9490
      :fsize 3080
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax '((close-paren 1544 . 1545) (symbol 1513 . 1530) (open-paren 1512 . 1513))))
  :file "!usr!share!emacs!26.3!lisp!mail!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
