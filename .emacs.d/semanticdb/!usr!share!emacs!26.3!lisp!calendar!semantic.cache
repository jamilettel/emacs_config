;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("with-decoded-time-value" function (:arguments ("varlist" "body")) nil [1600 4231])
            ("encode-time-value" function (:arguments ("high" "low" "micro" "pico" "type")) nil [4233 4847])
            ("make-obsolete" code nil nil [4849 4894])
            ("make-obsolete" code nil nil [4895 4946])
            ("parse-time-string" function (:prototype-flag t) nil [4948 4990])
            ("timezone-make-date-arpa-standard" function (:prototype-flag t) nil [4991 5046])
            ("date-to-time" function (:arguments ("date")) nil [5323 6009])
            ("defalias" code nil nil [6026 6065])
            ("seconds-to-time" function (:arguments ("seconds")) nil [6082 6175])
            ("days-to-time" function (:arguments ("days")) nil [6192 6437])
            ("time-since" function (:arguments ("time")) nil [6454 6710])
            ("define-obsolete-function-alias" code nil nil [6727 6796])
            ("date-to-day" function (:arguments ("date")) nil [6813 6966])
            ("days-between" function (:arguments ("date1" "date2")) nil [6983 7163])
            ("date-leap-year-p" function (:arguments ("year")) nil [7180 7338])
            ("time-date--day-in-year" function (:arguments ("tim")) nil [7340 7751])
            ("time-to-day-in-year" function (:arguments ("time")) nil [7768 7913])
            ("time-to-days" function (:arguments ("time")) nil [7930 8400])
            ("time-to-number-of-days" function (:arguments ("time")) nil [8428 8586])
            ("safe-date-to-time" function (:arguments ("date")) nil [8603 8831])
            ("format-seconds" function (:arguments ("string" "seconds")) nil [8850 12072])
            ("seconds-to-string" variable (:default-value (list (list 1 "ms" 0.001) (list 100 "s" 1) (list (* 60 100) "m" 60.0) (list (* 3600 30) "h" 3600.0) (list (* 3600 24 400) "d" (* 3600.0 24.0)) (list nil "y" (* 365.25 24 3600)))) nil [12074 12377])
            ("seconds-to-string" function (:arguments ("delay")) nil [12393 12808])
            ("time-date" package nil nil [12810 12830]))          
      :file "time-date.el.gz"
      :pointmax 12859
      :fsize 4567
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calendar" include nil nil [961 980])
            ("load" code nil nil [999 1028])
            ("diary" customgroup (:user-visible-flag t) nil [1031 1106])
            ("diary-include-string" variable (:default-value "#include") nil [1108 1327])
            ("diary-list-include-blanks" variable nil nil [1329 1572])
            ("diary-anniversary" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [1574 1743])
            ("diary-time" variable
               (:default-value (quote ((t :inherit font-lock-variable-name-face)))
                :type "face")
                nil [1745 1912])
            ("diary-button" variable
               (:default-value (quote ((((type pc) (class color)) (:foreground "lightblue"))))
                :type "face")
                nil [1914 2115])
            ("diary-face-attrs" variable (:default-value (quote ((" *\\[foreground:\\([-a-z]+\\)\\]$" 1 :foreground string) (" *\\[background:\\([-a-z]+\\)\\]$" 1 :background string) (" *\\[width:\\([-a-z]+\\)\\]$" 1 :width symbol) (" *\\[height:\\([.0-9]+\\)\\]$" 1 :height int) (" *\\[weight:\\([-a-z]+\\)\\]$" 1 :weight symbol) (" *\\[slant:\\([-a-z]+\\)\\]$" 1 :slant symbol) (" *\\[underline:\\([-a-z]+\\)\\]$" 1 :underline stringtnil) (" *\\[overline:\\([-a-z]+\\)\\]$" 1 :overline stringtnil) (" *\\[strike-through:\\([-a-z]+\\)\\]$" 1 :strike-through stringtnil) (" *\\[inverse-video:\\([-a-z]+\\)\\]$" 1 :inverse-video tnil) (" *\\[face:\\([-0-9a-z]+\\)\\]$" 1 :face string) (" *\\[font:\\([-a-z0-9]+\\)\\]$" 1 :font string)))) nil [2557 4552])
            ("diary-glob-file-regexp-prefix" variable (:default-value "^\\#") nil [4554 4716])
            ("diary-file-name-prefix" variable nil nil [4718 4870])
            ("diary-file-name-prefix-function" variable (:default-value (quote identity)) nil [4872 5040])
            ("diary-sexp-entry-symbol" variable (:default-value "%%") nil [5042 5248])
            ("diary-comment-start" variable nil nil [5250 5763])
            ("diary-comment-end" variable nil nil [5765 5994])
            ("diary-hook" variable nil nil [5996 6180])
            ("diary-display-function" variable (:default-value (quote diary-fancy-display)) nil [6182 7090])
            ("diary-list-entries-hook" variable nil nil [7092 8441])
            ("diary-mark-entries-hook" variable nil nil [8443 9071])
            ("diary-nongregorian-listing-hook" variable nil nil [9073 9853])
            ("diary-nongregorian-marking-hook" variable nil nil [9855 10634])
            ("diary-print-entries-hook" variable (:default-value (quote lpr-buffer)) nil [10636 11087])
            ("diary-unknown-time" variable (:default-value -9999) nil [11089 11418])
            ("diary-mail-addr" variable (:default-value (or (bound-and-true-p user-mail-address) "")) nil [11420 11609])
            ("diary-mail-days" variable (:default-value 7) nil [11611 11753])
            ("diary-remind-message" variable (:default-value (quote ("Reminder: Only " (if (zerop (% days 7)) (format "%d week%s" (/ days 7) (if (= 7 days) "" "s")) (format "%d day%s" days (if (= 1 days) "" "s"))) " until " diary-entry))) nil [11755 12303])
            ("diary-abbreviated-year-flag" variable (:default-value t) nil [12305 12797])
            ("diary-outlook-format-1" function (:arguments ("body")) nil [12799 14046])
            ("diary-outlook-formats" variable (:default-value (quote (("[ 	
]*When: [[:alpha:]]+, \\([[:alpha:]]+\\) \\([0-9][0-9]*\\), \\([0-9]\\{4\\}\\),? \\(.+\\)
\\(?:Where: \\(.+
\\)\\)?" . diary-outlook-format-1)))) nil [14688 16130])
            ("diary-header-line-flag" variable nil nil [16132 16163])
            ("diary-header-line-format" variable nil nil [16164 16197])
            ("diary-set-header" function (:arguments ("symbol" "value")) nil [16199 16736])
            ("diary-header-line-flag" variable (:default-value t) nil [16842 17135])
            ("diary-selective-display" variable nil nil [17137 17240])
            ("diary-header-line-format" variable (:default-value (quote (:eval (calendar-string-spread (list (if diary-selective-display "Some text is hidden - press \"C-c C-s\" before edit/copy" "Diary")) 32 (window-width))))) nil [17242 17740])
            ("diary-live-p" function nil nil [18541 18755])
            ("diary-set-maybe-redraw" function (:arguments ("symbol" "value")) nil [18776 19260])
            ("diary-number-of-entries" variable (:default-value 1) nil [19262 20723])
            ("diary-check-diary-file" function nil nil [20778 21179])
            ("diary" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21196 21671])
            ("diary-view-entries" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21692 22056])
            ("diary-view-other-diary-entries" function
               (:user-visible-flag t
                :arguments ("arg" "dfile"))
                nil [22078 22598])
            ("diary-syntax-table" variable (:default-value (let ((st (copy-syntax-table (standard-syntax-table)))) (modify-syntax-entry 42 "w" st) (modify-syntax-entry 58 "w" st) st)) nil [22600 22955])
            ("diary-attrtype-convert" function (:arguments ("attrvalue" "type")) nil [22957 23495])
            ("diary-pull-attrs" function (:arguments ("entry" "fileglobattrs")) nil [23497 25483])
            ("diary-modify-entry-list-string-function" variable nil nil [25487 25823])
            ("diary-entries-list" variable nil nil [25825 25852])
            ("diary-add-to-list" function (:arguments ("date" "string" "specifier" "marker" "globcolor" "literal")) nil [25896 28178])
            ("diary-list-entries-2" function (:arguments ("date" "mark" "globattr" "list-only" "months" "symbol" "gdate")) nil [28180 31729])
            ("original-date" variable nil nil [31731 31753])
            ("file-glob-attrs" variable nil nil [31797 31821])
            ("list-only" variable nil nil [31822 31840])
            ("number" variable nil nil [31841 31856])
            ("diary-list-entries-1" function (:arguments ("months" "symbol" "absfunc")) nil [31858 32512])
            ("diary-included-files" variable nil nil [32514 32654])
            ("diary-list-entries" function (:arguments ("date" "number" "list-only")) nil [32656 39979])
            ("diary-unhide-everything" function nil nil [39981 40276])
            ("original-date" variable nil nil [40278 40300])
            ("diary-include-files" function (:arguments ("mark")) nil [40415 42202])
            ("diary-include-other-diary-files" function nil nil [42204 42483])
            ("date-string" variable nil nil [42485 42505])
            ("diary-display-no-entries" function nil nil [42556 44146])
            ("diary-saved-point" variable nil nil [44149 44175])
            ("diary-simple-display" function nil nil [44220 45445])
            ("diary-goto-entry-function" variable (:default-value (quote diary-goto-entry)) nil [45447 45678])
            ("define-button-type" code nil nil [45680 45858])
            ("diary-goto-entry" function (:arguments ("button")) nil [45860 46976])
            ("diary-fancy-display" function nil nil [46978 51519])
            ("diary-print-entries" function (:user-visible-flag t) nil [51541 53314])
            ("diary-show-all-entries" function (:user-visible-flag t) nil [53335 54233])
            ("diary-mail-entries" function
               (:user-visible-flag t
                :arguments ("ndays"))
                nil [54250 55626])
            ("diary-name-pattern" function (:arguments ("string-array" "abbrev-array" "paren")) nil [55628 56259])
            ("diary-marking-entries-flag" variable nil nil [56261 56361])
            ("diary-marking-entry-flag" variable nil nil [56363 56475])
            ("diary-mark-entries-1" function (:arguments ("markfunc" "months" "symbol" "absfunc")) nil [56525 62272])
            ("diary-mark-entries" function
               (:user-visible-flag t
                :arguments ("redraw"))
                nil [62293 65160])
            ("diary-sexp-entry" function (:arguments ("sexp" "entry" "date")) nil [65162 66051])
            ("displayed-year" variable nil nil [66053 66076])
            ("displayed-month" variable nil nil [66122 66146])
            ("diary-mark-sexp-entries" function nil nil [66148 68508])
            ("diary-mark-included-diary-files" function nil nil [68510 68768])
            ("calendar-mark-days-named" function (:arguments ("dayname" "color")) nil [68770 69815])
            ("calendar-mark-month" function (:arguments ("month" "year" "p-month" "p-day" "p-year" "color")) nil [69817 70505])
            ("calendar-mark-date-pattern" function (:arguments ("month" "day" "year" "color")) nil [70507 71033])
            ("calendar-mark-complex" function (:arguments ("month" "day" "year" "fromabs" "color")) nil [71063 72502])
            ("calendar-mark-1" function (:arguments ("month" "day" "year" "fromabs" "toabs" "color")) nil [72524 74157])
            ("diary-entry-time" function (:arguments ("s")) nil [74160 75585])
            ("diary-entry-compare" function (:arguments ("e1" "e2")) nil [75608 76003])
            ("diary-sort-entries" function nil nil [76005 76317])
            ("diary-list-sexp-entries" function (:arguments ("date")) nil [76320 83382])
            ("diary-make-date" function (:arguments ("a" "b" "c")) nil [83384 83883])
            ("date" variable nil nil [83913 83926])
            ("entry" variable nil nil [83927 83941])
            ("diary-date" function (:arguments ("month" "day" "year" "mark")) nil [84011 85052])
            ("diary-block" function (:arguments ("m1" "d1" "y1" "m2" "d2" "y2" "mark")) nil [85122 85820])
            ("diary-float" function (:arguments ("month" "dayname" "n" "day" "mark")) nil [85890 89228])
            ("diary-ordinal-suffix" function (:arguments ("n")) nil [89230 89461])
            ("diary-anniversary" function (:arguments ("month" "day" "year" "mark")) nil [89531 90739])
            ("diary-cyclic" function (:arguments ("n" "month" "day" "year" "mark")) nil [90809 91777])
            ("diary-day-of-year" function nil nil [91779 91922])
            ("diary-remind" function (:arguments ("sexp" "days" "marking")) nil [91924 94046])
            ("diary-make-entry" function (:arguments ("string" "nonmarking" "file")) nil [94100 94882])
            ("diary-insert-entry" function
               (:user-visible-flag t
                :arguments ("arg" "event"))
                nil [94903 95227])
            ("diary-insert-weekly-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [95248 95524])
            ("diary-date-display-form" function (:arguments ("type")) nil [95526 96945])
            ("diary-insert-entry-1" function (:arguments ("type" "nomark" "months" "symbol" "absfunc")) nil [96947 97962])
            ("diary-insert-monthly-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97983 98207])
            ("diary-insert-yearly-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98228 98449])
            ("diary-insert-anniversary-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98470 98894])
            ("diary-insert-block-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98915 99733])
            ("diary-insert-cyclic-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [99754 100282])
            ("diary-redraw-calendar" function nil nil [100301 100564])
            ("diary-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote diary-show-all-entries)) (define-key map "" (quote quit-window)) map)) nil [100566 100764])
            ("diary-font-lock-sexps" function (:arguments ("limit")) nil [100766 101290])
            ("diary-font-lock-date-forms" function (:arguments ("month-array" "symbol" "abbrev-array")) nil [101292 102865])
            ("diary-font-lock-keywords-1" function (:arguments ("markfunc" "listfunc" "feature" "months" "symbol")) nil [102867 103417])
            ("diary-time-regexp" variable
               (:constant-flag t
                :default-value (concat "[0-9]?[0-9]\\([AaPp][mM]\\|\\(" "[Hh]\\([0-9][0-9]\\)?\\|[:.][0-9][0-9]" "\\)\\([AaPp][Mm]\\)?\\)"))
                nil [103419 103815])
            ("calendar-hebrew-month-name-array-leap-year" variable nil nil [103817 103868])
            ("calendar-islamic-month-name-array" variable nil nil [103869 103911])
            ("calendar-bahai-month-name-array" variable nil nil [103912 103952])
            ("calendar-chinese-month-name-array" variable nil nil [103953 103995])
            ("diary-font-lock-keywords" function nil nil [104016 106940])
            ("diary-font-lock-keywords" variable (:default-value (diary-font-lock-keywords)) nil [106967 107067])
            ("define-derived-mode" code nil nil [107084 107756])
            ("diary-fancy-date-pattern" function nil nil [107782 108718])
            ("diary-fancy-date-matcher" function (:arguments ("limit")) nil [108720 109078])
            ("diary-fancy-font-lock-keywords" variable (:default-value (\` ((diary-fancy-date-matcher quote diary) ("^.*\\([aA]nniversary\\|[bB]irthday\\).*$" quote diary-anniversary) ("^.*Yahrzeit.*$" . font-lock-constant-face) ("^\\(Erev \\)?Rosh Hodesh.*" . font-lock-function-name-face) ("^Day.*omer.*$" . font-lock-builtin-face) ("^Parashat.*$" . font-lock-comment-face) ((\, (format "\\(^\\|\\s-\\)%s\\(-%s\\)?" diary-time-regexp diary-time-regexp)) quote diary-time)))) nil [109080 109597])
            ("diary-fancy-font-lock-fontify-region-function" function (:arguments ("beg" "end" "verbose")) nil [109736 110558])
            ("diary-fancy-overriding-map" variable (:default-value (make-sparse-keymap)) nil [110560 110685])
            ("define-derived-mode" code nil nil [110687 111174])
            ("diary-from-outlook-internal" function (:arguments ("subject" "body" "test-only")) nil [111646 112629])
            ("gnus-article-mime-handles" variable nil nil [112631 112665])
            ("gnus-article-buffer" variable nil nil [112666 112694])
            ("gnus-fetch-field" function (:prototype-flag t) nil [112696 112736])
            ("gnus-narrow-to-body" function (:prototype-flag t) nil [112737 112775])
            ("mm-get-part" function (:prototype-flag t) nil [112776 112811])
            ("diary-from-outlook-gnus" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [112813 113898])
            ("custom-add-option" code nil nil [113900 113971])
            ("rmail-buffer" variable nil nil [113973 113994])
            ("diary-from-outlook-rmail" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [113996 114951])
            ("diary-from-outlook-function" variable nil nil [114953 115362])
            ("diary-from-outlook" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [115364 116193])
            ("diary-lib" package nil nil [116195 116215]))          
      :file "diary-lib.el.gz"
      :pointmax 116244
      :fsize 29026
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1028 . 1029) (symbol 982 . 998) (open-paren 981 . 982)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calendar" include nil nil [1024 1043])
            ("load" code nil nil [1044 1071])
            ("holidays" customgroup (:user-visible-flag t) nil [1073 1187])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [1367 2292])
            ("put" code nil nil [2308 2363])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [2380 3071])
            ("put" code nil nil [3087 3143])
            ("holiday-local-holidays" variable nil nil [3160 3310])
            ("put" code nil nil [3326 3379])
            ("holiday-other-holidays" variable nil nil [3396 3553])
            ("put" code nil nil [3569 3622])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [3639 4103])
            ("put" code nil nil [4119 4173])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [4190 4766])
            ("put" code nil nil [4782 4839])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [4856 5485])
            ("put" code nil nil [5501 5556])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the B\303\241b") (holiday-fixed 5 29 "Ascension of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (holiday-fixed 7 9 "Martyrdom of the B\303\241b") (holiday-fixed 10 20 "Birth of the B\303\241b") (holiday-fixed 11 12 "Birth of Bah\303\241\342\200\231u\342\200\231ll\303\241h") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu\342\200\231l-Bah\303\241"))))))) nil [5573 6265])
            ("put" code nil nil [6281 6334])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [6351 7147])
            ("put" code nil nil [7163 7216])
            ("calendar-holidays" variable (:default-value (append holiday-general-holidays holiday-local-holidays holiday-other-holidays holiday-christian-holidays holiday-hebrew-holidays holiday-islamic-holidays holiday-bahai-holidays holiday-oriental-holidays holiday-solar-holidays)) nil [7365 12455])
            ("put" code nil nil [12471 12519])
            ("calendar-holiday-list" function nil nil [12600 13386])
            ("displayed-month" variable nil nil [13388 13412])
            ("displayed-year" variable nil nil [13453 13476])
            ("calendar-list-holidays" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13528 15101])
            ("holidays" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15118 15671])
            ("list-holidays" function
               (:user-visible-flag t
                :arguments ("y1" "y2" "l" "label"))
                nil [15826 19892])
            ("defalias" code nil nil [19909 19948])
            ("calendar-check-holidays" function (:arguments ("date")) nil [19971 20562])
            ("holiday-in-range" function (:arguments ("d1" "d2")) nil [20600 21691])
            ("declare-function" code nil nil [21694 21750])
            ("calendar-cursor-holidays" function
               (:user-visible-flag t
                :arguments ("date" "event"))
                nil [21771 23188])
            ("calendar-mark-holidays" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23236 23883])
            ("holiday-fixed" function (:arguments ("month" "day" "string")) nil [24232 25453])
            ("holiday-float" function (:arguments ("month" "dayname" "n" "string" "day")) nil [25455 27865])
            ("holiday-filter-visible-calendar" function (:arguments ("hlist")) nil [27867 28172])
            ("holiday-sexp" function (:arguments ("sexp" "string")) nil [28174 28963])
            ("holiday-advent" function (:arguments ("n" "string")) nil [28966 30050])
            ("holiday-easter-etc" function (:arguments ("n" "string")) nil [30052 32938])
            ("declare-function" code nil nil [33013 33079])
            ("holiday-greek-orthodox-easter" function (:arguments ("n" "string")) nil [33081 34580])
            ("holidays" package nil nil [34582 34601]))          
      :file "holidays.el.gz"
      :pointmax 34629
      :fsize 8972
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calendar" include nil nil [1472 1491])
            ("solar" include nil nil [1492 1508])
            ("cal-dst" include nil nil [1509 1527])
            ("lunar-phase-names" variable (:default-value (quote ("New Moon" "First Quarter Moon" "Full Moon" "Last Quarter Moon"))) nil [1615 1966])
            ("lunar-phase" function (:arguments ("index")) nil [1968 6782])
            ("lunar-cycles-per-year" variable
               (:constant-flag t
                :default-value 12.3685)
                nil [6784 6899])
            ("lunar-index" function (:arguments ("date")) nil [6972 7400])
            ("lunar-phase-list" function (:arguments ("month" "year")) nil [7402 8490])
            ("lunar-phase-name" function (:arguments ("phase")) nil [8492 8647])
            ("displayed-month" variable nil nil [8649 8673])
            ("displayed-year" variable nil nil [8714 8737])
            ("calendar-lunar-phases" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8758 10141])
            ("lunar-phases" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10158 10688])
            ("date" variable nil nil [10690 10703])
            ("diary-lunar-phases" function (:arguments ("mark")) nil [10794 11338])
            ("lunar-new-moon-time" function (:arguments ("k")) nil [11491 16719])
            ("lunar-new-moon-on-or-after" function (:arguments ("d")) nil [16721 17989])
            ("lunar" package nil nil [17991 18007]))          
      :file "lunar.el.gz"
      :pointmax 18032
      :fsize 4664
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("icalendar-version" variable
               (:constant-flag t
                :default-value "0.19")
                nil [3949 4020])
            ("icalendar" customgroup (:user-visible-flag t) nil [4187 4276])
            ("icalendar-import-format" variable (:default-value "%s%d%l%o") nil [4278 5220])
            ("icalendar-import-format-summary" variable (:default-value "%s") nil [5222 5453])
            ("icalendar-import-format-description" variable (:default-value "
 Desc: %s") nil [5455 5711])
            ("icalendar-import-format-location" variable (:default-value "
 Location: %s") nil [5713 5961])
            ("icalendar-import-format-organizer" variable (:default-value "
 Organizer: %s") nil [5963 6216])
            ("icalendar-import-format-url" variable (:default-value "
 URL: %s") nil [6218 6441])
            ("icalendar-import-format-uid" variable (:default-value "
 UID: %s") nil [6443 6684])
            ("icalendar-import-format-status" variable (:default-value "
 Status: %s") nil [6686 6924])
            ("icalendar-import-format-class" variable (:default-value "
 Class: %s") nil [6926 7159])
            ("icalendar-recurring-start-year" variable (:default-value 2005) nil [7161 7456])
            ("icalendar-export-hidden-diary-entries" variable (:default-value t) nil [7458 7697])
            ("icalendar-uid-format" variable (:default-value "emacs%t%c") nil [7699 8434])
            ("icalendar-export-sexp-enumeration-days" variable (:default-value 14) nil [8436 8981])
            ("icalendar-export-sexp-enumerate-all" variable nil nil [8983 9486])
            ("icalendar-export-alarms" variable nil nil [9489 10399])
            ("icalendar-debug" variable nil nil [10402 10467])
            ("icalendar--weekday-array" variable
               (:constant-flag t
                :default-value ["SU" "MO" "TU" "WE" "TH" "FR" "SA"])
                nil [10663 10735])
            ("calendar" include nil nil [10915 10934])
            ("diary-lib" include nil nil [10935 10955])
            ("icalendar--dmsg" function (:arguments ("args")) nil [11113 11256])
            ("icalendar--get-unfolded-buffer" function (:arguments ("folded-ical-buffer")) nil [11486 12193])
            ("icalendar--clean-up-line-endings" function nil nil [12195 12599])
            ("icalendar--rris" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal")) nil [12601 13166])
            ("icalendar--read-element" function (:arguments ("invalue" "inparams")) nil [13168 15370])
            ("icalendar--get-event-property" function (:arguments ("event" "prop")) nil [15694 16043])
            ("icalendar--get-event-property-attributes" function (:arguments ("event" "prop")) nil [16045 16400])
            ("icalendar--get-event-properties" function (:arguments ("event" "prop")) nil [16402 16768])
            ("icalendar--get-children" function (:arguments ("node" "name")) nil [17324 18022])
            ("icalendar--all-events" function (:arguments ("icalendar")) nil [18035 18333])
            ("icalendar--split-value" function (:arguments ("value-string")) nil [18335 19046])
            ("icalendar--convert-tz-offset" function (:arguments ("alist" "dst-p")) nil [19048 21110])
            ("icalendar--parse-vtimezone" function (:arguments ("alist")) nil [21112 21774])
            ("icalendar--convert-all-timezones" function (:arguments ("icalendar")) nil [21776 22180])
            ("icalendar--find-time-zone" function (:arguments ("prop-list" "zone-map")) nil [22182 22475])
            ("icalendar--decode-isodatetime" function (:arguments ("isodatetimestring" "day-shift" "zone")) nil [22477 24719])
            ("icalendar--decode-isoduration" function (:arguments ("isodurationstring" "duration-correction")) nil [24721 27469])
            ("icalendar--add-decoded-times" function (:arguments ("time1" "time2")) nil [27471 28131])
            ("icalendar--datetime-to-american-date" function (:arguments ("datetime" "separator")) nil [28133 28685])
            ("define-obsolete-function-alias" code nil nil [28687 28817])
            ("icalendar--datetime-to-european-date" function (:arguments ("datetime" "separator")) nil [28819 29373])
            ("icalendar--datetime-to-iso-date" function (:arguments ("datetime" "separator")) nil [29375 29908])
            ("icalendar--datetime-to-diary-date" function (:arguments ("datetime" "separator")) nil [29910 30389])
            ("icalendar--datetime-to-colontime" function (:arguments ("datetime")) nil [30391 30609])
            ("icalendar--get-month-number" function (:arguments ("monthname")) nil [30611 31097])
            ("icalendar--get-weekday-number" function (:arguments ("abbrevweekday")) nil [31099 31574])
            ("icalendar--get-weekday-numbers" function (:arguments ("abbrevweekdays")) nil [31576 32208])
            ("icalendar--get-weekday-abbrev" function (:arguments ("weekday")) nil [32210 32701])
            ("icalendar--date-to-isodate" function (:arguments ("date" "day-shift")) nil [32703 33123])
            ("icalendar--datestring-to-isodate" function (:arguments ("datestring" "day-shift")) nil [33126 37951])
            ("icalendar--diarytime-to-isotime" function (:arguments ("timestring" "ampmstring")) nil [37953 39063])
            ("icalendar--convert-string-for-export" function (:arguments ("string")) nil [39065 39215])
            ("icalendar--convert-string-for-import" function (:arguments ("string")) nil [39217 39566])
            ("icalendar-export-file" function
               (:user-visible-flag t
                :arguments ("diary-filename" "ical-filename"))
                nil [39778 40223])
            ("define-obsolete-function-alias" code nil nil [40225 40322])
            ("icalendar--uid-count" variable nil nil [40324 40402])
            ("icalendar--create-uid" function (:arguments ("entry-full" "contents")) nil [40404 41857])
            ("icalendar-export-region" function
               (:user-visible-flag t
                :arguments ("min" "max" "ical-filename"))
                nil [41874 47030])
            ("icalendar--convert-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [47032 48392])
            ("icalendar--parse-summary-and-rest" function (:arguments ("summary-and-rest")) nil [48394 54202])
            ("icalendar--create-ical-alarm" function (:arguments ("summary")) nil [54204 54593])
            ("icalendar--do-create-ical-alarm" function (:arguments ("advance-time" "alarm-spec" "summary")) nil [54595 55850])
            ("icalendar--convert-ordinary-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [55895 59718])
            ("icalendar-first-weekday-of-year" function (:arguments ("abbrevweekday" "year")) nil [59720 60194])
            ("icalendar--convert-weekly-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [60196 64252])
            ("icalendar--convert-yearly-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [64254 68259])
            ("icalendar--convert-sexp-to-ical" function (:arguments ("nonmarker" "entry-main" "start")) nil [68261 71098])
            ("icalendar--convert-block-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [71100 74904])
            ("icalendar--convert-float-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [74906 77276])
            ("icalendar--convert-date-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [77278 77838])
            ("icalendar--convert-cyclic-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [77840 81565])
            ("icalendar--convert-anniversary-to-ical" function (:arguments ("nonmarker" "entry-main")) nil [81567 85264])
            ("icalendar-import-file" function
               (:user-visible-flag t
                :arguments ("ical-filename" "diary-filename" "non-marking"))
                nil [85476 86118])
            ("icalendar-import-buffer" function
               (:user-visible-flag t
                :arguments ("diary-file" "do-not-ask" "non-marking"))
                nil [86135 88169])
            ("define-obsolete-function-alias" code nil nil [88171 88273])
            ("icalendar--format-ical-event" function (:arguments ("event")) nil [88275 89660])
            ("icalendar--convert-ical-to-diary" function (:arguments ("ical-list" "diary-file" "do-not-ask" "non-marking")) nil [89662 97249])
            ("icalendar--convert-recurring-to-diary" function (:arguments ("e" "dtstart-dec" "start-t" "end-t")) nil [97280 107967])
            ("icalendar--convert-non-recurring-all-day-to-diary" function (:arguments ("event" "start-d" "end-d")) nil [107969 108334])
            ("icalendar--convert-non-recurring-not-all-day-to-diary" function (:arguments ("event" "dtstart-dec" "dtend-dec" "start-t" "end-t")) nil [108336 109249])
            ("icalendar--add-diary-entry" function (:arguments ("string" "diary-file" "non-marking" "summary")) nil [109251 110610])
            ("icalendar-import-format-sample" function (:arguments ("event")) nil [110772 111463])
            ("icalendar" package nil nil [111465 111485]))          
      :file "icalendar.el.gz"
      :pointmax 111514
      :fsize 21687
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("load" code nil nil [5571 5598])
            ("calendar" package nil nil [5666 5685])
            ("cal-menu" include nil nil [5686 5705])
            ("calendar" customgroup (:user-visible-flag t) nil [5707 5817])
            ("calendar-hooks" customgroup (:user-visible-flag t) nil [5819 5909])
            ("calendar-faces" customgroup (:user-visible-flag t) nil [5911 6001])
            ("calendar-offset" variable nil nil [6003 6316])
            ("calendar-setup" variable nil nil [6318 7044])
            ("calendar-minimum-window-height" variable (:default-value 8) nil [7046 7222])
            ("calendar-split-width-threshold" variable nil nil [7255 7548])
            ("calendar-week-start-day" variable nil nil [7550 8291])
            ("calendar-weekend-days" variable (:default-value (quote (0 6))) nil [8293 8561])
            ("calendar-view-diary-initially-flag" variable nil nil [8563 9003])
            ("calendar-mark-diary-entries-flag" variable nil nil [9019 9243])
            ("calendar-remove-frame-by-deleting" variable (:default-value t) nil [9245 9543])
            ("calendar-today" variable
               (:default-value (quote ((t (:underline t))))
                :type "face")
                nil [9545 9714])
            ("diary" variable
               (:default-value (quote ((((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red") (((min-colors 88) (class color) (background dark)) :foreground "yellow1") (((class color) (background dark)) :foreground "yellow") (t :weight bold)))
                :type "face")
                nil [9716 10242])
            ("holiday" variable
               (:default-value (quote ((((class color) (background light)) :background "pink") (((class color) (background dark)) :background "chocolate4") (t :inverse-video t)))
                :type "face")
                nil [10244 10549])
            ("calendar-weekday-header" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [10551 10770])
            ("calendar-weekend-header" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [10772 10990])
            ("calendar-month-header" variable
               (:default-value (quote ((t :inherit font-lock-function-name-face)))
                :type "face")
                nil [10992 11160])
            ("diary-entry-marker" variable (:default-value (quote diary)) nil [11811 12066])
            ("calendar-today-marker" variable (:default-value (quote calendar-today)) nil [12068 12368])
            ("calendar-holiday-marker" variable (:default-value (quote holiday)) nil [12370 12635])
            ("calendar-view-holidays-initially-flag" variable nil nil [12637 12885])
            ("calendar-mark-holidays-flag" variable nil nil [12901 13120])
            ("calendar-mode-hook" variable nil nil [13122 13239])
            ("calendar-load-hook" variable nil nil [13241 13447])
            ("make-obsolete-variable" code nil nil [13448 13561])
            ("calendar-initial-window-hook" variable nil nil [13563 13806])
            ("calendar-today-visible-hook" variable nil nil [13808 14313])
            ("calendar-today-invisible-hook" variable nil nil [14315 14510])
            ("calendar-move-hook" variable nil nil [14512 14846])
            ("calendar-date-echo-text" variable (:default-value "mouse-2: general menu
mouse-3: menu for this date") nil [14848 15913])
            ("calendar-month-digit-width" variable nil nil [15916 16023])
            ("calendar-month-width" variable nil nil [16025 16104])
            ("calendar-right-margin" variable nil nil [16106 16174])
            ("calendar-month-edges" variable nil nil [16176 16462])
            ("calendar-month-edges" function (:arguments ("segment")) nil [16464 17561])
            ("calendar-recompute-layout-variables" function nil nil [17563 18290])
            ("calendar-set-layout-variable" function (:arguments ("symbol" "value" "minmax")) nil [18292 18907])
            ("calendar-left-margin" variable (:default-value 5) nil [18909 19139])
            ("calendar-intermonth-spacing" variable (:default-value 4) nil [19311 19586])
            ("calendar-column-width" variable (:default-value 3) nil [19626 19880])
            ("calendar-day-header-construct" function (:arguments ("width")) nil [19882 20316])
            ("calendar-day-header-width" variable (:default-value 2) nil [20356 20867])
            ("calendar-day-digit-width" variable (:default-value 2) nil [20906 21181])
            ("calendar-intermonth-header" variable nil nil [21183 21742])
            ("calendar-intermonth-text" variable nil nil [21744 23265])
            ("diary-file" variable (:default-value (locate-user-emacs-file "diary" "diary")) nil [23267 27273])
            ("diary-nonmarking-symbol" variable (:default-value "&") nil [27323 27472])
            ("diary-chinese-entry-symbol" variable (:default-value "C") nil [27474 27637])
            ("diary-hebrew-entry-symbol" variable (:default-value "H") nil [27639 27782])
            ("diary-islamic-entry-symbol" variable (:default-value "I") nil [27784 27929])
            ("diary-bahai-entry-symbol" variable (:default-value "B") nil [27931 28073])
            ("calendar-date-style" variable (:default-value (quote american)) nil [28075 29007])
            ("diary-iso-date-forms" variable (:default-value (quote ((month "[-/]" day "[^-/0-9]") (year "[-/]" month "[-/]" day "[^0-9]") (monthname " *" day "[^-0-9]") (year " *" monthname " *" day "[^0-9]") (dayname "\\W")))) nil [29100 30272])
            ("diary-american-date-forms" variable (:default-value (quote ((month "/" day "[^/0-9]") (month "/" day "/" year "[^0-9]") (monthname " *" day "[^,0-9]") (monthname " *" day ", *" year "[^0-9]") (dayname "\\W")))) nil [30274 31274])
            ("diary-european-date-forms" variable (:default-value (quote ((day "/" month "[^/0-9]") (day "/" month "/" year "[^0-9]") (backup day " *" monthname "\\W+\\<\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)") (day " *" monthname " *" year "[^0-9]") (dayname "\\W")))) nil [31276 32316])
            ("diary-font-lock-keywords" variable nil nil [32318 32351])
            ("diary-date-forms" variable (:default-value (cond ((eq calendar-date-style (quote iso)) diary-iso-date-forms) ((eq calendar-date-style (quote european)) diary-european-date-forms) (t diary-american-date-forms))) nil [32353 35405])
            ("calendar-iso-date-display-form" variable (:default-value (quote ((format "%s-%.2d-%.2d" year (string-to-number month) (string-to-number day))))) nil [35480 35915])
            ("calendar-european-date-display-form" variable (:default-value (quote ((if dayname (concat dayname ", ")) day " " monthname " " year))) nil [35917 36237])
            ("calendar-american-date-display-form" variable (:default-value (quote ((if dayname (concat dayname ", ")) monthname " " day ", " year))) nil [36239 36560])
            ("calendar-date-display-form" variable (:default-value (cond ((eq calendar-date-style (quote iso)) calendar-iso-date-display-form) ((eq calendar-date-style (quote european)) calendar-european-date-display-form) (t calendar-american-date-display-form))) nil [36562 37792])
            ("calendar-american-month-header" variable (:default-value (quote (propertize (format "%s %d" (calendar-month-name month) year) (quote font-lock-face) (quote calendar-month-header)))) nil [37794 38164])
            ("calendar-european-month-header" variable (:default-value (quote (propertize (format "%s %d" (calendar-month-name month) year) (quote font-lock-face) (quote calendar-month-header)))) nil [38222 38592])
            ("calendar-iso-month-header" variable (:default-value (quote (propertize (format "%d %s" year (calendar-month-name month)) (quote font-lock-face) (quote calendar-month-header)))) nil [38650 39010])
            ("calendar-month-header" variable (:default-value (cond ((eq calendar-date-style (quote iso)) calendar-iso-month-header) ((eq calendar-date-style (quote european)) calendar-european-month-header) (t calendar-american-month-header))) nil [39068 40163])
            ("calendar-set-date-style" function
               (:user-visible-flag t
                :arguments ("style"))
                nil [40165 41079])
            ("diary-show-holidays-flag" variable (:default-value t) nil [41081 41414])
            ("calendar-debug-sexp" variable nil nil [41416 41562])
            ("calendar-hebrew-all-holidays-flag" variable nil nil [41564 41866])
            ("calendar-christian-all-holidays-flag" variable nil nil [41868 42182])
            ("calendar-islamic-all-holidays-flag" variable nil nil [42184 42490])
            ("calendar-bahai-all-holidays-flag" variable nil nil [42492 42784])
            ("calendar-chinese-all-holidays-flag" variable nil nil [42786 42958])
            ("calendar-recompute-layout-variables" code nil nil [42986 43023])
            ("calendar-first-date-row" variable
               (:constant-flag t
                :default-value 3)
                nil [43025 43110])
            ("calendar-buffer" variable
               (:constant-flag t
                :default-value "*Calendar*")
                nil [43112 43197])
            ("holiday-buffer" variable
               (:constant-flag t
                :default-value "*Holidays*")
                nil [43199 43298])
            ("diary-fancy-buffer" variable
               (:constant-flag t
                :default-value "*Fancy Diary Entries*")
                nil [43300 43426])
            ("calendar-other-calendars-buffer" variable
               (:constant-flag t
                :default-value "*Other Calendars*")
                nil [43428 43562])
            ("lunar-phases-buffer" variable
               (:constant-flag t
                :default-value "*Phases of Moon*")
                nil [43564 43663])
            ("solar-sunrises-buffer" variable
               (:constant-flag t
                :default-value "*Sunrise/Sunset Times*")
                nil [43665 43772])
            ("calendar-hebrew-yahrzeit-buffer" variable
               (:constant-flag t
                :default-value "*Yahrzeits*")
                nil [43774 43884])
            ("calendar-increment-month" function (:arguments ("mon" "yr" "n" "nmonths")) nil [43886 44813])
            ("displayed-month" variable nil nil [44836 44860])
            ("displayed-year" variable nil nil [44861 44884])
            ("calendar-increment-month-cons" function (:arguments ("n" "mon" "yr")) nil [44886 45230])
            ("calendar-sum" function (:arguments ("index" "initial" "condition" "expression")) nil [45232 45561])
            ("calendar-in-read-only-buffer" function (:arguments ("buffer" "body")) nil [45563 46171])
            ("calendar-extract-month" function (:arguments ("date")) nil [47317 47442])
            ("calendar-extract-day" function (:arguments ("date")) nil [47566 47688])
            ("calendar-extract-year" function (:arguments ("date")) nil [47690 47815])
            ("calendar-leap-year-p" function (:arguments ("year")) nil [47817 48154])
            ("calendar-last-day-of-month" function (:arguments ("month" "year")) nil [48420 48631])
            ("calendar-day-number" function (:arguments ("date")) nil [48770 49373])
            ("calendar-absolute-from-gregorian" function (:arguments ("date")) nil [49375 50609])
            ("calendar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50646 52503])
            ("calendar-basic-setup" function
               (:user-visible-flag t
                :arguments ("arg" "nodisplay"))
                nil [52505 56586])
            ("calendar-generate-window" function (:arguments ("mon" "yr")) nil [56588 58293])
            ("calendar-generate" function (:arguments ("month" "year")) nil [58295 59115])
            ("calendar-move-to-column" function (:arguments ("indent")) nil [59117 59289])
            ("calendar-ensure-newline" function nil nil [59291 59435])
            ("calendar-insert-at-column" function (:arguments ("indent" "string" "truncate")) nil [59437 60726])
            ("calendar-generate-month" function (:arguments ("month" "year" "indent")) nil [60728 63352])
            ("calendar-redraw" function (:user-visible-flag t) nil [63354 63825])
            ("calendar-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (dolist (c (quote (narrow-to-region mark-word mark-sexp mark-paragraph mark-defun mark-whole-buffer mark-page downcase-region upcase-region kill-region copy-region-as-kill capitalize-region write-region))) (define-key map (vector (quote remap) c) (quote calendar-not-implemented))) (define-key map "<" (quote calendar-scroll-right)) (define-key map "<" (quote calendar-scroll-right)) (define-key map [prior] (quote calendar-scroll-right-three-months)) (define-key map "v" (quote calendar-scroll-right-three-months)) (define-key map ">" (quote calendar-scroll-left)) (define-key map ">" (quote calendar-scroll-left)) (define-key map [next] (quote calendar-scroll-left-three-months)) (define-key map "" (quote calendar-scroll-left-three-months)) (define-key map "" (quote calendar-backward-day)) (define-key map "" (quote calendar-backward-week)) (define-key map "{" (quote calendar-backward-month)) (define-key map "[" (quote calendar-backward-year)) (define-key map "" (quote calendar-forward-day)) (define-key map "" (quote calendar-forward-week)) (define-key map [left] (quote calendar-backward-day)) (define-key map [up] (quote calendar-backward-week)) (define-key map [right] (quote calendar-forward-day)) (define-key map [down] (quote calendar-forward-week)) (define-key map "}" (quote calendar-forward-month)) (define-key map "]" (quote calendar-forward-year)) (define-key map "" (quote calendar-beginning-of-week)) (define-key map "" (quote calendar-end-of-week)) (define-key map "a" (quote calendar-beginning-of-month)) (define-key map "e" (quote calendar-end-of-month)) (define-key map "<" (quote calendar-beginning-of-year)) (define-key map ">" (quote calendar-end-of-year)) (define-key map " " (quote calendar-set-mark)) (define-key map [67108896] (quote calendar-set-mark)) (define-key map "" (quote calendar-exchange-point-and-mark)) (define-key map "=" (quote calendar-count-days-region)) (define-key map "gd" (quote calendar-goto-date)) (define-key map "gD" (quote calendar-goto-day-of-year)) (define-key map "gj" (quote calendar-julian-goto-date)) (define-key map "ga" (quote calendar-astro-goto-day-number)) (define-key map "gh" (quote calendar-hebrew-goto-date)) (define-key map "gi" (quote calendar-islamic-goto-date)) (define-key map "gb" (quote calendar-bahai-goto-date)) (define-key map "gC" (quote calendar-chinese-goto-date)) (define-key map "gk" (quote calendar-coptic-goto-date)) (define-key map "ge" (quote calendar-ethiopic-goto-date)) (define-key map "gp" (quote calendar-persian-goto-date)) (define-key map "gc" (quote calendar-iso-goto-date)) (define-key map "gw" (quote calendar-iso-goto-week)) (define-key map "gf" (quote calendar-french-goto-date)) (define-key map "gml" (quote calendar-mayan-goto-long-count-date)) (define-key map "gmpc" (quote calendar-mayan-previous-round-date)) (define-key map "gmnc" (quote calendar-mayan-next-round-date)) (define-key map "gmph" (quote calendar-mayan-previous-haab-date)) (define-key map "gmnh" (quote calendar-mayan-next-haab-date)) (define-key map "gmpt" (quote calendar-mayan-previous-tzolkin-date)) (define-key map "gmnt" (quote calendar-mayan-next-tzolkin-date)) (define-key map "Aa" (quote appt-add)) (define-key map "Ad" (quote appt-delete)) (define-key map "S" (quote calendar-sunrise-sunset)) (define-key map "M" (quote calendar-lunar-phases)) (define-key map " " (quote scroll-other-window)) (define-key map [33554464] (quote scroll-other-window-down)) (define-key map "" (quote scroll-other-window-down)) (define-key map "" (quote calendar-redraw)) (define-key map "." (quote calendar-goto-today)) (define-key map "o" (quote calendar-other-month)) (define-key map "q" (quote calendar-exit)) (define-key map "a" (quote calendar-list-holidays)) (define-key map "h" (quote calendar-cursor-holidays)) (define-key map "x" (quote calendar-mark-holidays)) (define-key map "u" (quote calendar-unmark)) (define-key map "m" (quote diary-mark-entries)) (define-key map "d" (quote diary-view-entries)) (define-key map "D" (quote diary-view-other-diary-entries)) (define-key map "s" (quote diary-show-all-entries)) (define-key map "pd" (quote calendar-print-day-of-year)) (define-key map "pC" (quote calendar-chinese-print-date)) (define-key map "pk" (quote calendar-coptic-print-date)) (define-key map "pe" (quote calendar-ethiopic-print-date)) (define-key map "pp" (quote calendar-persian-print-date)) (define-key map "pc" (quote calendar-iso-print-date)) (define-key map "pj" (quote calendar-julian-print-date)) (define-key map "pa" (quote calendar-astro-print-day-number)) (define-key map "ph" (quote calendar-hebrew-print-date)) (define-key map "pi" (quote calendar-islamic-print-date)) (define-key map "pb" (quote calendar-bahai-print-date)) (define-key map "pf" (quote calendar-french-print-date)) (define-key map "pm" (quote calendar-mayan-print-date)) (define-key map "po" (quote calendar-print-other-dates)) (define-key map "id" (quote diary-insert-entry)) (define-key map "iw" (quote diary-insert-weekly-entry)) (define-key map "im" (quote diary-insert-monthly-entry)) (define-key map "iy" (quote diary-insert-yearly-entry)) (define-key map "ia" (quote diary-insert-anniversary-entry)) (define-key map "ib" (quote diary-insert-block-entry)) (define-key map "ic" (quote diary-insert-cyclic-entry)) (define-key map "ihd" (quote diary-hebrew-insert-entry)) (define-key map "ihm" (quote diary-hebrew-insert-monthly-entry)) (define-key map "ihy" (quote diary-hebrew-insert-yearly-entry)) (define-key map "iid" (quote diary-islamic-insert-entry)) (define-key map "iim" (quote diary-islamic-insert-monthly-entry)) (define-key map "iiy" (quote diary-islamic-insert-yearly-entry)) (define-key map "iBd" (quote diary-bahai-insert-entry)) (define-key map "iBm" (quote diary-bahai-insert-monthly-entry)) (define-key map "iBy" (quote diary-bahai-insert-yearly-entry)) (define-key map "iCd" (quote diary-chinese-insert-entry)) (define-key map "iCm" (quote diary-chinese-insert-monthly-entry)) (define-key map "iCy" (quote diary-chinese-insert-yearly-entry)) (define-key map "iCa" (quote diary-chinese-insert-anniversary-entry)) (define-key map "?" (quote calendar-goto-info-node)) (define-key map "Hm" (quote cal-html-cursor-month)) (define-key map "Hy" (quote cal-html-cursor-year)) (define-key map "tm" (quote cal-tex-cursor-month)) (define-key map "tM" (quote cal-tex-cursor-month-landscape)) (define-key map "td" (quote cal-tex-cursor-day)) (define-key map "tw1" (quote cal-tex-cursor-week)) (define-key map "tw2" (quote cal-tex-cursor-week2)) (define-key map "tw3" (quote cal-tex-cursor-week-iso)) (define-key map "tw4" (quote cal-tex-cursor-week-monday)) (define-key map "twW" (quote cal-tex-cursor-week2-summary)) (define-key map "tfd" (quote cal-tex-cursor-filofax-daily)) (define-key map "tfw" (quote cal-tex-cursor-filofax-2week)) (define-key map "tfW" (quote cal-tex-cursor-filofax-week)) (define-key map "tfy" (quote cal-tex-cursor-filofax-year)) (define-key map "ty" (quote cal-tex-cursor-year)) (define-key map "tY" (quote cal-tex-cursor-year-landscape)) (define-key map [menu-bar edit] (quote undefined)) (define-key map [menu-bar search] (quote undefined)) (easy-menu-define nil map nil cal-menu-sunmoon-menu) (easy-menu-define nil map nil cal-menu-diary-menu) (easy-menu-define nil map nil cal-menu-holidays-menu) (easy-menu-define nil map nil cal-menu-goto-menu) (easy-menu-define nil map nil cal-menu-scroll-menu) (define-key map [down-mouse-3] (easy-menu-binding cal-menu-context-mouse-menu)) (define-key map [down-mouse-2] (easy-menu-binding cal-menu-global-mouse-menu)) (if (and (boundp (quote x-toolkit-scroll-bars)) x-toolkit-scroll-bars) (define-key map [vertical-scroll-bar mouse-1] (quote calendar-scroll-toolkit-scroll)) (define-key map [vertical-scroll-bar mouse-1] (quote calendar-scroll-left)) (define-key map [vertical-scroll-bar drag-mouse-1] (quote calendar-scroll-left)) (define-key map [vertical-scroll-bar mouse-3] (quote calendar-scroll-right)) (define-key map [vertical-scroll-bar drag-mouse-3] (quote calendar-scroll-right))) map)) nil [63827 72188])
            ("put" code nil nil [72254 72295])
            ("calendar-mode-line-entry" function (:arguments ("command" "echo" "key" "string")) nil [72297 72856])
            ("calendar-mode-line-format" variable (:default-value (list (calendar-mode-line-entry (quote calendar-scroll-right) "previous month" "<") "Calendar" (concat (calendar-mode-line-entry (quote calendar-goto-info-node) "read Info on Calendar" nil "info") " / " (calendar-mode-line-entry (quote calendar-other-month) "choose another month" nil "other") " / " (calendar-mode-line-entry (quote calendar-goto-today) "go to today's date" nil "today")) (quote (calendar-date-string (calendar-current-date) t)) (calendar-mode-line-entry (quote calendar-scroll-left) "next month" ">"))) nil [72886 74658])
            ("calendar-goto-info-node" function (:user-visible-flag t) nil [74660 74810])
            ("calendar-mark-ring" variable nil nil [74812 74876])
            ("define-derived-mode" code nil nil [74878 75925])
            ("calendar-string-spread" function (:arguments ("strings" "char" "length")) nil [75927 77122])
            ("calendar-update-mode-line" function nil nil [77124 78029])
            ("calendar-buffer-list" function nil nil [78031 78492])
            ("calendar-exit" function
               (:user-visible-flag t
                :arguments ("kill"))
                nil [78494 79483])
            ("calendar-current-date" function (:arguments ("offset")) nil [79485 79886])
            ("calendar-column-to-segment" function nil nil [79888 80265])
            ("calendar-cursor-to-date" function (:arguments ("error" "event")) nil [80267 81853])
            ("calendar-gregorian-from-absolute" function (:arguments ("date")) nil [83049 84337])
            ("calendar-other-month" function
               (:user-visible-flag t
                :arguments ("month" "year" "event"))
                nil [84339 85185])
            ("calendar-set-mark" function
               (:user-visible-flag t
                :arguments ("arg" "event"))
                nil [85187 86175])
            ("calendar-exchange-point-and-mark" function (:user-visible-flag t) nil [86177 86551])
            ("calendar-count-days-region" function (:user-visible-flag t) nil [86553 87081])
            ("calendar-not-implemented" function (:user-visible-flag t) nil [87083 87250])
            ("calendar-read" function (:arguments ("prompt" "acceptable" "initial-contents")) nil [87252 87751])
            ("calendar-customized-p" function (:arguments ("symbol")) nil [87754 88026])
            ("calendar-abbrev-construct" function (:arguments ("full" "maxlen")) nil [88028 88480])
            ("calendar-day-name-array" variable (:default-value ["Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"]) nil [88482 90026])
            ("calendar-abbrev-length" variable (:default-value 3) nil [90028 91482])
            ("calendar-day-abbrev-array" variable (:default-value (calendar-abbrev-construct calendar-day-name-array)) nil [91484 93103])
            ("calendar-day-header-array" variable (:default-value (calendar-day-header-construct)) nil [93105 94292])
            ("calendar-month-name-array" variable (:default-value ["January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"]) nil [94294 95539])
            ("calendar-month-abbrev-array" variable (:default-value (calendar-abbrev-construct calendar-month-name-array)) nil [95541 96709])
            ("calendar-make-alist" function (:arguments ("sequence" "start-index" "filter" "sequences")) nil [96711 97666])
            ("calendar-read-date" function (:arguments ("noday")) nil [97668 98817])
            ("calendar-interval" function (:arguments ("mon1" "yr1" "mon2" "yr2")) nil [98819 99214])
            ("calendar-font-lock-keywords" variable nil nil [99216 99308])
            ("make-obsolete-variable" code nil nil [99310 99475])
            ("calendar-day-name" function (:arguments ("date" "abbrev" "absolute")) nil [99477 100216])
            ("calendar-month-name" function (:arguments ("month" "abbrev")) nil [100218 100622])
            ("calendar-day-of-week" function (:arguments ("date")) nil [100624 100898])
            ("calendar-week-end-day" function nil nil [100900 101043])
            ("calendar-unmark" function (:user-visible-flag t) nil [101045 101345])
            ("calendar-date-is-visible-p" function (:arguments ("date")) nil [101347 101674])
            ("calendar-nongregorian-visible-p" function (:arguments ("month" "day" "toabs" "fromabs" "switch")) nil [101730 103722])
            ("calendar-date-is-valid-p" function (:arguments ("date")) nil [103724 104551])
            ("calendar-date-equal" function (:arguments ("date1" "date2")) nil [104553 104853])
            ("calendar-make-temp-face" function (:arguments ("attrlist")) nil [104855 106235])
            ("calendar-mark-visible-date" function (:arguments ("date" "mark")) nil [106237 107745])
            ("calendar-star-date" function nil nil [107747 108557])
            ("calendar-mark-today" function nil nil [108559 108847])
            ("calendar-date-compare" function (:arguments ("date1" "date2")) nil [108914 109168])
            ("calendar-date-string" function (:arguments ("date" "abbreviate" "nodayname")) nil [109170 109990])
            ("calendar-dayname-on-or-before" function (:arguments ("dayname" "date")) nil [109992 110509])
            ("calendar-nth-named-absday" function (:arguments ("n" "dayname" "month" "year" "day")) nil [110511 111312])
            ("calendar-nth-named-day" function (:arguments ("n" "dayname" "month" "year" "day")) nil [111314 111595])
            ("calendar-day-of-year-string" function (:arguments ("date")) nil [111597 112081])
            ("calendar-other-dates" function (:arguments ("date")) nil [112083 114020])
            ("declare-function" code nil nil [114022 114078])
            ("calendar-print-other-dates" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [114080 114837])
            ("calendar-print-day-of-year" function (:user-visible-flag t) nil [114839 115045])
            ("calendar-set-mode-line" function (:arguments ("str")) nil [115047 115771])
            ("run-hooks" code nil nil [115773 115804])
            ("calendar" package nil nil [115806 115825]))          
      :file "calendar.el.gz"
      :pointmax 115909
      :fsize 29741
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calendar" include nil nil [1847 1866])
            ("calendar-tex" customgroup (:user-visible-flag t) nil [1904 2017])
            ("cal-tex-which-days" variable (:default-value (quote (0 1 2 3 4 5 6))) nil [2019 2348])
            ("cal-tex-holidays" variable (:default-value t) nil [2350 2553])
            ("cal-tex-diary" variable nil nil [2555 2758])
            ("cal-tex-rules" variable nil nil [2760 2956])
            ("cal-tex-daily-string" variable (:default-value (quote (let* ((year (calendar-extract-year date)) (day (calendar-day-number date)) (days-remaining (- (calendar-day-number (list 12 31 year)) day))) (format "%d/%d" day days-remaining)))) nil [2958 3861])
            ("cal-tex-buffer" variable (:default-value "calendar.tex") nil [3863 3994])
            ("cal-tex-24" variable nil nil [3996 4123])
            ("cal-tex-daily-start" variable (:default-value 8) nil [4125 4303])
            ("cal-tex-daily-end" variable (:default-value 20) nil [4305 4481])
            ("cal-tex-preamble-extra" variable nil nil [4483 4904])
            ("cal-tex-hook" variable nil nil [4906 5286])
            ("cal-tex-year-hook" variable nil nil [5288 5436])
            ("cal-tex-month-hook" variable nil nil [5438 5588])
            ("cal-tex-week-hook" variable nil nil [5590 5738])
            ("cal-tex-daily-hook" variable nil nil [5740 5890])
            ("cal-tex-day-prefix" variable
               (:constant-flag t
                :default-value "\\caldate{%s}{%s}")
                nil [5932 6084])
            ("cal-tex-day-name-format" variable
               (:constant-flag t
                :default-value "\\myday{%s}%%")
                nil [6086 6234])
            ("cal-tex-cal-one-month" variable
               (:constant-flag t
                :default-value "\\def\\calmonth#1#2%
{\\begin{center}%
\\Huge\\bf\\uppercase{#1} #2 \\\\[1cm]%
\\end{center}}%
\\vspace*{-1.5cm}%
%
")
                nil [6236 6455])
            ("cal-tex-cal-multi-month" variable
               (:constant-flag t
                :default-value "\\def\\calmonth#1#2#3#4%
{\\begin{center}%
\\Huge\\bf #1 #2---#3 #4\\\\[1cm]%
\\end{center}}%
\\vspace*{-1.5cm}%
%
")
                nil [6457 6676])
            ("cal-tex-myday" variable
               (:constant-flag t
                :default-value "\\renewcommand{\\myday}[1]%
{\\makebox[\\cellwidth]{\\hfill\\large\\bf#1\\hfill}}
%
")
                nil [6678 6825])
            ("cal-tex-caldate" variable
               (:constant-flag t
                :default-value "\\fboxsep=0pt
\\long\\def\\caldate#1#2#3#4#5#6{%
    \\fbox{\\hbox to\\cellwidth{%
     \\vbox to\\cellheight{%
       \\hbox to\\cellwidth{%
          {\\hspace*{1mm}\\Large \\bf \\strut #2}\\hspace{.05\\cellwidth}%
          \\raisebox{\\holidaymult\\cellheight}%
                   {\\parbox[t]{.75\\cellwidth}{\\tiny \\raggedright #4}}}
       \\hbox to\\cellwidth{%
           \\hspace*{1mm}\\parbox{.95\\cellwidth}{\\tiny \\raggedright #3}}
       \\hspace*{1mm}%
       \\hbox to\\cellwidth{#6}%
       \\vfill%
       \\hbox to\\cellwidth{\\hfill \\tiny #5 \\hfill}%
       \\vskip 1.4pt}%
     \\hskip -0.4pt}}}
")
                nil [6827 7584])
            ("cal-tex-lefthead" variable
               (:constant-flag t
                :default-value "\\def\\lefthead#1{\\noindent {\\normalsize \\bf #1}\\hfill\\\\[-6pt]}
")
                nil [7586 7721])
            ("cal-tex-righthead" variable
               (:constant-flag t
                :default-value "\\def\\righthead#1{\\hfill {\\normalsize \\bf #1}\\\\[-6pt]}
")
                nil [7723 7851])
            ("holiday-in-range" function (:prototype-flag t) nil [7853 7892])
            ("define-obsolete-function-alias" code nil nil [7894 7974])
            ("diary-list-entries" function (:prototype-flag t) nil [7976 8018])
            ("cal-tex-list-diary-entries" function (:arguments ("d1" "d2")) nil [8020 8272])
            ("cal-tex-preamble" function (:arguments ("args")) nil [8274 10470])
            ("cal-tex-cursor-year" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [10522 10961])
            ("cal-tex-cursor-year-landscape" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [10982 11433])
            ("cal-tex-year" function (:arguments ("year" "n" "landscape")) nil [11435 12628])
            ("cal-tex-filofax-paper" function (:arguments ("year")) nil [12631 13044])
            ("cal-tex-longday" function (:arguments ("funcname" "height")) nil [13046 13734])
            ("cal-tex-shortday" function (:arguments ("funcname")) nil [13736 14247])
            ("cal-tex-cursor-filofax-year" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [14268 16179])
            ("cal-tex-cursor-month-landscape" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [16232 19569])
            ("cal-tex-cursor-month" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [19590 21779])
            ("cal-tex-insert-days" function (:arguments ("month" "year" "diary-list" "holidays" "day-format")) nil [21781 22958])
            ("cal-tex-insert-day-names" function nil nil [22960 23378])
            ("cal-tex-insert-month-header" function (:arguments ("n" "month" "year" "end-month" "end-year")) nil [23380 23978])
            ("cal-tex-insert-blank-days" function (:arguments ("month" "year" "day-format")) nil [23980 24675])
            ("cal-tex-insert-blank-days-at-end" function (:arguments ("month" "year" "day-format")) nil [24677 25423])
            ("cal-tex-first-blank-p" function (:arguments ("month" "year")) nil [25425 25975])
            ("cal-tex-last-blank-p" function (:arguments ("month" "year")) nil [25977 26661])
            ("cal-tex-number-weeks" function (:arguments ("month" "year" "n")) nil [26663 27365])
            ("cal-tex-LaTeX-hourbox" variable
               (:constant-flag t
                :default-value "\\newcommand{\\hourbox}[2]%
{\\makebox[2em]{\\rule{0cm}{#2ex}#1}\\rule{3in}{.15mm}}
")
                nil [27397 27557])
            ("cal-tex-weekly-paper" function (:arguments ("nomargins")) nil [27559 27786])
            ("cal-tex-cursor-week" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [27904 29940])
            ("cal-tex-cursor-week2" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [30058 33160])
            ("calendar-iso-from-absolute" function (:prototype-flag t) nil [33162 33210])
            ("cal-tex-cursor-week-iso" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [33231 36587])
            ("cal-tex-week-hours" function (:arguments ("date" "holidays" "height")) nil [36700 38181])
            ("cal-tex-cursor-week-monday" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [38300 39914])
            ("cal-tex-weekly4-box" function (:arguments ("date" "weekend")) nil [40027 41630])
            ("cal-tex-weekly-common" function (:arguments ("n" "event" "filofax")) nil [41632 47945])
            ("cal-tex-cursor-week2-summary" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [47966 48572])
            ("cal-tex-cursor-filofax-2week" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [48593 51724])
            ("cal-tex-cursor-filofax-week" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [51745 52291])
            ("cal-tex-cursor-filofax-daily" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [52312 55487])
            ("cal-tex-cursor-day" function
               (:user-visible-flag t
                :arguments ("n" "event"))
                nil [55539 56565])
            ("cal-tex-daily-page" function (:arguments ("date")) nil [56567 59029])
            ("cal-tex-mini-calendar" function (:arguments ("month" "year" "name" "width" "height" "ptsize" "colsep")) nil [59060 61245])
            ("cal-tex-incr-date" function (:arguments ("date" "n")) nil [61288 61520])
            ("cal-tex-latexify-list" function (:arguments ("date-list" "date" "separator" "final-separator")) nil [61522 62369])
            ("cal-tex-previous-month" function (:arguments ("date")) nil [62371 62637])
            ("cal-tex-next-month" function (:arguments ("date")) nil [62639 62898])
            ("cal-tex-end-document" function nil nil [62925 63784])
            ("cal-tex-insert-preamble" function (:arguments ("weeks" "class-options" "append")) nil [63786 65400])
            ("cal-tex-LaTeX-subst-list" variable
               (:constant-flag t
                :default-value (quote (("\"" . "``") ("\"" . "''") ("&" . "\\&") ("%" . "\\%") ("$" . "\\$") ("#" . "\\#") ("_" . "\\_") ("{" . "\\{") ("}" . "\\}") ("<" . "$<$") (">" . "$>$") ("
" . "\\ \\\\"))))
                nil [65402 65967])
            ("cal-tex-LaTeXify-string" function (:arguments ("string")) nil [65969 66569])
            ("cal-tex-month-name" function (:arguments ("month")) nil [66571 66697])
            ("cal-tex-hfill" function nil nil [66699 66762])
            ("cal-tex-newpage" function nil nil [66764 66836])
            ("cal-tex-noindent" function nil nil [66838 66910])
            ("cal-tex-vspace" function (:arguments ("space")) nil [66912 67028])
            ("cal-tex-hspace" function (:arguments ("space")) nil [67030 67148])
            ("cal-tex-comment" function (:arguments ("comment")) nil [67150 67497])
            ("cal-tex-banner" function (:arguments ("comment")) nil [67499 67640])
            ("cal-tex-nl" function (:arguments ("skip" "comment")) nil [67642 67931])
            ("cal-tex-arg" function (:arguments ("text")) nil [67933 68073])
            ("cal-tex-cmd" function (:arguments ("cmd" "arg")) nil [68075 68235])
            ("cal-tex-b-document" function nil nil [68265 68365])
            ("cal-tex-e-document" function nil nil [68367 68459])
            ("cal-tex-b-center" function nil nil [68461 68563])
            ("cal-tex-e-center" function nil nil [68565 68679])
            ("cal-tex-b-parbox" function (:arguments ("position" "width")) nil [68703 68866])
            ("cal-tex-e-parbox" function (:arguments ("height")) nil [68868 69103])
            ("cal-tex-b-framebox" function (:arguments ("width" "position")) nil [69105 69281])
            ("cal-tex-e-framebox" function nil nil [69283 69410])
            ("cal-tex-b-makebox" function (:arguments ("width" "position")) nil [69413 69586])
            ("cal-tex-e-makebox" function nil nil [69588 69712])
            ("cal-tex-rule" function (:arguments ("lower" "width" "height")) nil [69715 69864])
            ("cal-tex-em" function (:arguments ("string")) nil [69889 69984])
            ("cal-tex-bf" function (:arguments ("string")) nil [69986 70077])
            ("cal-tex-scriptsize" function (:arguments ("string")) nil [70079 70200])
            ("cal-tex-huge" function (:arguments ("string")) nil [70202 70305])
            ("cal-tex-Huge" function (:arguments ("string")) nil [70307 70410])
            ("cal-tex-Huge-bf" function (:arguments ("string")) nil [70412 70532])
            ("cal-tex-large" function (:arguments ("string")) nil [70534 70640])
            ("cal-tex-large-bf" function (:arguments ("string")) nil [70642 70765])
            ("cal-tex" package nil nil [70768 70786]))          
      :file "cal-tex.el.gz"
      :pointmax 70813
      :fsize 13382
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calendar" include nil nil [1099 1118])
            ("diary-hebrew-sabbath-candles-minutes" variable (:default-value 18) nil [1120 1327])
            ("calendar-hebrew-leap-year-p" function (:arguments ("year")) nil [1354 1479])
            ("calendar-hebrew-last-month-of-year" function (:arguments ("year")) nil [1481 1636])
            ("calendar-hebrew-elapsed-days" function (:arguments ("year")) nil [1638 3512])
            ("calendar-hebrew-days-in-year" function (:arguments ("year")) nil [3514 3680])
            ("calendar-hebrew-long-heshvan-p" function (:arguments ("year")) nil [3682 3825])
            ("calendar-hebrew-short-kislev-p" function (:arguments ("year")) nil [3827 3970])
            ("calendar-hebrew-last-day-of-month" function (:arguments ("month" "year")) nil [3972 4329])
            ("calendar-hebrew-to-absolute" function (:arguments ("date")) nil [4331 5365])
            ("calendar-hebrew-from-absolute" function (:arguments ("date")) nil [5419 6504])
            ("calendar-hebrew-month-name-array-common-year" variable
               (:constant-flag t
                :default-value ["Nisan" "Iyar" "Sivan" "Tammuz" "Av" "Elul" "Tishri" "Heshvan" "Kislev" "Teveth" "Shevat" "Adar"])
                nil [6506 6742])
            ("calendar-hebrew-month-name-array-leap-year" variable
               (:constant-flag t
                :default-value ["Nisan" "Iyar" "Sivan" "Tammuz" "Av" "Elul" "Tishri" "Heshvan" "Kislev" "Teveth" "Shevat" "Adar I" "Adar II"])
                nil [6744 6988])
            ("calendar-hebrew-date-string" function (:arguments ("date")) nil [7009 7670])
            ("calendar-hebrew-print-date" function (:user-visible-flag t) nil [7691 7928])
            ("calendar-hebrew-yahrzeit" function (:arguments ("death-date" "year")) nil [7930 9526])
            ("calendar-hebrew-read-date" function nil nil [9528 11545])
            ("calendar-hebrew-goto-date" function
               (:user-visible-flag t
                :arguments ("date" "noecho"))
                nil [11566 11901])
            ("displayed-month" variable nil nil [11903 11927])
            ("calendar-hebrew-date-is-visible-p" function (:arguments ("month" "day")) nil [11969 13974])
            ("holiday-hebrew" function (:arguments ("month" "day" "string")) nil [13999 14401])
            ("declare-function" code nil nil [14451 14516])
            ("displayed-year" variable nil nil [14518 14541])
            ("holiday-hebrew-rosh-hashanah" function (:arguments ("all")) nil [14566 17141])
            ("holiday-hebrew-hanukkah" function (:arguments ("all")) nil [17166 18562])
            ("holiday-hebrew-passover" function (:arguments ("all")) nil [18587 22641])
            ("holiday-hebrew-tisha-b-av" function nil nil [22666 23547])
            ("holiday-julian" function (:prototype-flag t) nil [23549 23588])
            ("holiday-hebrew-misc" function nil nil [23613 25956])
            ("diary-list-entries-1" function (:prototype-flag t) nil [25959 26003])
            ("diary-hebrew-list-entries" function nil nil [26026 26937])
            ("calendar-mark-complex" function (:prototype-flag t) nil [26939 26984])
            ("calendar-hebrew-mark-date-pattern" function (:arguments ("month" "day" "year" "color")) nil [27007 28103])
            ("diary-mark-entries-1" function (:prototype-flag t) nil [28105 28149])
            ("diary-hebrew-mark-entries" function nil nil [28172 28654])
            ("diary-insert-entry-1" function (:prototype-flag t) nil [28656 28700])
            ("diary-hebrew-insert-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28721 29064])
            ("diary-hebrew-insert-monthly-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29085 29498])
            ("diary-hebrew-insert-yearly-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29519 29929])
            ("calendar-hebrew-list-yahrzeits" function
               (:user-visible-flag t
                :arguments ("death-date" "start-year" "end-year"))
                nil [29946 33034])
            ("calendar-hebrew-birthday" function (:arguments ("date" "year")) nil [33036 33806])
            ("date" variable nil nil [33808 33821])
            ("diary-hebrew-date" function nil nil [33911 34070])
            ("entry" variable nil nil [34072 34086])
            ("declare-function" code nil nil [34087 34142])
            ("diary-hebrew-birthday" function (:arguments ("month" "day" "year" "after-sunset")) nil [34165 35593])
            ("diary-hebrew-omer" function (:arguments ("mark")) nil [35616 36689])
            ("diary-make-date" function (:prototype-flag t) nil [36691 36730])
            ("declare-function" code nil nil [36732 36787])
            ("diary-hebrew-yahrzeit" function (:arguments ("death-month" "death-day" "death-year" "mark" "after-sunset")) nil [36810 38477])
            ("diary-hebrew-rosh-hodesh" function (:arguments ("mark")) nil [38500 41576])
            ("calendar-hebrew-parashiot-names" variable
               (:constant-flag t
                :default-value ["Bereshith" "Noah" "Lech L'cha" "Vayera" "Hayei Sarah" "Toledoth" "Vayetze" "Vayishlah" "Vayeshev" "Mikketz" "Vayiggash" "Vayhi" "Shemoth" "Vaera" "Bo" "Beshallah" "Yithro" "Mishpatim" "Terumah" "Tetzavveh" "Ki Tissa" "Vayakhel" "Pekudei" "Vayikra" "Tzav" "Shemini" "Tazria" "Metzora" "Aharei Moth" "Kedoshim" "Emor" "Behar" "Behukkotai" "Bemidbar" "Naso" "Behaalot'cha" "Shelah L'cha" "Korah" "Hukkath" "Balak" "Pinhas" "Mattoth" "Masei" "Devarim" "Vaethanan" "Ekev" "Reeh" "Shofetim" "Ki Tetze" "Ki Tavo" "Nitzavim" "Vayelech" "Haazinu"])
                nil [41578 42360])
            ("calendar-hebrew-parasha-name" function (:arguments ("p")) nil [42362 42698])
            ("calendar-hebrew-year-Saturday-incomplete-Sunday" variable
               (:constant-flag t
                :default-value [nil 52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 50])
                nil [42806 43212])
            ("calendar-hebrew-year-Saturday-complete-Tuesday" variable
               (:constant-flag t
                :default-value [nil 52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [43214 43628])
            ("calendar-hebrew-year-Monday-incomplete-Tuesday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [43630 44037])
            ("calendar-hebrew-year-Monday-complete-Thursday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 (nil . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) ([38 39] . 39) 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [44039 44492])
            ("calendar-hebrew-year-Tuesday-regular-Thursday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 (nil . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) ([38 39] . 39) 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [44494 44953])
            ("calendar-hebrew-year-Thursday-regular-Saturday" variable
               (:constant-flag t
                :default-value [52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [21 22] 23 24 nil (nil . 25) (25 . [26 27]) ([26 27] . [28 29]) ([28 29] . 30) (30 . 31) ([31 32] . 32) 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 50])
                nil [44955 45426])
            ("calendar-hebrew-year-Thursday-complete-Sunday" variable
               (:constant-flag t
                :default-value [52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 nil 25 [26 27] [28 29] 30 [31 32] 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 50])
                nil [45428 45827])
            ("calendar-hebrew-year-Saturday-incomplete-Tuesday" variable
               (:constant-flag t
                :default-value [nil 52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 nil 28 29 30 31 32 33 34 35 36 37 38 39 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [45868 46278])
            ("calendar-hebrew-year-Saturday-complete-Thursday" variable
               (:constant-flag t
                :default-value [nil 52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 nil 28 29 30 31 32 33 (nil . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) ([38 39] . 39) 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [46280 46736])
            ("calendar-hebrew-year-Monday-incomplete-Thursday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 nil 28 29 30 31 32 33 (nil . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) ([38 39] . 39) 40 [41 42] 43 44 45 46 47 48 49 [50 51]])
                nil [46738 47187])
            ("calendar-hebrew-year-Monday-complete-Saturday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 nil (nil . 28) (28 . 29) (29 . 30) (30 . 31) (31 . 32) (32 . 33) (33 . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) (38 . 39) (39 . 40) (40 . 41) ([41 42] . 42) 43 44 45 46 47 48 49 50])
                nil [47189 47696])
            ("calendar-hebrew-year-Tuesday-regular-Saturday" variable
               (:constant-flag t
                :default-value [51 52 nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 nil (nil . 28) (28 . 29) (29 . 30) (30 . 31) (31 . 32) (32 . 33) (33 . 34) (34 . 35) (35 . 36) (36 . 37) (37 . 38) (38 . 39) (39 . 40) (40 . 41) ([41 42] . 42) 43 44 45 46 47 48 49 50])
                nil [47698 48211])
            ("calendar-hebrew-year-Thursday-incomplete-Sunday" variable
               (:constant-flag t
                :default-value [52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 nil 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50])
                nil [48213 48608])
            ("calendar-hebrew-year-Thursday-complete-Tuesday" variable
               (:constant-flag t
                :default-value [52 nil nil 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 nil 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [50 51]])
                nil [48610 49008])
            ("diary-hebrew-parasha" function (:arguments ("mark")) nil [49031 51431])
            ("declare-function" code nil nil [51434 51475])
            ("declare-function" code nil nil [51476 51530])
            ("calendar-latitude" variable nil nil [51531 51557])
            ("calendar-longitude" variable nil nil [51558 51585])
            ("calendar-time-zone" variable nil nil [51586 51613])
            ("diary-hebrew-sabbath-candles" function (:arguments ("mark")) nil [51704 52677])
            ("cal-hebrew" package nil nil [52680 52701]))          
      :file "cal-hebrew.el.gz"
      :pointmax 52731
      :fsize 10896
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.3!lisp!calendar!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
