;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1509 1528])
            ("semantic/ctxt" include nil nil [1529 1553])
            ("semantic/format" include nil nil [1554 1580])
            ("semantic/tag" include nil nil [1581 1604])
            ("timer" include nil nil [1605 1621])
            ("semantic/find" include nil nil [1708 1732])
            ("eldoc-last-message" variable nil nil [1735 1762])
            ("declare-function" code nil nil [1763 1803])
            ("declare-function" code nil nil [1804 1874])
            ("declare-function" code nil nil [1875 1946])
            ("declare-function" code nil nil [1947 2023])
            ("declare-function" code nil nil [2024 2095])
            ("declare-function" code nil nil [2096 2156])
            ("declare-function" code nil nil [2157 2239])
            ("declare-function" code nil nil [2240 2331])
            ("declare-function" code nil nil [2332 2391])
            ("declare-function" code nil nil [2392 2452])
            ("declare-function" code nil nil [2453 2527])
            ("semantic-idle-scheduler-timer" variable nil nil [2571 2660])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2662 2778])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2780 2984])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2986 3493])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3495 4041])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4043 4653])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4655 4876])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5026 5180])
            ("semantic-idle-scheduler-mode" variable nil nil [5182 5348])
            ("make-variable-buffer-local" code nil nil [5349 5407])
            ("semantic-idle-scheduler-max-buffer-size" variable nil nil [5409 5676])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5678 6516])
            ("define-minor-mode" code nil nil [6533 7526])
            ("semantic-add-minor-mode" code nil nil [7528 7614])
            ("semantic-idle-scheduler-queue" variable nil nil [7695 7977])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7979 8130])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8132 8320])
            ("semantic-idle-core-handler" function nil nil [8343 11162])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11164 11347])
            ("semantic-idle-scheduler-function" function nil nil [11349 11710])
            ("semantic-idle-work-parse-neighboring-files-flag" variable nil nil [11840 12070])
            ("semantic-idle-work-update-headers-flag" variable nil nil [12072 12338])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12340 13368])
            ("semantic-idle-work-core-handler" function nil nil [13370 15456])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15458 15656])
            ("semantic-idle-scheduler-work-function" function nil nil [15658 16214])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16216 17242])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17385 17627])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17629 17865])
            ("semantic-varalias-obsolete" code nil nil [17867 18000])
            ("semantic-varalias-obsolete" code nil nil [18001 18132])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18134 20982])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21361 23453])
            ("put" code nil nil [23454 23513])
            ("add-hook" code nil nil [23514 23656])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23721 23926])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23928 24304])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24306 24757])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24759 25138])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25140 25466])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25468 25861])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25863 26361])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26363 27203])
            ("semantic-idle-summary-useful-context-p" function nil nil [27205 27587])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27589 27724])
            ("make-obsolete-overload" code nil nil [27726 27884])
            ("semantic-idle-summary-mode-hook" variable nil nil [27886 28018])
            ("semantic-idle-summary-idle-function" function nil nil [28020 29228])
            ("define-minor-mode" code nil nil [29230 30191])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30193 30564])
            ("semantic-add-minor-mode" code nil nil [30566 30622])
            ("define-minor-mode" code nil nil [30624 31096])
            ("semantic-idle-symbol-highlight" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [31311 31447])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote semantic-idle-symbol-highlight)) nil [31448 31570])
            ("make-obsolete-variable" code nil nil [31571 31710])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31712 33608])
            ("define-semantic-idle-service" code nil nil [33610 34921])
            ("define-minor-mode" code nil nil [34940 35688])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [35935 36171])
            ("semantic-idle-completion-list-default" function nil nil [36173 36875])
            ("define-semantic-idle-service" code nil nil [36877 37766])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [37933 38650])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38652 39595])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39597 39967])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [39969 40367])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40369 40639])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40641 40773])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40775 41195])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [41197 41740])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41785 42221])
            ("easy-menu-define" code nil nil [42223 44142])
            ("define-semantic-idle-service" code nil nil [44144 44686])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44688 45544])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45546 46087])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [46089 46804])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46806 47582])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47584 48877])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [48879 49607])
            ("semantic/idle" package nil nil [49610 49634]))          
      :file "idle.el.gz"
      :pointmax 49787
      :fsize 13534
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1732 . 1733) (symbol 1690 . 1707) (open-paren 1689 . 1690)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [7546 7568])
            ("semantic-lex-map-symbols" function (:arguments ("fun" "table" "property")) nil [7618 8031])
            ("semantic-flex-keywords-obarray" variable nil nil [8210 8387])
            ("make-variable-buffer-local" code nil nil [8388 8448])
            ("semantic-lex-keyword-invalid" function (:arguments ("name")) nil [8450 8610])
            ("semantic-lex-keyword-symbol" function (:arguments ("name")) nil [8612 8843])
            ("semantic-lex-keyword-p" function (:arguments ("name")) nil [8845 9060])
            ("semantic-lex-keyword-set" function (:arguments ("name" "value")) nil [9062 9231])
            ("semantic-lex-keyword-value" function (:arguments ("name")) nil [9233 9516])
            ("semantic-lex-keyword-put" function (:arguments ("name" "property" "value")) nil [9518 9780])
            ("semantic-lex-keyword-get" function (:arguments ("name" "property")) nil [9782 10032])
            ("semantic-lex-make-keyword-table" function (:arguments ("specs" "propspecs")) nil [10034 10969])
            ("semantic-lex-map-keywords" function (:arguments ("fun" "property")) nil [10971 11292])
            ("semantic-lex-keywords" function (:arguments ("property")) nil [11294 11606])
            ("semantic-lex-unterminated-syntax-end-function" variable nil nil [11631 11685])
            ("semantic-lex-analysis-bounds" variable nil nil [11686 11723])
            ("semantic-lex-end-point" variable nil nil [11724 11755])
            ("semantic-lex-token-bounds" function (:arguments ("token")) nil [11757 11977])
            ("semantic-lex-token-start" function (:arguments ("token")) nil [11979 12165])
            ("semantic-lex-token-end" function (:arguments ("token")) nil [12167 12349])
            ("semantic-lex-unterminated-syntax-detected" function (:arguments ("syntax")) nil [12351 12880])
            ("semantic-lex-types-obarray" variable nil nil [13136 13232])
            ("make-variable-buffer-local" code nil nil [13233 13289])
            ("semantic-lex-type-invalid" function (:arguments ("type")) nil [13291 13446])
            ("semantic-lex-type-symbol" function (:arguments ("type")) nil [13448 13660])
            ("semantic-lex-type-p" function (:arguments ("type")) nil [13662 13832])
            ("semantic-lex-type-set" function (:arguments ("type" "value")) nil [13834 14000])
            ("semantic-lex-type-value" function (:arguments ("type" "noerror")) nil [14002 14378])
            ("semantic-lex-type-put" function (:arguments ("type" "property" "value" "add")) nil [14380 14866])
            ("semantic-lex-type-get" function (:arguments ("type" "property" "noerror")) nil [14868 15266])
            ("semantic-lex-preset-default-types" function nil nil [15268 16135])
            ("semantic-lex-make-type-table" function (:arguments ("specs" "propspecs")) nil [16137 17902])
            ("semantic-lex-map-types" function (:arguments ("fun" "property")) nil [17904 18215])
            ("semantic-lex-types" function (:arguments ("property")) nil [18217 18517])
            ("semantic-lex-analyzer" variable (:default-value (quote semantic-flex)) nil [18605 18806])
            ("make-variable-buffer-local" code nil nil [18807 18858])
            ("semantic-lex-tokens" variable (:default-value (quote ((bol) (charquote) (close-paren) (comment) (newline) (open-paren) (punctuation) (semantic-list) (string) (symbol) (whitespace)))) nil [18860 22201])
            ("semantic-lex-syntax-modifications" variable nil nil [22203 22574])
            ("make-variable-buffer-local" code nil nil [22575 22638])
            ("semantic-lex-syntax-table" variable nil nil [22640 22767])
            ("make-variable-buffer-local" code nil nil [22768 22823])
            ("semantic-lex-comment-regex" variable nil nil [22825 23067])
            ("make-variable-buffer-local" code nil nil [23068 23124])
            ("semantic-lex-number-expression" variable (:default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)"))) nil [23126 24400])
            ("make-variable-buffer-local" code nil nil [24401 24461])
            ("semantic-lex-depth" variable nil nil [24463 24569])
            ("make-variable-buffer-local" code nil nil [24570 24618])
            ("semantic-lex-unterminated-syntax-end-function" variable (:default-value (lambda (_syntax _syntax-start lex-end) lex-end)) nil [24620 25194])
            ("declare-function" code nil nil [25230 25281])
            ("semantic-lex-test" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25283 25819])
            ("semantic-lex-debug" variable nil nil [25821 25904])
            ("semantic-lex-debug" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25906 26385])
            ("semantic-lex-highlight-token" function (:arguments ("token")) nil [26387 26700])
            ("semantic-lex-one-token" function (:arguments ("analyzers")) nil [27088 27344])
            ("semantic-lex-end-point" variable nil nil [27346 27437])
            ("semantic-lex-current-depth" variable nil nil [27439 27538])
            ("semantic-lex-maximum-depth" variable nil nil [27540 27654])
            ("semantic-lex-token-stream" variable nil nil [27656 27742])
            ("semantic-lex-analysis-bounds" variable nil nil [27744 27825])
            ("semantic-lex-block-streams" variable nil nil [27827 28057])
            ("define-obsolete-variable-alias" code nil nil [28059 28156])
            ("semantic-lex-reset-functions" variable nil nil [28157 28405])
            ("semantic-lex-block-stack" variable nil nil [28434 28471])
            ("semantic-lex-debug-break" function (:arguments ("token")) nil [28603 29001])
            ("define-lex" function (:arguments ("name" "doc" "analyzers")) nil [29003 32478])
            ("semantic-lex-token" function (:arguments ("symbol" "start" "end" "str")) nil [32678 33428])
            ("semantic-lex-token-p" function (:arguments ("thing")) nil [33430 33776])
            ("semantic-lex-token-with-text-p" function (:arguments ("thing")) nil [33778 34090])
            ("semantic-lex-token-without-text-p" function (:arguments ("thing")) nil [34092 34376])
            ("semantic-lex-expand-block-specs" function (:arguments ("specs")) nil [34397 35589])
            ("semantic-lex-push-token" function (:arguments ("token" "blockspecs")) nil [35593 36427])
            ("semantic-lex-token-class" function (:arguments ("token")) nil [36429 36578])
            ("semantic-lex-token-text" function (:arguments ("token")) nil [36580 36898])
            ("semantic-lex-init" function nil nil [36900 37387])
            ("semantic-lex" function
               (:overloadable t
                :arguments ("start" "end" "depth" "length"))
                nil [37404 38239])
            ("semantic-lex-buffer" function (:arguments ("depth")) nil [38241 38421])
            ("semantic-lex-list" function (:arguments ("semlist" "depth")) nil [38423 38630])
            ("semantic-lex-start-block" function (:arguments ("syntax")) nil [38688 39071])
            ("semantic-lex-end-block" function (:arguments ("syntax")) nil [39073 41426])
            ("semantic-lex-debug-analyzers" variable nil nil [41711 41904])
            ("semantic-lex-unterminated-syntax-protection" function (:arguments ("syntax" "forms")) nil [41906 42633])
            ("put" code nil nil [42634 42713])
            ("define-lex-analyzer" function (:arguments ("name" "doc" "condition" "forms")) nil [42715 44883])
            ("define-lex-regex-analyzer" function (:arguments ("name" "doc" "regexp" "forms")) nil [44885 45206])
            ("define-lex-simple-regex-analyzer" function (:arguments ("name" "doc" "regexp" "toksym" "index" "forms")) nil [45208 45986])
            ("define-lex-block-analyzer" function (:arguments ("name" "doc" "spec1" "specs")) nil [45988 48222])
            ("define-lex-analyzer" code nil nil [48278 48485])
            ("define-lex-analyzer" code nil nil [48487 49027])
            ("define-lex-simple-regex-analyzer" code nil nil [49029 49159])
            ("define-lex-regex-analyzer" code nil nil [49161 49949])
            ("define-lex-regex-analyzer" code nil nil [49951 50219])
            ("define-lex-regex-analyzer" code nil nil [50221 50959])
            ("define-lex-regex-analyzer" code nil nil [50961 51223])
            ("define-lex-simple-regex-analyzer" code nil nil [51225 51447])
            ("define-lex-regex-analyzer" code nil nil [51449 51728])
            ("define-lex-simple-regex-analyzer" code nil nil [51730 51903])
            ("define-lex-simple-regex-analyzer" code nil nil [51905 52048])
            ("define-lex-analyzer" code nil nil [52050 53298])
            ("define-lex-regex-analyzer" code nil nil [53300 53994])
            ("define-lex-simple-regex-analyzer" code nil nil [53996 54193])
            ("define-lex-simple-regex-analyzer" code nil nil [54195 54393])
            ("define-lex-regex-analyzer" code nil nil [54395 54714])
            ("define-lex-regex-analyzer" code nil nil [54716 55370])
            ("define-lex-regex-analyzer" code nil nil [55372 56058])
            ("define-lex-regex-analyzer" code nil nil [56060 56736])
            ("semantic-comment-lexer" function (:lexical-analyzer-flag t) nil [56839 57189])
            ("semantic-simple-lexer" function (:lexical-analyzer-flag t) nil [57209 57712])
            ("define-lex-keyword-type-analyzer" function (:arguments ("name" "doc" "syntax")) nil [57874 58410])
            ("define-lex-sexp-type-analyzer" function (:arguments ("name" "doc" "syntax" "token")) nil [58412 58932])
            ("define-lex-regex-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [58934 60190])
            ("define-lex-string-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [60192 61769])
            ("define-lex-block-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches")) nil [61771 65567])
            ("semantic-lex-catch-errors" function (:arguments ("symbol" "forms")) nil [65807 67423])
            ("put" code nil nil [67424 67480])
            ("add-hook" code nil nil [67515 68175])
            ("semantic-alias-obsolete" code nil nil [68269 68348])
            ("semantic-alias-obsolete" code nil nil [68349 68424])
            ("semantic-alias-obsolete" code nil nil [68425 68502])
            ("semantic-alias-obsolete" code nil nil [68503 68602])
            ("semantic-alias-obsolete" code nil nil [68603 68684])
            ("semantic-alias-obsolete" code nil nil [68685 68770])
            ("semantic-alias-obsolete" code nil nil [68771 68856])
            ("semantic-alias-obsolete" code nil nil [68857 68944])
            ("semantic-alias-obsolete" code nil nil [68945 69024])
            ("semantic-alias-obsolete" code nil nil [69025 69100])
            ("semantic-alias-obsolete" code nil nil [69101 69172])
            ("semantic-flex-tokens" variable (:default-value semantic-lex-tokens) nil [69395 69518])
            ("semantic-flex-unterminated-syntax-end-function" variable (:default-value (lambda (_syntax _syntax-start flex-end) flex-end)) nil [69520 70098])
            ("semantic-flex-extensions" variable nil nil [70100 70515])
            ("make-variable-buffer-local" code nil nil [70516 70570])
            ("semantic-flex-syntax-modifications" variable nil nil [70572 70944])
            ("make-variable-buffer-local" code nil nil [70945 71009])
            ("semantic-ignore-comments" variable (:default-value t) nil [71011 71182])
            ("make-variable-buffer-local" code nil nil [71183 71237])
            ("semantic-flex-enable-newlines" variable nil nil [71239 71456])
            ("make-variable-buffer-local" code nil nil [71457 71516])
            ("semantic-flex-enable-whitespace" variable nil nil [71518 71733])
            ("make-variable-buffer-local" code nil nil [71734 71795])
            ("semantic-flex-enable-bol" variable nil nil [71797 72016])
            ("make-variable-buffer-local" code nil nil [72017 72071])
            ("semantic-number-expression" variable (:default-value semantic-lex-number-expression) nil [72073 72190])
            ("make-variable-buffer-local" code nil nil [72191 72247])
            ("semantic-flex-depth" variable nil nil [72249 72357])
            ("make-variable-buffer-local" code nil nil [72358 72407])
            ("semantic-flex" function (:arguments ("start" "end" "depth" "length")) nil [72409 81581])
            ("semantic/lex" package nil nil [81583 81606]))          
      :file "lex.el.gz"
      :pointmax 81757
      :fsize 19955
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 35590 . 35591) (symbol 34379 . 34395) (open-paren 34378 . 34379))))
  :file "!usr!share!emacs!26.3!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
