;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [912 931])
            ("calc-macs" include nil nil [932 952])
            ("calc-undo" function (:arguments ("n")) nil [980 1586])
            ("calc-handle-undos" function (:arguments ("cl" "n")) nil [1588 1842])
            ("calc-handle-undo" function (:arguments ("list")) nil [1844 2867])
            ("calc-redo" function (:arguments ("n")) nil [2869 3416])
            ("calc-handle-redos" function (:arguments ("cl" "n")) nil [3418 3672])
            ("calc-last-args" function (:arguments ("n")) nil [3674 3995])
            ("calc-handle-last-x" function (:arguments ("list")) nil [3997 4233])
            ("calc-find-last-x" function (:arguments ("ul" "n")) nil [4235 4423])
            ("calc-undo-does-pushes" function (:arguments ("list")) nil [4425 4552])
            ("calc-undo" package nil nil [4554 4574]))          
      :file "calc-undo.el.gz"
      :pointmax 4603
      :fsize 1469
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [920 939])
            ("calc-macs" include nil nil [940 960])
            ("math-emacs-precision" variable (:default-value (let* ((n 1) (x 9) (xx (+ x (* 9 (expt 10 (- n)))))) (while (/= x xx) (progn (setq n (1+ n)) (setq x xx) (setq xx (+ x (* 9 (expt 10 (- n))))))) (1- n))) nil [1061 1345])
            ("math-largest-emacs-expt" variable (:default-value (let ((x 1) (pow 100.0)) (while (and pow (< pow 1.0e+INF)) (setq x (* 2 x)) (setq pow (condition-case nil (expt 10.0 (* 2 x)) (error nil)))) (setq pow (condition-case nil (expt 10.0 (1+ x)) (error nil))) (while (and pow (< pow 1.0e+INF)) (setq x (1+ x)) (setq pow (condition-case nil (expt 10.0 (1+ x)) (error nil)))) (1- x))) nil [1510 2412])
            ("math-smallest-emacs-expt" variable (:default-value (let ((x -1)) (while (condition-case nil (> (expt 10.0 x) 0.0) (error nil)) (setq x (* 2 x))) (setq x (/ x 2)) (while (condition-case nil (> (expt 10.0 x) 0.0) (error nil)) (setq x (1- x))) (+ x 2))) nil [2414 2803])
            ("math-use-emacs-fn" function (:arguments ("fn" "x")) nil [2805 3735])
            ("calc-sqrt" function (:arguments ("arg")) nil [3737 3921])
            ("calc-isqrt" function (:arguments ("arg")) nil [3923 4109])
            ("calc-hypot" function (:arguments ("arg")) nil [4112 4225])
            ("calc-ln" function (:arguments ("arg")) nil [4227 4306])
            ("calc-log10" function (:arguments ("arg")) nil [4308 4393])
            ("calc-log" function (:arguments ("arg")) nil [4395 4581])
            ("calc-ilog" function (:arguments ("arg")) nil [4583 4772])
            ("calc-lnp1" function (:arguments ("arg")) nil [4774 4857])
            ("calc-exp" function (:arguments ("arg")) nil [4859 5188])
            ("calc-expm1" function (:arguments ("arg")) nil [5190 5379])
            ("calc-pi" function nil nil [5381 6045])
            ("calc-sin" function (:arguments ("arg")) nil [6047 6384])
            ("calc-arcsin" function (:arguments ("arg")) nil [6386 6469])
            ("calc-sinh" function (:arguments ("arg")) nil [6471 6556])
            ("calc-arcsinh" function (:arguments ("arg")) nil [6558 6667])
            ("calc-sec" function (:arguments ("arg")) nil [6669 6856])
            ("calc-sech" function (:arguments ("arg")) nil [6858 6943])
            ("calc-cos" function (:arguments ("arg")) nil [6945 7282])
            ("calc-arccos" function (:arguments ("arg")) nil [7284 7367])
            ("calc-cosh" function (:arguments ("arg")) nil [7369 7454])
            ("calc-arccosh" function (:arguments ("arg")) nil [7456 7565])
            ("calc-csc" function (:arguments ("arg")) nil [7567 7754])
            ("calc-csch" function (:arguments ("arg")) nil [7756 7841])
            ("calc-sincos" function nil nil [7843 8080])
            ("calc-tan" function (:arguments ("arg")) nil [8082 8419])
            ("calc-arctan" function (:arguments ("arg")) nil [8421 8504])
            ("calc-tanh" function (:arguments ("arg")) nil [8506 8591])
            ("calc-arctanh" function (:arguments ("arg")) nil [8593 8702])
            ("calc-cot" function (:arguments ("arg")) nil [8704 8891])
            ("calc-coth" function (:arguments ("arg")) nil [8893 8978])
            ("calc-arctan2" function nil nil [8980 9118])
            ("calc-conj" function (:arguments ("arg")) nil [9120 9225])
            ("calc-imaginary" function nil nil [9227 9355])
            ("calc-to-degrees" function (:arguments ("arg")) nil [9357 9467])
            ("calc-to-radians" function (:arguments ("arg")) nil [9469 9579])
            ("calc-degrees-mode" function (:arguments ("arg")) nil [9582 9863])
            ("calc-radians-mode" function nil nil [9865 10012])
            ("math-isqrt" function (:arguments ("a")) nil [10244 10463])
            ("calcFunc-isqrt" function (:arguments ("a")) nil [10465 10578])
            ("math-isqrt-bignum" function (:arguments ("a")) nil [10660 11141])
            ("math-isqrt-bignum-iter" function (:arguments ("a" "guess")) nil [11143 11534])
            ("math-zerop-bignum" function (:arguments ("a")) nil [11536 11654])
            ("math-scale-bignum-digit-size" function (:arguments ("a" "n")) nil [11656 11768])
            ("math-isqrt-small" function (:arguments ("a")) nil [11770 12003])
            ("math-sqrt" function (:arguments ("a")) nil [12118 15327])
            ("defalias" code nil nil [15328 15364])
            ("math-infinite-dir" function (:arguments ("a" "inf")) nil [15366 15495])
            ("math-sqrt-float" function (:arguments ("a" "guess")) nil [15497 15666])
            ("math-sqrt-raw" function (:arguments ("a" "guess")) nil [15668 16222])
            ("math-sqrt-float-iter" function (:arguments ("a" "guess")) nil [16224 16490])
            ("math-nearly-equal-float" function (:arguments ("a" "b")) nil [16565 17352])
            ("math-nearly-equal" function (:arguments ("a" "b")) nil [17354 18195])
            ("math-nearly-zerop-float" function (:arguments ("a" "b")) nil [18250 18431])
            ("math-nearly-zerop" function (:arguments ("a" "b")) nil [18433 18759])
            ("math-hypot" function (:arguments ("a" "b")) nil [18819 19708])
            ("defalias" code nil nil [19709 19747])
            ("calcFunc-sqr" function (:arguments ("x")) nil [19749 19790])
            ("math-nth-root" function (:arguments ("a" "n")) nil [19794 20748])
            ("math-nrf-n" variable nil nil [20931 20950])
            ("math-nrf-nf" variable nil nil [20951 20971])
            ("math-nrf-nfm1" variable nil nil [20972 20994])
            ("math-nth-root-float" function (:arguments ("a" "math-nrf-n" "guess")) nil [20996 21394])
            ("math-nth-root-float-iter" function (:arguments ("a" "guess")) nil [21396 21725])
            ("math-nri-n" variable nil nil [21872 21891])
            ("math-nth-root-integer" function (:arguments ("a" "math-nri-n" "guess")) nil [21893 22098])
            ("math-nth-root-int-iter" function (:arguments ("a" "guess")) nil [22100 22500])
            ("calcFunc-nroot" function (:arguments ("x" "n")) nil [22502 22617])
            ("math-to-radians" function (:arguments ("a")) nil [23032 23255])
            ("math-from-radians" function (:arguments ("a")) nil [23257 23529])
            ("math-to-radians-2" function (:arguments ("a" "force-symbolic")) nil [23531 23880])
            ("math-from-radians-2" function (:arguments ("a" "force-symbolic")) nil [23882 24182])
            ("calcFunc-sin" function (:arguments ("x")) nil [24218 25079])
            ("calcFunc-cos" function (:arguments ("x")) nil [25081 26478])
            ("calcFunc-sincos" function (:arguments ("x")) nil [26480 26757])
            ("calcFunc-tan" function (:arguments ("x")) nil [26759 28231])
            ("calcFunc-sec" function (:arguments ("x")) nil [28233 31281])
            ("calcFunc-csc" function (:arguments ("x")) nil [31283 33978])
            ("calcFunc-cot" function (:arguments ("x")) nil [33980 35373])
            ("math-sin-raw" function (:arguments ("x" "orgx")) nil [35375 36142])
            ("math-cos-raw" function (:arguments ("x")) nil [36144 36312])
            ("math-sec-raw" function (:arguments ("x")) nil [36314 37307])
            ("math-csc-raw" function (:arguments ("x")) nil [37309 38302])
            ("math-cot-raw" function (:arguments ("x")) nil [38304 39312])
            ("math-sin-cos-raw" function (:arguments ("x")) nil [39520 39632])
            ("math-tan-raw" function (:arguments ("x")) nil [39634 40372])
            ("math-sin-raw-2" function (:arguments ("x" "orgx")) nil [40374 41077])
            ("math-cos-raw-2" function (:arguments ("x" "orgx")) nil [41079 41496])
            ("math-sin-series" function (:arguments ("sum" "nfac" "n" "x" "xnegsqr")) nil [41498 41847])
            ("calcFunc-arcsin" function (:arguments ("x")) nil [41886 42602])
            ("calcFunc-arccos" function (:arguments ("x")) nil [42604 43320])
            ("calcFunc-arctan" function (:arguments ("x")) nil [43322 44099])
            ("math-arcsin-raw" function (:arguments ("x")) nil [44101 44465])
            ("math-arccos-raw" function (:arguments ("x")) nil [44467 44554])
            ("math-arctan-raw" function (:arguments ("x")) nil [44556 45638])
            ("math-arctan-series" function (:arguments ("sum" "n" "x" "xnegsqr")) nil [45640 45940])
            ("calcFunc-arctan2" function (:arguments ("y" "x")) nil [45942 46706])
            ("math-arctan2-raw" function (:arguments ("y" "x")) nil [46708 47186])
            ("calcFunc-arcsincos" function (:arguments ("x")) nil [47188 47388])
            ("calcFunc-exp" function (:arguments ("x")) nil [47419 48065])
            ("calcFunc-expm1" function (:arguments ("x")) nil [48067 49040])
            ("calcFunc-exp10" function (:arguments ("x")) nil [49042 49141])
            ("math-exp-raw" function (:arguments ("x")) nil [49143 50234])
            ("math-exp-minus-1-raw" function (:arguments ("x")) nil [50236 50308])
            ("math-exp-series" function (:arguments ("sum" "nfac" "n" "xpow" "x")) nil [50310 50626])
            ("calcFunc-ln" function (:arguments ("x")) nil [50647 51553])
            ("calcFunc-log10" function (:arguments ("x")) nil [51555 53178])
            ("calcFunc-log" function (:arguments ("x" "b")) nil [53180 55309])
            ("calcFunc-alog" function (:arguments ("x" "b")) nil [55311 55460])
            ("calcFunc-ilog" function (:arguments ("x" "b")) nil [55462 55740])
            ("math-integer-log" function (:arguments ("x" "b")) nil [55742 56209])
            ("math-log-base-cache" variable nil nil [56212 56244])
            ("math-log-base-raw" function (:arguments ("b")) nil [56245 56523])
            ("calcFunc-lnp1" function (:arguments ("x")) nil [56525 57536])
            ("math-ln-raw" function (:arguments ("x")) nil [57538 58741])
            ("math-ln-raw-2" function (:arguments ("x")) nil [58743 59042])
            ("math-ln-raw-3" function (:arguments ("x")) nil [59044 59161])
            ("math-ln-raw-series" function (:arguments ("sum" "n" "x" "xsqr")) nil [59191 59479])
            ("math-ln-plus-1-raw" function (:arguments ("x")) nil [59481 59551])
            ("math-lnp1-series" function (:arguments ("sum" "n" "xpow" "x")) nil [59553 59834])
            ("math-approx-ln-10" variable
               (:constant-flag t
                :default-value (math-read-number-simple "2.302585092994045684018"))
                nil [59836 59951])
            ("math-defcache" code nil nil [59953 60028])
            ("math-approx-ln-2" variable
               (:constant-flag t
                :default-value (math-read-number-simple "0.693147180559945309417"))
                nil [60030 60143])
            ("math-defcache" code nil nil [60145 60230])
            ("calcFunc-sinh" function (:arguments ("x")) nil [60261 61087])
            ("put" code nil nil [61088 61127])
            ("calcFunc-cosh" function (:arguments ("x")) nil [61129 62023])
            ("put" code nil nil [62024 62063])
            ("calcFunc-tanh" function (:arguments ("x")) nil [62065 63021])
            ("put" code nil nil [63022 63061])
            ("calcFunc-sech" function (:arguments ("x")) nil [63063 64100])
            ("put" code nil nil [64101 64140])
            ("calcFunc-csch" function (:arguments ("x")) nil [64142 65344])
            ("put" code nil nil [65345 65384])
            ("calcFunc-coth" function (:arguments ("x")) nil [65386 66557])
            ("put" code nil nil [66558 66597])
            ("calcFunc-arcsinh" function (:arguments ("x")) nil [66599 67463])
            ("put" code nil nil [67464 67506])
            ("calcFunc-arccosh" function (:arguments ("x")) nil [67508 68925])
            ("put" code nil nil [68926 68968])
            ("calcFunc-arctanh" function (:arguments ("x")) nil [68970 70251])
            ("put" code nil nil [70252 70294])
            ("calcFunc-rad" function (:arguments ("a")) nil [70343 70771])
            ("put" code nil nil [70772 70810])
            ("calcFunc-deg" function (:arguments ("a")) nil [70858 71286])
            ("put" code nil nil [71287 71325])
            ("calc-math" package nil nil [71327 71347]))          
      :file "calc-math.el.gz"
      :pointmax 71376
      :fsize 12287
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-macs" include nil nil [6873 6893])
            ("declare-function" code nil nil [6945 7028])
            ("declare-function" code nil nil [7029 7093])
            ("declare-function" code nil nil [7094 7144])
            ("declare-function" code nil nil [7145 7207])
            ("declare-function" code nil nil [7208 7276])
            ("declare-function" code nil nil [7277 7346])
            ("declare-function" code nil nil [7347 7430])
            ("declare-function" code nil nil [7431 7502])
            ("declare-function" code nil nil [7503 7564])
            ("declare-function" code nil nil [7565 7611])
            ("declare-function" code nil nil [7612 7660])
            ("declare-function" code nil nil [7661 7706])
            ("declare-function" code nil nil [7707 7770])
            ("declare-function" code nil nil [7771 7833])
            ("declare-function" code nil nil [7834 7899])
            ("declare-function" code nil nil [7900 7968])
            ("declare-function" code nil nil [7969 8033])
            ("declare-function" code nil nil [8034 8105])
            ("declare-function" code nil nil [8106 8162])
            ("declare-function" code nil nil [8163 8216])
            ("declare-function" code nil nil [8217 8280])
            ("declare-function" code nil nil [8281 8328])
            ("declare-function" code nil nil [8329 8390])
            ("declare-function" code nil nil [8391 8452])
            ("declare-function" code nil nil [8453 8525])
            ("declare-function" code nil nil [8526 8575])
            ("declare-function" code nil nil [8576 8654])
            ("declare-function" code nil nil [8655 8720])
            ("declare-function" code nil nil [8721 8776])
            ("declare-function" code nil nil [8777 8831])
            ("declare-function" code nil nil [8832 8904])
            ("declare-function" code nil nil [8905 8949])
            ("declare-function" code nil nil [8950 9013])
            ("declare-function" code nil nil [9014 9072])
            ("declare-function" code nil nil [9073 9123])
            ("declare-function" code nil nil [9124 9178])
            ("declare-function" code nil nil [9179 9238])
            ("declare-function" code nil nil [9239 9297])
            ("declare-function" code nil nil [9298 9399])
            ("declare-function" code nil nil [9400 9460])
            ("declare-function" code nil nil [9461 9514])
            ("declare-function" code nil nil [9515 9572])
            ("declare-function" code nil nil [9573 9625])
            ("declare-function" code nil nil [9626 9676])
            ("declare-function" code nil nil [9677 9732])
            ("declare-function" code nil nil [9733 9793])
            ("declare-function" code nil nil [9794 9851])
            ("declare-function" code nil nil [9852 9903])
            ("declare-function" code nil nil [9904 9959])
            ("declare-function" code nil nil [9960 10020])
            ("declare-function" code nil nil [10021 10078])
            ("declare-function" code nil nil [10079 10148])
            ("declare-function" code nil nil [10149 10203])
            ("declare-function" code nil nil [10204 10255])
            ("declare-function" code nil nil [10256 10311])
            ("declare-function" code nil nil [10312 10367])
            ("declare-function" code nil nil [10368 10428])
            ("declare-function" code nil nil [10429 10486])
            ("declare-function" code nil nil [10487 10557])
            ("declare-function" code nil nil [10558 10607])
            ("declare-function" code nil nil [10608 10684])
            ("declare-function" code nil nil [10685 10747])
            ("declare-function" code nil nil [10748 10814])
            ("declare-function" code nil nil [10815 10869])
            ("declare-function" code nil nil [10870 10922])
            ("declare-function" code nil nil [10923 10974])
            ("declare-function" code nil nil [10975 11036])
            ("declare-function" code nil nil [11037 11089])
            ("declare-function" code nil nil [11090 11135])
            ("declare-function" code nil nil [11136 11199])
            ("declare-function" code nil nil [11200 11258])
            ("declare-function" code nil nil [11259 11315])
            ("declare-function" code nil nil [11316 11380])
            ("declare-function" code nil nil [11381 11465])
            ("declare-function" code nil nil [11466 11545])
            ("declare-function" code nil nil [11546 11625])
            ("declare-function" code nil nil [11626 11689])
            ("declare-function" code nil nil [11690 11743])
            ("calc" customgroup (:user-visible-flag t) nil [11746 11876])
            ("calc-settings-file" variable (:default-value (locate-user-emacs-file "calc.el" ".calc.el")) nil [11973 12130])
            ("calc-language-alist" variable (:default-value (quote ((latex-mode . latex) (tex-mode . tex) (plain-tex-mode . tex) (context-mode . tex) (nroff-mode . eqn) (pascal-mode . pascal) (c-mode . c) (c++-mode . c) (fortran-mode . fortran) (f90-mode . fortran) (texinfo-mode . calc-normal-language)))) nil [12132 12631])
            ("calc-embedded-announce-formula" variable (:default-value "%Embed
\\(% .*
\\)*") nil [12633 12816])
            ("calc-embedded-announce-formula-alist" variable (:default-value (quote ((c++-mode . "//Embed
\\(// .*
\\)*") (c-mode . "/\\*Embed\\*/
\\(/\\* .*\\*/
\\)*") (f90-mode . "!Embed
\\(! .*
\\)*") (fortran-mode . "C Embed
\\(C .*
\\)*") (html-helper-mode . "<!-- Embed -->
\\(<!-- .* -->
\\)*") (html-mode . "<!-- Embed -->
\\(<!-- .* -->
\\)*") (nroff-mode . "\\\\\"Embed
\\(\\\\\" .*
\\)*") (pascal-mode . "{Embed}
\\({.*}
\\)*") (sgml-mode . "<!-- Embed -->
\\(<!-- .* -->
\\)*") (xml-mode . "<!-- Embed -->
\\(<!-- .* -->
\\)*") (texinfo-mode . "@c Embed
\\(@c .*
\\)*")))) nil [12818 13684])
            ("calc-embedded-open-formula" variable (:default-value "\\`\\|^
\\|\\$\\$?\\|\\\\\\[\\|^\\\\begin[^{].*
\\|^\\\\begin{.*[^x]}.*
\\|^@.*
\\|^\\.EQ.*
\\|\\\\(\\|^%
\\|^\\.\\\\\"
") nil [13686 13976])
            ("calc-embedded-close-formula" variable (:default-value "\\'\\|
$\\|\\$\\$?\\|\\\\]\\|^\\\\end[^{].*
\\|^\\\\end{.*[^x]}.*
\\|^@.*
\\|^\\.EN.*
\\|\\\\)\\|
%
\\|^\\.\\\\\"
") nil [13978 14264])
            ("calc-embedded-open-close-formula-alist" variable nil nil [14266 14625])
            ("calc-embedded-word-regexp" variable (:default-value "[-+]?[0-9]+\\(\\.[0-9]+\\)?\\([eE][-+]?[0-9]+\\)?") nil [14627 14819])
            ("calc-embedded-word-regexp-alist" variable nil nil [14821 15070])
            ("calc-embedded-open-plain" variable (:default-value "%%% ") nil [15072 15302])
            ("calc-embedded-close-plain" variable (:default-value " %%%
") nil [15304 15484])
            ("calc-embedded-open-close-plain-alist" variable (:default-value (quote ((c++-mode "// %% " " %%
") (c-mode "/* %% " " %% */
") (f90-mode "! %% " " %%
") (fortran-mode "C %% " " %%
") (html-helper-mode "<!-- %% " " %% -->
") (html-mode "<!-- %% " " %% -->
") (nroff-mode "\\\" %% " " %%
") (pascal-mode "{%% " " %%}
") (sgml-mode "<!-- %% " " %% -->
") (xml-mode "<!-- %% " " %% -->
") (texinfo-mode "@c %% " " %%
")))) nil [15486 16274])
            ("calc-embedded-open-new-formula" variable (:default-value "

") nil [16276 16441])
            ("calc-embedded-close-new-formula" variable (:default-value "

") nil [16443 16607])
            ("calc-embedded-open-close-new-formula-alist" variable nil nil [16609 16984])
            ("calc-embedded-open-mode" variable (:default-value "% ") nil [16986 17197])
            ("calc-embedded-close-mode" variable (:default-value "
") nil [17199 17410])
            ("calc-embedded-open-close-mode-alist" variable (:default-value (quote ((c++-mode "// " "
") (c-mode "/* " " */
") (f90-mode "! " "
") (fortran-mode "C " "
") (html-helper-mode "<!-- " " -->
") (html-mode "<!-- " " -->
") (nroff-mode "\\\" " "
") (pascal-mode "{ " " }
") (sgml-mode "<!-- " " -->
") (xml-mode "<!-- " " -->
") (texinfo-mode "@c " "
")))) nil [17412 18136])
            ("calc-gnuplot-name" variable (:default-value (if (and (eq system-type (quote windows-nt)) (executable-find "pgnuplot")) "pgnuplot" "gnuplot")) nil [18138 18572])
            ("calc-gnuplot-plot-command" variable nil nil [18574 18742])
            ("calc-gnuplot-print-command" variable (:default-value "lp %s") nil [18744 18915])
            ("calc-multiplication-has-precedence" variable (:default-value t) nil [18917 19075])
            ("calc-ensure-consistent-units" variable nil nil [19077 19266])
            ("calc-context-sensitive-enter" variable nil nil [19268 19473])
            ("calc-undo-length" variable (:default-value 100) nil [19475 19612])
            ("calc-highlight-selections-with-faces" variable nil nil [19614 20070])
            ("calc-lu-field-reference" variable (:default-value "20 uPa") nil [20072 20232])
            ("calc-lu-power-reference" variable (:default-value "mW") nil [20234 20390])
            ("calc-note-threshold" variable (:default-value "1") nil [20392 20570])
            ("math-format-date-cache" variable nil nil [20572 20603])
            ("calc-nonselected-face" variable
               (:default-value (quote ((t :inherit shadow :slant italic)))
                :type "face")
                nil [20621 20774])
            ("calc-selected-face" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [20776 20898])
            ("define-obsolete-variable-alias" code nil nil [20900 20985])
            ("calc-scan-for-dels" variable (:default-value t) nil [20987 21113])
            ("calc-stack" variable (:default-value (quote ((top-of-stack 1 nil)))) nil [21115 21250])
            ("calc-stack-top" variable (:default-value 1) nil [21252 21380])
            ("calc-display-sci-high" variable nil nil [21382 21558])
            ("calc-display-sci-low" variable (:default-value -3) nil [21560 21704])
            ("calc-other-modes" variable nil nil [21706 21803])
            ("calc-Y-help-msgs" variable nil nil [21805 21873])
            ("calc-loaded-settings-file" variable nil nil [21875 21964])
            ("calc-mode-var-list" variable (:default-value (quote nil)) nil [21967 22050])
            ("defcalcmodevar" function (:arguments ("var" "defval" "doc")) nil [22052 22352])
            ("calc-mode-var-list-restore-default-values" function nil nil [22354 22567])
            ("calc-mode-var-list-restore-saved-values" function nil nil [22569 23797])
            ("defcalcmodevar" code nil nil [23799 23923])
            ("defcalcmodevar" code nil nil [23925 24022])
            ("defcalcmodevar" code nil nil [24024 24138])
            ("defcalcmodevar" code nil nil [24140 24309])
            ("defcalcmodevar" code nil nil [24311 24587])
            ("defcalcmodevar" code nil nil [24589 24689])
            ("defcalcmodevar" code nil nil [24691 24808])
            ("defcalcmodevar" code nil nil [24810 25020])
            ("defcalcmodevar" code nil nil [25022 25187])
            ("defcalcmodevar" code nil nil [25189 25300])
            ("defcalcmodevar" code nil nil [25302 25423])
            ("defcalcmodevar" code nil nil [25425 25525])
            ("defcalcmodevar" code nil nil [25527 25722])
            ("defcalcmodevar" code nil nil [25724 25881])
            ("defcalcmodevar" code nil nil [25883 26725])
            ("defcalcmodevar" code nil nil [26727 26834])
            ("defcalcmodevar" code nil nil [26836 27058])
            ("defcalcmodevar" code nil nil [27060 27167])
            ("defcalcmodevar" code nil nil [27169 27370])
            ("defcalcmodevar" code nil nil [27372 27480])
            ("defcalcmodevar" code nil nil [27482 27663])
            ("defcalcmodevar" code nil nil [27665 27758])
            ("defcalcmodevar" code nil nil [27760 27873])
            ("defcalcmodevar" code nil nil [27875 27976])
            ("defcalcmodevar" code nil nil [27978 28090])
            ("defcalcmodevar" code nil nil [28092 28200])
            ("defcalcmodevar" code nil nil [28202 28510])
            ("defcalcmodevar" code nil nil [28512 29200])
            ("defcalcmodevar" code nil nil [29202 29313])
            ("defcalcmodevar" code nil nil [29315 29391])
            ("defcalcmodevar" code nil nil [29393 29471])
            ("defcalcmodevar" code nil nil [29473 29588])
            ("defcalcmodevar" code nil nil [29590 29683])
            ("defcalcmodevar" code nil nil [29685 30133])
            ("defcalcmodevar" code nil nil [30135 30238])
            ("defcalcmodevar" code nil nil [30240 30347])
            ("defcalcmodevar" code nil nil [30349 30458])
            ("defcalcmodevar" code nil nil [30460 30610])
            ("defcalcmodevar" code nil nil [30612 30779])
            ("defcalcmodevar" code nil nil [30781 30895])
            ("defcalcmodevar" code nil nil [30897 31078])
            ("defcalcmodevar" code nil nil [31080 31439])
            ("defcalcmodevar" code nil nil [31441 31546])
            ("defcalcmodevar" code nil nil [31549 31668])
            ("defcalcmodevar" code nil nil [31670 31748])
            ("defcalcmodevar" code nil nil [31750 31858])
            ("defcalcmodevar" code nil nil [31860 32054])
            ("defcalcmodevar" code nil nil [32056 32208])
            ("defcalcmodevar" code nil nil [32210 32322])
            ("defcalcmodevar" code nil nil [32324 32456])
            ("defcalcmodevar" code nil nil [32458 32575])
            ("defcalcmodevar" code nil nil [32577 32674])
            ("defcalcmodevar" code nil nil [32676 32719])
            ("defcalcmodevar" code nil nil [32721 33059])
            ("defcalcmodevar" code nil nil [33061 33187])
            ("defcalcmodevar" code nil nil [33189 33283])
            ("defcalcmodevar" code nil nil [33285 33378])
            ("defcalcmodevar" code nil nil [33380 33477])
            ("defcalcmodevar" code nil nil [33479 33583])
            ("defcalcmodevar" code nil nil [33585 33688])
            ("defcalcmodevar" code nil nil [33690 33795])
            ("defcalcmodevar" code nil nil [33797 33891])
            ("defcalcmodevar" code nil nil [33893 33984])
            ("defcalcmodevar" code nil nil [33986 34095])
            ("defcalcmodevar" code nil nil [34097 34220])
            ("defcalcmodevar" code nil nil [34222 34340])
            ("defcalcmodevar" code nil nil [34342 34435])
            ("calc-local-var-list" variable
               (:constant-flag t
                :default-value (quote (calc-stack calc-stack-top calc-undo-list calc-redo-list calc-always-load-extensions calc-mode-save-mode calc-display-raw calc-line-numbering calc-line-breaking calc-display-just calc-display-origin calc-left-label calc-right-label calc-auto-why calc-algebraic-mode calc-incomplete-algebraic-mode calc-symbolic-mode calc-matrix-mode calc-inverse-flag calc-hyperbolic-flag calc-option-flag calc-keep-args-flag calc-angle-mode calc-number-radix calc-leading-zeros calc-group-digits calc-group-char calc-point-char calc-frac-format calc-prefer-frac calc-hms-format calc-date-format calc-standard-date-formats calc-float-format calc-full-float-format calc-complex-format calc-matrix-just calc-full-vectors calc-full-trail-vectors calc-break-vectors calc-vector-commas calc-vector-brackets calc-matrix-brackets calc-complex-mode calc-infinite-mode calc-display-strings calc-simplify-mode calc-auto-recompute calc-autorange-units calc-show-plain calc-show-selections calc-use-selections calc-assoc-selections calc-word-size calc-internal-prec)))
                nil [34437 35750])
            ("calc-mode-hook" variable nil nil [35752 35817])
            ("calc-trail-mode-hook" variable nil nil [35819 35896])
            ("calc-start-hook" variable nil nil [35898 35961])
            ("calc-end-hook" variable nil nil [35963 36021])
            ("calc-load-hook" variable nil nil [36023 36087])
            ("calc-window-hook" variable nil nil [36089 36161])
            ("calc-trail-window-hook" variable nil nil [36163 36247])
            ("calc-embedded-new-buffer-hook" variable nil nil [36249 36349])
            ("calc-embedded-new-formula-hook" variable nil nil [36351 36453])
            ("calc-embedded-mode-hook" variable nil nil [36455 36533])
            ("put" code nil nil [36588 36625])
            ("put" code nil nil [36626 36669])
            ("define-error" code nil nil [36671 36719])
            ("define-error" code nil nil [36720 36803])
            ("define-error" code nil nil [36805 36881])
            ("define-error" code nil nil [36882 36960])
            ("calc-trail-pointer" variable nil nil [36962 37036])
            ("calc-trail-overlay" variable nil nil [37037 37107])
            ("calc-undo-list" variable nil nil [37108 37181])
            ("calc-redo-list" variable nil nil [37182 37249])
            ("calc-main-buffer" variable nil nil [37250 37315])
            ("calc-buffer-list" variable nil nil [37316 37377])
            ("calc-trail-buffer" variable nil nil [37378 37444])
            ("calc-why" variable nil nil [37445 37506])
            ("calc-next-why" variable nil nil [37507 37533])
            ("calc-inverse-flag" variable nil nil [37534 37607])
            ("calc-hyperbolic-flag" variable nil nil [37608 37687])
            ("calc-option-flag" variable nil nil [37688 37771])
            ("calc-keep-args-flag" variable nil nil [37772 37879])
            ("calc-function-open" variable (:default-value "(") nil [37880 37967])
            ("calc-function-close" variable (:default-value ")") nil [37968 38057])
            ("calc-language-output-filter" variable nil nil [38058 38159])
            ("calc-language-input-filter" variable nil nil [38160 38258])
            ("calc-radix-formatter" variable nil nil [38259 38346])
            ("calc-lang-slash-idiv" variable nil nil [38347 38449])
            ("calc-lang-allow-underscores" variable nil nil [38450 38557])
            ("calc-lang-allow-percentsigns" variable nil nil [38558 38668])
            ("calc-lang-c-type-hex" variable nil nil [38669 38782])
            ("calc-lang-brackets-are-subscripts" variable nil nil [38783 38890])
            ("calc-lang-parens-are-subscripts" variable nil nil [38891 38999])
            ("calc-last-kill" variable nil nil [39001 39069])
            ("calc-dollar-values" variable nil nil [39070 39132])
            ("calc-dollar-used" variable nil nil [39133 39206])
            ("calc-hashes-used" variable nil nil [39207 39280])
            ("calc-quick-prev-results" variable nil nil [39281 39355])
            ("calc-said-hello" variable nil nil [39356 39439])
            ("calc-executing-macro" variable nil nil [39440 39538])
            ("calc-any-selections" variable nil nil [39539 39616])
            ("calc-help-phase" variable nil nil [39617 39691])
            ("calc-full-help-flag" variable nil nil [39692 39775])
            ("calc-refresh-count" variable nil nil [39776 39845])
            ("calc-display-dirty" variable nil nil [39846 39954])
            ("calc-prepared-composition" variable nil nil [39955 39993])
            ("calc-selection-cache-default-entry" variable nil nil [39994 40041])
            ("calc-embedded-info" variable nil nil [40042 40143])
            ("calc-embedded-active" variable nil nil [40144 40240])
            ("calc-standalone-flag" variable nil nil [40241 40325])
            ("var-EvalRules" variable nil nil [40326 40411])
            ("math-eval-rules-cache-tag" variable (:default-value t) nil [40412 40448])
            ("math-radix-explicit-format" variable (:default-value t) nil [40449 40486])
            ("math-expr-function-mapping" variable nil nil [40487 40588])
            ("math-expr-variable-mapping" variable nil nil [40589 40690])
            ("math-read-expr-quotes" variable nil nil [40691 40725])
            ("math-working-step" variable nil nil [40726 40756])
            ("math-working-step-2" variable nil nil [40757 40789])
            ("var-i" variable (:default-value (quote (special-const (math-imaginary 1)))) nil [40790 40840])
            ("var-pi" variable (:default-value (quote (special-const (math-pi)))) nil [40841 40883])
            ("var-π" variable (:default-value (quote (special-const (math-pi)))) nil [40884 40925])
            ("var-e" variable (:default-value (quote (special-const (math-e)))) nil [40926 40966])
            ("var-phi" variable (:default-value (quote (special-const (math-phi)))) nil [40967 41011])
            ("var-φ" variable (:default-value (quote (special-const (math-phi)))) nil [41012 41054])
            ("var-gamma" variable (:default-value (quote (special-const (math-gamma-const)))) nil [41055 41109])
            ("var-γ" variable (:default-value (quote (special-const (math-gamma-const)))) nil [41110 41160])
            ("var-Modes" variable (:default-value (quote (special-const (math-get-modes-vec)))) nil [41161 41217])
            ("mapc" code nil nil [41219 41292])
            ("calc-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map t) (define-key map "+" (quote calc-plus)) (define-key map "-" (quote calc-minus)) (define-key map "*" (quote calc-times)) (define-key map "/" (quote calc-divide)) (define-key map "%" (quote calc-mod)) (define-key map "&" (quote calc-inv)) (define-key map "^" (quote calc-power)) (define-key map "\245" (quote calc-percent)) (define-key map "e" (quote calcDigit-start)) (define-key map "i" (quote calc-info)) (define-key map "n" (quote calc-change-sign)) (define-key map "q" (quote calc-quit)) (define-key map "Y" (quote nil)) (define-key map "Y?" (quote calc-shift-Y-prefix-help)) (define-key map "?" (quote calc-help)) (define-key map " " (quote calc-enter)) (define-key map "'" (quote calc-algebraic-entry)) (define-key map "$" (quote calc-auto-algebraic-entry)) (define-key map "\"" (quote calc-auto-algebraic-entry)) (define-key map "	" (quote calc-roll-down)) (define-key map "\211" (quote calc-roll-up)) (define-key map "" (quote calc-transpose-lines)) (define-key map "" (quote calc-enter)) (define-key map "\215" (quote calc-last-args-stub)) (define-key map "
" (quote calc-over)) (define-key map "" (quote calc-yank)) (define-key map [mouse-2] (quote calc-yank)) (define-key map [remap undo] (quote calc-undo)) (mapc (lambda (x) (define-key map (char-to-string x) (quote undefined))) "lOW") (mapc (lambda (x) (define-key map (char-to-string x) (quote calc-missing-key))) (concat "ABCDEFGHIJKLMNOPQRSTUVXZabcdfghjkmoprstuvwxyz" ":\\|!()[]<>{},;=~`")) (define-key map "\367" (quote calc-missing-key)) (define-key map "\353" (quote calc-missing-key)) (define-key map "\227" (quote calc-missing-key)) (mapc (lambda (x) (define-key map (char-to-string x) (quote calcDigit-start))) "_0123456789.#@") map)) nil [41294 43090])
            ("calc-digit-map" variable (:default-value (let ((map (make-keymap))) (map-keymap (lambda (key bind) (define-key map (vector key) (if (eq bind (quote undefined)) (quote undefined) (quote calcDigit-nondigit)))) calc-mode-map) (mapc (lambda (x) (define-key map (char-to-string x) (quote calcDigit-key))) "_0123456789.e+-:n#@oh'\"mspM") (mapc (lambda (x) (define-key map (char-to-string x) (quote calcDigit-letter))) "abcdfgijklqrtuvwxyzABCDEFGHIJKLNOPQRSTUVWXYZ") (define-key map "'" (quote calcDigit-algebraic)) (define-key map "`" (quote calcDigit-edit)) (define-key map "" (quote abort-recursive-edit)) map)) nil [43092 43799])
            ("mapc" code nil nil [43801 44575])
            ("calc-dispatch-map" variable (:default-value (let ((map (make-keymap))) (mapc (lambda (x) (let* ((x-chr (car x)) (x-str (char-to-string x-chr)) (x-def (cdr x))) (define-key map x-str x-def) (when (string-match "[a-z]" x-str) (define-key map (upcase x-str) x-def) (unless (string-match "[gmv]" x-str) (define-key map (vector (list (quote control) x-chr)) x-def))) (define-key map (format "%c" x-chr) x-def))) (quote ((97 . calc-embedded-activate) (98 . calc-big-or-small) (99 . calc) (100 . calc-embedded-duplicate) (101 . calc-embedded) (102 . calc-embedded-new-formula) (103 . calc-grab-region) (104 . calc-dispatch-help) (105 . calc-info) (106 . calc-embedded-select) (107 . calc-keypad) (108 . calc-load-everything) (109 . read-kbd-macro) (110 . calc-embedded-next) (111 . calc-other-window) (112 . calc-embedded-previous) (113 . quick-calc) (114 . calc-grab-rectangle) (115 . calc-info-summary) (116 . calc-tutorial) (117 . calc-embedded-update-formula) (119 . calc-embedded-word) (120 . calc-quit) (121 . calc-copy-to-buffer) (122 . calc-user-invocation) (39 . calc-embedded-new-formula) (96 . calc-embedded-edit) (58 . calc-grab-sum-down) (95 . calc-grab-sum-across) (48 . calc-reset) (63 . calc-dispatch-help) (35 . calc-same-interface) (38 . calc-same-interface) (92 . calc-same-interface) (61 . calc-same-interface) (42 . calc-same-interface) (47 . calc-same-interface) (43 . calc-same-interface) (45 . calc-same-interface)))) map)) nil [44577 46739])
            ("load" code nil nil [46764 46795])
            ("calc-dispatch" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [46870 47665])
            ("calc-dispatch-help" variable nil nil [47667 47698])
            ("calc-do-dispatch" function (:arguments ("_arg")) nil [47699 48213])
            ("calc-read-key-sequence" function (:arguments ("prompt" "map")) nil [48215 48685])
            ("calc-alg-map" variable nil nil [48687 48708])
            ("calc-embedded-modes" variable nil nil [48736 48764])
            ("calc-override-minor-modes" variable nil nil [48792 48826])
            ("calc-kill-stack-buffer" function nil nil [48854 51503])
            ("calc-mode" function (:user-visible-flag t) nil [51505 54378])
            ("calc-check-defines" variable (:default-value (quote calc-check-defines)) nil [54380 54427])
            ("calc-check-defines" function nil nil [54455 55023])
            ("calc-trail-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map calc-mode-map) map)) nil [55025 55140])
            ("define-derived-mode" code nil nil [55142 55846])
            ("calc-create-buffer" function nil nil [55848 56264])
            ("calc" function
               (:user-visible-flag t
                :arguments ("arg" "full-display" "interactive"))
                nil [56281 58353])
            ("full-calc" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [58370 58517])
            ("calc-same-interface" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58519 58920])
            ("calc-quit" function
               (:user-visible-flag t
                :arguments ("non-fatal" "interactive"))
                nil [58922 60799])
            ("quick-calc" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [60816 61105])
            ("calc-eval" function (:arguments ("str" "separator" "args")) nil [61122 61423])
            ("calc-keypad" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [61440 61804])
            ("full-calc-keypad" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [61821 62038])
            ("calc-aborted-prefix" variable nil nil [62041 62073])
            ("calc-start-time" variable nil nil [62074 62102])
            ("calc-command-flags" variable nil nil [62103 62134])
            ("calc-final-point-line" variable nil nil [62135 62165])
            ("calc-final-point-column" variable nil nil [62166 62198])
            ("calc-do" function (:arguments ("do-body" "do-slow")) nil [62272 64989])
            ("calc-set-command-flag" function (:arguments ("f")) nil [65027 65157])
            ("calc-select-buffer" function nil nil [65159 65410])
            ("calc-cursor-stack-index" function (:arguments ("index")) nil [65412 65544])
            ("calc-stack-size" function nil nil [65546 65613])
            ("calc-substack-height" function (:arguments ("n")) nil [65615 65841])
            ("calc-set-mode-line" function nil nil [65843 70072])
            ("calc-align-stack-window" function nil nil [70074 70518])
            ("calc-check-stack" function (:arguments ("n")) nil [70520 70669])
            ("calc-push-list" function (:arguments ("vals" "m" "sels")) nil [70671 71364])
            ("calc-pop-push-list" function (:arguments ("n" "vals" "m" "sels")) nil [71366 71567])
            ("calc-pop-push-record-list" function (:arguments ("n" "prefix" "vals" "m" "sels")) nil [71569 71975])
            ("calc-enter-result" function (:arguments ("n" "prefix" "vals" "m")) nil [71977 72468])
            ("calc-normalize" function (:arguments ("val")) nil [72470 72629])
            ("calc-handle-whys" function nil nil [72631 72707])
            ("calc-pop-stack" function (:arguments ("n" "m" "sel-ok")) nil [72710 73615])
            ("calc-get-stack-element" function (:arguments ("x" "sel-mode")) nil [73617 73879])
            ("calc-top" function (:arguments ("n" "sel-mode")) nil [73943 74102])
            ("calc-top-n" function (:arguments ("n" "sel-mode")) nil [74104 74244])
            ("calc-top-list" function (:arguments ("n" "m" "sel-mode")) nil [74246 74587])
            ("calc-top-list-n" function (:arguments ("n" "m" "sel-mode")) nil [74589 74726])
            ("calc-renumber-stack" function nil nil [74729 75713])
            ("calc-any-evaltos" variable nil nil [75715 75744])
            ("calc-refresh" function (:arguments ("align")) nil [75745 76927])
            ("calc-gregorian-switch" variable nil nil [77077 79581])
            ("calc-check-trail-aligned" function nil nil [79612 79788])
            ("calc-trail-buffer" function nil nil [79790 80523])
            ("calc-can-abbrev-vectors" variable nil nil [80525 80557])
            ("calc-record" function (:arguments ("val" "prefix")) nil [80559 81430])
            ("calc-trail-display" function (:arguments ("flag" "no-refresh" "interactive")) nil [81433 82400])
            ("calc-trail-here" function nil nil [82402 83380])
            ("calc-record-undo" function (:arguments ("rec")) nil [83406 83714])
            ("calc-binary-op" function (:arguments ("name" "func" "arg" "ident" "unary" "func2")) nil [83745 84065])
            ("calc-unary-op" function (:arguments ("name" "func" "arg" "func2")) nil [84067 84337])
            ("calc-plus" function (:arguments ("arg")) nil [84340 84456])
            ("calc-minus" function (:arguments ("arg")) nil [84458 84576])
            ("calc-times" function (:arguments ("arg")) nil [84578 84695])
            ("calc-divide" function (:arguments ("arg")) nil [84697 84825])
            ("calc-left-divide" function (:arguments ("arg")) nil [84827 84955])
            ("calc-change-sign" function (:arguments ("arg")) nil [84957 85058])
            ("calc-enter" function (:arguments ("n")) nil [85094 85627])
            ("calc-pop" function (:arguments ("n")) nil [85629 86905])
            ("calc-digit-start-entry" function nil nil [86955 87306])
            ("calc-buffer" variable nil nil [87308 87328])
            ("calc-prev-char" variable nil nil [87329 87352])
            ("calc-prev-prev-char" variable nil nil [87353 87381])
            ("calc-digit-value" variable nil nil [87382 87407])
            ("calcDigit-start" function nil nil [87408 88654])
            ("calc-minibuffer-size" function nil nil [88656 88732])
            ("calcDigit-nondigit" function nil nil [88734 89443])
            ("calc-minibuffer-contains" function (:arguments ("rex")) nil [89446 89564])
            ("calcDigit-key" function nil nil [89566 93560])
            ("calcDigit-backspace" function nil nil [93563 94038])
            ("math-bignum-digit-length" variable
               (:constant-flag t
                :default-value (truncate (/ (log (/ most-positive-fixnum 2) 10) 2)))
                nil [94043 94386])
            ("math-bignum-digit-size" variable
               (:constant-flag t
                :default-value (expt 10 math-bignum-digit-length))
                nil [94388 94525])
            ("math-small-integer-size" variable
               (:constant-flag t
                :default-value (expt math-bignum-digit-size 2))
                nil [94527 94658])
            ("math-eval-rules-cache" variable nil nil [98965 98995])
            ("math-eval-rules-cache-other" variable nil nil [98996 99032])
            ("math-normalize-a" variable nil nil [99108 99133])
            ("math-normalize-error" variable nil nil [99134 99236])
            ("math-normalize" function (:arguments ("math-normalize-a")) nil [99238 104562])
            ("math-floatp" function (:arguments ("a")) nil [104639 104920])
            ("math-check-complete" function (:arguments ("a")) nil [104992 105172])
            ("math-bignum" function (:arguments ("a")) nil [105219 105639])
            ("math-bignum-big" function (:arguments ("a")) nil [105641 105800])
            ("math-make-float" function (:arguments ("mant" "exp")) nil [105857 106751])
            ("math-div10-bignum" function (:arguments ("a")) nil [106753 106992])
            ("math-float" function (:arguments ("a")) nil [107043 107333])
            ("math-neg" function (:arguments ("a")) nil [107336 107691])
            ("math-numdigs" function (:arguments ("a")) nil [107756 108114])
            ("math-scale-int" function (:arguments ("a" "n")) nil [108188 108319])
            ("math-scale-left" function (:arguments ("a" "n")) nil [108321 108940])
            ("math-scale-left-bignum" function (:arguments ("a" "n")) nil [108942 109207])
            ("math-scale-right" function (:arguments ("a" "n")) nil [109209 109684])
            ("math-scale-right-bignum" function (:arguments ("a" "n")) nil [109686 109978])
            ("math-scale-rounding" function (:arguments ("a" "n")) nil [110042 111021])
            ("math-add" function (:arguments ("a" "b")) nil [111074 112711])
            ("math-add-bignum" function (:arguments ("a" "b")) nil [112713 113581])
            ("math-sub-bignum" function (:arguments ("a" "b")) nil [113583 114439])
            ("math-add-float" function (:arguments ("a" "b")) nil [114441 114945])
            ("math-sub" function (:arguments ("a" "b")) nil [115004 115216])
            ("math-sub-float" function (:arguments ("a" "b")) nil [115218 115768])
            ("math-mul" function (:arguments ("a" "b")) nil [115825 117361])
            ("math-infinitep" function (:arguments ("a" "undir")) nil [117363 117737])
            ("math-mul-bignum" function (:arguments ("a" "b")) nil [117789 118597])
            ("math-mul-bignum-digit" function (:arguments ("a" "d" "c")) nil [118657 119148])
            ("math-idivmod" function (:arguments ("a" "b")) nil [119366 119970])
            ("math-quotient" function (:arguments ("a" "b")) nil [119972 120779])
            ("math-div-bignum" function (:arguments ("a" "b")) nil [120916 121382])
            ("math-div-bignum-digit" function (:arguments ("a" "b")) nil [121438 121662])
            ("math-div-bignum-big" function (:arguments ("a" "b" "alen" "blen")) nil [121664 121973])
            ("math-div-bignum-part" function (:arguments ("a" "b" "blen")) nil [121975 122320])
            ("math-div-bignum-try" function (:arguments ("a" "b" "c" "guess")) nil [122322 122523])
            ("math-div" function (:arguments ("a" "b")) nil [122581 123632])
            ("math-div-float" function (:arguments ("a" "b")) nil [123634 123919])
            ("calc-selection-cache-entry" variable nil nil [123924 123959])
            ("math-format-stack-value" function (:arguments ("entry")) nil [124018 125846])
            ("math-svo-c" variable nil nil [126014 126033])
            ("math-svo-wid" variable nil nil [126034 126055])
            ("math-svo-off" variable nil nil [126056 126077])
            ("math-stack-value-offset" function (:arguments ("math-svo-c")) nil [126079 126536])
            ("calc-count-lines" function (:arguments ("s")) nil [126538 126694])
            ("math-format-value" function (:arguments ("a" "w")) nil [126696 126962])
            ("calc-window-width" function nil nil [126964 127230])
            ("math-comp-concat" function (:arguments ("c1" "c2")) nil [127232 127348])
            ("math-format-flat-expr" function (:arguments ("a" "prec")) nil [127424 127981])
            ("math-half-2-word-size" variable nil nil [128018 128048])
            ("math-format-number" function (:arguments ("a" "prec")) nil [128049 132326])
            ("math-format-bignum" function (:arguments ("a")) nil [132328 132557])
            ("math-format-bignum-decimal" function (:arguments ("a")) nil [132559 133051])
            ("math-read-number" function (:arguments ("s" "decimal")) nil [133114 135538])
            ("math-read-number-simple" function (:arguments ("s")) nil [135592 136626])
            ("math-match-substring" function (:arguments ("s" "n")) nil [136628 136750])
            ("math-read-bignum" function (:arguments ("s")) nil [136752 137013])
            ("math-standard-opers" variable
               (:constant-flag t
                :default-value (quote (("_" calcFunc-subscr 1200 1201) ("%" calcFunc-percent 1100 -1) ("u!" calcFunc-lnot -1 1000) ("mod" mod 400 400 185) ("+/-" sdev 300 300 185) ("!!" calcFunc-dfact 210 -1) ("!" calcFunc-fact 210 -1) ("^" ^ 201 200) ("**" ^ 201 200) ("u+" ident -1 197) ("u-" neg -1 197) ("/" / 190 191) ("%" % 190 191) ("\\" calcFunc-idiv 190 191) ("+" + 180 181) ("-" - 180 181) ("|" | 170 171) ("<" calcFunc-lt 160 161) (">" calcFunc-gt 160 161) ("<=" calcFunc-leq 160 161) (">=" calcFunc-geq 160 161) ("=" calcFunc-eq 160 161) ("==" calcFunc-eq 160 161) ("!=" calcFunc-neq 160 161) ("&&" calcFunc-land 110 111) ("||" calcFunc-lor 100 101) ("?" (math-read-if) 91 90) ("!!!" calcFunc-pnot -1 85) ("&&&" calcFunc-pand 80 81) ("|||" calcFunc-por 75 76) (":=" calcFunc-assign 51 50) ("::" calcFunc-condition 45 46) ("=>" calcFunc-evalto 40 41) ("=>" calcFunc-evalto 40 -1))))
                nil [137015 138352])
            ("math-standard-ops" function nil nil [138354 138694])
            ("math-expr-opers" variable (:default-value (math-standard-ops)) nil [138696 138740])
            ("math-standard-ops-p" function nil nil [138742 138862])
            ("math-expr-ops" function nil nil [138864 138963])
            ("calc-grab-region" function
               (:user-visible-flag t
                :arguments ("top" "bot" "arg"))
                nil [138980 139180])
            ("calc-grab-rectangle" function
               (:user-visible-flag t
                :arguments ("top" "bot" "arg"))
                nil [139197 139404])
            ("calc-grab-sum-down" function
               (:user-visible-flag t
                :arguments ("top" "bot" "arg"))
                nil [139406 139614])
            ("calc-grab-sum-across" function
               (:user-visible-flag t
                :arguments ("top" "bot" "arg"))
                nil [139616 139823])
            ("calc-embedded" function
               (:user-visible-flag t
                :arguments ("arg" "end" "obeg" "oend"))
                nil [139841 140036])
            ("calc-embedded-activate" function
               (:user-visible-flag t
                :arguments ("arg" "cbuf"))
                nil [140053 140298])
            ("calc-user-invocation" function nil nil [140300 140501])
            ("defmath" function (:arguments ("func" "args" "body")) nil [140545 141034])
            ("calc-read-key" function (:arguments ("optkey")) nil [141083 141376])
            ("calc-unread-command" function (:arguments ("input")) nil [141378 141637])
            ("calc-clear-unread-commands" function nil nil [141639 141777])
            ("defcalcmodevar" code nil nil [141779 141895])
            ("defcalcmodevar" code nil nil [141897 142030])
            ("when" code nil nil [142032 142113])
            ("run-hooks" code nil nil [142116 142143])
            ("calc" package nil nil [142145 142160]))          
      :file "calc.el.gz"
      :pointmax 142184
      :fsize 36655
      :lastmodtime '(23624 29139 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [924 943])
            ("calc-macs" include nil nil [944 964])
            ("calc-alg" include nil nil [986 1005])
            ("math-standard-units" variable (:default-value (quote ((m nil "*Meter") (in "254*10^(-2) cm" "Inch" nil "2.54 cm") (ft "12 in" "Foot") (yd "3 ft" "Yard") (mi "5280 ft" "Mile") (au "149597870691. m" "Astronomical Unit" nil "149597870691 m (*)") (lyr "c yr" "Light Year") (pc "3.0856775854*10^16 m" "Parsec  (**)" nil "3.0856775854 10^16 m (*)") (nmi "1852 m" "Nautical Mile") (fath "6 ft" "Fathom") (fur "660 ft" "Furlong") (mu "1 um" "Micron") (mil "(1/1000) in" "Mil") (point "(1/72) in" "Point  (PostScript convention)") (Ang "10^(-10) m" "Angstrom") (mfi "mi+ft+in" "Miles + feet + inches") (texpt "(100/7227) in" "Point  (TeX convention) (**)") (texpc "12 texpt" "Pica  (TeX convention) (**)") (texbp "point" "Big point  (TeX convention) (**)") (texdd "(1238/1157) texpt" "Didot point  (TeX convention) (**)") (texcc "12 texdd" "Cicero  (TeX convention) (**)") (texsp "(1/65536) texpt" "Scaled TeX point (TeX convention) (**)") (hect "10000 m^2" "*Hectare") (a "100 m^2" "Are") (acre "(1/640) mi^2" "Acre") (b "10^(-28) m^2" "Barn") (L "10^(-3) m^3" "*Liter") (l "L" "Liter") (gal "4 qt" "US Gallon") (qt "2 pt" "Quart") (pt "2 cup" "Pint (**)") (cup "8 ozfl" "Cup") (ozfl "2 tbsp" "Fluid Ounce") (floz "2 tbsp" "Fluid Ounce") (tbsp "3 tsp" "Tablespoon") (tsp "492892159375*10^(-11) ml" "Teaspoon" nil "4.92892159375 ml") (vol "tsp+tbsp+ozfl+cup+pt+qt+gal" "Gallons + ... + teaspoons" nil "tsp+tbsp+ozfl+cup+pt+qt+gal") (galC "galUK" "Canadian Gallon") (galUK "454609*10^(-5) L" "UK Gallon" nil "4.54609 L") (s nil "*Second") (sec "s" "Second") (min "60 s" "Minute") (hr "60 min" "Hour") (day "24 hr" "Day") (wk "7 day" "Week") (hms "wk+day+hr+min+s" "Hours, minutes, seconds") (yr "36525*10^(-2) day" "Year (Julian)" nil "365.25 day") (Hz "1/s" "Hertz") (mph "mi/hr" "*Miles per hour") (kph "km/hr" "Kilometers per hour") (knot "nmi/hr" "Knot") (c "299792458 m/s" "Speed of light") (ga "980665*10^(-5) m/s^2" "*\"g\" acceleration" nil "9.80665 m / s^2") (g nil "*Gram") (lb "16 oz" "Pound (mass)") (oz "28349523125*10^(-9) g" "Ounce (mass)" nil "28.349523125 g") (ton "2000 lb" "Ton") (tpo "ton+lb+oz" "Tons + pounds + ounces (mass)") (t "1000 kg" "Metric ton") (tonUK "10160469088*10^(-7) kg" "UK ton" nil "1016.0469088 kg") (lbt "12 ozt" "Troy pound") (ozt "311034768*10^(-7) g" "Troy ounce" nil "31.10347680 g") (ct "(2/10) g" "Carat" nil "0.2 g") (u "1.660539040*10^(-27) kg" "Unified atomic mass" nil "1.660539040 10^-27 kg (*)") (N "m kg/s^2" "*Newton") (dyn "10^(-5) N" "Dyne") (gf "ga g" "Gram (force)") (lbf "ga lb" "Pound (force)") (kip "1000 lbf" "Kilopound (force)") (pdl "138254954376*10^(-12) N" "Poundal" nil "0.138254954376 N") (J "N m" "*Joule") (erg "10^(-7) J" "Erg") (cal "41868*10^(-4) J" "International Table Calorie" nil "4.1868 J") (calth "4184*10^(-3) J" "Thermochemical Calorie" nil "4.184 J") (Cal "1000 cal" "Large Calorie") (Btu "105505585262*10^(-8) J" "International Table Btu" nil "1055.05585262 J") (eV "ech V" "Electron volt") (ev "eV" "Electron volt") (therm "105506000 J" "EEC therm") (invcm "h c/cm" "Energy in inverse centimeters") (Kayser "invcm" "Kayser (inverse centimeter energy)") (men "100/invcm" "Inverse energy in meters") (Hzen "h Hz" "Energy in Hertz") (Ken "k K" "Energy in Kelvins") (Wh "W hr" "Watt hour") (Ws "W s" "Watt second") (W "J/s" "*Watt") (hp "550 ft lbf/s" "Horsepower") (hpm "75 m kgf/s" "Metric Horsepower") (K nil "*Degree Kelvin" K) (dK "K" "Degree Kelvin" K) (degK "K" "Degree Kelvin" K) (dC "K" "Degree Celsius" C) (degC "K" "Degree Celsius" C) (dF "(5/9) K" "Degree Fahrenheit" F) (degF "(5/9) K" "Degree Fahrenheit" F) (Pa "N/m^2" "*Pascal") (bar "10^5 Pa" "Bar") (atm "101325 Pa" "Standard atmosphere") (Torr "(1/760) atm" "Torr") (mHg "1000 Torr" "Meter of mercury") (inHg "254*10^(-1) mmHg" "Inch of mercury" nil "25.4 mmHg") (inH2O "2.490889*10^2 Pa" "Inch of water" nil "2.490889 10^2 Pa (*)") (psi "lbf/in^2" "Pounds per square inch") (P "(1/10) Pa s" "*Poise") (St "10^(-4) m^2/s" "Stokes") (A nil "*Ampere") (C "A s" "Coulomb") (Fdy "ech Nav" "Faraday") (e "ech" "Elementary charge") (ech "1.602176634*10^(-19) C" "Elementary charge" nil "1.602176634 10^-19 C") (V "W/A" "Volt") (ohm "V/A" "Ohm") (Ω "ohm" "Ohm") (mho "A/V" "Mho") (S "A/V" "Siemens") (F "C/V" "Farad") (H "Wb/A" "Henry") (T "Wb/m^2" "Tesla") (Gs "10^(-4) T" "Gauss") (Wb "V s" "Weber") (cd nil "*Candela") (sb "10000 cd/m^2" "Stilb") (lm "cd sr" "Lumen") (lx "lm/m^2" "Lux") (ph "10000 lx" "Phot") (fc "lm/ft^2" "Footcandle") (lam "10000 lm/m^2" "Lambert") (flam "(1/pi) cd/ft^2" "Footlambert") (Bq "1/s" "*Becquerel") (Ci "37*10^9 Bq" "Curie") (Gy "J/kg" "Gray") (Sv "Gy" "Sievert") (R "258*10^(-6) C/kg" "Roentgen") (rd "(1/100) Gy" "Rad") (rem "rd" "Rem") (mol nil "*Mole") (rad nil "*Radian") (circ "2 pi rad" "Full circle") (rev "circ" "Full revolution") (deg "circ/360" "Degree") (arcmin "deg/60" "Arc minute") (arcsec "arcmin/60" "Arc second") (grad "circ/400" "Grade") (rpm "rev/min" "Revolutions per minute") (sr nil "*Steradian") (h "6.62607015*10^(-34) J s" "*Planck's constant" nil "6.62607015 10^-34 J s") (hbar "h / (2 pi)" "Planck's constant") (eps0 "ech^2 / (2 alpha h c)" "Permittivity of vacuum") (ε0 "eps0" "Permittivity of vacuum") (mu0 "1 / (eps0 c^2)" "Permeability of vacuum") (μ0 "mu0" "Permeability of vacuum") (G "6.67408*10^(-11) m^3/(kg s^2)" "Gravitational constant" nil "6.67408 10^-11 m^3/(kg s^2) (*)") (Nav "6.02214076*10^(23) / mol" "Avogadro's constant" nil "6.02214076 10^23 / mol") (me "9.10938356*10^(-31) kg" "Electron rest mass" nil "9.10938356 10^-31 kg (*)") (mp "1.672621898*10^(-27) kg" "Proton rest mass" nil "1.672621898 10^-27 kg (*)") (mn "1.674927471*10^(-27) kg" "Neutron rest mass" nil "1.674927471 10^-27 kg (*)") (mmu "1.883531594*10^(-28) kg" "Muon rest mass" nil "1.883531594 10^-28 kg (*)") (mμ "mmu" "Muon rest mass" nil "1.883531594 10^-28 kg (*)") (Ryd "10973731.568508 /m" "Rydberg's constant" nil "10973731.568508 /m (*)") (k "1.380649*10^(-23) J/K" "Boltzmann's constant" nil "1.380649 10^-23 J/K") (sigma "2 pi^5 k^4 / (15 h^3 c^2)" "Stefan-Boltzmann constant") (σ "sigma" "Stefan-Boltzmann constant") (alpha "7.2973525664*10^(-3)" "Fine structure constant" nil "7.2973525664 10^-3 (*)") (α "alpha" "Fine structure constant" nil "7.2973525664 10^-3 (*)") (muB "927.4009994*10^(-26) J/T" "Bohr magneton" nil "927.4009994 10^-26 J/T (*)") (muN "5.050783699*10^(-27) J/T" "Nuclear magneton" nil "5.050783699 10^-27 J/T (*)") (mue "-928.4764620*10^(-26) J/T" "Electron magnetic moment" nil "-928.4764620 10^-26 J/T (*)") (mup "1.4106067873*10^(-26) J/T" "Proton magnetic moment" nil "1.4106067873 10^-26 J/T (*)") (R0 "Nav k" "Molar gas constant") (V0 "22.710947*10^(-3) m^3/mol" "Standard volume of ideal gas" nil "22.710947 10^-3 m^3/mol (*)") (Np nil "*Neper") (dB "(ln(10)/20) Np" "decibel")))) nil [1779 14141])
            ("math-additional-units" variable nil nil [14144 14393])
            ("math-unit-prefixes" variable (:default-value (quote ((89 (^ 10 24) "Yotta") (90 (^ 10 21) "Zetta") (69 (^ 10 18) "Exa") (80 (^ 10 15) "Peta") (84 (^ 10 12) "Tera") (71 (^ 10 9) "Giga") (77 (^ 10 6) "Mega") (107 (^ 10 3) "Kilo") (75 (^ 10 3) "Kilo") (104 (^ 10 2) "Hecto") (72 (^ 10 2) "Hecto") (68 (^ 10 1) "Deka") (0 (^ 10 0) nil) (100 (^ 10 -1) "Deci") (99 (^ 10 -2) "Centi") (109 (^ 10 -3) "Milli") (117 (^ 10 -6) "Micro") (956 (^ 10 -6) "Micro") (110 (^ 10 -9) "Nano") (112 (^ 10 -12) "Pico") (102 (^ 10 -15) "Femto") (97 (^ 10 -18) "Atto") (122 (^ 10 -21) "zepto") (121 (^ 10 -24) "yocto")))) nil [14395 15215])
            ("math-standard-units-systems" variable (:default-value (quote ((base nil) (si ((g (quote (/ (var kg var-kg) 1000))))) (mks ((g (quote (/ (var kg var-kg) 1000))))) (cgs ((m (quote (* (var cm var-cm) 100)))))))) nil [15217 15432])
            ("math-units-table" variable nil nil [15434 15612])
            ("math-units-table-buffer-valid" variable nil nil [15614 15656])
            ("calc-base-units" function nil nil [15679 15896])
            ("calc-ensure-consistent-units" variable nil nil [15898 15935])
            ("calc-quick-units" function nil nil [15937 16795])
            ("math-get-standard-units" function (:arguments ("expr")) nil [16797 16960])
            ("math-get-units" function (:arguments ("expr")) nil [16962 17074])
            ("math-make-unit-string" function (:arguments ("expr")) nil [17076 17382])
            ("math-default-units-table" variable (:default-value (make-hash-table :test (quote equal))) nil [17384 17498])
            ("math-get-default-units" function (:arguments ("expr")) nil [17500 17970])
            ("math-put-default-units" function (:arguments ("expr" "comp" "std")) nil [17972 18839])
            ("calc-allow-units-as-numbers" variable (:default-value t) nil [18841 18879])
            ("calc-convert-units" function (:arguments ("old-units" "new-units")) nil [18881 22071])
            ("calc-convert-exact-units" function nil nil [22073 23351])
            ("calc-autorange-units" function (:arguments ("arg")) nil [23353 23600])
            ("calc-convert-temperature" function (:arguments ("old-units" "new-units")) nil [23602 25800])
            ("calc-remove-units" function nil nil [25802 25961])
            ("calc-extract-units" function nil nil [25963 26124])
            ("calc-num-units" variable nil nil [26295 26318])
            ("calc-den-units" variable nil nil [26319 26342])
            ("calc-explain-units" function nil nil [26344 26882])
            ("calc-explain-units-rec" function (:arguments ("expr" "pow")) nil [26884 29007])
            ("calc-simplify-units" function nil nil [29009 29185])
            ("calc-view-units-table" function (:arguments ("n")) nil [29187 29628])
            ("calc-enter-units-table" function (:arguments ("n")) nil [29630 29858])
            ("calc-define-unit" function (:arguments ("uname" "desc" "disp")) nil [29860 30635])
            ("calc-undefine-unit" function (:arguments ("uname")) nil [30637 31063])
            ("calc-invalidate-units-table" function nil nil [31065 31381])
            ("calc-get-unit-definition" function (:arguments ("uname")) nil [31383 32061])
            ("calc-permanent-units" function nil nil [32063 33371])
            ("math-cu-unit-list" variable nil nil [33685 33711])
            ("math-build-units-table" function nil nil [33713 34659])
            ("math-fbu-base" variable nil nil [34835 34857])
            ("math-fbu-entry" variable nil nil [34858 34881])
            ("math-find-base-units" function (:arguments ("math-fbu-entry")) nil [34883 35644])
            ("math-compare-unit-names" function (:arguments ("a" "b")) nil [35646 35739])
            ("math-find-base-units-rec" function (:arguments ("expr" "pow")) nil [35741 36983])
            ("math-units-in-expr-p" function (:arguments ("expr" "sub-exprs")) nil [36986 37360])
            ("math-only-units-in-expr-p" function (:arguments ("expr")) nil [37362 37729])
            ("math-single-units-in-expr-p" function (:arguments ("expr")) nil [37731 38258])
            ("math-consistent-units-p" function (:arguments ("expr" "newunits")) nil [38260 38557])
            ("math-check-unit-consistency" function (:arguments ("expr" "units")) nil [38559 38882])
            ("math-check-unit-name" function (:arguments ("v")) nil [38884 39384])
            ("math-which-standard" variable nil nil [39544 39572])
            ("math-to-standard-units" function (:arguments ("expr" "math-which-standard")) nil [39574 39661])
            ("math-to-standard-rec" function (:arguments ("expr")) nil [39663 40540])
            ("math-apply-units" function (:arguments ("expr" "units" "ulist" "pure")) nil [40542 41228])
            ("math-decompose-units-cache" variable nil nil [41230 41269])
            ("math-decompose-units" function (:arguments ("units")) nil [41270 42258])
            ("math-decompose-unit-part" function (:arguments ("unit")) nil [42260 42402])
            ("math-fcu-u" variable nil nil [42562 42581])
            ("math-find-compatible-unit" function (:arguments ("expr" "unit")) nil [42583 42739])
            ("math-find-compatible-unit-rec" function (:arguments ("expr" "pow")) nil [42741 43408])
            ("math-cu-new-units" variable nil nil [43580 43606])
            ("math-cu-pure" variable nil nil [43607 43628])
            ("math-convert-units" function (:arguments ("expr" "math-cu-new-units" "math-cu-pure")) nil [43630 44942])
            ("math-convert-units-rec" function (:arguments ("expr")) nil [44944 45290])
            ("math-convert-temperature" function (:arguments ("expr" "old" "new" "pure")) nil [45292 46507])
            ("math-simplify-units" function (:arguments ("a")) nil [46511 46629])
            ("defalias" code nil nil [46630 46681])
            ("math-simplify-expr" variable nil nil [46816 46843])
            ("math-defsimplify" code nil nil [46845 47478])
            ("math-defsimplify" code nil nil [47480 47529])
            ("math-simplify-units-prod" function nil nil [47531 49479])
            ("math-try-cancel-units" variable nil nil [49481 49511])
            ("math-defsimplify" code nil nil [49513 50570])
            ("math-simplify-units-divisor" function (:arguments ("np" "dp")) nil [50572 50953])
            ("math-simplify-units-quotient" function (:arguments ("n" "d")) nil [51017 52005])
            ("math-defsimplify" code nil nil [52007 52525])
            ("math-defsimplify" code nil nil [52527 52885])
            ("math-defsimplify" code nil nil [52887 53790])
            ("math-simplify-units-pow" function (:arguments ("a" "pow")) nil [53792 54210])
            ("math-units-are-multiple" function (:arguments ("u" "n")) nil [54213 54347])
            ("math-defsimplify" code nil nil [54349 54812])
            ("math-defsimplify" code nil nil [54814 55277])
            ("math-defsimplify" code nil nil [55279 55742])
            ("math-defsimplify" code nil nil [55744 56207])
            ("math-defsimplify" code nil nil [56209 56672])
            ("math-defsimplify" code nil nil [56674 57137])
            ("math-remove-units" function (:arguments ("expr")) nil [57140 57316])
            ("math-extract-units" function (:arguments ("expr")) nil [57318 57673])
            ("math-build-units-table-buffer" function (:arguments ("enter-buffer")) nil [57675 61542])
            ("math-logunits" variable (:default-value (quote ((var dB var-dB) (var Np var-Np)))) nil [61577 61658])
            ("math-conditional-apply" function (:arguments ("fn" "args")) nil [61660 61864])
            ("math-conditional-pow" function (:arguments ("a" "b")) nil [61866 62050])
            ("math-extract-logunits" function (:arguments ("expr")) nil [62052 62348])
            ("math-logunits-add" function (:arguments ("a" "b" "neg" "power")) nil [62350 64359])
            ("calcFunc-lufadd" function (:arguments ("a" "b")) nil [64361 64424])
            ("calcFunc-lupadd" function (:arguments ("a" "b")) nil [64426 64487])
            ("calcFunc-lufsub" function (:arguments ("a" "b")) nil [64489 64550])
            ("calcFunc-lupsub" function (:arguments ("a" "b")) nil [64552 64611])
            ("calc-lu-plus" function (:arguments ("arg")) nil [64613 64983])
            ("calc-lu-minus" function (:arguments ("arg")) nil [64985 65356])
            ("math-logunits-mul" function (:arguments ("a" "b" "power")) nil [65358 66583])
            ("math-logunits-divide" function (:arguments ("a" "b" "power")) nil [66585 67489])
            ("calcFunc-lufmul" function (:arguments ("a" "b")) nil [67491 67550])
            ("calcFunc-lupmul" function (:arguments ("a" "b")) nil [67552 67609])
            ("calc-lu-times" function (:arguments ("arg")) nil [67611 67982])
            ("calcFunc-lufdiv" function (:arguments ("a" "b")) nil [67984 68046])
            ("calcFunc-lupdiv" function (:arguments ("a" "b")) nil [68048 68108])
            ("calc-lu-divide" function (:arguments ("arg")) nil [68110 68482])
            ("math-logunits-quant" function (:arguments ("val" "ref" "power")) nil [68484 69300])
            ("calc-lu-field-reference" variable nil nil [69302 69334])
            ("calc-lu-power-reference" variable nil nil [69335 69367])
            ("calcFunc-lufquant" function (:arguments ("val" "ref")) nil [69369 69521])
            ("calcFunc-lupquant" function (:arguments ("val" "ref")) nil [69523 69673])
            ("calc-lu-quant" function (:arguments ("arg")) nil [69675 70051])
            ("math-logunits-level" function (:arguments ("val" "ref" "db" "power")) nil [70053 70703])
            ("calcFunc-dbfield" function (:arguments ("val" "ref")) nil [70705 70858])
            ("calcFunc-dbpower" function (:arguments ("val" "ref")) nil [70860 71011])
            ("calcFunc-npfield" function (:arguments ("val" "ref")) nil [71013 71168])
            ("calcFunc-nppower" function (:arguments ("val" "ref")) nil [71170 71323])
            ("calc-db" function (:arguments ("arg")) nil [71325 71691])
            ("calc-np" function (:arguments ("arg")) nil [71693 72059])
            ("calc-note-threshold" variable nil nil [72081 72109])
            ("math-midi-round" function (:arguments ("num")) nil [72111 72443])
            ("math-notes" variable
               (:constant-flag t
                :default-value (quote (((var C var-C) . 0) ((var Csharp var-Csharp) . 1) ((var Dflat var-Dflat) . 1) ((var D var-D) . 2) ((var Dsharp var-Dsharp) . 3) ((var E var-E) . 4) ((var F var-F) . 5) ((var Fsharp var-Fsharp) . 6) ((var Gflat var-Gflat) . 6) ((var G var-G) . 7) ((var Gsharp var-Gsharp) . 8) ((var A var-A) . 9) ((var Asharp var-Asharp) . 10) ((var Bflat var-Bflat) . 10) ((var B var-B) . 11))))
                nil [72445 73184])
            ("math-freqp" function (:arguments ("freq")) nil [73186 73447])
            ("math-midip" function (:arguments ("num")) nil [73449 73578])
            ("math-spnp" function (:arguments ("spn")) nil [73580 74729])
            ("math-freq-to-midi" function (:arguments ("freq")) nil [74731 75026])
            ("math-spn-to-midi" function (:arguments ("spn")) nil [75028 75405])
            ("math-midi-to-spn" function (:arguments ("midi")) nil [75407 76438])
            ("math-freq-to-spn" function (:arguments ("freq")) nil [76440 76613])
            ("math-midi-to-freq" function (:arguments ("midi")) nil [76615 76897])
            ("math-spn-to-freq" function (:arguments ("spn")) nil [76899 77047])
            ("calcFunc-spn" function (:arguments ("expr")) nil [77049 77425])
            ("calcFunc-midi" function (:arguments ("expr")) nil [77427 77754])
            ("calcFunc-freq" function (:arguments ("expr")) nil [77756 78089])
            ("calc-freq" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78091 78272])
            ("calc-midi" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78274 78457])
            ("calc-spn" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78459 78653])
            ("calc-units" package nil nil [78656 78677]))          
      :file "calc-units.el.gz"
      :pointmax 78707
      :fsize 17675
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1005 . 1006) (symbol 966 . 983) (open-paren 965 . 966)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [917 936])
            ("calc-macs" include nil nil [937 957])
            ("math-rewrite-default-iters" variable (:default-value 100) nil [959 998])
            ("calc-rewr-sel" variable nil nil [1131 1153])
            ("calc-rewrite-selection" function (:arguments ("rules-str" "many" "prefix")) nil [1155 3280])
            ("calc-locate-select-marker" function (:arguments ("expr")) nil [3282 3591])
            ("calc-rewrite" function (:arguments ("rules-str" "many")) nil [3595 4942])
            ("calc-match" function (:arguments ("pat" "interactive")) nil [4944 5687])
            ("math-mt-many" variable nil nil [5690 5711])
            ("math-rewrite-whole-expr" variable nil nil [5816 5848])
            ("math-rewrite" function (:arguments ("math-rewrite-whole-expr" "rules" "math-mt-many")) nil [5850 7898])
            ("math-rewrite-phase" function (:arguments ("sched")) nil [7900 8951])
            ("calcFunc-rewrite" function (:arguments ("expr" "rules" "many")) nil [8953 9269])
            ("calcFunc-match" function (:arguments ("pat" "vec")) nil [9271 9469])
            ("calcFunc-matchnot" function (:arguments ("pat" "vec")) nil [9471 9670])
            ("math-match-patterns" function (:arguments ("pat" "vec" "not-flag")) nil [9672 9974])
            ("calcFunc-matches" function (:arguments ("expr" "pat")) nil [9976 10154])
            ("calcFunc-vmatches" function (:arguments ("expr" "pat")) nil [10156 10332])
            ("math-compile-patterns" function (:arguments ("pats")) nil [17847 18541])
            ("math-rewrite-whole" variable nil nil [18543 18574])
            ("math-make-import-list" variable nil nil [18575 18609])
            ("math-import-list" variable nil nil [18840 18869])
            ("math-regs" variable nil nil [19174 19192])
            ("math-num-regs" variable nil nil [19193 19215])
            ("math-prog-last" variable nil nil [19216 19239])
            ("math-bound-vars" variable nil nil [19240 19264])
            ("math-conds" variable nil nil [19265 19284])
            ("math-copy-neg" variable nil nil [19285 19307])
            ("math-rhs" variable nil nil [19308 19325])
            ("math-pattern" variable nil nil [19326 19347])
            ("math-remembering" variable nil nil [19348 19373])
            ("math-aliased-vars" variable nil nil [19374 19400])
            ("math-compile-rewrites" function (:arguments ("rules" "name")) nil [19402 27135])
            ("math-flatten-lands" function (:arguments ("expr")) nil [27137 27319])
            ("math-rewrite-heads-heads" variable nil nil [27572 27605])
            ("math-rewrite-heads-skips" variable nil nil [27606 27639])
            ("math-rewrite-heads-blanks" variable nil nil [27640 27674])
            ("math-rewrite-heads" function (:arguments ("expr" "more" "all")) nil [27676 28157])
            ("math-rewrite-heads-rec" function (:arguments ("expr")) nil [28159 28605])
            ("math-parse-schedule" function (:arguments ("sched")) nil [28607 28901])
            ("math-rwcomp-match-vars" function (:arguments ("expr")) nil [28903 29537])
            ("math-rwcomp-register-expr" function (:arguments ("num")) nil [29539 29761])
            ("math-rwcomp-subst-new" variable nil nil [30012 30042])
            ("math-rwcomp-subst-old" variable nil nil [30043 30073])
            ("math-rwcomp-subst-new-func" variable nil nil [30074 30109])
            ("math-rwcomp-subst-old-func" variable nil nil [30110 30145])
            ("math-rwcomp-substitute" function (:arguments ("expr" "math-rwcomp-subst-old" "math-rwcomp-subst-new")) nil [30147 30628])
            ("math-rwcomp-subst-rec" function (:arguments ("expr")) nil [30630 31053])
            ("math-rwcomp-tracing" variable nil nil [31055 31087])
            ("math-rwcomp-trace" function (:arguments ("instr")) nil [31089 31186])
            ("math-rwcomp-instr" function (:arguments ("instr")) nil [31188 31311])
            ("math-rwcomp-multi-instr" function (:arguments ("tail" "instr")) nil [31313 31461])
            ("math-rwcomp-bind-var" function (:arguments ("reg" "var")) nil [31463 31642])
            ("math-rwcomp-unbind-vars" function (:arguments ("mark")) nil [31644 31829])
            ("math-rwcomp-do-conditions" function nil nil [31831 32128])
            ("math-rwcomp-cond-instr" function (:arguments ("expr")) nil [32130 34666])
            ("math-rwcomp-same-instr" function (:arguments ("reg1" "reg2" "neg")) nil [34668 34888])
            ("math-rwcomp-copy-instr" function (:arguments ("reg1" "reg2" "neg")) nil [34890 35148])
            ("math-rwcomp-reg" function nil nil [35150 35311])
            ("math-rwcomp-reg-entry" function (:arguments ("num")) nil [35313 35393])
            ("math-rwcomp-pattern" function (:arguments ("expr" "part" "not-direct")) nil [35396 43935])
            ("math-rwcomp-best-reg" function (:arguments ("x")) nil [43937 44249])
            ("math-rwcomp-all-regs-done" function (:arguments ("expr")) nil [44251 44878])
            ("math-rwcomp-no-vars" function (:arguments ("expr")) nil [44880 45341])
            ("math-rwcomp-is-algebraic" function (:arguments ("expr")) nil [45343 45687])
            ("math-rwcomp-is-constrained" function (:arguments ("expr" "not-these")) nil [45689 46157])
            ("math-rwcomp-optional-arg" function (:arguments ("head" "argp")) nil [46159 46826])
            ("math-rwcomp-neg" function (:arguments ("expr")) nil [46828 47139])
            ("math-rwcomp-assoc-args" function (:arguments ("expr")) nil [47141 47436])
            ("math-rwcomp-addsub-args" function (:arguments ("expr")) nil [47438 47682])
            ("math-rwcomp-order" function (:arguments ("a" "b")) nil [47684 47788])
            ("math-rwcomp-priority" function (:arguments ("expr")) nil [48159 48686])
            ("math-rwcomp-count-refs" function (:arguments ("var")) nil [48688 49271])
            ("math-rwcomp-count-pnots" function (:arguments ("expr")) nil [49273 49515])
            ("put" code nil nil [49607 49667])
            ("put" code nil nil [49668 49728])
            ("put" code nil nil [49741 49801])
            ("put" code nil nil [49814 49868])
            ("put" code nil nil [49869 49923])
            ("put" code nil nil [49924 49971])
            ("put" code nil nil [49972 50020])
            ("put" code nil nil [50021 50075])
            ("put" code nil nil [50076 50130])
            ("put" code nil nil [50131 50185])
            ("put" code nil nil [50186 50240])
            ("put" code nil nil [50241 50296])
            ("put" code nil nil [50297 50352])
            ("put" code nil nil [50353 50407])
            ("put" code nil nil [50408 50462])
            ("put" code nil nil [50463 50517])
            ("put" code nil nil [50518 50572])
            ("put" code nil nil [50573 50627])
            ("put" code nil nil [50628 50682])
            ("put" code nil nil [50683 50737])
            ("put" code nil nil [50738 50795])
            ("put" code nil nil [50796 50853])
            ("put" code nil nil [50854 50911])
            ("put" code nil nil [50912 50963])
            ("put" code nil nil [50964 51015])
            ("put" code nil nil [51016 51073])
            ("put" code nil nil [51074 51131])
            ("put" code nil nil [51132 51183])
            ("put" code nil nil [51184 51241])
            ("put" code nil nil [51242 51299])
            ("put" code nil nil [51300 51367])
            ("put" code nil nil [51368 51435])
            ("put" code nil nil [51436 51494])
            ("put" code nil nil [51495 51552])
            ("put" code nil nil [51553 51610])
            ("put" code nil nil [51758 51797])
            ("put" code nil nil [51798 51837])
            ("put" code nil nil [51838 51877])
            ("put" code nil nil [51878 51917])
            ("put" code nil nil [51918 51957])
            ("put" code nil nil [51958 52004])
            ("put" code nil nil [52005 52051])
            ("put" code nil nil [52052 52103])
            ("put" code nil nil [52104 52154])
            ("put" code nil nil [52155 52205])
            ("put" code nil nil [52206 52256])
            ("math-rwfail" function (:arguments ("back")) nil [52258 52395])
            ("math-rweval" function (:arguments ("form")) nil [52523 52683])
            ("math-rewrite-phase" variable (:default-value 1) nil [52685 52714])
            ("math-apply-rw-regs" variable nil nil [52904 52931])
            ("math-apply-rw-ruleset" variable nil nil [53045 53075])
            ("math-apply-rewrites" function (:arguments ("expr" "rules" "heads" "math-apply-rw-ruleset")) nil [53077 67921])
            ("math-rwapply-neg" function (:arguments ("expr")) nil [67923 68261])
            ("math-rwapply-inv" function (:arguments ("expr")) nil [68263 68400])
            ("math-rwapply-replace-regs" function (:arguments ("expr")) nil [68402 72539])
            ("math-rwapply-reg-looks-negp" function (:arguments ("expr")) nil [72541 72829])
            ("math-rwapply-reg-neg" function (:arguments ("expr")) nil [72831 73285])
            ("math-rwapply-remember" function (:arguments ("old" "new")) nil [73287 73887])
            ("calc-rewr" package nil nil [73889 73909]))          
      :file "calc-rewr.el.gz"
      :pointmax 73938
      :fsize 15629
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [925 944])
            ("calc-macs" include nil nil [945 965])
            ("calc-keypad-buffer" variable nil nil [967 998])
            ("calc-keypad-menu" variable nil nil [999 1026])
            ("calc-keypad-full-layout" variable nil nil [1027 1063])
            ("calc-keypad-input" variable nil nil [1064 1094])
            ("calc-keypad-prev-input" variable nil nil [1095 1130])
            ("calc-keypad-said-hello" variable nil nil [1131 1166])
            ("calc-keypad-layout" variable (:default-value (quote ((("ENTER" calc-enter calc-roll-down calc-roll-up calc-over) ("ENTER" calc-enter calc-roll-down calc-roll-up calc-over) ("+/-" calc-change-sign calc-inv (progn -4 calc-pack)) ("EEX" ("e") (progn calc-num-prefix calc-pack-interval) (progn -5 calc-pack)) ("UNDO" calc-undo calc-redo calc-last-args) ("<-" calc-pop (progn 0 calc-pop) (progn calc-num-prefix calc-pop))) (("INV" calc-inverse) ("7" ("7") calc-round) ("8" ("8") (progn 2 calc-clean-num)) ("9" ("9") calc-float) ("/" calc-divide (progn calc-inverse calc-power))) (("HYP" calc-hyperbolic) ("4" ("4") calc-ln calc-log10) ("5" ("5") calc-exp calc-exp10) ("6" ("6") calc-abs) ("*" calc-times calc-power)) (("EXEC" calc-keypad-execute) ("1" ("1") calc-arcsin calc-sin) ("2" ("2") calc-arccos calc-cos) ("3" ("3") calc-arctan calc-tan) ("-" calc-minus calc-conj)) (("OFF" calc-keypad-off) ("0" ("0") calc-imaginary) ("." (".") calc-precision) ("PI" calc-pi) ("+" calc-plus calc-sqrt))))) nil [1564 2819])
            ("calc-keypad-menus" variable (:default-value (quote (calc-keypad-math-menu calc-keypad-funcs-menu calc-keypad-binary-menu calc-keypad-vector-menu calc-keypad-modes-menu calc-keypad-user-menu))) nil [2821 3031])
            ("calc-keypad-math-menu" variable (:default-value (quote ((("FLR" calc-floor) ("CEIL" calc-ceiling) ("RND" calc-round) ("TRNC" calc-trunc) ("CLN2" (progn 2 calc-clean-num)) ("FLT" calc-float)) (("LN" calc-ln) ("EXP" calc-exp) ("" nil) ("ABS" calc-abs) ("IDIV" calc-idiv) ("MOD" calc-mod)) (("SIN" calc-sin) ("COS" calc-cos) ("TAN" calc-tan) ("SQRT" calc-sqrt) ("y^x" calc-power) ("1/x" calc-inv))))) nil [3250 3814])
            ("calc-keypad-funcs-menu" variable (:default-value (quote ((("IGAM" calc-inc-gamma) ("BETA" calc-beta) ("IBET" calc-inc-beta) ("ERF" calc-erf) ("BESJ" calc-bessel-J) ("BESY" calc-bessel-Y)) (("IMAG" calc-imaginary) ("CONJ" calc-conj) ("RE" calc-re calc-im) ("ATN2" calc-arctan2) ("RAND" calc-random) ("RAGN" calc-random-again)) (("GCD" calc-gcd calc-lcm) ("FACT" calc-factorial calc-gamma) ("DFCT" calc-double-factorial) ("BNOM" calc-choose) ("PERM" calc-perm) ("NXTP" calc-next-prime calc-prev-prime))))) nil [4033 4692])
            ("calc-keypad-binary-menu" variable (:default-value (quote ((("AND" calc-and calc-diff) ("OR" calc-or) ("XOR" calc-xor) ("NOT" calc-not calc-clip) ("LSH" calc-lshift-binary calc-rotate-binary) ("RSH" calc-rshift-binary)) (("DEC" calc-decimal-radix) ("HEX" calc-hex-radix) ("OCT" calc-octal-radix) ("BIN" calc-binary-radix) ("WSIZ" calc-word-size) ("ARSH" calc-rshift-arith)) (("A" ("A")) ("B" ("B")) ("C" ("C")) ("D" ("D")) ("E" ("E")) ("F" ("F")))))) nil [4911 5543])
            ("calc-keypad-vector-menu" variable (:default-value (quote ((("SUM" calc-vector-sum calc-vector-alt-sum calc-vector-mean) ("PROD" calc-vector-product nil calc-vector-sdev) ("MAX" calc-vector-max calc-vector-min calc-vector-median) ("MAP*" (lambda nil (interactive) (calc-map (quote (2 calcFunc-mul "*"))))) ("MAP^" (lambda nil (interactive) (calc-map (quote (2 calcFunc-pow "^"))))) ("MAP$" calc-map-stack)) (("MINV" calc-inv) ("MDET" calc-mdet) ("MTRN" calc-transpose calc-conj-transpose) ("IDNT" (progn calc-num-prefix calc-ident)) ("CRSS" calc-cross) ("\"x\"" "xcalc-algebraic-entryx" "xcalc-algebraic-entryy" "xcalc-algebraic-entryz" "xcalc-algebraic-entryt")) (("PACK" calc-pack) ("UNPK" calc-unpack) ("INDX" (progn calc-num-prefix calc-index) "xcalc-index") ("BLD" (progn calc-num-prefix calc-build-vector)) ("LEN" calc-vlength) ("..." calc-full-vectors))))) nil [5762 6823])
            ("calc-keypad-modes-menu" variable (:default-value (quote ((("FLT" calc-normal-notation (progn calc-num-prefix calc-normal-notation)) ("FIX" (progn 2 calc-fix-notation) (progn calc-num-prefix calc-fix-notation)) ("SCI" calc-sci-notation (progn calc-num-prefix calc-sci-notation)) ("ENG" calc-eng-notation (progn calc-num-prefix calc-eng-notation)) ("GRP" calc-group-digits "-3xcalc-group-digits") ("" nil)) (("RAD" calc-radians-mode) ("DEG" calc-degrees-mode) ("FRAC" calc-frac-mode) ("POLR" calc-polar-mode) ("SYMB" calc-symbolic-mode) ("PREC" calc-precision)) (("SWAP" calc-roll-down) ("RLL3" (progn 3 calc-roll-up) (progn 3 calc-roll-down)) ("RLL4" (progn 4 calc-roll-up) (progn 4 calc-roll-down)) ("OVER" calc-over) ("STO" calc-keypad-store) ("RCL" calc-keypad-recall))))) nil [7042 8027])
            ("define-derived-mode" code nil nil [8029 9406])
            ("calc-do-keypad" function (:arguments ("full-display" "interactive")) nil [9408 11757])
            ("calc-keypad-off" function nil nil [11759 11883])
            ("calc-keypad-redraw" function nil nil [11885 13179])
            ("calc-keypad-show-input" function nil nil [13181 13636])
            ("calc-keypad-press" function nil nil [13638 18436])
            ("calc-keypad-left-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18438 18731])
            ("calc-keypad-right-click" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [18733 18979])
            ("calc-keypad-middle-click" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [18981 19234])
            ("calc-keypad-menu" function nil nil [19236 19576])
            ("calc-keypad-menu-back" function nil nil [19578 19959])
            ("calc-keypad-store" function nil nil [19961 20038])
            ("calc-keypad-recall" function nil nil [20040 20118])
            ("calc-pack-interval" function (:arguments ("mode")) nil [20120 20300])
            ("calc-keypad-execute" function nil nil [20302 21111])
            ("calc-keypd" package nil nil [21113 21134]))          
      :file "calc-keypd.el.gz"
      :pointmax 21164
      :fsize 5902
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc" include nil nil [878 893])
            ("calc-macs" include nil nil [894 914])
            ("declare-function" code nil nil [966 1021])
            ("declare-function" code nil nil [1022 1083])
            ("declare-function" code nil nil [1084 1138])
            ("declare-function" code nil nil [1139 1195])
            ("declare-function" code nil nil [1196 1251])
            ("declare-function" code nil nil [1252 1335])
            ("declare-function" code nil nil [1336 1409])
            ("declare-function" code nil nil [1410 1459])
            ("declare-function" code nil nil [1460 1525])
            ("declare-function" code nil nil [1526 1602])
            ("declare-function" code nil nil [1603 1655])
            ("declare-function" code nil nil [1656 1706])
            ("declare-function" code nil nil [1707 1771])
            ("declare-function" code nil nil [1772 1838])
            ("declare-function" code nil nil [1839 1894])
            ("declare-function" code nil nil [1895 1950])
            ("declare-function" code nil nil [1951 2005])
            ("declare-function" code nil nil [2006 2060])
            ("declare-function" code nil nil [2061 2117])
            ("declare-function" code nil nil [2118 2177])
            ("declare-function" code nil nil [2178 2238])
            ("declare-function" code nil nil [2239 2311])
            ("declare-function" code nil nil [2312 2378])
            ("declare-function" code nil nil [2379 2433])
            ("declare-function" code nil nil [2434 2497])
            ("declare-function" code nil nil [2498 2553])
            ("declare-function" code nil nil [2554 2635])
            ("declare-function" code nil nil [2636 2760])
            ("declare-function" code nil nil [2761 2841])
            ("declare-function" code nil nil [2842 2905])
            ("declare-function" code nil nil [2906 2961])
            ("declare-function" code nil nil [2962 3034])
            ("declare-function" code nil nil [3035 3097])
            ("declare-function" code nil nil [3098 3168])
            ("declare-function" code nil nil [3169 3213])
            ("declare-function" code nil nil [3214 3273])
            ("declare-function" code nil nil [3274 3332])
            ("declare-function" code nil nil [3333 3389])
            ("declare-function" code nil nil [3390 3448])
            ("declare-function" code nil nil [3449 3508])
            ("declare-function" code nil nil [3509 3557])
            ("declare-function" code nil nil [3558 3613])
            ("math-simplifying" variable nil nil [3616 3645])
            ("math-living-dangerously" variable nil nil [3646 3682])
            ("math-integrating" variable nil nil [3728 3757])
            ("math-rewrite-selections" variable nil nil [3759 3795])
            ("math-compose-level" variable nil nil [3797 3826])
            ("math-comp-selected" variable nil nil [3827 3858])
            ("math-comp-tagged" variable nil nil [3859 3888])
            ("math-comp-sel-hpos" variable nil nil [3889 3920])
            ("math-comp-sel-vpos" variable nil nil [3921 3952])
            ("math-comp-sel-cpos" variable nil nil [3953 3984])
            ("math-compose-hash-args" variable nil nil [3985 4020])
            ("calc-alg-map" variable nil nil [4022 4043])
            ("calc-alg-esc-map" variable nil nil [4044 4069])
            ("calc-init-extensions" function nil nil [4144 58353])
            ("calc-init-prefixes" function nil nil [58355 59752])
            ("calc-init-extensions" code nil nil [59754 59776])
            ("calc-command-flags" variable nil nil [59847 59874])
            ("calc-clear-command-flag" function (:arguments ("f")) nil [59876 59967])
            ("calc-record-message" function (:arguments ("tag" "args")) nil [59970 60152])
            ("calc-normalize-fancy" function (:arguments ("val")) nil [60155 60621])
            ("calc-help-map" variable nil nil [60624 60650])
            ("if" code nil nil [60652 61587])
            ("calc-prefix-help-retry" variable nil nil [61589 61624])
            ("calc-prefix-help-phase" variable nil nil [61625 61658])
            ("calc-do-prefix-help" function (:arguments ("msgs" "group" "key")) nil [61659 62779])
            ("calc-reset" function (:arguments ("arg")) nil [62812 64671])
            ("calc-scroll-left" function (:arguments ("n")) nil [64752 64885])
            ("calc-scroll-right" function (:arguments ("n")) nil [64887 65022])
            ("calc-scroll-up" function (:arguments ("n")) nil [65024 65437])
            ("calc-scroll-down" function (:arguments ("n")) nil [65439 65571])
            ("calc-precision" function (:arguments ("n")) nil [65574 66064])
            ("calc-inverse" function (:arguments ("n")) nil [66067 66970])
            ("calc-fancy-prefix-map" variable
               (:constant-flag t
                :default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote calc-fancy-prefix-other-key)) (define-key map (vector meta-prefix-char t) (quote calc-fancy-prefix-other-key)) (define-key map [switch-frame] nil) (define-key map [21] (quote universal-argument)) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) map))
                nil [66972 67742])
            ("calc-is-keypad-press" variable nil nil [67744 67777])
            ("calc-fancy-prefix" function (:arguments ("flag" "msg" "n")) nil [67778 68741])
            ("calc-fancy-prefix-other-key" function (:arguments ("arg")) nil [68743 69232])
            ("calc-invert-func" function nil nil [69234 69429])
            ("calc-is-inverse" function nil nil [69431 69477])
            ("calc-hyperbolic" function (:arguments ("n")) nil [69479 70388])
            ("calc-hyperbolic-func" function nil nil [70390 70589])
            ("calc-is-hyperbolic" function nil nil [70591 70643])
            ("calc-option" function (:arguments ("n")) nil [70645 71546])
            ("calc-is-option" function nil nil [71548 71592])
            ("calc-keep-args" function (:arguments ("n")) nil [71594 71710])
            ("calc-change-mode" function (:arguments ("var" "value" "refresh" "option")) nil [71713 73274])
            ("calc-toggle-banner" function (:user-visible-flag t) nil [73276 73468])
            ("calc-refresh-top" function (:arguments ("n")) nil [73470 74023])
            ("calc-refreshing-evaltos" variable nil nil [74025 74061])
            ("calc-no-refresh-evaltos" variable nil nil [74062 74098])
            ("calc-refresh-evaltos" function (:arguments ("which-var")) nil [74099 74924])
            ("calc-push" function (:arguments ("vals")) nil [74926 74980])
            ("calc-pop-push" function (:arguments ("n" "vals")) nil [74982 75048])
            ("calc-pop-push-record" function (:arguments ("n" "prefix" "vals")) nil [75050 75144])
            ("calc-evaluate" function (:arguments ("n")) nil [75147 75535])
            ("calc-eval-num" function (:arguments ("n")) nil [75538 75947])
            ("calc-extended-command-history" variable nil nil [75950 76048])
            ("calc-execute-extended-command" function (:arguments ("n")) nil [76050 76370])
            ("calc-realign" function (:arguments ("num")) nil [76373 76982])
            ("math-cache-list" variable nil nil [76984 77012])
            ("calc-var-value" function (:arguments ("v")) nil [77014 77407])
            ("calc-assoc-ops" variable
               (:constant-flag t
                :default-value (quote ((+ (+ -) (+)) (- (+ -) (+)) (* (*) (*)) (/ (/) nil) (| (|) (|)) (calcFunc-land (calcFunc-land) (calcFunc-land)) (calcFunc-lor (calcFunc-lor) (calcFunc-lor)))))
                nil [77668 77962])
            ("var-CommuteRules" variable (:default-value (quote calc-CommuteRules)) nil [77965 78009])
            ("var-JumpRules" variable (:default-value (quote calc-JumpRules)) nil [78010 78051])
            ("var-DistribRules" variable (:default-value (quote calc-DistribRules)) nil [78052 78096])
            ("var-MergeRules" variable (:default-value (quote calc-MergeRules)) nil [78097 78139])
            ("var-NegateRules" variable (:default-value (quote calc-NegateRules)) nil [78140 78183])
            ("var-InvertRules" variable (:default-value (quote calc-InvertRules)) nil [78184 78227])
            ("calc-tweak-eqn-table" variable
               (:constant-flag t
                :default-value (quote ((calcFunc-eq calcFunc-eq calcFunc-neq) (calcFunc-neq calcFunc-neq calcFunc-eq) (calcFunc-lt calcFunc-gt calcFunc-geq) (calcFunc-gt calcFunc-lt calcFunc-leq) (calcFunc-leq calcFunc-geq calcFunc-gt) (calcFunc-geq calcFunc-leq calcFunc-lt))))
                nil [78230 78554])
            ("calc-float" function (:arguments ("arg")) nil [78559 78721])
            ("calc-gnuplot-process" variable nil nil [78724 78757])
            ("calc-gnuplot-input" variable nil nil [78758 78785])
            ("calc-gnuplot-buffer" variable nil nil [78786 78814])
            ("calc-gnuplot-alive" function nil nil [78816 79072])
            ("calc-load-everything" function nil nil [79078 80071])
            ("calc-concat" function (:arguments ("arg")) nil [80096 80540])
            ("calc-append" function (:arguments ("arg")) nil [80542 80632])
            ("calc-arg-values" variable
               (:constant-flag t
                :default-value (quote ((var ArgA var-ArgA) (var ArgB var-ArgB) (var ArgC var-ArgC) (var ArgD var-ArgD) (var ArgE var-ArgE) (var ArgF var-ArgF) (var ArgG var-ArgG) (var ArgH var-ArgH) (var ArgI var-ArgI) (var ArgJ var-ArgJ))))
                nil [80635 80918])
            ("calc-invent-args" function (:arguments ("n")) nil [80920 81027])
            ("calc-user-key-map" function nil nil [81048 81271])
            ("calc-z-prefix-buf" variable nil nil [81273 81303])
            ("calc-z-prefix-msgs" variable nil nil [81304 81335])
            ("calc-z-prefix-help" function nil nil [81337 82084])
            ("calc-user-function-classify" function (:arguments ("key")) nil [82086 82296])
            ("calc-user-function-list" function (:arguments ("map" "flags")) nil [82308 83563])
            ("calc-shift-Z-prefix-help" function nil nil [83567 83966])
            ("math-defcache" function (:arguments ("name" "init" "form")) nil [83983 85181])
            ("put" code nil nil [85182 85222])
            ("math-approx-pi" variable
               (:constant-flag t
                :default-value (math-read-number-simple "3.141592653589793238463"))
                nil [85302 85410])
            ("math-defcache" code nil nil [85412 85631])
            ("math-defcache" code nil nil [85633 85706])
            ("math-defcache" code nil nil [85708 85785])
            ("math-defcache" code nil nil [85787 85865])
            ("math-defcache" code nil nil [85867 85946])
            ("math-defcache" code nil nil [85948 86010])
            ("math-defcache" code nil nil [86012 86076])
            ("math-defcache" code nil nil [86078 86144])
            ("math-defcache" code nil nil [86146 86216])
            ("math-approx-sqrt-e" variable
               (:constant-flag t
                :default-value (math-read-number-simple "1.648721270700128146849"))
                nil [86218 86335])
            ("math-defcache" code nil nil [86337 86452])
            ("math-defcache" code nil nil [86454 86509])
            ("math-defcache" code nil nil [86511 86635])
            ("math-approx-gamma-const" variable
               (:constant-flag t
                :default-value (math-read-number-simple "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495"))
                nil [86637 86839])
            ("math-defcache" code nil nil [86841 86903])
            ("math-half-circle" function (:arguments ("symb")) nil [86905 87024])
            ("math-full-circle" function (:arguments ("symb")) nil [87026 87096])
            ("math-quarter-circle" function (:arguments ("symb")) nil [87098 87171])
            ("math-expand-formulas" variable nil nil [87173 87206])
            ("math-oddp" function (:arguments ("a")) nil [87294 87421])
            ("math-integerp" function (:arguments ("a")) nil [87480 87568])
            ("math-natnump" function (:arguments ("a")) nil [87641 87716])
            ("math-ratp" function (:arguments ("a")) nil [87776 87865])
            ("math-realp" function (:arguments ("a")) nil [87922 88018])
            ("math-anglep" function (:arguments ("a")) nil [88073 88174])
            ("math-numberp" function (:arguments ("a")) nil [88231 88340])
            ("math-scalarp" function (:arguments ("a")) nil [88402 88515])
            ("math-vectorp" function (:arguments ("a")) nil [88560 88609])
            ("math-objvecp" function (:arguments ("a")) nil [88669 88837])
            ("math-primp" function (:arguments ("a")) nil [88913 89043])
            ("math-messy-integerp" function (:arguments ("a")) nil [89122 89273])
            ("math-num-integerp" function (:arguments ("a")) nil [89332 89416])
            ("math-num-natnump" function (:arguments ("a")) nil [89489 89655])
            ("math-provably-integerp" function (:arguments ("a")) nil [89733 89959])
            ("math-provably-realp" function (:arguments ("a")) nil [90029 90152])
            ("math-complexp" function (:arguments ("a")) nil [90215 90276])
            ("math-rect-complexp" function (:arguments ("a")) nil [90351 90407])
            ("math-polar-complexp" function (:arguments ("a")) nil [90476 90534])
            ("math-matrixp" function (:arguments ("a")) nil [90579 90848])
            ("math-matrixp-step" function (:arguments ("a" "len")) nil [90850 91009])
            ("math-square-matrixp" function (:arguments ("a")) nil [91061 91180])
            ("math-identity-matrix-p" function (:arguments ("mat" "mul")) nil [91221 91602])
            ("math-ident-row-p" function (:arguments ("row" "n" "a")) nil [91604 91983])
            ("math-objectp" function (:arguments ("a")) nil [92033 92186])
            ("math-check-integer" function (:arguments ("a")) nil [92262 92447])
            ("math-check-fixnum" function (:arguments ("a" "allow-inf")) nil [92528 93021])
            ("math-check-natnum" function (:arguments ("a")) nil [93102 93280])
            ("math-check-float" function (:arguments ("a")) nil [93361 93538])
            ("math-check-const" function (:arguments ("a" "exp-ok")) nil [93573 93723])
            ("math-get-value" function (:arguments ("x")) nil [93774 93934])
            ("math-get-sdev" function (:arguments ("x" "one")) nil [93936 94128])
            ("math-contains-sdev-p" function (:arguments ("ls")) nil [94130 94332])
            ("math-fixnum" function (:arguments ("a")) nil [94385 94550])
            ("math-fixnum-big" function (:arguments ("a")) nil [94552 94677])
            ("math-simplify-only" variable nil nil [94679 94710])
            ("math-normalize-fancy" function (:arguments ("a")) nil [94712 97093])
            ("math-normalize-a" variable nil nil [97251 97276])
            ("math-normalize-nonstandard" function nil nil [97278 98050])
            ("math-norm-bignum" function (:arguments ("a")) nil [98122 98325])
            ("math-bignum-test" function (:arguments ("a")) nil [98327 98420])
            ("calcFunc-sign" function (:arguments ("a" "x")) nil [98495 98843])
            ("math-compare" function (:arguments ("a" "b")) nil [98957 102617])
            ("math-compare-bignum" function (:arguments ("a" "b")) nil [102696 103056])
            ("math-compare-lists" function (:arguments ("a" "b")) nil [103058 103214])
            ("math-lessp-float" function (:arguments ("a" "b")) nil [103216 103792])
            ("math-equal" function (:arguments ("a" "b")) nil [103853 103904])
            ("math-lessp" function (:arguments ("a" "b")) nil [103966 104018])
            ("math-equal-int" function (:arguments ("a" "b")) nil [104127 104249])
            ("math-mat-dimens" function (:arguments ("m")) nil [104319 104486])
            ("calc-binary-op-fancy" function (:arguments ("name" "func" "arg" "ident" "unary")) nil [104490 105141])
            ("calc-unary-op-fancy" function (:arguments ("name" "func" "arg")) nil [105143 105543])
            ("var-Holidays" variable (:default-value (quote (vec (var sat var-sat) (var sun var-sun)))) nil [105545 105609])
            ("var-Decls" variable (:default-value (list (quote vec))) nil [105610 105640])
            ("math-inexact-result" function nil nil [105643 105736])
            ("math-overflow" function (:arguments ("exp")) nil [105738 105863])
            ("math-underflow" function nil nil [105865 105921])
            ("math-gcd" function (:arguments ("a" "b")) nil [105994 106607])
            ("math-evaluate-expr" function (:arguments ("x")) nil [106666 106820])
            ("defalias" code nil nil [106822 106868])
            ("calcFunc-evalvn" function (:arguments ("x" "prec")) nil [106870 107483])
            ("math-evaluate-expr-rec" function (:arguments ("x")) nil [107485 108168])
            ("math-any-floats" function (:arguments ("expr")) nil [108170 108335])
            ("var-FactorRules" variable (:default-value (quote calc-FactorRules)) nil [108337 108379])
            ("math-mt-many" variable nil nil [108381 108406])
            ("math-mt-func" variable nil nil [108407 108432])
            ("math-map-tree" function (:arguments ("math-mt-func" "mmt-expr" "math-mt-many")) nil [108434 108581])
            ("math-map-tree-rec" function (:arguments ("mmt-expr")) nil [108583 109327])
            ("math-is-true" function (:arguments ("expr")) nil [109329 109444])
            ("math-const-var" function (:arguments ("expr")) nil [109446 109702])
            ("math-integral-cache" variable nil nil [109837 109865])
            ("math-defintegral" function (:arguments ("funcs" "code")) nil [109867 110275])
            ("put" code nil nil [110276 110319])
            ("math-defintegral-2" function (:arguments ("funcs" "code")) nil [110321 110711])
            ("put" code nil nil [110712 110757])
            ("var-IntegAfterRules" variable (:default-value (quote calc-IntegAfterRules)) nil [110759 110809])
            ("var-FitRules" variable (:default-value (quote calc-FitRules)) nil [110811 110847])
            ("math-poly-base-variable" variable nil nil [110849 110885])
            ("math-poly-neg-powers" variable nil nil [110886 110919])
            ("math-poly-mult-powers" variable (:default-value 1) nil [110920 110952])
            ("math-poly-frac-powers" variable nil nil [110953 110987])
            ("math-poly-exp-base" variable nil nil [110988 111019])
            ("math-build-var-name" function (:arguments ("name")) nil [111021 111291])
            ("math-simplifying-units" variable nil nil [111293 111328])
            ("math-combining-units" variable (:default-value t) nil [111329 111360])
            ("math-read-number-fancy" function (:arguments ("s")) nil [111394 118057])
            ("math-read-radix" function (:arguments ("s" "r")) nil [118059 118342])
            ("math-expr-data" variable nil nil [118371 118394])
            ("math-read-expr" function (:arguments ("math-exp-str")) nil [118396 119101])
            ("math-read-plain-expr" function (:arguments ("exp-str" "error-check")) nil [119103 119365])
            ("math-read-string" function nil nil [119368 119643])
            ("math-read-big-expr" function (:arguments ("str")) nil [119685 121277])
            ("math-read-big-bigp" function (:arguments ("math-read-big-lines")) nil [121279 122407])
            ("math-format-hash-args" variable nil nil [122444 122478])
            ("calc-can-abbrev-vectors" variable nil nil [122479 122515])
            ("math-format-flat-expr-fancy" function (:arguments ("a" "prec")) nil [122517 125277])
            ("math-format-flat-vector" function (:arguments ("vec" "sep" "prec")) nil [125279 125507])
            ("math-format-nice-expr" function (:arguments ("x" "w")) nil [125509 126342])
            ("math-assq2" function (:arguments ("v" "a")) nil [126344 126446])
            ("math-format-number-fancy" function (:arguments ("a" "prec")) nil [126448 129717])
            ("math-adjust-fraction" function (:arguments ("a")) nil [129719 130026])
            ("math-format-bignum-fancy" function (:arguments ("a")) nil [130028 131192])
            ("math-group-float" function (:arguments ("str")) nil [131195 131829])
            ("calc-keypad-user-menu" variable nil nil [131880 132325])
            ("run-hooks" code nil nil [132327 132358])
            ("calc-ext" package nil nil [132360 132379]))          
      :file "calc-ext.el.gz"
      :pointmax 132407
      :fsize 29912
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [912 931])
            ("calc-macs" include nil nil [932 952])
            ("cl-lib" include nil nil [953 970])
            ("declare-function" code nil nil [1022 1110])
            ("calc-show-plain" function (:arguments ("n")) nil [1113 1393])
            ("calc-embedded-modes" variable nil nil [1396 1428])
            ("calc-embedded-globals" variable nil nil [1429 1463])
            ("calc-embedded-active" variable nil nil [1464 1497])
            ("calc-embedded-all-active" variable nil nil [1498 1535])
            ("make-variable-buffer-local" code nil nil [1536 1590])
            ("calc-embedded-some-active" variable nil nil [1591 1629])
            ("make-variable-buffer-local" code nil nil [1630 1685])
            ("calc-embedded-announce-formula" variable nil nil [1755 1794])
            ("calc-embedded-open-formula" variable nil nil [1795 1830])
            ("calc-embedded-close-formula" variable nil nil [1831 1867])
            ("calc-embedded-open-plain" variable nil nil [1868 1901])
            ("calc-embedded-close-plain" variable nil nil [1902 1936])
            ("calc-embedded-open-new-formula" variable nil nil [1937 1976])
            ("calc-embedded-close-new-formula" variable nil nil [1977 2017])
            ("calc-embedded-open-mode" variable nil nil [2018 2050])
            ("calc-embedded-close-mode" variable nil nil [2051 2084])
            ("calc-embedded-word-regexp" variable nil nil [2085 2119])
            ("calc-embedded-mode-vars" variable
               (:constant-flag t
                :default-value (quote (("twos-complement" . calc-twos-complement-mode) ("precision" . calc-internal-prec) ("word-size" . calc-word-size) ("angles" . calc-angle-mode) ("symbolic" . calc-symbolic-mode) ("matrix" . calc-matrix-mode) ("fractions" . calc-prefer-frac) ("complex" . calc-complex-mode) ("simplify" . calc-simplify-mode) ("language" . the-language) ("plain" . calc-show-plain) ("break" . calc-line-breaking) ("justify" . the-display-just) ("left-label" . calc-left-label) ("right-label" . calc-right-label) ("radix" . calc-number-radix) ("leading-zeros" . calc-leading-zeros) ("grouping" . calc-group-digits) ("group-char" . calc-group-char) ("point-char" . calc-point-char) ("frac-format" . calc-frac-format) ("float-format" . calc-float-format) ("complex-format" . calc-complex-format) ("hms-format" . calc-hms-format) ("date-format" . calc-date-format) ("matrix-justify" . calc-matrix-just) ("full-vectors" . calc-full-vectors) ("break-vectors" . calc-break-vectors) ("vector-commas" . calc-vector-commas) ("vector-brackets" . calc-vector-brackets) ("matrix-brackets" . calc-matrix-brackets) ("strings" . calc-display-strings))))
                nil [2121 3550])
            ("calc-embedded-original-modes" variable nil nil [4642 4748])
            ("calc-embedded-save-original-modes" function nil nil [4750 5786])
            ("calc-embedded-preserve-modes" function (:user-visible-flag t) nil [5788 6104])
            ("calc-embedded-restore-original-modes" function (:arguments ("calcbuf")) nil [6106 7032])
            ("calc-embed-outer-top" variable nil nil [7391 7420])
            ("calc-embed-outer-bot" variable nil nil [7421 7450])
            ("calc-embed-top" variable nil nil [7451 7474])
            ("calc-embed-bot" variable nil nil [7475 7498])
            ("calc-embed-arg" variable nil nil [7733 7756])
            ("calc-embedded-quiet" variable nil nil [7758 7790])
            ("calc-embedded-firsttime" variable nil nil [7792 7824])
            ("calc-embedded-firsttime-buf" variable nil nil [7825 7861])
            ("calc-embedded-firsttime-formula" variable nil nil [7862 7902])
            ("calc-override-minor-modes-map" variable (:default-value (make-sparse-keymap)) nil [7990 8119])
            ("define-key" code nil nil [8169 8226])
            ("calc-override-minor-modes" variable (:default-value (cons t calc-override-minor-modes-map)) nil [8228 8303])
            ("calc-do-embedded" function (:arguments ("calc-embed-arg" "end" "obeg" "oend")) nil [8305 13039])
            ("calc-embedded-select" function (:arguments ("arg")) nil [13102 13577])
            ("calc-embedded-update-formula" function (:arguments ("calc-embed-arg")) nil [13580 14528])
            ("calc-embedded-edit" function (:arguments ("calc-embed-arg")) nil [14531 15025])
            ("calc-original-buffer" variable nil nil [15027 15056])
            ("calc-edit-top" variable nil nil [15057 15079])
            ("calc-embedded-finish-edit" function (:arguments ("info")) nil [15080 15680])
            ("calc-do-embedded-activate" function (:arguments ("calc-embed-arg" "cbuf")) nil [15697 16912])
            ("calc-plain-buffer-only" function nil nil [16914 17087])
            ("calc-embedded-active-state" function (:arguments ("state")) nil [17089 17656])
            ("calc-embedded-original-buffer" function (:arguments ("switch" "info")) nil [17659 17922])
            ("calc-embedded-word" function nil nil [17924 17992])
            ("calc-embedded-mark-formula" function
               (:user-visible-flag t
                :arguments ("body-only"))
                nil [17994 18660])
            ("calc-embedded-find-bounds" function (:arguments ("plain")) nil [18662 20195])
            ("calc-embedded-kill-formula" function (:user-visible-flag t) nil [20197 20601])
            ("calc-embedded-copy-formula-as-kill" function (:user-visible-flag t) nil [20603 20844])
            ("calc-embedded-duplicate" function nil nil [20846 21859])
            ("calc-embedded-next" function (:arguments ("arg")) nil [21861 22709])
            ("calc-embedded-previous" function (:arguments ("arg")) nil [22711 22821])
            ("calc-embedded-new-formula" function nil nil [22823 23887])
            ("calc-embedded-forget" function nil nil [23889 24081])
            ("calc-embed-prev-modes" variable nil nil [24199 24229])
            ("calc-embedded-set-modes" function (:arguments ("gmodes" "modes" "local-modes" "temp")) nil [24231 26332])
            ("calc-embedded-language" function nil nil [26334 26461])
            ("calc-embedded-set-language" function (:arguments ("lang")) nil [26463 26716])
            ("calc-embedded-justify" function nil nil [26718 26850])
            ("calc-embedded-set-justify" function (:arguments ("just")) nil [26852 27053])
            ("calc-find-globals" function nil nil [27056 27905])
            ("calc-embedded-find-modes" function nil nil [27907 29849])
            ("calc-embed-vars-used" variable nil nil [30065 30094])
            ("calc-embedded-make-info" function (:arguments ("point" "cbuf" "fresh" "calc-embed-top" "calc-embed-bot" "calc-embed-outer-top" "calc-embed-outer-bot")) nil [30096 37801])
            ("calc-embedded-find-vars" function (:arguments ("x")) nil [37803 38445])
            ("math-ms-args" variable nil nil [38447 38468])
            ("calc-embedded-evaluate-expr" function (:arguments ("x")) nil [38469 39205])
            ("calc-embedded-subst" function (:arguments ("x")) nil [39207 39674])
            ("calc-embedded-eval-get-var" function (:arguments ("var" "base")) nil [39676 40536])
            ("calc-embedded-update" function (:arguments ("info" "which" "need-eval" "need-display" "str" "entry" "old-val")) nil [40539 44217])
            ("calc-embedded-no-reselect" variable nil nil [44276 44314])
            ("calc-embedded-select-buffer" function nil nil [44315 45255])
            ("calc-embedded-finish-command" function nil nil [45257 46044])
            ("calc-embedded-stack-change" function nil nil [46046 47085])
            ("calc-embedded-mode-line-change" function nil nil [47087 47336])
            ("calc-embedded-modes-change" function (:arguments ("vars")) nil [47338 49811])
            ("calc-embedded-var-change" function (:arguments ("var" "buf")) nil [49813 51142])
            ("calc-embed" package nil nil [51144 51165]))          
      :file "calc-embed.el.gz"
      :pointmax 51271
      :fsize 11375
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [916 935])
            ("calc-macs" include nil nil [936 956])
            ("calc-fdiv" function (:arguments ("arg")) nil [958 1068])
            ("calc-fraction" function (:arguments ("arg")) nil [1071 1434])
            ("calc-over-notation" function (:arguments ("fmt")) nil [1437 1895])
            ("calc-slash-notation" function (:arguments ("n")) nil [1897 2037])
            ("calc-frac-mode" function (:arguments ("n")) nil [2040 2302])
            ("math-make-frac" function (:arguments ("num" "den")) nil [2463 2803])
            ("calc-add-fractions" function (:arguments ("a" "b")) nil [2805 3211])
            ("calc-mul-fractions" function (:arguments ("a" "b")) nil [3213 3512])
            ("calc-div-fractions" function (:arguments ("a" "b")) nil [3514 3813])
            ("calcFunc-frac" function (:arguments ("a" "tol")) nil [3886 5011])
            ("math-continued-fraction" function (:arguments ("a" "tol")) nil [5013 5586])
            ("math-eval-continued-fraction" function (:arguments ("cf")) nil [5588 5789])
            ("calcFunc-fdiv" function (:arguments ("a" "b")) nil [5791 6712])
            ("calc-frac" package nil nil [6714 6734]))          
      :file "calc-frac.el.gz"
      :pointmax 6763
      :fsize 2212
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("calc-ext" include nil nil [919 938])
            ("calc-macs" include nil nil [939 959])
            ("math-scalar-functions" variable (:default-value (quote (calcFunc-det calcFunc-cnorm calcFunc-rnorm calcFunc-vlen calcFunc-vcount calcFunc-vsum calcFunc-vprod calcFunc-vmin calcFunc-vmax))) nil [1005 1184])
            ("math-nonscalar-functions" variable (:default-value (quote (vec calcFunc-idn calcFunc-diag calcFunc-cvec calcFunc-index calcFunc-trn | calcFunc-append calcFunc-cons calcFunc-rcons calcFunc-tail calcFunc-rhead))) nil [1186 1426])
            ("math-scalar-if-args-functions" variable (:default-value (quote (+ - * / neg))) nil [1428 1481])
            ("math-real-functions" variable (:default-value (quote (calcFunc-arg calcFunc-re calcFunc-im calcFunc-floor calcFunc-ceil calcFunc-trunc calcFunc-round calcFunc-rounde calcFunc-roundu calcFunc-ffloor calcFunc-fceil calcFunc-ftrunc calcFunc-fround calcFunc-frounde calcFunc-froundu))) nil [1483 1802])
            ("math-positive-functions" variable (:default-value (quote nil)) nil [1804 1840])
            ("math-nonnegative-functions" variable (:default-value (quote (calcFunc-cnorm calcFunc-rnorm calcFunc-vlen calcFunc-vcount))) nil [1842 1949])
            ("math-real-scalar-functions" variable (:default-value (quote (% calcFunc-idiv calcFunc-abs calcFunc-choose calcFunc-perm calcFunc-eq calcFunc-neq calcFunc-lt calcFunc-gt calcFunc-leq calcFunc-geq calcFunc-lnot calcFunc-max calcFunc-min))) nil [1951 2229])
            ("math-real-if-arg-functions" variable (:default-value (quote (calcFunc-sin calcFunc-cos calcFunc-tan calcFunc-sec calcFunc-csc calcFunc-cot calcFunc-arctan calcFunc-sinh calcFunc-cosh calcFunc-tanh calcFunc-sech calcFunc-csch calcFunc-coth calcFunc-exp calcFunc-gamma calcFunc-fact))) nil [2231 2673])
            ("math-integer-functions" variable (:default-value (quote (calcFunc-idiv calcFunc-isqrt calcFunc-ilog calcFunc-vlen calcFunc-vcount))) nil [2675 2792])
            ("math-num-integer-functions" variable (:default-value (quote nil)) nil [2794 2833])
            ("math-rounding-functions" variable (:default-value (quote (calcFunc-floor calcFunc-ceil calcFunc-round calcFunc-trunc calcFunc-rounde calcFunc-roundu))) nil [2835 2979])
            ("math-float-rounding-functions" variable (:default-value (quote (calcFunc-ffloor calcFunc-fceil calcFunc-fround calcFunc-ftrunc calcFunc-frounde calcFunc-froundu))) nil [2981 3134])
            ("math-integer-if-args-functions" variable (:default-value (quote (+ - * % neg calcFunc-abs calcFunc-min calcFunc-max calcFunc-choose calcFunc-perm))) nil [3136 3275])
            ("calc-min" function (:arguments ("arg")) nil [3295 3422])
            ("calc-max" function (:arguments ("arg")) nil [3424 3557])
            ("calc-abs" function (:arguments ("arg")) nil [3559 3666])
            ("calc-idiv" function (:arguments ("arg")) nil [3669 3780])
            ("calc-floor" function (:arguments ("arg")) nil [3783 4126])
            ("calc-ceiling" function (:arguments ("arg")) nil [4128 4214])
            ("calc-round" function (:arguments ("arg")) nil [4216 4561])
            ("calc-trunc" function (:arguments ("arg")) nil [4563 4647])
            ("calc-mant-part" function (:arguments ("arg")) nil [4649 4764])
            ("calc-xpon-part" function (:arguments ("arg")) nil [4766 4881])
            ("calc-scale-float" function (:arguments ("arg")) nil [4883 5000])
            ("calc-abssqr" function (:arguments ("arg")) nil [5002 5116])
            ("calc-sign" function (:arguments ("arg")) nil [5118 5228])
            ("calc-increment" function (:arguments ("arg")) nil [5230 5368])
            ("calc-decrement" function (:arguments ("arg")) nil [5370 5508])
            ("math-abs-approx" function (:arguments ("a")) nil [5511 5979])
            ("math-add-abs-approx" function (:arguments ("a" "b")) nil [5981 6067])
            ("math-decls-cache-tag" variable nil nil [6090 6123])
            ("math-decls-cache" variable nil nil [6124 6153])
            ("math-decls-all" variable nil nil [6154 6181])
            ("math-super-types" variable (:default-value (quote ((int numint rat real number) (numint real number) (frac rat real number) (rat real number) (float real number) (real number) (number) (scalar) (sqmatrix matrix vector) (matrix vector) (vector) (const)))) nil [6482 6757])
            ("math-setup-declarations" function nil nil [6759 8392])
            ("math-known-scalarp" function (:arguments ("a" "assume-scalar")) nil [8394 8627])
            ("math-known-matrixp" function (:arguments ("a")) nil [8629 8728])
            ("math-known-square-matrixp" function (:arguments ("a")) nil [8730 8841])
            ("math-check-known-scalarp" function (:arguments ("a")) nil [8901 9766])
            ("math-check-known-matrixp" function (:arguments ("a")) nil [9811 10633])
            ("math-check-known-square-matrixp" function (:arguments ("a")) nil [10706 11879])
            ("math-known-realp" function (:arguments ("a")) nil [11936 11996])
            ("math-known-posp" function (:arguments ("a")) nil [12044 12104])
            ("math-known-negp" function (:arguments ("a")) nil [12152 12212])
            ("math-known-nonnegp" function (:arguments ("a")) nil [12263 12335])
            ("math-known-nonposp" function (:arguments ("a")) nil [12386 12458])
            ("math-known-nonzerop" function (:arguments ("a")) nil [12496 12579])
            ("math-guess-if-neg" function (:arguments ("a")) nil [12652 12810])
            ("math-possible-signs" function (:arguments ("a" "origin")) nil [13024 18875])
            ("math-neg-signs" function (:arguments ("s1")) nil [18877 19071])
            ("math-known-integerp" function (:arguments ("a")) nil [19113 19177])
            ("math-known-num-integerp" function (:arguments ("a")) nil [19179 19249])
            ("math-known-imagp" function (:arguments ("a")) nil [19251 19312])
            ("math-possible-types" function (:arguments ("a" "num")) nil [19670 24098])
            ("math-known-evenp" function (:arguments ("a")) nil [24100 24661])
            ("math-known-oddp" function (:arguments ("a")) nil [24663 25044])
            ("calcFunc-dreal" function (:arguments ("expr")) nil [25047 25220])
            ("calcFunc-dimag" function (:arguments ("expr")) nil [25222 25412])
            ("calcFunc-dpos" function (:arguments ("expr")) nil [25414 25583])
            ("calcFunc-dneg" function (:arguments ("expr")) nil [25585 25754])
            ("calcFunc-dnonneg" function (:arguments ("expr")) nil [25756 25928])
            ("calcFunc-dnonzero" function (:arguments ("expr")) nil [25930 26117])
            ("calcFunc-dint" function (:arguments ("expr")) nil [26119 26292])
            ("calcFunc-dnumint" function (:arguments ("expr")) nil [26294 26473])
            ("calcFunc-dnatnum" function (:arguments ("expr")) nil [26475 26598])
            ("calcFunc-deven" function (:arguments ("expr")) nil [26600 26828])
            ("calcFunc-dodd" function (:arguments ("expr")) nil [26830 27057])
            ("calcFunc-drat" function (:arguments ("expr")) nil [27059 27252])
            ("calcFunc-drange" function (:arguments ("expr")) nil [27254 28105])
            ("calcFunc-dscalar" function (:arguments ("a")) nil [28107 28243])
            ("calcFunc-neg" function (:arguments ("a")) nil [28264 28324])
            ("math-neg-fancy" function (:arguments ("a")) nil [28326 29773])
            ("math-okay-neg" function (:arguments ("a")) nil [29775 29854])
            ("math-neg-float" function (:arguments ("a")) nil [29856 29937])
            ("calcFunc-add" function (:arguments ("rest")) nil [29940 30107])
            ("calcFunc-sub" function (:arguments ("rest")) nil [30109 30276])
            ("math-add-objects-fancy" function (:arguments ("a" "b")) nil [30278 33899])
            ("math-add-symb-fancy" function (:arguments ("a" "b")) nil [33901 36440])
            ("calcFunc-mul" function (:arguments ("rest")) nil [36443 36610])
            ("math-mul-objects-fancy" function (:arguments ("a" "b")) nil [36612 40184])
            ("math-mul-float" function (:arguments ("a" "b")) nil [40240 40360])
            ("math-sqr-float" function (:arguments ("a")) nil [40362 40478])
            ("math-intv-constp" function (:arguments ("a" "finite")) nil [40480 40798])
            ("math-mul-zero" function (:arguments ("a" "b")) nil [40800 41653])
            ("math-mul-symb-fancy" function (:arguments ("a" "b")) nil [41656 46617])
            ("calcFunc-div" function (:arguments ("a" "rest")) nil [46620 46746])
            ("math-div-objects-fancy" function (:arguments ("a" "b")) nil [46748 51992])
            ("math-div-by-zero" function (:arguments ("a" "b")) nil [51994 52585])
            ("math-div-zero" function (:arguments ("a" "b")) nil [52587 53212])
            ("math-trig-inverses" variable (:default-value (quote ((calcFunc-sin . calcFunc-csc) (calcFunc-cos . calcFunc-sec) (calcFunc-tan . calcFunc-cot) (calcFunc-sec . calcFunc-cos) (calcFunc-csc . calcFunc-sin) (calcFunc-cot . calcFunc-tan) (calcFunc-sinh . calcFunc-csch) (calcFunc-cosh . calcFunc-sech) (calcFunc-tanh . calcFunc-coth) (calcFunc-sech . calcFunc-cosh) (calcFunc-csch . calcFunc-sinh) (calcFunc-coth . calcFunc-tanh)))) nil [53241 53689])
            ("math-div-trig" variable nil nil [53691 53713])
            ("math-div-non-trig" variable nil nil [53714 53740])
            ("math-div-new-trig" function (:arguments ("tr")) nil [53742 53887])
            ("math-div-new-non-trig" function (:arguments ("ntr")) nil [53889 54057])
            ("math-div-isolate-trig" function (:arguments ("expr")) nil [54059 54273])
            ("math-div-isolate-trig-term" function (:arguments ("term")) nil [54275 54485])
            ("math-div-symb-fancy" function (:arguments ("a" "b")) nil [54487 58603])
            ("calcFunc-ldiv" function (:arguments ("a" "b")) nil [58633 58744])
            ("calcFunc-mod" function (:arguments ("a" "b")) nil [58746 58805])
            ("math-mod-fancy" function (:arguments ("a" "b")) nil [58807 59381])
            ("calcFunc-pow" function (:arguments ("a" "b")) nil [59384 59443])
            ("math-pow-of-zero" function (:arguments ("a" "b")) nil [59445 60288])
            ("math-pow-zero" function (:arguments ("a" "b")) nil [60290 60755])
            ("math-pow-fancy" function (:arguments ("a" "b")) nil [60757 68865])
            ("math-quarter-integer" function (:arguments ("x")) nil [68867 69525])
            ("math-pow-mod" function (:arguments ("a" "b" "m")) nil [69561 69840])
            ("math-pow-mod-step" function (:arguments ("a" "n" "m")) nil [69842 70205])
            ("math-min" function (:arguments ("a" "b")) nil [70271 71127])
            ("calcFunc-min" function (:arguments ("a" "b")) nil [71129 71390])
            ("math-min-list" function (:arguments ("a" "b")) nil [71392 71672])
            ("math-max" function (:arguments ("a" "b")) nil [71737 72009])
            ("calcFunc-max" function (:arguments ("a" "b")) nil [72011 72278])
            ("math-max-list" function (:arguments ("a" "b")) nil [72280 72560])
            ("math-abs" function (:arguments ("a")) nil [72621 73838])
            ("defalias" code nil nil [73840 73874])
            ("math-float-fancy" function (:arguments ("a")) nil [73876 74785])
            ("defalias" code nil nil [74787 74825])
            ("math-trunc-prec" variable nil nil [74962 74986])
            ("math-trunc-fancy" function (:arguments ("a")) nil [74988 76331])
            ("math-trunc-special" function (:arguments ("a" "prec")) nil [76333 76663])
            ("math-to-integer" function (:arguments ("a")) nil [76665 77044])
            ("calcFunc-ftrunc" function (:arguments ("a" "prec")) nil [77046 77234])
            ("math-floor-prec" variable nil nil [77371 77395])
            ("math-floor-fancy" function (:arguments ("a")) nil [77397 78342])
            ("math-floor-special" function (:arguments ("a" "prec")) nil [78344 78674])
            ("calcFunc-ffloor" function (:arguments ("a" "prec")) nil [78676 78864])
            ("math-ceiling" function (:arguments ("a" "prec")) nil [78941 80370])
            ("defalias" code nil nil [80372 80411])
            ("calcFunc-fceil" function (:arguments ("a" "prec")) nil [80413 80602])
            ("math-rounding-mode" variable nil nil [80604 80635])
            ("math-round" function (:arguments ("a" "prec")) nil [80717 81988])
            ("defalias" code nil nil [81990 82028])
            ("calcFunc-rounde" function (:arguments ("a" "prec")) nil [82030 82136])
            ("calcFunc-roundu" function (:arguments ("a" "prec")) nil [82138 82242])
            ("calcFunc-fround" function (:arguments ("a" "prec")) nil [82244 82432])
            ("calcFunc-frounde" function (:arguments ("a" "prec")) nil [82434 82546])
            ("calcFunc-froundu" function (:arguments ("a" "prec")) nil [82548 82658])
            ("calcFunc-mant" function (:arguments ("x")) nil [82725 82946])
            ("calcFunc-xpon" function (:arguments ("x")) nil [82948 83175])
            ("calcFunc-scf" function (:arguments ("x" "n")) nil [83177 84465])
            ("calcFunc-incr" function (:arguments ("x" "step" "relative-to")) nil [84468 85123])
            ("calcFunc-decr" function (:arguments ("x" "step" "relative-to")) nil [85125 85235])
            ("calcFunc-percent" function (:arguments ("x")) nil [85237 85375])
            ("calcFunc-relch" function (:arguments ("x" "y")) nil [85377 85517])
            ("calcFunc-abssqr" function (:arguments ("a")) nil [85580 86158])
            ("math-sqr" function (:arguments ("a")) nil [86160 86200])
            ("calcFunc-idiv" function (:arguments ("a" "b")) nil [86223 86894])
            ("math-combine-sum" function (:arguments ("a" "b" "nega" "negb" "scalar-okay")) nil [86945 88120])
            ("math-add-or-sub" function (:arguments ("a" "b" "aneg" "bneg")) nil [88122 88331])
            ("math-combine-prod-e" variable (:default-value (quote (var e var-e))) nil [88333 88376])
            ("math-unit-prefixes" variable nil nil [88503 88530])
            ("math-combine-prod" function (:arguments ("a" "b" "inva" "invb" "scalar-okay")) nil [88532 92101])
            ("math-combine-prod-trig" function (:arguments ("a" "b")) nil [92103 95175])
            ("math-mul-or-div" function (:arguments ("a" "b" "ainv" "binv")) nil [95177 95547])
            ("math-com-bterms" variable nil nil [95707 95731])
            ("math-commutative-equal" function (:arguments ("a" "b")) nil [95733 96383])
            ("math-commutative-collect" function (:arguments ("b" "neg")) nil [96385 96760])
            ("calc-arith" package nil nil [96762 96783]))          
      :file "calc-arith.el.gz"
      :pointmax 96813
      :fsize 17338
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.3!lisp!calc!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
