;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "company-autoloads.el"
      :pointmax 353
      :fsize 12366
      :lastmodtime '(24222 63436 919914 314000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [1154 1172])
            ("cl-lib" include nil nil [1173 1190])
            ("company--capf-cache" variable nil nil [1256 1288])
            ("defvar-local" code nil nil [1415 1884])
            ("company--capf-data" function nil nil [1886 2342])
            ("company--capf-data-real" function nil nil [2344 3129])
            ("declare-function" code nil nil [3131 3183])
            ("company--capf-workaround" function nil nil [3185 3577])
            ("company-capf--save-current-data" function (:arguments ("data")) nil [3579 3774])
            ("company-capf--clear-current-data" function (:arguments ("_ignored")) nil [3776 3878])
            ("defvar-local" code nil nil [3880 3919])
            ("company-capf" function
               (:user-visible-flag t
                :arguments ("command" "arg" "_args"))
                nil [3921 6864])
            ("company-capf--candidates" function (:arguments ("input")) nil [6866 8032])
            ("company--capf-post-completion" function (:arguments ("arg")) nil [8034 8967])
            ("company-capf" package nil nil [8969 8992]))          
      :file "company-capf.el"
      :pointmax 9024
      :fsize 9023
      :lastmodtime '(24222 63436 621915 278000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2479 2496])
            ("newcomment" include nil nil [2497 2518])
            ("pcase" include nil nil [2519 2535])
            ("unless" code nil nil [2602 3071])
            ("company" customgroup (:user-visible-flag t) nil [3074 3203])
            ("company-faces" customgroup (:user-visible-flag t) nil [3205 3294])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3296 3558])
            ("company-tooltip-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [3560 3848])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3850 3968])
            ("company-tooltip-search-selection" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3970 4119])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [4121 4238])
            ("company-tooltip-common" variable
               (:default-value (quote ((((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4240 4432])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-common)))
                :type "face")
                nil [4434 4588])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [4590 4794])
            ("company-tooltip-annotation-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-annotation)))
                :type "face")
                nil [4796 4962])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [4964 5145])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [5147 5332])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit (company-tooltip-selection company-tooltip)) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5334 5563])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5565 5812])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [5814 6065])
            ("company-echo" variable (:type "face") nil [6067 6141])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [6143 6347])
            ("setcdr" code nil nil [6408 6483])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6485 8018])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [8020 10035])
            ("company-tooltip-limit" variable (:default-value 10) nil [10037 10143])
            ("company-tooltip-minimum" variable (:default-value 6) nil [10145 10313])
            ("company-tooltip-minimum-width" variable nil nil [10315 10519])
            ("company-tooltip-maximum-width" variable (:default-value most-positive-fixnum) nil [10521 10744])
            ("company-tooltip-margin" variable (:default-value 1) nil [10746 10854])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [10856 11210])
            ("company-tooltip-align-annotations" variable nil nil [11212 11383])
            ("company-tooltip-flip-when-above" variable nil nil [11385 11555])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [11557 12324])
            ("put" code nil nil [12325 12377])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [12379 12685])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.51" emacs-version) (list (quote company-elisp)))) company-bbdb (\,@ (unless (version<= "26" emacs-version) (list (quote company-nxml)))) (\,@ (unless (version<= "26" emacs-version) (list (quote company-css)))) company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev))) nil [12687 20087])
            ("put" code nil nil [20089 20158])
            ("company-transformers" variable nil nil [20160 20817])
            ("company-completion-started-hook" variable nil nil [20819 21018])
            ("company-completion-cancelled-hook" variable nil nil [21020 21222])
            ("company-completion-finished-hook" variable nil nil [21224 21530])
            ("company-after-completion-hook" variable nil nil [21532 21724])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [21726 21860])
            ("company-abort-manual-when-too-short" variable nil nil [21862 22144])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [22146 22706])
            ("company-auto-complete" variable nil nil [22708 23188])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [23190 24680])
            ("company-idle-delay" variable (:default-value 0.5) nil [24682 25105])
            ("company-tooltip-idle-delay" variable (:default-value 0.5) nil [25107 25412])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [25414 26309])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs completion-at-point))) nil [26311 27226])
            ("company-show-numbers" variable nil nil [27228 27458])
            ("company-show-numbers-function" variable (:default-value (function company--show-numbers)) nil [27460 27735])
            ("company-selection-wrap-around" variable nil nil [27737 27932])
            ("company-async-wait" variable (:default-value 0.03) nil [27934 28074])
            ("company-async-timeout" variable (:default-value 2) nil [28076 28178])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [28262 28343])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [remap scroll-up-command] (quote company-next-page)) (define-key keymap [remap scroll-down-command] (quote company-previous-page)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [28345 29918])
            ("company--disabled-backends" variable nil nil [29920 29959])
            ("company-init-backend" function (:arguments ("backend")) nil [29961 30735])
            ("company--maybe-init-backend" function (:arguments ("backend")) nil [30737 30936])
            ("company-lighter-base" variable (:default-value "company") nil [30938 31092])
            ("company-lighter" variable (:default-value (quote (" " (company-candidates (:eval (if (consp company-backend) (company--group-lighter (nth company-selection company-candidates) company-lighter-base) (symbol-name company-backend))) company-lighter-base)))) nil [31094 31723])
            ("put" code nil nil [31725 31771])
            ("define-minor-mode" code nil nil [31788 33466])
            ("company-global-modes" variable (:default-value t) nil [33468 34327])
            ("define-globalized-minor-mode" code nil nil [34344 34423])
            ("company-mode-on" function nil nil [34425 34813])
            ("company-assert-enabled" function nil nil [34815 34942])
            ("defvar-local" code nil nil [35026 35062])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [35064 35109])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [35111 35220])
            ("company-ensure-emulation-alist" function nil nil [35222 35489])
            ("company-install-map" function nil nil [35491 35667])
            ("company-uninstall-map" function nil nil [35669 35745])
            ("company--company-command-p" function (:arguments ("keys")) nil [35747 35946])
            ("company-ignore" function nil nil [36172 36248])
            ("global-set-key" code nil nil [36250 36305])
            ("company-input-noop" function nil nil [36307 36388])
            ("declare-function" code nil nil [36426 36481])
            ("company--posn-col-row" function (:arguments ("posn")) nil [36483 37153])
            ("company--col-row" function (:arguments ("pos")) nil [37155 37241])
            ("company--row" function (:arguments ("pos")) nil [37243 37310])
            ("defvar-local" code nil nil [37394 37428])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [37430 37582])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [37584 37947])
            ("company-grab-symbol" function nil nil [37949 38343])
            ("company-grab-word" function nil nil [38345 38725])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [38727 39357])
            ("company-in-string-or-comment" function nil nil [39359 39589])
            ("company-call-backend" function (:arguments ("args")) nil [39591 39704])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [39706 40693])
            ("company-call-backend-raw" function (:arguments ("args")) nil [40695 41202])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [41204 42376])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix" "separate")) nil [42378 43363])
            ("company--multi-candidates-mapper" function (:arguments ("backend" "separate" "tag")) nil [43365 43780])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [43782 45099])
            ("company--prefix-str" function (:arguments ("prefix")) nil [45101 45169])
            ("defvar-local" code nil nil [45253 45286])
            ("defvar-local" code nil nil [45288 45325])
            ("defvar-local" code nil nil [45327 45371])
            ("defvar-local" code nil nil [45373 45416])
            ("defvar-local" code nil nil [45418 45465])
            ("defvar-local" code nil nil [45467 45500])
            ("defvar-local" code nil nil [45502 45536])
            ("defvar-local" code nil nil [45538 45582])
            ("defvar-local" code nil nil [45584 45671])
            ("defvar-local" code nil nil [45673 45714])
            ("company--auto-completion" variable nil nil [45716 45860])
            ("defvar-local" code nil nil [45862 45899])
            ("defvar-local" code nil nil [45901 45933])
            ("company-timer" variable nil nil [45935 45961])
            ("company-tooltip-timer" variable nil nil [45962 45996])
            ("company-strip-prefix" function (:arguments ("str")) nil [45998 46077])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [46079 46532])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [46534 47081])
            ("company-explicit-action-p" function nil nil [47083 47250])
            ("company-reformat" function (:arguments ("candidate")) nil [47252 47687])
            ("company--should-complete" function nil nil [47689 48066])
            ("company--should-continue" function nil nil [48068 48530])
            ("company-call-frontends" function (:arguments ("command")) nil [48532 48821])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [48823 49251])
            ("company--group-lighter" function (:arguments ("candidate" "base")) nil [49253 49710])
            ("company-update-candidates" function (:arguments ("candidates")) nil [49712 51299])
            ("company-calculate-candidates" function (:arguments ("prefix" "ignore-case")) nil [51301 52264])
            ("company--unique-match-p" function (:arguments ("candidates" "prefix" "ignore-case")) nil [52266 52492])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [52494 53729])
            ("company--flyspell-workaround-p" function nil nil [53731 53885])
            ("company--preprocess-candidates" function (:arguments ("candidates")) nil [53887 54175])
            ("company--postprocess-candidates" function (:arguments ("candidates")) nil [54177 54506])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [54508 55424])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [55426 55576])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [55578 56070])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [56072 56297])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [56299 56452])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [56454 57839])
            ("company--occurrence-predicate" function nil nil [57841 58793])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [58795 59617])
            ("company-sort-prefer-same-case-prefix" function (:arguments ("candidates")) nil [59619 60095])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [60097 60431])
            ("company-auto-begin" function nil nil [60433 60953])
            ("company-manual-begin" function nil nil [60970 61282])
            ("company-other-backend" function (:arguments ("backward")) nil [61284 61953])
            ("company-require-match-p" function nil nil [61955 62274])
            ("company-auto-complete-p" function (:arguments ("input")) nil [62276 62874])
            ("company--incremental-p" function nil nil [62876 63198])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [63200 63972])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [63974 64541])
            ("company--continue" function nil nil [64543 66043])
            ("company--begin-new" function nil nil [66045 67908])
            ("company--perform" function nil nil [67910 68322])
            ("company-cancel" function (:arguments ("result")) nil [68324 69474])
            ("company-abort" function nil nil [69476 69542])
            ("company-finish" function (:arguments ("result")) nil [69544 69638])
            ("company-keep" function (:arguments ("command")) nil [69640 69727])
            ("company--active-p" function nil nil [69729 69778])
            ("company-pre-command" function nil nil [69780 70384])
            ("company-post-command" function nil nil [70386 71753])
            ("company--idle-delay" function nil nil [71755 71982])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [71984 72471])
            ("company--should-begin" function nil nil [72473 72731])
            ("company-search-regexp-function" variable (:default-value (function regexp-quote)) nil [72815 73515])
            ("defvar-local" code nil nil [73517 73556])
            ("company-search-lighter" variable (:default-value (quote (" " (company-search-filtering "Filter" "Search") ": \"" company-search-string "\""))) nil [73558 73807])
            ("defvar-local" code nil nil [73809 73921])
            ("defvar-local" code nil nil [73923 73969])
            ("defvar-local" code nil nil [73971 74017])
            ("company-search-words-regexp" function (:arguments ("input")) nil [74019 74178])
            ("company-search-words-in-any-order-regexp" function (:arguments ("input")) nil [74180 74559])
            ("company-search-flex-regexp" function (:arguments ("input")) nil [74561 74891])
            ("company--permutations" function (:arguments ("lst")) nil [74893 75113])
            ("company--search" function (:arguments ("text" "lines")) nil [75115 75357])
            ("company-search-keypad" function nil nil [75359 75554])
            ("company-search-printing-char" function nil nil [75556 75839])
            ("company--search-update-predicate" function (:arguments ("ss")) nil [75841 76342])
            ("company--search-update-string" function (:arguments ("new")) nil [76344 76604])
            ("company--search-assert-input" function nil nil [76606 76763])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [76765 77198])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [77200 77706])
            ("company-search-toggle-filtering" function (:user-visible-flag t) nil [77708 78023])
            ("company-search-abort" function (:user-visible-flag t) nil [78025 78301])
            ("company-search-other-char" function nil nil [78303 78454])
            ("company-search-delete-char" function nil nil [78456 78780])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (dotimes (i 10) (define-key keymap (read (format "[kp-%s]" i)) (quote company-search-keypad))) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-delete-char)) (define-key keymap [backspace] (quote company-search-delete-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-toggle-filtering)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [78782 80842])
            ("define-minor-mode" code nil nil [80844 81799])
            ("company--search-assert-enabled" function nil nil [81801 81974])
            ("company-search-candidates" function (:user-visible-flag t) nil [81976 82739])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [82741 83030])
            ("company-filter-candidates" function (:user-visible-flag t) nil [83032 83321])
            ("company-select-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83405 83643])
            ("company-select-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83645 83842])
            ("company-select-next-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83844 84176])
            ("company-select-previous-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84178 84522])
            ("company-next-page" function (:user-visible-flag t) nil [84524 84942])
            ("company-previous-page" function (:user-visible-flag t) nil [84944 85368])
            ("company-pseudo-tooltip-overlay" variable nil nil [85370 85409])
            ("company-tooltip-offset" variable nil nil [85411 85442])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [85444 85986])
            ("company--event-col-row" function (:arguments ("event")) nil [85988 86072])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [86074 87259])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [87261 87436])
            ("company-complete-selection" function (:user-visible-flag t) nil [87438 87652])
            ("company-complete-common" function (:user-visible-flag t) nil [87654 87975])
            ("company-complete-common-or-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87977 88487])
            ("company-indent-or-complete-common" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [88489 89105])
            ("company-select-next-if-tooltip-visible-or-complete-selection" function (:user-visible-flag t) nil [89107 89539])
            ("company-complete" function (:user-visible-flag t) nil [89556 90208])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90210 91221])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [91305 91347])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [91349 91537])
            ("company-space-string" function (:arguments ("len")) nil [91539 91681])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [91683 92327])
            ("defvar-local" code nil nil [92411 92451])
            ("company-fetch-metadata" function nil nil [92453 92738])
            ("company-doc-buffer" function (:arguments ("string")) nil [92740 93010])
            ("company--electric-saved-window-configuration" variable nil nil [93012 93069])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down mwheel-scroll))) nil [93071 93234])
            ("company--electric-restore-window-configuration" function nil nil [93236 93615])
            ("company--electric-do" function (:arguments ("body")) nil [93617 94121])
            ("company--unread-this-command-keys" function nil nil [94123 94415])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [94417 95128])
            ("put" code nil nil [95129 95175])
            ("company-show-location" function (:user-visible-flag t) nil [95177 96071])
            ("put" code nil nil [96072 96116])
            ("defvar-local" code nil nil [96200 96235])
            ("company-remove-callback" function (:arguments ("ignored")) nil [96237 96512])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [96514 97285])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [97287 98195])
            ("declare-function" code nil nil [98197 98245])
            ("declare-function" code nil nil [98246 98286])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [98288 98685])
            ("company-diag" function (:user-visible-flag t) nil [98687 100501])
            ("defvar-local" code nil nil [100585 100634])
            ("defvar-local" code nil nil [100636 100675])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [100677 101261])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [101263 101518])
            ("company-round-tab" function (:arguments ("arg")) nil [101536 101618])
            ("company-plainify" function (:arguments ("str")) nil [101620 102147])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [102149 106014])
            ("company--search-chunks" function nil nil [106016 106284])
            ("company--pre-render" function (:arguments ("str" "annotation-p")) nil [106286 106786])
            ("company--clean-string" function (:arguments ("str")) nil [106788 107325])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [107340 108339])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [108341 108511])
            ("company--show-numbers" function (:arguments ("numbered")) nil [108513 108588])
            ("company--window-height" function nil nil [108590 108725])
            ("company--window-width" function nil nil [108727 109670])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [109672 110951])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [110953 111059])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [111061 114806])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [114808 115071])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [115073 115278])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [115280 115559])
            ("company--pseudo-tooltip-height" function nil nil [115570 116031])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [116033 117226])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [117228 117492])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [117494 118077])
            ("company-pseudo-tooltip-hide" function nil nil [118079 118255])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [118257 118676])
            ("company-pseudo-tooltip-unhide" function nil nil [118678 119483])
            ("company-pseudo-tooltip-guard" function nil nil [119485 119944])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [119946 121127])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [121129 121400])
            ("company-pseudo-tooltip-unless-just-one-frontend-with-delay" function (:arguments ("command")) nil [121402 122493])
            ("defvar-local" code nil nil [122577 122619])
            ("company-preview-show-at-point" function (:arguments ("pos" "completion")) nil [122621 124465])
            ("company-preview-hide" function nil nil [124467 124615])
            ("company-preview-frontend" function (:arguments ("command")) nil [124617 124985])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [124987 125234])
            ("company--show-inline-p" function nil nil [125236 125621])
            ("company-tooltip-visible-p" function nil nil [125623 125820])
            ("company-preview-common--show-p" function nil nil [125822 126074])
            ("company-preview-common-frontend" function (:arguments ("command")) nil [126076 126462])
            ("defvar-local" code nil nil [126546 126586])
            ("company-echo-timer" variable nil nil [126588 126619])
            ("company-echo-delay" variable (:default-value 0.01) nil [126621 126652])
            ("company-echo-truncate-lines" variable (:default-value t) nil [126654 126828])
            ("company-echo-show" function (:arguments ("getter")) nil [126830 127128])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [127130 127280])
            ("company-echo-cancel" function (:arguments ("unset")) nil [127282 127442])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [127444 127629])
            ("company-echo-format" function nil nil [127631 128735])
            ("company-echo-strip-common-format" function nil nil [128737 129574])
            ("company-echo-hide" function nil nil [129576 129708])
            ("company-echo-frontend" function (:arguments ("command")) nil [129710 129934])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [129936 130186])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [130188 130432])
            ("company" package nil nil [130434 130452]))          
      :file "company.el"
      :pointmax 130478
      :fsize 130477
      :lastmodtime '(24222 63436 631915 246000)
      :unmatched-syntax '((close-paren 3071 . 3072) (symbol 2556 . 2572) (open-paren 2555 . 2556)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [902 920])
            ("company-template" include nil nil [921 948])
            ("cl-lib" include nil nil [949 966])
            ("company-clang" customgroup (:user-visible-flag t) nil [968 1048])
            ("company-clang-executable" variable (:default-value (executable-find "clang")) nil [1050 1162])
            ("company-clang-begin-after-member-access" variable (:default-value t) nil [1164 1549])
            ("company-clang-use-compile-flags-txt" variable nil nil [1551 1919])
            ("company-clang-arguments" variable nil nil [1921 2204])
            ("company-clang-prefix-guesser" variable (:default-value (quote company-clang-guess-prefix)) nil [2206 2390])
            ("company-clang-modes" variable (:default-value (quote (c-mode c++-mode objc-mode))) nil [2392 2491])
            ("company-clang-insert-arguments" variable (:default-value t) nil [2493 2670])
            ("company-clang--prefix" variable nil nil [2754 2788])
            ("company-clang--guess-pch-file" function (:arguments ("file")) nil [2790 3067])
            ("company-clang--file-substring" function (:arguments ("file" "beg" "end")) nil [3069 3219])
            ("company-clang-guess-prefix" function nil nil [3221 3644])
            ("company-clang-set-prefix" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [3646 4260])
            ("add-hook" code nil nil [4283 4336])
            ("company-clang--completion-pattern" variable
               (:constant-flag t
                :default-value "^COMPLETION: \\_<\\(%s[a-zA-Z0-9_:]*\\)\\(?:\\(?: (InBase)\\)? : \\(.*\\)$\\)?$")
                nil [4519 4647])
            ("company-clang--error-buffer-name" variable
               (:constant-flag t
                :default-value "*clang-error*")
                nil [4649 4708])
            ("company-clang--lang-option" function nil nil [4710 4943])
            ("company-clang--parse-output" function (:arguments ("prefix" "_objc")) nil [4945 5745])
            ("company-clang--meta" function (:arguments ("candidate")) nil [5747 5826])
            ("company-clang--annotation" function (:arguments ("candidate")) nil [5828 6209])
            ("company-clang--annotation-1" function (:arguments ("candidate")) nil [6211 6790])
            ("company-clang--strip-formatting" function (:arguments ("text")) nil [6792 6941])
            ("company-clang--handle-error" function (:arguments ("res" "args")) nil [6943 7941])
            ("company-clang--start-process" function (:arguments ("prefix" "callback" "args")) nil [7943 9222])
            ("company-clang--build-location" function (:arguments ("pos")) nil [9224 9614])
            ("company-clang--build-complete-args" function (:arguments ("pos")) nil [9616 10194])
            ("company-clang--arguments" function nil nil [10196 11085])
            ("company-clang--candidates" function (:arguments ("prefix" "callback")) nil [11087 11680])
            ("company-clang--prefix" function nil nil [11682 11838])
            ("company-clang-required-version" variable
               (:constant-flag t
                :default-value 1.1)
                nil [11922 11967])
            ("company-clang--version" variable nil nil [11969 12004])
            ("company-clang--auto-save-p" function nil nil [12006 12093])
            ("company-clang--check-version" function (:arguments ("min" "apple-min")) nil [12095 12314])
            ("company-clang-version" function nil nil [12316 12817])
            ("company-clang" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [12819 14849])
            ("company-clang" package nil nil [14851 14875]))          
      :file "company-clang.el"
      :pointmax 14907
      :fsize 14906
      :lastmodtime '(24222 63436 716914 971000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [1002 1020])
            ("cl-lib" include nil nil [1021 1038])
            ("company-cmake" customgroup (:user-visible-flag t) nil [1040 1120])
            ("company-cmake-executable" variable (:default-value (executable-find "cmake")) nil [1122 1234])
            ("company-cmake-executable-arguments" variable (:default-value (quote ("--help-command-list" "--help-module-list" "--help-variable-list"))) nil [1236 1475])
            ("company-cmake--completion-pattern" variable (:default-value "^\\(%s[a-zA-Z0-9_<>]%s\\)$") nil [1477 1586])
            ("company-cmake-modes" variable (:default-value (quote (cmake-mode))) nil [1588 1675])
            ("company-cmake--candidates-cache" variable nil nil [1677 1755])
            ("company-cmake--meta-command-cache" variable nil nil [1757 1880])
            ("company-cmake--replace-tags" function (:arguments ("rlt")) nil [1882 2598])
            ("company-cmake--fill-candidates-cache" function (:arguments ("arg")) nil [2600 3261])
            ("company-cmake--parse" function (:arguments ("prefix" "content" "cmd")) nil [3263 3811])
            ("company-cmake--candidates" function (:arguments ("prefix")) nil [3813 4402])
            ("company-cmake--unexpand-candidate" function (:arguments ("candidate")) nil [4404 5204])
            ("company-cmake--meta" function (:arguments ("candidate")) nil [5206 6003])
            ("company-cmake--doc-buffer" function (:arguments ("candidate")) nil [6005 6588])
            ("company-cmake-prefix-dollar-brace-p" function nil nil [6590 6815])
            ("company-cmake" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [6817 7604])
            ("company-cmake" package nil nil [7606 7630]))          
      :file "company-cmake.el"
      :pointmax 7662
      :fsize 7661
      :lastmodtime '(24222 63436 637915 227000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [1188 1206])
            ("company-template" include nil nil [1207 1234])
            ("cl-lib" include nil nil [1235 1252])
            ("company-eclim" customgroup (:user-visible-flag t) nil [1254 1334])
            ("company-eclim-executable-find" function nil nil [1336 1781])
            ("company-eclim-executable" variable (:default-value (or (bound-and-true-p eclim-executable) (executable-find "eclim") (company-eclim-executable-find))) nil [1783 1980])
            ("company-eclim-auto-save" variable (:default-value t) nil [1982 2234])
            ("defvar-local" code nil nil [2318 2368])
            ("defvar-local" code nil nil [2370 2416])
            ("declare-function" code nil nil [2418 2453])
            ("json-array-type" variable nil nil [2454 2478])
            ("company-eclim--call-process" function (:arguments ("args")) nil [2480 3034])
            ("company-eclim--project-list" function nil nil [3036 3121])
            ("company-eclim--project-dir" function nil nil [3123 3453])
            ("company-eclim--project-name" function nil nil [3455 3842])
            ("company-eclim--candidates" function (:arguments ("prefix")) nil [3844 5233])
            ("company-eclim--search-point" function (:arguments ("prefix")) nil [5235 5371])
            ("company-eclim--meta" function (:arguments ("candidate")) nil [5373 5452])
            ("company-eclim--annotation" function (:arguments ("candidate")) nil [5454 5653])
            ("company-eclim--prefix" function nil nil [5655 5913])
            ("company-eclim" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [5915 7095])
            ("company-eclim" package nil nil [7097 7121]))          
      :file "company-eclim.el"
      :pointmax 7153
      :fsize 7152
      :lastmodtime '(24222 63436 604915 333000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [852 869])
            ("company-template-field" variable
               (:default-value (quote ((((background dark)) (:background "yellow" :foreground "black")) (((background light)) (:background "orange" :foreground "black"))))
                :type "face")
                nil [871 1119])
            ("company-template-forward-field-item" variable (:default-value (quote (menu-item "" company-template-forward-field :filter company-template--keymap-filter))) nil [1121 1268])
            ("company-template-nav-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [tab] company-template-forward-field-item) (define-key keymap (kbd "TAB") company-template-forward-field-item) keymap)) nil [1270 1492])
            ("company-template-clear-field-item" variable (:default-value (quote (menu-item "" company-template-clear-field :filter company-template--keymap-filter))) nil [1494 1637])
            ("company-template-field-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (set-keymap-parent keymap company-template-nav-map) (define-key keymap (kbd "C-d") company-template-clear-field-item) keymap)) nil [1639 1851])
            ("defvar-local" code nil nil [1853 1906])
            ("company-template-templates-at" function (:arguments ("pos")) nil [1990 2287])
            ("company-template-move-to-first" function (:arguments ("templ")) nil [2289 2422])
            ("company-template-forward-field" function nil nil [2424 2688])
            ("company-template-clear-field" function (:user-visible-flag t) nil [2690 3055])
            ("company-template--keymap-filter" function (:arguments ("cmd")) nil [3057 3181])
            ("company-template--after-clear-c-like-field" function nil nil [3183 4132])
            ("company-template-find-next-field" function nil nil [4134 4612])
            ("company-template-field-at" function (:arguments ("point")) nil [4614 4802])
            ("company-template-declare-template" function (:arguments ("beg" "end")) nil [4886 5266])
            ("company-template-remove-template" function (:arguments ("templ")) nil [5268 5534])
            ("company-template-add-field" function (:arguments ("templ" "beg" "end" "display" "after-clear-fn")) nil [5536 6703])
            ("company-template-remove-field" function (:arguments ("ovl" "clear")) nil [6705 7161])
            ("company-template-clean-up" function (:arguments ("pos")) nil [7163 7459])
            ("company-template-insert-hook" function (:arguments ("ovl" "after-p" "_ignore")) nil [7543 7720])
            ("company-template-post-command" function nil nil [7722 7908])
            ("company-template-c-like-templatify" function (:arguments ("call")) nil [7992 9204])
            ("company-template--c-like-args" function (:arguments ("templ" "end")) nil [9206 9623])
            ("company-template-objc-templatify" function (:arguments ("selector")) nil [9705 10749])
            ("company-template" package nil nil [10751 10778]))          
      :file "company-template.el"
      :pointmax 10813
      :fsize 10812
      :lastmodtime '(24222 63436 699915 26000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [905 923])
            ("company-dabbrev" include nil nil [924 950])
            ("cl-lib" include nil nil [951 968])
            ("company-dabbrev-code" customgroup (:user-visible-flag t) nil [970 1069])
            ("company-dabbrev-code-modes" variable (:default-value (quote (prog-mode batch-file-mode csharp-mode css-mode erlang-mode haskell-mode jde-mode lua-mode python-mode))) nil [1071 1651])
            ("company-dabbrev-code-other-buffers" variable (:default-value t) nil [1653 2225])
            ("company-dabbrev-code-time-limit" variable (:default-value 0.1) nil [2227 2427])
            ("company-dabbrev-code-everywhere" variable nil nil [2429 2551])
            ("company-dabbrev-code-ignore-case" variable nil nil [2553 2684])
            ("company-dabbrev-code--make-regexp" function (:arguments ("prefix")) nil [2686 2898])
            ("company-dabbrev-code" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [2915 4089])
            ("company-dabbrev-code" package nil nil [4091 4122]))          
      :file "company-dabbrev-code.el"
      :pointmax 4161
      :fsize 4160
      :lastmodtime '(24222 63436 690915 55000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "company-dabbrev.el"
      :fsize 8618
      :lastmodtime '(24222 63436 722914 952000))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [878 896])
            ("company-template" include nil nil [897 924])
            ("cl-lib" include nil nil [925 942])
            ("company-gtags" customgroup (:user-visible-flag t) nil [944 1029])
            ("define-obsolete-variable-alias" code nil nil [1031 1142])
            ("company-gtags-executable" variable (:default-value (executable-find "global")) nil [1144 1264])
            ("company-gtags-insert-arguments" variable (:default-value t) nil [1266 1443])
            ("defvar-local" code nil nil [1445 1500])
            ("company-gtags-modes" variable (:default-value (quote (prog-mode jde-mode))) nil [1502 1760])
            ("company-gtags--tags-available-p" function nil nil [1762 2000])
            ("company-gtags--fetch-tags" function (:arguments ("prefix")) nil [2002 3280])
            ("company-gtags--annotation" function (:arguments ("arg")) nil [3282 3472])
            ("company-gtags" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [3489 4483])
            ("company-gtags" package nil nil [4485 4509]))          
      :file "company-gtags.el"
      :pointmax 4541
      :fsize 4540
      :lastmodtime '(24222 63436 669915 123000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [878 896])
            ("cl-lib" include nil nil [897 914])
            ("company-files" customgroup (:user-visible-flag t) nil [916 1001])
            ("company-files-exclusions" variable nil nil [1003 1237])
            ("company-files--directory-files" function (:arguments ("dir" "prefix")) nil [1239 1757])
            ("company-files--exclusions-filtered" function (:arguments ("completions")) nil [1759 2437])
            ("company-files--regexps" variable (:default-value (let* ((root (if (eq system-type (quote windows-nt)) "[a-zA-Z]:/" "/")) (begin (concat "\\(?:\\.\\{1,2\\}/\\|~/\\|" root "\\)"))) (list (concat "\"\\(" begin "[^\"
]*\\)") (concat "'\\(" begin "[^'
]*\\)") (concat "\\(?:[ 	=[]\\|^\\)\\(" begin "[^ 	
]*\\)")))) nil [2439 2802])
            ("company-files--grab-existing-name" function nil nil [2804 3264])
            ("company-files--connected-p" function (:arguments ("file")) nil [3266 3374])
            ("company-files--trailing-slash-p" function (:arguments ("file")) nil [3376 3653])
            ("company-files--completion-cache" variable nil nil [3655 3699])
            ("company-files--complete" function (:arguments ("prefix")) nil [3701 5173])
            ("company-file--keys-match-p" function (:arguments ("new" "old")) nil [5175 5300])
            ("company-files" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [5317 6015])
            ("company-files" package nil nil [6017 6041]))          
      :file "company-files.el"
      :pointmax 6073
      :fsize 6072
      :lastmodtime '(24222 63436 650915 185000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [881 899])
            ("cl-lib" include nil nil [900 917])
            ("company-keywords-upper-lower" function (:arguments ("lst")) nil [919 1056])
            ("company-keywords-alist" variable (:default-value (\` ((c++-mode "alignas" "alignof" "and" "and_eq" "asm" "atomic_cancel" "atomic_commit" "atomic_noexcept" "auto" "bitand" "bitor" "bool" "break" "case" "catch" "char" "char16_t" "char32_t" "char8_t" "class" "co_await" "co_return" "co_yield" "compl" "concept" "const" "const_cast" "consteval" "constexpr" "constinit" "continue" "decltype" "default" "delete" "do" "double" "dynamic_cast" "else" "enum" "explicit" "export" "extern" "false" "final" "float" "for" "friend" "goto" "if" "import" "inline" "int" "long" "module" "mutable" "namespace" "new" "noexcept" "not" "not_eq" "nullptr" "operator" "or" "or_eq" "override" "private" "protected" "public" "reflexpr" "register" "reinterpret_cast" "requires" "return" "short" "signed" "sizeof" "static" "static_assert" "static_cast" "struct" "switch" "synchronized" "template" "this" "thread_local" "throw" "true" "try" "typedef" "typeid" "typename" "union" "unsigned" "using" "virtual" "void" "volatile" "wchar_t" "while" "xor" "xor_eq") (c-mode "_Alignas" "_Alignof" "_Atomic" "_Bool" "_Complex" "_Generic" "_Imaginary" "_Noreturn" "_Static_assert" "_Thread_local" "auto" "break" "case" "char" "const" "continue" "default" "do" "double" "else" "enum" "extern" "float" "for" "goto" "if" "inline" "int" "long" "register" "restrict" "return" "short" "signed" "sizeof" "static" "struct" "switch" "typedef" "union" "unsigned" "void" "volatile" "while") (csharp-mode "abstract" "add" "alias" "as" "base" "bool" "break" "byte" "case" "catch" "char" "checked" "class" "const" "continue" "decimal" "default" "delegate" "do" "double" "else" "enum" "event" "explicit" "extern" "false" "finally" "fixed" "float" "for" "foreach" "get" "global" "goto" "if" "implicit" "in" "int" "interface" "internal" "is" "lock" "long" "namespace" "new" "null" "object" "operator" "out" "override" "params" "partial" "private" "protected" "public" "readonly" "ref" "remove" "return" "sbyte" "sealed" "set" "short" "sizeof" "stackalloc" "static" "string" "struct" "switch" "this" "throw" "true" "try" "typeof" "uint" "ulong" "unchecked" "unsafe" "ushort" "using" "value" "var" "virtual" "void" "volatile" "where" "while" "yield") (d-mode "abstract" "alias" "align" "asm" "assert" "auto" "body" "bool" "break" "byte" "case" "cast" "catch" "cdouble" "cent" "cfloat" "char" "class" "const" "continue" "creal" "dchar" "debug" "default" "delegate" "delete" "deprecated" "do" "double" "else" "enum" "export" "extern" "false" "final" "finally" "float" "for" "foreach" "foreach_reverse" "function" "goto" "idouble" "if" "ifloat" "import" "in" "inout" "int" "interface" "invariant" "ireal" "is" "lazy" "long" "macro" "mixin" "module" "new" "nothrow" "null" "out" "override" "package" "pragma" "private" "protected" "public" "pure" "real" "ref" "return" "scope" "short" "static" "struct" "super" "switch" "synchronized" "template" "this" "throw" "true" "try" "typedef" "typeid" "typeof" "ubyte" "ucent" "uint" "ulong" "union" "unittest" "ushort" "version" "void" "volatile" "wchar" "while" "with") (f90-mode \, (company-keywords-upper-lower "abs" "abstract" "achar" "acos" "adjustl" "adjustr" "aimag" "aint" "align" "all" "all_prefix" "all_scatter" "all_suffix" "allocatable" "allocate" "allocated" "and" "anint" "any" "any_prefix" "any_scatter" "any_suffix" "asin" "assign" "assignment" "associate" "associated" "asynchronous" "atan" "atan2" "backspace" "bind" "bit_size" "block" "btest" "c_alert" "c_associated" "c_backspace" "c_bool" "c_carriage_return" "c_char" "c_double" "c_double_complex" "c_f_pointer" "c_f_procpointer" "c_float" "c_float_complex" "c_form_feed" "c_funloc" "c_funptr" "c_horizontal_tab" "c_int" "c_int16_t" "c_int32_t" "c_int64_t" "c_int8_t" "c_int_fast16_t" "c_int_fast32_t" "c_int_fast64_t" "c_int_fast8_t" "c_int_least16_t" "c_int_least32_t" "c_int_least64_t" "c_int_least8_t" "c_intmax_t" "c_intptr_t" "c_loc" "c_long" "c_long_double" "c_long_double_complex" "c_long_long" "c_new_line" "c_null_char" "c_null_funptr" "c_null_ptr" "c_ptr" "c_short" "c_signed_char" "c_size_t" "c_vertical_tab" "call" "case" "ceiling" "char" "character" "character_storage_size" "class" "close" "cmplx" "command_argument_count" "common" "complex" "conjg" "contains" "continue" "copy_prefix" "copy_scatter" "copy_suffix" "cos" "cosh" "count" "count_prefix" "count_scatter" "count_suffix" "cpu_time" "cshift" "cycle" "cyclic" "data" "date_and_time" "dble" "deallocate" "deferred" "digits" "dim" "dimension" "distribute" "do" "dot_product" "double" "dprod" "dynamic" "elemental" "else" "elseif" "elsewhere" "end" "enddo" "endfile" "endif" "entry" "enum" "enumerator" "eoshift" "epsilon" "eq" "equivalence" "eqv" "error_unit" "exit" "exp" "exponent" "extends" "extends_type_of" "external" "extrinsic" "false" "file_storage_size" "final" "floor" "flush" "forall" "format" "fraction" "function" "ge" "generic" "get_command" "get_command_argument" "get_environment_variable" "goto" "grade_down" "grade_up" "gt" "hpf_alignment" "hpf_distribution" "hpf_template" "huge" "iachar" "iall" "iall_prefix" "iall_scatter" "iall_suffix" "iand" "iany" "iany_prefix" "iany_scatter" "iany_suffix" "ibclr" "ibits" "ibset" "ichar" "ieee_arithmetic" "ieee_exceptions" "ieee_features" "ieee_get_underflow_mode" "ieee_set_underflow_mode" "ieee_support_underflow_control" "ieor" "if" "ilen" "implicit" "import" "include" "independent" "index" "inherit" "input_unit" "inquire" "int" "integer" "intent" "interface" "intrinsic" "ior" "iostat_end" "iostat_eor" "iparity" "iparity_prefix" "iparity_scatter" "iparity_suffix" "ishft" "ishftc" "iso_c_binding" "iso_fortran_env" "kind" "lbound" "le" "leadz" "len" "len_trim" "lge" "lgt" "lle" "llt" "log" "log10" "logical" "lt" "matmul" "max" "maxexponent" "maxloc" "maxval" "maxval_prefix" "maxval_scatter" "maxval_suffix" "merge" "min" "minexponent" "minloc" "minval" "minval_prefix" "minval_scatter" "minval_suffix" "mod" "module" "modulo" "move_alloc" "mvbits" "namelist" "ne" "nearest" "neqv" "new" "new_line" "nint" "non_intrinsic" "non_overridable" "none" "nopass" "not" "null" "nullify" "number_of_processors" "numeric_storage_size" "only" "onto" "open" "operator" "optional" "or" "output_unit" "pack" "parameter" "parity" "parity_prefix" "parity_scatter" "parity_suffix" "pass" "pause" "pointer" "popcnt" "poppar" "precision" "present" "print" "private" "procedure" "processors" "processors_shape" "product" "product_prefix" "product_scatter" "product_suffix" "program" "protected" "public" "pure" "radix" "random_number" "random_seed" "range" "read" "real" "realign" "recursive" "redistribute" "repeat" "reshape" "result" "return" "rewind" "rrspacing" "same_type_as" "save" "scale" "scan" "select" "selected_char_kind" "selected_int_kind" "selected_real_kind" "sequence" "set_exponent" "shape" "sign" "sin" "sinh" "size" "spacing" "spread" "sqrt" "stop" "subroutine" "sum" "sum_prefix" "sum_scatter" "sum_suffix" "system_clock" "tan" "tanh" "target" "template" "then" "tiny" "transfer" "transpose" "trim" "true" "type" "ubound" "unpack" "use" "value" "verify" "volatile" "wait" "where" "while" "with" "write")) (go-mode "append" "bool" "break" "byte" "cap" "case" "chan" "close" "complex" "complex128" "complex64" "const" "continue" "copy" "default" "defer" "delete" "else" "error" "fallthrough" "false" "float32" "float64" "for" "func" "go" "goto" "if" "imag" "import" "int" "int16" "int32" "int64" "int8" "interface" "len" "make" "map" "new" "nil" "package" "panic" "print" "println" "range" "real" "recover" "return" "rune" "select" "string" "struct" "switch" "true" "type" "uint" "uint16" "uint32" "uint64" "uint8" "uintptr" "var") (java-mode "abstract" "assert" "boolean" "break" "byte" "case" "catch" "char" "class" "continue" "default" "do" "double" "else" "enum" "extends" "final" "finally" "float" "for" "if" "implements" "import" "instanceof" "int" "interface" "long" "native" "new" "package" "private" "protected" "public" "return" "short" "static" "strictfp" "super" "switch" "synchronized" "this" "throw" "throws" "transient" "try" "void" "volatile" "while") (javascript-mode "async" "await" "break" "case" "catch" "class" "const" "continue" "debugger" "default" "delete" "do" "else" "enum" "export" "extends" "false" "finally" "for" "function" "if" "import" "in" "instanceof" "let" "new" "null" "return" "static" "super" "switch" "this" "throw" "true" "try" "typeof" "undefined" "var" "void" "while" "with" "yield") (kotlin-mode "abstract" "annotation" "as" "break" "by" "catch" "class" "companion" "const" "constructor" "continue" "data" "do" "else" "enum" "false" "final" "finally" "for" "fun" "if" "import" "in" "init" "inner" "interface" "internal" "is" "lateinit" "nested" "null" "object" "open" "out" "override" "package" "private" "protected" "public" "return" "super" "this" "throw" "trait" "true" "try" "typealias" "val" "var" "when" "while") (objc-mode "@catch" "@class" "@encode" "@end" "@finally" "@implementation" "@interface" "@private" "@protected" "@protocol" "@public" "@selector" "@synchronized" "@throw" "@try" "alloc" "autorelease" "bycopy" "byref" "in" "inout" "oneway" "out" "release" "retain") (perl-mode "AUTOLOAD" "BEGIN" "CHECK" "CORE" "DESTROY" "END" "INIT" "__END__" "__FILE__" "__LINE__" "abs" "accept" "alarm" "and" "atan2" "bind" "binmode" "bless" "caller" "chdir" "chmod" "chomp" "chop" "chown" "chr" "chroot" "close" "closedir" "cmp" "connect" "continue" "cos" "crypt" "dbmclose" "dbmopen" "defined" "delete" "die" "do" "dump" "each" "else" "elsif" "endgrent" "endhostent" "endnetent" "endprotoent" "endpwent" "endservent" "eof" "eq" "eval" "exec" "exists" "exit" "exp" "fcntl" "fileno" "flock" "for" "foreach" "fork" "format" "formline" "ge" "getc" "getgrent" "getgrgid" "getgrnam" "gethostbyaddr" "gethostbyname" "gethostent" "getlogin" "getnetbyaddr" "getnetbyname" "getnetent" "getpeername" "getpgrp" "getppid" "getpriority" "getprotobyname" "getprotobynumber" "getprotoent" "getpwent" "getpwnam" "getpwuid" "getservbyname" "getservbyport" "getservent" "getsockname" "getsockopt" "glob" "gmtime" "goto" "grep" "gt" "hex" "if" "index" "int" "ioctl" "join" "keys" "kill" "last" "lc" "lcfirst" "le" "length" "link" "listen" "local" "localtime" "lock" "log" "lstat" "lt" "map" "mkdir" "msgctl" "msgget" "msgrcv" "msgsnd" "my" "ne" "next" "no" "not" "oct" "open" "opendir" "or" "ord" "our" "pack" "package" "pipe" "pop" "pos" "print" "printf" "push" "q" "qq" "quotemeta" "qw" "qx" "rand" "read" "readdir" "readline" "readlink" "readpipe" "recv" "redo" "ref" "rename" "require" "reset" "return" "reverse" "rewinddir" "rindex" "rmdir" "scalar" "seek" "seekdir" "select" "semctl" "semget" "semop" "send" "setgrent" "sethostent" "setnetent" "setpgrp" "setpriority" "setprotoent" "setpwent" "setservent" "setsockopt" "shift" "shmctl" "shmget" "shmread" "shmwrite" "shutdown" "sin" "sleep" "socket" "socketpair" "sort" "splice" "split" "sprintf" "sqrt" "srand" "stat" "study" "sub" "substr" "symlink" "syscall" "sysopen" "sysread" "system" "syswrite" "tell" "telldir" "tie" "time" "times" "tr" "truncate" "uc" "ucfirst" "umask" "undef" "unless" "unlink" "unpack" "unshift" "untie" "until" "use" "utime" "values" "vec" "wait" "waitpid" "wantarray" "warn" "while" "write" "x" "xor" "y") (php-mode "__CLASS__" "__DIR__" "__FILE__" "__FUNCTION__" "__LINE__" "__METHOD__" "__NAMESPACE__" "_once" "abstract" "and" "array" "as" "break" "case" "catch" "cfunction" "class" "clone" "const" "continue" "declare" "default" "die" "do" "echo" "else" "elseif" "empty" "enddeclare" "endfor" "endforeach" "endif" "endswitch" "endwhile" "eval" "exception" "exit" "extends" "final" "for" "foreach" "function" "global" "goto" "if" "implements" "include" "instanceof" "interface" "isset" "list" "namespace" "new" "old_function" "or" "php_user_filter" "print" "private" "protected" "public" "require" "require_once" "return" "static" "switch" "this" "throw" "try" "unset" "use" "var" "while" "xor") (python-mode "False" "None" "True" "and" "as" "assert" "break" "class" "continue" "def" "del" "elif" "else" "except" "exec" "finally" "for" "from" "global" "if" "import" "in" "is" "lambda" "nonlocal" "not" "or" "pass" "print" "raise" "return" "try" "while" "with" "yield") (ruby-mode "BEGIN" "END" "alias" "and" "begin" "break" "case" "class" "def" "defined?" "do" "else" "elsif" "end" "ensure" "false" "for" "if" "in" "module" "next" "nil" "not" "or" "redo" "rescue" "retry" "return" "self" "super" "then" "true" "undef" "unless" "until" "when" "while" "yield") (rust-mode "Self" "as" "box" "break" "const" "continue" "crate" "else" "enum" "extern" "false" "fn" "for" "if" "impl" "in" "let" "loop" "macro" "match" "mod" "move" "mut" "pub" "ref" "return" "self" "static" "struct" "super" "trait" "true" "type" "unsafe" "use" "where" "while") (scala-mode "abstract" "case" "catch" "class" "def" "do" "else" "extends" "false" "final" "finally" "for" "forSome" "if" "implicit" "import" "lazy" "match" "new" "null" "object" "override" "package" "private" "protected" "return" "sealed" "super" "this" "throw" "trait" "true" "try" "type" "val" "var" "while" "with" "yield") (swift-mode "Protocol" "Self" "Type" "and" "as" "assignment" "associatedtype" "associativity" "available" "break" "case" "catch" "class" "column" "continue" "convenience" "default" "defer" "deinit" "didSet" "do" "dynamic" "dynamicType" "else" "elseif" "endif" "enum" "extension" "fallthrough" "false" "file" "fileprivate" "final" "for" "func" "function" "get" "guard" "higherThan" "if" "import" "in" "indirect" "infix" "init" "inout" "internal" "is" "lazy" "left" "let" "line" "lowerThan" "mutating" "nil" "none" "nonmutating" "open" "operator" "optional" "override" "postfix" "precedence" "precedencegroup" "prefix" "private" "protocol" "public" "repeat" "required" "rethrows" "return" "right" "selector" "self" "set" "static" "struct" "subscript" "super" "switch" "throw" "throws" "true" "try" "typealias" "unowned" "var" "weak" "where" "while" "willSet") (julia-mode "abstract" "break" "case" "catch" "const" "continue" "do" "else" "elseif" "end" "eval" "export" "false" "finally" "for" "function" "global" "if" "ifelse" "immutable" "import" "importall" "in" "let" "macro" "module" "otherwise" "quote" "return" "switch" "throw" "true" "try" "type" "typealias" "using" "while") (thrift-mode "binary" "bool" "byte" "const" "double" "enum" "exception" "extends" "i16" "i32" "i64" "include" "list" "map" "oneway" "optional" "required" "service" "set" "string" "struct" "throws" "typedef" "void") (js2-mode . javascript-mode) (js2-jsx-mode . javascript-mode) (espresso-mode . javascript-mode) (js-mode . javascript-mode) (js-jsx-mode . javascript-mode) (rjsx-mode . javascript-mode) (cperl-mode . perl-mode) (jde-mode . java-mode) (ess-julia-mode . julia-mode) (enh-ruby-mode . ruby-mode)))) nil [1058 18018])
            ("company-keywords" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [18035 18745])
            ("company-keywords" package nil nil [18747 18774]))          
      :file "company-keywords.el"
      :pointmax 18809
      :fsize 18808
      :lastmodtime '(24222 63436 679915 91000)
      :unmatched-syntax nil))
  :file "!home!Jamil!.emacs.d!elpa!company-20200324.2145!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
