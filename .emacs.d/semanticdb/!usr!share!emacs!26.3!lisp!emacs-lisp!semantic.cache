;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1098 1347])
            ("make-variable-buffer-local" code nil nil [1348 1397])
            ("parens-require-spaces" variable (:default-value t) nil [1399 1588])
            ("forward-sexp-function" variable nil nil [1590 2091])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2093 2823])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2825 3183])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [3185 4010])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4012 4478])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4480 4909])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4911 5457])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [5459 6200])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [6202 9555])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9557 9908])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9910 10209])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10227 10725])
            ("beginning-of-defun-function" variable nil nil [10728 11297])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11299 12625])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12627 15980])
            ("beginning-of-defun--in-emptyish-line-p" function nil nil [15982 16541])
            ("beginning-of-defun-comments" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16543 17508])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [17510 17878])
            ("buffer-end" function (:arguments ("arg")) nil [17880 18111])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18113 20419])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20421 23165])
            ("narrow-to-defun-include-comments" variable nil nil [23167 23291])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("include-comments"))
                nil [23293 25385])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [25387 25932])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [25934 28203])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28205 28769])
            ("delete-pair" function (:user-visible-flag t) nil [28771 28951])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28953 29409])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [29411 30408])
            ("check-parens" function (:user-visible-flag t) nil [30410 31323])
            ("field-complete" function (:arguments ("table" "predicate")) nil [31326 31870])
            ("lisp-complete-symbol" function (:arguments ("_predicate")) nil [31872 32859]))          
      :file "lisp.el.gz"
      :pointmax 32883
      :fsize 9132
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bytecomp" include nil nil [8026 8045])
            ("cl-lib" include nil nil [8065 8082])
            ("macroexp" include nil nil [8084 8103])
            ("subr-x" include nil nil [8123 8140])
            ("byte-compile-log-lap-1" function (:arguments ("format" "args")) nil [8143 9288])
            ("byte-compile-log-lap" function (:arguments ("format-string" "args")) nil [9290 9440])
            ("put" code nil nil [9493 9552])
            ("byte-optimize-inline-handler" function (:arguments ("form")) nil [9554 10063])
            ("byte-compile-inline-expand" function (:arguments ("form")) nil [10065 12369])
            ("byte-compile-unfold-lambda" function (:arguments ("form" "name")) nil [12393 15448])
            ("byte-optimize-form-code-walker" function (:arguments ("form" "for-effect")) nil [15494 23083])
            ("byte-optimize-all-constp" function (:arguments ("list")) nil [23085 23351])
            ("byte-optimize-form" function (:arguments ("form" "for-effect")) nil [23353 24407])
            ("byte-optimize-body" function (:arguments ("forms" "all-for-effect")) nil [24410 25037])
            ("byte-compile-trueconstp" function (:arguments ("form")) nil [25438 25918])
            ("byte-compile-nilconstp" function (:arguments ("form")) nil [25920 26379])
            ("byte-optimize-associative-math" function (:arguments ("form")) nil [26567 27046])
            ("byte-optimize-nonassociative-math" function (:arguments ("form")) nil [27291 27690])
            ("byte-optimize-approx-equal" function (:arguments ("x" "y")) nil [28079 28162])
            ("byte-optimize-delay-constants-math" function (:arguments ("form" "start" "fun")) nil [28601 29712])
            ("byte-compile-butlast" function (:arguments ("form")) nil [29714 29786])
            ("byte-optimize-plus" function (:arguments ("form")) nil [29788 30748])
            ("byte-optimize-minus" function (:arguments ("form")) nil [30750 31893])
            ("byte-optimize-multiply" function (:arguments ("form")) nil [31895 32587])
            ("byte-optimize-divide" function (:arguments ("form")) nil [32589 33483])
            ("byte-optimize-logmumble" function (:arguments ("form")) nil [33485 33857])
            ("byte-optimize-binary-predicate" function (:arguments ("form")) nil [33860 34250])
            ("byte-optimize-predicate" function (:arguments ("form")) nil [34252 34505])
            ("byte-optimize-identity" function (:arguments ("form")) nil [34507 34768])
            ("put" code nil nil [34770 34825])
            ("put" code nil nil [34827 34873])
            ("put" code nil nil [34874 34924])
            ("put" code nil nil [34925 34972])
            ("put" code nil nil [34973 35021])
            ("put" code nil nil [35022 35080])
            ("put" code nil nil [35081 35139])
            ("put" code nil nil [35141 35199])
            ("put" code nil nil [35200 35258])
            ("put" code nil nil [35259 35321])
            ("put" code nil nil [35322 35384])
            ("put" code nil nil [35385 35452])
            ("put" code nil nil [35454 35505])
            ("put" code nil nil [35506 35557])
            ("put" code nil nil [35558 35609])
            ("put" code nil nil [35610 35661])
            ("put" code nil nil [35662 35713])
            ("put" code nil nil [35714 35765])
            ("put" code nil nil [35766 35817])
            ("put" code nil nil [35818 35871])
            ("put" code nil nil [35872 35925])
            ("put" code nil nil [35926 35979])
            ("put" code nil nil [35980 36033])
            ("put" code nil nil [36034 36089])
            ("put" code nil nil [36090 36145])
            ("put" code nil nil [36146 36201])
            ("put" code nil nil [36202 36262])
            ("put" code nil nil [36264 36318])
            ("put" code nil nil [36319 36373])
            ("put" code nil nil [36374 36428])
            ("put" code nil nil [36429 36483])
            ("put" code nil nil [36485 36536])
            ("put" code nil nil [36537 36588])
            ("put" code nil nil [36589 36645])
            ("put" code nil nil [36646 36702])
            ("put" code nil nil [36953 37002])
            ("byte-optimize-quote" function (:arguments ("form")) nil [37003 37176])
            ("byte-optimize-and" function (:arguments ("form")) nil [37178 37682])
            ("byte-optimize-or" function (:arguments ("form")) nil [37684 38214])
            ("byte-optimize-cond" function (:arguments ("form")) nil [38216 39611])
            ("byte-optimize-if" function (:arguments ("form")) nil [39613 41141])
            ("byte-optimize-while" function (:arguments ("form")) nil [41143 41293])
            ("put" code nil nil [41295 41342])
            ("put" code nil nil [41343 41389])
            ("put" code nil nil [41390 41438])
            ("put" code nil nil [41439 41485])
            ("put" code nil nil [41486 41535])
            ("put" code nil nil [41593 41651])
            ("put" code nil nil [41652 41712])
            ("put" code nil nil [41713 41775])
            ("byte-optimize-funcall" function (:arguments ("form")) nil [41778 42029])
            ("byte-optimize-apply" function (:arguments ("form")) nil [42031 42696])
            ("put" code nil nil [42698 42751])
            ("put" code nil nil [42752 42803])
            ("put" code nil nil [42806 42852])
            ("put" code nil nil [42853 42900])
            ("byte-optimize-letX" function (:arguments ("form")) nil [42901 43294])
            ("put" code nil nil [43297 43342])
            ("byte-optimize-nth" function (:arguments ("form")) nil [43343 43578])
            ("put" code nil nil [43580 43631])
            ("byte-optimize-nthcdr" function (:arguments ("form")) nil [43632 43932])
            ("put" code nil nil [44104 44149])
            ("byte-optimize-set" function (:arguments ("form")) nil [44150 44544])
            ("let" code nil nil [45521 50115])
            ("let" code nil nil [50356 50537])
            ("byte-constref-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-constant2 byte-varref byte-varset byte-varbind)))
                nil [50540 50639])
            ("bytedecomp-op" variable nil nil [50699 50721])
            ("bytedecomp-ptr" variable nil nil [50722 50745])
            ("disassemble-offset" function (:arguments ("bytes")) nil [50879 52389])
            ("byte-compile-tag-number" variable nil nil [52391 52423])
            ("byte-decompile-bytecode" function (:arguments ("bytes" "constvec")) nil [52608 52856])
            ("byte-decompile-bytecode-1" function (:arguments ("bytes" "constvec" "make-spliceable")) nil [53262 57420])
            ("byte-tagref-ops" variable
               (:constant-flag t
                :default-value (cons (quote TAG) byte-goto-ops))
                nil [57448 57500])
            ("byte-conditional-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop)))
                nil [57502 57636])
            ("byte-after-unbind-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-dup byte-symbolp byte-consp byte-stringp byte-listp byte-numberp byte-integerp byte-eq byte-not byte-cons byte-list1 byte-list2 byte-interactive-p)))
                nil [57638 58258])
            ("byte-compile-side-effect-and-error-free-ops" variable
               (:constant-flag t
                :default-value (quote (byte-constant byte-dup byte-symbolp byte-consp byte-stringp byte-listp byte-integerp byte-numberp byte-eq byte-equal byte-not byte-car-safe byte-cdr-safe byte-cons byte-list1 byte-list2 byte-point byte-point-max byte-point-min byte-following-char byte-preceding-char byte-current-column byte-eolp byte-eobp byte-bolp byte-bobp byte-current-buffer byte-stack-ref)))
                nil [58260 58701])
            ("byte-compile-side-effect-free-ops" variable
               (:constant-flag t
                :default-value (nconc (quote (byte-varref byte-nth byte-memq byte-car byte-cdr byte-length byte-aref byte-symbol-value byte-get byte-concat2 byte-concat3 byte-sub1 byte-add1 byte-eqlsign byte-gtr byte-lss byte-leq byte-geq byte-diff byte-negate byte-plus byte-max byte-min byte-mult byte-char-after byte-char-syntax byte-buffer-substring byte-string= byte-string< byte-nthcdr byte-elt byte-member byte-assq byte-quo byte-rem)) byte-compile-side-effect-and-error-free-ops))
                nil [58703 59230])
            ("byte-optimize-lapcode" function (:arguments ("lap" "_for-effect")) nil [60088 84929])
            ("byte-opt" package nil nil [84931 84950])
            ("or" code nil nil [85133 85753]))          
      :file "byte-opt.el.gz"
      :pointmax 85787
      :fsize 22977
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 85758 . 85759) (symbol 85755 . 85758) (symbol 85114 . 85131) (open-paren 85113 . 85114) (close-paren 8140 . 8141) (symbol 8105 . 8122) (open-paren 8104 . 8105) (close-paren 8082 . 8083) (symbol 8047 . 8064) (open-paren 8046 . 8047)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("derived-mode-hook-name" function (:arguments ("mode")) nil [4250 4390])
            ("derived-mode-map-name" function (:arguments ("mode")) nil [4392 4524])
            ("derived-mode-syntax-table-name" function (:arguments ("mode")) nil [4526 4685])
            ("derived-mode-abbrev-table-name" function (:arguments ("mode")) nil [4687 4847])
            ("define-derived-mode" function (:arguments ("child" "parent" "name" "docstring" "body")) nil [4937 11928])
            ("derived-mode-class" function (:arguments ("mode")) nil [11985 12429])
            ("derived-mode-make-docstring" function (:arguments ("parent" "child" "docstring" "syntax" "abbrev")) nil [12446 14549])
            ("derived-mode-setup-function-name" function (:arguments ("mode")) nil [14709 14865])
            ("derived-mode-init-mode-variables" function (:arguments ("mode")) nil [14935 16152])
            ("derived-mode-set-keymap" function (:arguments ("mode")) nil [16205 16600])
            ("derived-mode-set-syntax-table" function (:arguments ("mode")) nil [16602 17028])
            ("derived-mode-set-abbrev-table" function (:arguments ("mode")) nil [17030 17417])
            ("derived-mode-run-hooks" function (:arguments ("mode")) nil [17419 17605])
            ("derived-mode-merge-keymaps" function (:arguments ("old" "new")) nil [17647 18794])
            ("derived-mode-merge-syntax-tables" function (:arguments ("old" "new")) nil [18796 19004])
            ("derived-mode-merge-abbrev-tables" function (:arguments ("old" "new")) nil [19276 19538])
            ("derived" package nil nil [19540 19558]))          
      :file "derived.el.gz"
      :pointmax 19585
      :fsize 6380
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1048 1065])
            ("macroexp" include nil nil [1066 1085])
            ("gv" include nil nil [1086 1099])
            ("cl-unload-function" function nil nil [3595 3753])
            ("dolist" code nil nil [3790 4503])
            ("dolist" code nil nil [4505 9132])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9134 9216])
            ("advice-add" code nil nil [9217 9269])
            ("advice-add" code nil nil [9270 9323])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9325 9413])
            ("advice-add" code nil nil [9414 9472])
            ("cl-closure-vars" variable nil nil [9632 9660])
            ("cl--function-convert-cache" variable nil nil [9661 9700])
            ("cl--function-convert" function (:arguments ("f")) nil [9702 11817])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [11819 13830])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [13832 14362])
            ("flet" function (:arguments ("bindings" "body")) nil [14441 16195])
            ("labels" function (:arguments ("bindings" "body")) nil [16197 17364])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17560 18450])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18452 19355])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19357 20975])
            ("make-obsolete" code nil nil [22889 22941])
            ("declare-function" code nil nil [22943 22995])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [22997 23819])
            ("define-obsolete-function-alias" code nil nil [23921 23989])
            ("define-obsolete-variable-alias" code nil nil [23990 24082])
            ("define-obsolete-function-alias" code nil nil [24083 24159])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24297 24446])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24448 24502])
            ("make-obsolete-variable" code nil nil [24503 24558])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24559 24613])
            ("make-obsolete-variable" code nil nil [24614 24669])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [24670 24724])
            ("make-obsolete-variable" code nil nil [24725 24780])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [24781 24835])
            ("make-obsolete-variable" code nil nil [24837 24892])
            ("define-obsolete-function-alias" code nil nil [24893 24959])
            ("define-obsolete-function-alias" code nil nil [24960 25024])
            ("define-obsolete-function-alias" code nil nil [25025 25085])
            ("define-obsolete-function-alias" code nil nil [25086 25146])
            ("define-obsolete-function-alias" code nil nil [25147 25207])
            ("define-obsolete-function-alias" code nil nil [25208 25268])
            ("define-obsolete-function-alias" code nil nil [25269 25329])
            ("define-obsolete-function-alias" code nil nil [25330 25406])
            ("define-obsolete-function-alias" code nil nil [25407 25477])
            ("define-obsolete-function-alias" code nil nil [25478 25556])
            ("define-obsolete-function-alias" code nil nil [25558 25654])
            ("define-obsolete-function-alias" code nil nil [25655 25731])
            ("define-obsolete-function-alias" code nil nil [25732 25805])
            ("define-obsolete-function-alias" code nil nil [25806 25872])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [25874 26029])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26080 27014])
            ("cl" package nil nil [27016 27029])
            ("run-hooks" code nil nil [27031 27056]))          
      :file "cl.el.gz"
      :pointmax 27078
      :fsize 7965
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1798 1856])
            ("eieio-version" function (:user-visible-flag t) nil [1858 1966])
            ("eieio-core" include nil nil [1968 1989])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2021 11671])
            ("oref" function (:arguments ("obj" "slot")) nil [11709 11967])
            ("defalias" code nil nil [11969 12003])
            ("defalias" code nil nil [12004 12042])
            ("make-obsolete" code nil nil [12043 12121])
            ("oref-default" function (:arguments ("obj" "slot")) nil [12123 12463])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [12490 13709])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [13822 13995])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [13997 14247])
            ("pcase-defmacro" code nil nil [14249 15547])
            ("define-obsolete-function-alias" code nil nil [15656 15737])
            ("cl-defgeneric" code nil nil [15739 15868])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [15870 16172])
            ("define-obsolete-function-alias" code nil nil [16173 16245])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test (function eq) :weakness (quote key)))
                nil [16247 16321])
            ("cl-defmethod" code nil nil [16573 16704])
            ("define-obsolete-function-alias" code nil nil [16705 16793])
            ("cl-defmethod" code nil nil [16795 17009])
            ("define-obsolete-function-alias" code nil nil [17010 17105])
            ("eieio-object-class" function (:arguments ("obj")) nil [17107 17336])
            ("define-obsolete-function-alias" code nil nil [17337 17411])
            ("define-obsolete-function-alias" code nil nil [17433 17503])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [17505 17676])
            ("define-obsolete-function-alias" code nil nil [17677 17762])
            ("eieio-class-parents" function (:arguments ("class")) nil [17764 17989])
            ("define-obsolete-function-alias" code nil nil [17991 18067])
            ("eieio-class-children" function (:arguments ("class")) nil [18069 18292])
            ("define-obsolete-function-alias" code nil nil [18293 18373])
            ("define-obsolete-function-alias" code nil nil [18403 18493])
            ("define-obsolete-function-alias" code nil nil [18494 18583])
            ("eieio-class-parent" function (:arguments ("class")) nil [18585 18725])
            ("define-obsolete-function-alias" code nil nil [18726 18799])
            ("same-class-p" function (:arguments ("obj" "class")) nil [18801 19031])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19033 19272])
            ("defalias" code nil nil [19300 19345])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [19347 19959])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [19961 20036])
            ("eieio-class-slots" function (:arguments ("class")) nil [20038 20349])
            ("object-slots" function (:arguments ("obj")) nil [20351 20595])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [20597 20902])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [20929 21218])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [21220 21571])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [21616 22201])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [22203 22316])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [22318 23002])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [23004 23362])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [23423 23961])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [23963 24421])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [24423 24962])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [24964 25769])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [25771 26121])
            ("gv-define-simple-setter" code nil nil [26401 26448])
            ("eieio-default-superclass" type (:type "class") nil [26833 27100])
            ("setq" code nil nil [27102 27176])
            ("define-obsolete-function-alias" code nil nil [27178 27261])
            ("cl-defgeneric" code nil nil [27263 27558])
            ("define-obsolete-function-alias" code nil nil [27560 27628])
            ("cl-defmethod" code nil nil [27630 28763])
            ("cl-defgeneric" code nil nil [28811 28962])
            ("cl-defmethod" code nil nil [28964 29451])
            ("cl-defgeneric" code nil nil [29499 29607])
            ("cl-defmethod" code nil nil [29609 31165])
            ("cl-defgeneric" code nil nil [31167 31722])
            ("cl-defgeneric" code nil nil [31724 31856])
            ("cl-defmethod" code nil nil [31858 32664])
            ("cl-defgeneric" code nil nil [32666 32929])
            ("cl-defmethod" code nil nil [32931 33306])
            ("cl-defgeneric" code nil nil [33308 33484])
            ("cl-defgeneric" code nil nil [33486 33811])
            ("cl-defmethod" code nil nil [33813 34431])
            ("cl-defmethod" code nil nil [34434 34626])
            ("eieio-print-depth" variable nil nil [34628 34720])
            ("cl-defgeneric" code nil nil [34722 34891])
            ("cl-defmethod" code nil nil [34893 37218])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [37220 37986])
            ("eieio-list-prin1" function (:arguments ("list")) nil [37988 38505])
            ("eieio-change-class" function (:arguments ("_obj" "_class")) nil [38550 38763])
            ("define-obsolete-function-alias" code nil nil [38764 38837])
            ("add-hook" code nil nil [39057 39129])
            ("eieio" package nil nil [39131 39147]))          
      :file "eieio.el.gz"
      :pointmax 39169
      :fsize 11957
      :lastmodtime '(23808 55554 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [996 1013])
            ("debugger" customgroup (:user-visible-flag t) nil [1015 1122])
            ("debugger-mode-hook" variable nil nil [1124 1258])
            ("debugger-batch-max-lines" variable (:default-value 40) nil [1260 1614])
            ("debugger-print-function" variable (:default-value (function cl-prin1)) nil [1616 1834])
            ("debugger-bury-or-kill" variable (:default-value (quote bury)) nil [1836 3089])
            ("debugger-step-after-exit" variable nil nil [3091 3188])
            ("debugger-value" variable nil nil [3190 3284])
            ("debugger-old-buffer" variable nil nil [3286 3389])
            ("debugger-previous-window" variable nil nil [3391 3485])
            ("debugger-previous-window-height" variable nil nil [3487 3591])
            ("debugger-previous-backtrace" variable nil nil [3593 3748])
            ("debugger-outer-match-data" variable nil nil [3750 3784])
            ("debugger-will-be-back" variable nil nil [3785 3878])
            ("inhibit-debug-on-entry" variable nil nil [3880 3968])
            ("debugger-jumping-flag" variable nil nil [3970 4187])
            ("inhibit-trace" variable nil nil [4189 4211])
            ("debugger-args" variable nil nil [4252 4633])
            ("setq" code nil nil [4650 4672])
            ("debug" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [4688 10267])
            ("debugger-insert-backtrace" function (:arguments ("frames" "do-xrefs")) nil [10271 11911])
            ("debugger-setup-buffer" function (:arguments ("args")) nil [11913 14851])
            ("debugger-step-through" function (:user-visible-flag t) nil [14855 15268])
            ("debugger-continue" function (:user-visible-flag t) nil [15270 15750])
            ("debugger-return-value" function
               (:user-visible-flag t
                :arguments ("val"))
                nil [15752 16559])
            ("debugger-jump" function (:user-visible-flag t) nil [16561 16878])
            ("debugger-reenable" function nil nil [16880 17142])
            ("debugger-frame-number" function (:arguments ("skip-base")) nil [17144 18348])
            ("debugger-frame" function (:user-visible-flag t) nil [18350 18693])
            ("debugger-frame-clear" function (:user-visible-flag t) nil [18695 19042])
            ("debugger-env-macro" function (:arguments ("body")) nil [19044 19292])
            ("debugger--backtrace-base" function nil nil [19294 19554])
            ("debugger-eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "nframe"))
                nil [19556 20245])
            ("debugger--locals-visible-p" function nil nil [20247 20438])
            ("debugger--insert-locals" function (:arguments ("locals")) nil [20440 20835])
            ("debugger--show-locals" function nil nil [20837 21297])
            ("debugger--hide-locals" function nil nil [21299 21767])
            ("debugger-toggle-locals" function (:user-visible-flag t) nil [21769 21976])
            ("debugger-mode-map" variable (:default-value (let ((map (make-keymap)) (menu-map (make-sparse-keymap))) (set-keymap-parent map button-buffer-map) (suppress-keymap map) (define-key map "-" (quote negative-argument)) (define-key map "b" (quote debugger-frame)) (define-key map "c" (quote debugger-continue)) (define-key map "j" (quote debugger-jump)) (define-key map "r" (quote debugger-return-value)) (define-key map "u" (quote debugger-frame-clear)) (define-key map "d" (quote debugger-step-through)) (define-key map "l" (quote debugger-list-functions)) (define-key map "h" (quote describe-mode)) (define-key map "q" (quote top-level)) (define-key map "e" (quote debugger-eval-expression)) (define-key map "v" (quote debugger-toggle-locals)) (define-key map " " (quote next-line)) (define-key map "R" (quote debugger-record-expression)) (define-key map "" (quote debug-help-follow)) (define-key map [mouse-2] (quote push-button)) (define-key map [menu-bar debugger] (cons "Debugger" menu-map)) (define-key menu-map [deb-top] (quote (menu-item "Quit" top-level :help "Quit debugging and return to top level"))) (define-key menu-map [deb-s0] (quote ("--"))) (define-key menu-map [deb-descr] (quote (menu-item "Describe Debugger Mode" describe-mode :help "Display documentation for debugger-mode"))) (define-key menu-map [deb-hfol] (quote (menu-item "Help Follow" debug-help-follow :help "Follow cross-reference"))) (define-key menu-map [deb-nxt] (quote (menu-item "Next Line" next-line :help "Move cursor down"))) (define-key menu-map [deb-s1] (quote ("--"))) (define-key menu-map [deb-lfunc] (quote (menu-item "List debug on entry functions" debugger-list-functions :help "Display a list of all the functions now set to debug on entry"))) (define-key menu-map [deb-fclear] (quote (menu-item "Cancel debug frame" debugger-frame-clear :help "Do not enter debugger when this frame exits"))) (define-key menu-map [deb-frame] (quote (menu-item "Debug frame" debugger-frame :help "Request entry to debugger when this frame exits"))) (define-key menu-map [deb-s2] (quote ("--"))) (define-key menu-map [deb-ret] (quote (menu-item "Return value..." debugger-return-value :help "Continue, specifying value to return."))) (define-key menu-map [deb-rec] (quote (menu-item "Display and Record Expression" debugger-record-expression :help "Display a variable's value and record it in `*Backtrace-record*' buffer"))) (define-key menu-map [deb-eval] (quote (menu-item "Eval Expression..." debugger-eval-expression :help "Eval an expression, in an environment like that outside the debugger"))) (define-key menu-map [deb-jump] (quote (menu-item "Jump" debugger-jump :help "Continue to exit from this frame, with all debug-on-entry suspended"))) (define-key menu-map [deb-cont] (quote (menu-item "Continue" debugger-continue :help "Continue, evaluating this expression without stopping"))) (define-key menu-map [deb-step] (quote (menu-item "Step through" debugger-step-through :help "Proceed, stepping through subexpressions of this expression"))) map)) nil [21980 25072])
            ("put" code nil nil [25074 25115])
            ("define-derived-mode" code nil nil [25117 25938])
            ("debugger-record-buffer" variable (:default-value "*Debugger-record*") nil [25941 26123])
            ("debugger-record-expression" function
               (:user-visible-flag t
                :arguments ("exp"))
                nil [26125 26663])
            ("debug-help-follow" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [26665 27478])
            ("debug--implement-debug-on-entry" function (:arguments ("_ignore")) nil [27583 27907])
            ("debug-on-entry" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [27924 29151])
            ("debug--function-list" function nil nil [29153 29394])
            ("cancel-debug-on-entry" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [29411 30189])
            ("debugger-list-functions" function (:user-visible-flag t) nil [30191 31317])
            ("debug--implement-debug-watch" function (:arguments ("symbol" "newval" "op" "where")) nil [31319 31640])
            ("debug-on-variable-change" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [31657 32855])
            ("defalias" code nil nil [32872 32922])
            ("debug--variable-list" function nil nil [32925 33185])
            ("cancel-debug-on-variable-change" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [33202 34045])
            ("defalias" code nil nil [34062 34126])
            ("debug" package nil nil [34128 34144]))          
      :file "debug.el.gz"
      :pointmax 34169
      :fsize 9773
      :lastmodtime '(23661 22986 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1085 1102])
            ("font-lock-comment-face" variable nil nil [1105 1136])
            ("font-lock-doc-face" variable nil nil [1137 1164])
            ("font-lock-keywords-case-fold-search" variable nil nil [1165 1209])
            ("font-lock-string-face" variable nil nil [1210 1240])
            ("define-abbrev-table" code nil nil [1242 1322])
            ("lisp--mode-syntax-table" variable (:default-value (let ((table (make-syntax-table)) (i 0)) (while (< i 48) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 57)) (while (< i 65) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 90)) (while (< i 97) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 122)) (while (< i 128) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (modify-syntax-entry 32 "    " table) (modify-syntax-entry 160 "    " table) (modify-syntax-entry 9 "    " table) (modify-syntax-entry 12 "    " table) (modify-syntax-entry 10 ">   " table) (modify-syntax-entry 59 "<   " table) (modify-syntax-entry 96 "'   " table) (modify-syntax-entry 39 "'   " table) (modify-syntax-entry 44 "'   " table) (modify-syntax-entry 64 "_ p" table) (modify-syntax-entry 46 "_   " table) (modify-syntax-entry 35 "'   " table) (modify-syntax-entry 34 "\"    " table) (modify-syntax-entry 92 "\\   " table) (modify-syntax-entry 40 "()  " table) (modify-syntax-entry 41 ")(  " table) table)) nil [1324 2843])
            ("lisp-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table lisp--mode-syntax-table))) (modify-syntax-entry 91 "_   " table) (modify-syntax-entry 93 "_   " table) (modify-syntax-entry 35 "' 14" table) (modify-syntax-entry 124 "\" 23bn" table) table)) nil [2845 3159])
            ("lisp-mode-symbol-regexp" variable
               (:constant-flag t
                :default-value "\\(?:\\sw\\|\\s_\\|\\\\.\\)+")
                nil [3181 3246])
            ("lisp-imenu-generic-expression" variable (:default-value (list (list nil (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defun" "defmacro" "defun*" "defsubst" "define-inline" "define-advice" "defadvice" "define-skeleton" "define-compilation-mode" "define-minor-mode" "define-global-minor-mode" "define-globalized-minor-mode" "define-derived-mode" "define-generic-mode" "ert-deftest" "cl-defun" "cl-defsubst" "cl-defmacro" "cl-define-compiler-macro" "cl-defgeneric" "cl-defmethod" "define-compiler-macro" "define-modify-macro" "defsetf" "define-setf-expander" "define-method-combination" "defgeneric" "defmethod")) t)) "\\s-+\\(" lisp-mode-symbol-regexp "\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defconst" "defcustom" "defconstant" "defparameter" "define-symbol-macro")) t)) "\\s-+\\(" lisp-mode-symbol-regexp "\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(defvar\\(?:-local\\)?\\s-+\\(" lisp-mode-symbol-regexp "\\)" "[[:space:]
]+[^)]")) 1) (list (purecopy "Types") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defgroup" "deftheme" "define-widget" "define-error" "defface" "cl-deftype" "cl-defstruct" "deftype" "defstruct" "define-condition" "defpackage" "defclass")) t)) "\\s-+'?\\(" lisp-mode-symbol-regexp "\\)")) 2))) nil [3249 5511])
            ("put" code nil nil [5576 5609])
            ("put" code nil nil [5610 5644])
            ("put" code nil nil [5645 5678])
            ("put" code nil nil [5679 5712])
            ("put" code nil nil [5713 5746])
            ("put" code nil nil [5747 5783])
            ("put" code nil nil [5784 5824])
            ("put" code nil nil [5831 5867])
            ("put" code nil nil [5868 5905])
            ("lisp-doc-string-elt-property" variable (:default-value (quote doc-string-elt)) nil [5907 6024])
            ("lisp-prettify-symbols-alist" variable
               (:constant-flag t
                :default-value (quote (("lambda" . 955))))
                nil [6026 6143])
            ("lisp--match-hidden-arg" function (:arguments ("limit")) nil [6170 6754])
            ("lisp--el-non-funcall-position-p" function (:arguments ("pos")) nil [6756 8290])
            ("lisp--el-match-keyword" function (:arguments ("limit")) nil [8292 8831])
            ("let-when-compile" function (:arguments ("bindings" "body")) nil [8833 9565])
            ("elisp--font-lock-backslash" function nil nil [9567 10387])
            ("let-when-compile" code nil nil [10389 22244])
            ("define-obsolete-variable-alias" code nil nil [22246 22340])
            ("lisp-el-font-lock-keywords" variable (:default-value lisp-el-font-lock-keywords-1) nil [22341 22462])
            ("lisp-cl-font-lock-keywords" variable (:default-value lisp-cl-font-lock-keywords-1) nil [22463 22579])
            ("lisp-string-in-doc-position-p" function (:arguments ("listbeg" "startpos")) nil [22581 24046])
            ("lisp-string-after-doc-keyword-p" function (:arguments ("listbeg" "startpos")) nil [24048 24499])
            ("lisp-font-lock-syntactic-face-function" function (:arguments ("state")) nil [24501 25255])
            ("lisp-adaptive-fill" function nil nil [25257 25532])
            ("lisp-mode-variables" function (:arguments ("lisp-syntax" "keywords-case-insensitive" "elisp")) nil [25534 27942])
            ("lisp-outline-level" function nil nil [27944 28126])
            ("lisp-current-defun-name" function nil nil [28128 29052])
            ("lisp-mode-shared-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map prog-mode-map) (define-key map "" (quote indent-sexp)) (define-key map "" (quote backward-delete-char-untabify)) map)) nil [29054 29578])
            ("lisp-mode-hook" variable nil nil [29580 29715])
            ("lisp-interaction-mode-hook" variable nil nil [29717 29863])
            ("lisp-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" (quote lisp-eval-defun)) (define-key map "" (quote run-lisp)) (bindings--define-key map [menu-bar lisp] (cons "Lisp" menu-map)) (bindings--define-key menu-map [run-lisp] (quote (menu-item "Run inferior Lisp" run-lisp :help "Run an inferior Lisp process, input and output via buffer `*inferior-lisp*'"))) (bindings--define-key menu-map [ev-def] (quote (menu-item "Eval defun" lisp-eval-defun :help "Send the current defun to the Lisp process made by M-x run-lisp"))) (bindings--define-key menu-map [ind-sexp] (quote (menu-item "Indent sexp" indent-sexp :help "Indent each line of the list starting just after point"))) map)) nil [29889 30816])
            ("define-derived-mode" code nil nil [30818 31414])
            ("lisp-find-tag-default" function nil nil [31416 31608])
            ("defalias" code nil nil [31637 31676])
            ("lisp-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [31678 31722])
            ("lisp-comment-indent" function nil nil [31724 32101])
            ("define-obsolete-function-alias" code nil nil [32103 32177])
            ("lisp-indent-offset" variable nil nil [32179 32340])
            ("put" code nil nil [32341 32432])
            ("lisp-indent-function" variable (:default-value (quote lisp-indent-function)) nil [32434 32806])
            ("lisp-ppss" function (:arguments ("pos")) nil [32808 33325])
            ("cl-defstruct" code nil nil [33327 33699])
            ("lisp-indent-calc-next" function (:arguments ("state")) nil [33701 36654])
            ("lisp-indent-region" function (:arguments ("start" "end")) nil [36656 37728])
            ("lisp-indent-line" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [37730 38923])
            ("calculate-lisp-indent-last-sexp" variable nil nil [38925 38965])
            ("calculate-lisp-indent" function (:arguments ("parse-start")) nil [38967 46001])
            ("lisp-indent-function" function (:arguments ("indent-point" "state")) nil [46003 48766])
            ("lisp-body-indent" variable (:default-value 2) nil [48768 48900])
            ("put" code nil nil [48901 48955])
            ("lisp-indent-specform" function (:arguments ("count" "state" "indent-point" "normal-indent")) nil [48957 51259])
            ("lisp-indent-defform" function (:arguments ("state" "_indent-point")) nil [51261 51488])
            ("put" code nil nil [51708 51752])
            ("put" code nil nil [51760 51796])
            ("put" code nil nil [51797 51833])
            ("put" code nil nil [51834 51870])
            ("put" code nil nil [51871 51916])
            ("put" code nil nil [51929 51976])
            ("put" code nil nil [51987 52037])
            ("put" code nil nil [52045 52079])
            ("put" code nil nil [52080 52115])
            ("put" code nil nil [52116 52152])
            ("put" code nil nil [52153 52186])
            ("put" code nil nil [52187 52223])
            ("put" code nil nil [52224 52269])
            ("put" code nil nil [52270 52313])
            ("put" code nil nil [52318 52361])
            ("put" code nil nil [52366 52411])
            ("put" code nil nil [52412 52469])
            ("indent-sexp" function
               (:user-visible-flag t
                :arguments ("endpos"))
                nil [52471 55168])
            ("indent-pp-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [55170 55624])
            ("emacs-lisp-docstring-fill-column" variable (:default-value 65) nil [55665 55978])
            ("put" code nil nil [55979 56084])
            ("lisp-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [56086 58929])
            ("indent-code-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "nochange-regexp"))
                nil [58931 60095])
            ("lisp-mode" package nil nil [60097 60117]))          
      :file "lisp-mode.el.gz"
      :pointmax 60146
      :fsize 15634
      :lastmodtime '(23900 21803 0 0)
      :unmatched-syntax '((close-paren 3246 . 3247) (symbol 3162 . 3178) (open-paren 3161 . 3162) (close-paren 1102 . 1103) (symbol 1067 . 1084) (open-paren 1066 . 1067)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("warnings" customgroup (:user-visible-flag t) nil [947 1033])
            ("warning-levels" variable (:default-value (quote ((:emergency "Emergency%s: " ding) (:error "Error%s: ") (:warning "Warning%s: ") (:debug "Debug%s: ")))) nil [1035 1812])
            ("put" code nil nil [1813 1858])
            ("warning-level-aliases" variable (:default-value (quote ((emergency . :emergency) (error . :error) (warning . :warning) (notice . :warning) (info . :warning) (critical . :emergency) (alarm . :emergency)))) nil [2008 2434])
            ("warning-minimum-level" variable (:default-value :warning) nil [2437 2859])
            ("defvaralias" code nil nil [2860 2927])
            ("warning-minimum-log-level" variable (:default-value :warning) nil [2929 3358])
            ("defvaralias" code nil nil [3359 3426])
            ("warning-suppress-log-types" variable nil nil [3428 3942])
            ("warning-suppress-types" variable nil nil [3944 4557])
            ("warning-prefix-function" variable nil nil [4731 5128])
            ("warning-series" variable nil nil [5301 5739])
            ("put" code nil nil [5740 5785])
            ("warning-fill-prefix" variable nil nil [5958 6067])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [6240 6479])
            ("warning-numeric-level" function (:arguments ("level")) nil [6482 6683])
            ("warning-suppress-p" function (:arguments ("type" "suppress-list")) nil [6685 7606])
            ("display-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [7624 12053])
            ("lwarn" function (:arguments ("type" "level" "message" "args")) nil [12186 13086])
            ("warn" function (:arguments ("message" "args")) nil [13103 13428])
            ("warnings" package nil nil [13430 13449]))          
      :file "warnings.el.gz"
      :pointmax 13477
      :fsize 4271
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("list-timers" function
               (:user-visible-flag t
                :arguments ("_ignore-auto" "_nonconfirm"))
                nil [882 2712])
            ("timer-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote timer-list-cancel)) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (easy-menu-define nil map "" (quote ("Timers" ["Cancel" timer-list-cancel t]))) map)) nil [2932 3209])
            ("define-derived-mode" code nil nil [3211 3611])
            ("timer-list-cancel" function (:user-visible-flag t) nil [3613 3986])
            ("timer-list" package nil nil [3988 4009]))          
      :file "timer-list.el.gz"
      :pointmax 4039
      :fsize 1476
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("let-alist--deep-dot-search" function (:arguments ("data")) nil [2310 3222])
            ("let-alist--access-sexp" function (:arguments ("symbol" "variable")) nil [3224 3577])
            ("let-alist--list-to-sexp" function (:arguments ("list" "var")) nil [3579 3810])
            ("let-alist--remove-dot" function (:arguments ("symbol")) nil [3812 4028])
            ("let-alist" function (:arguments ("alist" "body")) nil [4069 5248])
            ("let-alist" package nil nil [5250 5270]))          
      :file "let-alist.el.gz"
      :pointmax 5299
      :fsize 2027
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("push" code nil nil [4540 4601])
            ("cl-lib" include nil nil [4984 5001])
            ("cl-macs" include nil nil [5022 5040])
            ("pcase" include nil nil [5083 5099])
            ("cl-defstruct" code nil nil [5102 5405])
            ("cl-generic-define-generalizer" function (:arguments ("name" "priority" "tagcode-function" "specializers-function")) nil [5408 6266])
            ("cl-generic-define-generalizer" code nil nil [6268 6388])
            ("cl-defstruct" code nil nil [6390 6908])
            ("cl-defstruct" code nil nil [6910 7715])
            ("cl-generic-function-options" function (:arguments ("generic")) nil [7717 7850])
            ("cl--generic" function (:arguments ("name")) nil [7852 7909])
            ("cl-generic-p" function (:arguments ("f")) nil [7911 8018])
            ("cl-generic-ensure-function" function (:arguments ("name" "noerror")) nil [8020 8752])
            ("cl-defgeneric" function (:arguments ("name" "args" "options-and-methods")) nil [8769 11796])
            ("cl-generic-define" function (:arguments ("name" "args" "options")) nil [11813 12873])
            ("cl-generic-current-method-specializers" function nil nil [12875 13138])
            ("cl-generic-define-context-rewriter" function (:arguments ("name" "args" "body")) nil [13140 13551])
            ("cl--generic-lambda" function (:arguments ("args" "body")) nil [15324 17281])
            ("cl--generic-split-args" function (:arguments ("args")) nil [13990 15320])
            ("cl--generic-fgrep" function (:arguments ("vars" "sexp")) nil [13635 13986])
            ("put" code nil nil [17284 17372])
            ("cl--generic-make-defmethod-docstring" function nil nil [17374 18248])
            ("cl-defmethod" function (:arguments ("name" "args" "body")) nil [18265 21558])
            ("cl--generic-member-method" function (:arguments ("specializers" "qualifiers" "methods")) nil [21560 21895])
            ("cl--generic-load-hist-format" function (:arguments ("name" "qualifiers" "specializers")) nil [21897 22199])
            ("cl-generic-define-method" function (:arguments ("name" "qualifiers" "args" "uses-cnm" "function")) nil [22216 25331])
            ("cl--generic-with-memoization" function (:arguments ("place" "code")) nil [25333 25614])
            ("cl--generic-dispatchers" variable (:default-value (make-hash-table :test (function equal))) nil [25616 25680])
            ("cl--generic-get-dispatcher" function (:arguments ("dispatch")) nil [25682 28165])
            ("cl--generic-make-function" function (:arguments ("generic")) nil [28167 28389])
            ("cl--generic-make-next-function" function (:arguments ("generic" "dispatches" "methods")) nil [28391 29170])
            ("cl--generic-combined-method-memoization" variable (:default-value (make-hash-table :test (function equal) :weakness (quote value))) nil [29172 29525])
            ("define-error" code nil nil [29527 29596])
            ("cl--generic-build-combined-method" function (:arguments ("generic" "methods")) nil [29598 30839])
            ("cl--generic-no-next-method-function" function (:arguments ("generic" "method")) nil [30841 30977])
            ("cl-generic-call-method" function (:arguments ("generic" "method" "fun")) nil [30979 31887])
            ("defalias" code nil nil [31912 31976])
            ("cl--generic-standard-method-combination" function (:arguments ("generic" "methods")) nil [31978 33630])
            ("cl-generic-apply" function (:arguments ("generic" "args")) nil [33632 34137])
            ("cl--generic-arg-specializer" function (:arguments ("method" "dispatch-arg")) nil [34139 34421])
            ("cl--generic-cache-miss" function (:arguments ("generic" "dispatch-arg" "dispatches-left" "methods-left" "types")) nil [34423 35193])
            ("cl-defgeneric" code nil nil [35195 36980])
            ("cl-defgeneric" code nil nil [36982 37488])
            ("unless" code nil nil [37490 37814])
            ("cl-defmethod" code nil nil [37816 38042])
            ("cl--generic-prefill-dispatchers" function (:arguments ("arg-or-context" "specializer")) nil [38303 39307])
            ("cl-defmethod" code nil nil [39310 39510])
            ("cl--generic-nnm-sample" variable
               (:constant-flag t
                :default-value (cl--generic-no-next-method-function t t))
                nil [39512 39587])
            ("cl--generic-cnm-sample" variable
               (:constant-flag t
                :default-value (funcall (cl--generic-build-combined-method nil (list (cl--generic-make-method nil nil t (function identity))))))
                nil [39588 39737])
            ("cl--generic-isnot-nnm-p" function (:arguments ("cnm")) nil [39739 41038])
            ("define-error" code nil nil [41105 41145])
            ("define-error" code nil nil [41146 41210])
            ("define-error" code nil nil [41211 41281])
            ("define-error" code nil nil [41282 41360])
            ("cl-defgeneric" code nil nil [41362 41568])
            ("cl-defgeneric" code nil nil [41570 41771])
            ("cl-defgeneric" code nil nil [41773 41965])
            ("cl-call-next-method" function (:arguments ("_args")) nil [41967 42213])
            ("cl-next-method-p" function nil nil [42215 42550])
            ("cl-find-method" function (:arguments ("generic" "qualifiers" "specializers")) nil [42567 42748])
            ("cl--generic-search-method" function (:arguments ("met-name")) nil [42789 43740])
            ("cl--generic-find-defgeneric-regexp" variable (:default-value "(\\(?:cl-\\)?defgeneric[ 	]+%s\\>") nil [43800 43880])
            ("with-eval-after-load" code nil nil [43882 44172])
            ("cl--generic-method-info" function (:arguments ("method")) nil [44174 45392])
            ("add-hook" code nil nil [45394 45465])
            ("cl--generic-describe" function (:arguments ("function")) nil [45466 46989])
            ("cl--generic-specializers-apply-to-type-p" function (:arguments ("specializers" "type")) nil [46991 47859])
            ("cl-generic-all-functions" function (:arguments ("type")) nil [47861 48459])
            ("cl--generic-method-documentation" function (:arguments ("function" "type")) nil [48461 48991])
            ("cl--generic-method-files" function (:arguments ("method")) nil [48993 49578])
            ("cl--generic-head-used" variable (:default-value (make-hash-table :test (function eql))) nil [50276 50336])
            ("cl-generic-define-generalizer" code nil nil [50338 50544])
            ("cl-defmethod" code nil nil [50546 51078])
            ("cl--generic-prefill-dispatchers" code nil nil [51080 51126])
            ("cl--generic-eql-used" variable (:default-value (make-hash-table :test (function eql))) nil [51171 51230])
            ("cl-generic-define-generalizer" code nil nil [51232 51425])
            ("cl-defmethod" code nil nil [51427 51678])
            ("cl--generic-prefill-dispatchers" code nil nil [51680 51725])
            ("cl--generic-prefill-dispatchers" code nil nil [51726 51783])
            ("cl--generic-prefill-dispatchers" code nil nil [51784 51907])
            ("cl--generic-prefill-dispatchers" code nil nil [51908 52031])
            ("cl--generic-struct-tag" function (:arguments ("name" "_")) nil [52078 52207])
            ("cl--generic-class-parents" function (:arguments ("class")) nil [52209 52598])
            ("cl--generic-struct-specializers" function (:arguments ("tag" "_")) nil [52600 52817])
            ("cl-generic-define-generalizer" code nil nil [52819 52947])
            ("cl-defmethod" code nil nil [52949 53711])
            ("cl--generic-prefill-dispatchers" code nil nil [53713 53772])
            ("cl--generic-typeof-types" variable
               (:constant-flag t
                :default-value (quote ((integer number number-or-marker atom) (symbol atom) (string array sequence atom) (cons list sequence) (marker number-or-marker atom) (overlay atom) (float number atom) (window-configuration atom) (process atom) (window atom) (subr atom) (compiled-function function atom) (buffer atom) (char-table array sequence atom) (bool-vector array sequence atom) (frame atom) (hash-table atom) (terminal atom) (thread atom) (mutex atom) (condvar atom) (font-spec atom) (font-entity atom) (font-object atom) (vector array sequence atom) (null symbol list sequence atom))))
                nil [53807 54856])
            ("cl--generic-all-builtin-types" variable
               (:constant-flag t
                :default-value (delete-dups (copy-sequence (apply (function append) cl--generic-typeof-types))))
                nil [54858 54972])
            ("cl-generic-define-generalizer" code nil nil [54974 55253])
            ("cl-defmethod" code nil nil [55255 55999])
            ("cl--generic-prefill-dispatchers" code nil nil [56001 56044])
            ("cl--generic-derived-specializers" function (:arguments ("mode" "_")) nil [56385 56665])
            ("cl-generic-define-generalizer" code nil nil [56667 56835])
            ("cl-defmethod" code nil nil [56837 57067])
            ("cl-generic-define-context-rewriter" code nil nil [57069 57323])
            ("cl-defmethod" code nil nil [57353 57783])
            ("cl-generic" package nil nil [57786 57807]))          
      :file "cl-generic.el.gz"
      :pointmax 57836
      :fsize 16094
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 39307 . 39308) (symbol 38045 . 38062) (open-paren 38044 . 38045) (close-paren 17281 . 17282) (symbol 13554 . 13570) (open-paren 13553 . 13554) (close-paren 5099 . 5100) (symbol 5065 . 5082) (open-paren 5064 . 5065) (close-paren 5040 . 5041) (symbol 5004 . 5021) (open-paren 5003 . 5004) (close-paren 5001 . 5002) (symbol 4966 . 4983) (open-paren 4965 . 4966)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [6316 6333])
            ("cl-lib" include nil nil [6354 6371])
            ("epg" include nil nil [6392 6406])
            ("seq" include nil nil [6434 6448])
            ("tabulated-list" include nil nil [6450 6475])
            ("macroexp" include nil nil [6476 6495])
            ("url-handlers" include nil nil [6496 6519])
            ("package" customgroup (:user-visible-flag t) nil [6521 6621])
            ("package-enable-at-startup" variable (:default-value t) nil [6666 7091])
            ("package-load-list" variable (:default-value (quote (all))) nil [7093 8189])
            ("package-archives" variable (:default-value (\` (("gnu" \, (format "http%s://elpa.gnu.org/packages/" (if (gnutls-available-p) "s" "")))))) nil [8191 9047])
            ("package-menu-hide-low-priority" variable (:default-value (quote archive)) nil [9084 10066])
            ("package-archive-priorities" variable nil nil [10068 10688])
            ("package-pinned-packages" variable nil nil [10690 11801])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [11803 12105])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [12107 12698])
            ("declare-function" code nil nil [12700 12816])
            ("package-gnupghome-dir" variable (:default-value (expand-file-name "gnupg" package-user-dir)) nil [12818 13517])
            ("package-check-signature" variable (:default-value (if (and (require (quote epg-config)) (epg-find-configuration (quote OpenPGP))) (quote allow-unsigned))) nil [13519 14076])
            ("package-unsigned-archives" variable nil nil [14078 14262])
            ("package-selected-packages" variable nil nil [14264 14821])
            ("package-menu-async" variable (:default-value t) nil [14823 15097])
            ("package--default-summary" variable (:default-value "No description available.") nil [15492 15553])
            ("cl-defstruct" code nil nil [15555 18323])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [18325 18579])
            ("package-version-join" function (:arguments ("vlist")) nil [18599 19731])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [19733 19897])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [19899 20079])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [20081 20279])
            ("package-desc-priority" function (:arguments ("p")) nil [20281 20433])
            ("cl-defstruct" code nil nil [20509 20668])
            ("package--builtins" variable nil nil [20986 21332])
            ("put" code nil nil [21333 21381])
            ("package-alist" variable nil nil [21383 21817])
            ("put" code nil nil [21818 21862])
            ("package-activated-list" variable nil nil [21864 22019])
            ("put" code nil nil [22020 22073])
            ("package-process-define-package" function (:arguments ("exp")) nil [22270 23133])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [23135 23896])
            ("package-load-all-descriptors" function nil nil [23898 24651])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [24653 25301])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [25392 26121])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [26123 26730])
            ("package--autoloads-file-name" function (:arguments ("pkg-desc")) nil [26732 26992])
            ("package--activate-autoloads-and-load-path" function (:arguments ("pkg-desc")) nil [26994 27684])
            ("Info-directory-list" variable nil nil [27686 27714])
            ("declare-function" code nil nil [27715 27759])
            ("package--load-files-for-activation" function (:arguments ("pkg-desc" "reload")) nil [27761 28968])
            ("package-activate-1" function (:arguments ("pkg-desc" "reload" "deps")) nil [28970 30419])
            ("declare-function" code nil nil [30421 30479])
            ("package--list-loaded-files" function (:arguments ("dir")) nil [30481 32231])
            ("package-activate" function (:arguments ("package" "force")) nil [32427 33435])
            ("tar-parse-info" variable nil nil [33706 33729])
            ("declare-function" code nil nil [33730 33779])
            ("declare-function" code nil nil [33780 33840])
            ("declare-function" code nil nil [33841 33906])
            ("package-untar-buffer" function (:arguments ("dir")) nil [33908 34778])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [34780 34954])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [34955 37486])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [37488 38555])
            ("declare-function" code nil nil [38571 38646])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [38648 38910])
            ("generated-autoload-file" variable nil nil [38912 38944])
            ("autoload-timestamps" variable nil nil [38945 38973])
            ("version-control" variable nil nil [38974 38998])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [39000 39715])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [39717 40209])
            ("warning-minimum-level" variable nil nil [40228 40258])
            ("package--compile" function (:arguments ("pkg-desc")) nil [40259 40596])
            ("package-read-from-string" function (:arguments ("str")) nil [40641 41182])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [41184 41876])
            ("declare-function" code nil nil [41878 41926])
            ("declare-function" code nil nil [41927 41985])
            ("declare-function" code nil nil [41986 42046])
            ("declare-function" code nil nil [42047 42104])
            ("package-buffer-info" function nil nil [42106 43781])
            ("package--read-pkg-desc" function (:arguments ("kind")) nil [43783 44302])
            ("declare-function" code nil nil [44304 44364])
            ("declare-function" code nil nil [44365 44420])
            ("package-tar-file-info" function nil nil [44422 45141])
            ("package-dir-info" function nil nil [45143 46119])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [46244 46411])
            ("declare-function" code nil nil [46413 46471])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [46473 46754])
            ("declare-function" code nil nil [46756 47005])
            ("declare-function" code nil nil [47006 47141])
            ("declare-function" code nil nil [47142 47204])
            ("declare-function" code nil nil [47205 47264])
            ("declare-function" code nil nil [47265 47325])
            ("package--display-verify-error" function (:arguments ("context" "sig-file")) nil [47327 47972])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [47974 48924])
            ("cl-defmacro" code nil nil [48926 52391])
            ("define-error" code nil nil [52393 52451])
            ("package--check-signature-content" function (:arguments ("content" "string" "sig-file")) nil [52453 53876])
            ("package--buffer-string" function nil nil [53878 54113])
            ("package--cs" function (:arguments ("string")) nil [54115 54222])
            ("package--check-signature" function (:arguments ("location" "file" "string" "async" "callback" "unwind")) nil [54224 56320])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [56712 56884])
            ("package-archive-contents" variable nil nil [56949 57145])
            ("put" code nil nil [57146 57201])
            ("package--compatibility-table" variable nil nil [57203 57754])
            ("package--build-compatibility-table" function nil nil [57756 58080])
            ("package--add-to-compatibility-table" function (:arguments ("pkg")) nil [58082 58694])
            ("cl-defstruct" code nil nil [58858 59071])
            ("package--append-to-alist" function (:arguments ("pkg-desc" "alist")) nil [59073 60027])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [60029 61223])
            ("package--read-archive-file" function (:arguments ("file")) nil [61225 61908])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [61910 62449])
            ("package--old-archive-priorities" variable nil nil [62451 62749])
            ("package-read-all-archive-contents" function nil nil [62751 63082])
            ("package--initialized" variable nil nil [63266 63299])
            ("package--init-file-ensured" variable nil nil [63301 63398])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [63415 64927])
            ("package--downloads-in-progress" variable nil nil [65104 65195])
            ("declare-function" code nil nil [65197 65262])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [65279 65820])
            ("package--post-download-archives-hook" variable nil nil [65822 66032])
            ("put" code nil nil [66033 66100])
            ("package--update-downloads-in-progress" function (:arguments ("entry")) nil [66102 66764])
            ("package--download-one-archive" function (:arguments ("archive" "file" "async")) nil [66766 68724])
            ("package--download-and-read-archives" function (:arguments ("async")) nil [68726 69425])
            ("package-refresh-contents" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [69442 70350])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [70609 74820])
            ("package--find-non-dependencies" function nil nil [74822 75384])
            ("package--save-selected-packages" function (:arguments ("value")) nil [75386 75778])
            ("package--user-selected-p" function (:arguments ("pkg")) nil [75780 76149])
            ("package--get-deps" function (:arguments ("pkg" "only")) nil [76151 76888])
            ("package--user-installed-p" function (:arguments ("package")) nil [76890 77282])
            ("package--removable-packages" function nil nil [77284 77974])
            ("package--used-elsewhere-p" function (:arguments ("pkg-desc" "pkg-list" "all")) nil [77976 78850])
            ("package--sort-deps-in-alist" function (:arguments ("package" "only")) nil [78852 79511])
            ("package--sort-by-dependence" function (:arguments ("package-list")) nil [79513 80366])
            ("package-archive-base" function (:arguments ("desc")) nil [80760 80908])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [80910 83190])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [83192 83977])
            ("package-download-transaction" function (:arguments ("packages")) nil [83979 84322])
            ("package--ensure-init-file" function nil nil [84324 86984])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg" "dont-select"))
                nil [87001 88835])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [88837 89186])
            ("declare-function" code nil nil [89188 89246])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [89263 90762])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [90779 91226])
            ("package-install-selected-packages" function (:user-visible-flag t) nil [91243 92519])
            ("package--newest-p" function (:arguments ("pkg")) nil [92544 92713])
            ("package-delete" function
               (:user-visible-flag t
                :arguments ("pkg-desc" "force" "nosave"))
                nil [92715 96259])
            ("package-reinstall" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [96276 96772])
            ("package-autoremove" function (:user-visible-flag t) nil [96789 97792])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [97845 99284])
            ("package-help-section-name" variable
               (:default-value (quote ((t :inherit (bold font-lock-function-name-face))))
                :type "face")
                nil [99286 99456])
            ("package--print-help-section" function (:arguments ("name" "strings")) nil [99458 99905])
            ("declare-function" code nil nil [99907 99967])
            ("describe-package-1" function (:arguments ("pkg")) nil [99969 109452])
            ("package-install-button-action" function (:arguments ("button")) nil [109454 109784])
            ("package-delete-button-action" function (:arguments ("button")) nil [109786 110109])
            ("package-keyword-button-action" function (:arguments ("button")) nil [110111 110271])
            ("package-make-button" function (:arguments ("text" "props")) nil [110273 110742])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "H" (function package-menu-hide-package)) (define-key map "?" (quote package-menu-describe-package)) (define-key map "(" (function package-menu-toggle-hiding)) map)) nil [110771 111689])
            ("easy-menu-define" code nil nil [111691 113503])
            ("package-menu--new-package-list" variable nil nil [113505 113624])
            ("package-menu--transaction-status" variable nil nil [113626 113724])
            ("define-derived-mode" code nil nil [113726 114658])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [114660 115028])
            ("package-list-unversioned" variable nil nil [115030 115144])
            ("package-list-unsigned" variable nil nil [115146 115261])
            ("package--emacs-version-list" variable (:default-value (version-to-list emacs-version)) nil [115263 115363])
            ("package--incompatible-p" function (:arguments ("pkg" "shallow")) nil [115365 116535])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [116537 118199])
            ("package-menu--hide-packages" variable (:default-value t) nil [118201 118425])
            ("package-menu-toggle-hiding" function (:user-visible-flag t) nil [118427 118916])
            ("package--remove-hidden" function (:arguments ("pkg-list")) nil [118918 120894])
            ("package-hidden-regexps" variable nil nil [120896 121324])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [121326 123521])
            ("package-all-keywords" function nil nil [123523 123786])
            ("package--mapc" function (:arguments ("function" "packages")) nil [123788 125047])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [125049 125639])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [125641 126441])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [126443 126676])
            ("make-obsolete" code nil nil [126677 126773])
            ("package-name" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [126800 126915])
            ("package-description" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [126917 127058])
            ("package-status-built-in" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [127136 127290])
            ("package-status-external" variable
               (:default-value (quote ((t :inherit package-status-built-in)))
                :type "face")
                nil [127292 127447])
            ("package-status-available" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [127449 127590])
            ("package-status-new" variable
               (:default-value (quote ((t :inherit (bold package-status-available))))
                :type "face")
                nil [127592 127745])
            ("package-status-held" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [127747 127894])
            ("package-status-disabled" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [127896 128050])
            ("package-status-installed" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [128052 128208])
            ("package-status-dependency" variable
               (:default-value (quote ((t :inherit package-status-installed)))
                :type "face")
                nil [128210 128370])
            ("package-status-unsigned" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [128372 128526])
            ("package-status-incompat" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [128528 128665])
            ("package-status-avail-obso" variable
               (:default-value (quote ((t :inherit package-status-incompat)))
                :type "face")
                nil [128667 128826])
            ("package-menu--print-info-simple" function (:arguments ("pkg")) nil [128856 130554])
            ("package-menu--old-archive-contents" variable nil nil [130556 130661])
            ("package-menu-refresh" function (:user-visible-flag t) nil [130663 131135])
            ("package-menu-hide-package" function (:user-visible-flag t) nil [131137 132299])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [132301 132677])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [132705 132995])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [132997 133275])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [133277 133439])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [133441 133603])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [133605 133910])
            ("package--quick-help-keys" variable (:default-value (quote (("install," "delete," "unmark," ("execute" . 1)) ("next," "previous") ("Hide-package," "(-toggle-hidden") ("refresh-contents," "g-redisplay," "filter," "help")))) nil [133912 134122])
            ("package--prettify-quick-help-key" function (:arguments ("desc")) nil [134124 134625])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [134627 134905])
            ("define-obsolete-function-alias" code nil nil [134907 135009])
            ("package-menu-get-status" function nil nil [135011 135199])
            ("package-archive-priority" function (:arguments ("archive")) nil [135201 135462])
            ("package-desc-priority-version" function (:arguments ("pkg-desc")) nil [135464 135802])
            ("package-menu--find-upgrades" function nil nil [135804 136805])
            ("package-menu--mark-upgrades-pending" variable nil nil [136807 136917])
            ("package-menu--mark-upgrades-1" function nil nil [136919 137917])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [137919 138571])
            ("package-menu--list-to-prompt" function (:arguments ("packages")) nil [138573 139155])
            ("package-menu--prompt-transaction-p" function (:arguments ("delete" "install" "upgrade")) nil [139157 139747])
            ("package-menu--partition-transaction" function (:arguments ("install" "delete")) nil [139749 140452])
            ("package-menu--perform-transaction" function (:arguments ("install-list" "delete-list")) nil [140454 141554])
            ("package--update-selected-packages" function (:arguments ("add" "remove")) nil [141556 142224])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [142226 144571])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [144573 144807])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [144809 145908])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [145910 146113])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [146115 146264])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [146266 146412])
            ("package-menu--populate-new-package-list" function nil nil [146414 146878])
            ("package-menu--find-and-notify-upgrades" function nil nil [146880 147290])
            ("package-menu--post-refresh" function nil nil [147292 148020])
            ("package-menu--mark-or-notify-upgrades" function nil nil [148022 148643])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [148660 150064])
            ("defalias" code nil nil [150081 150129])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [150152 150823])
            ("package-menu-filter" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [150938 151564])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [151566 151792])
            ("package" package nil nil [151794 151812]))          
      :file "package.el.gz"
      :pointmax 151839
      :fsize 38589
      :lastmodtime '(23866 1512 0 0)
      :unmatched-syntax '((close-paren 6406 . 6407) (symbol 6374 . 6391) (open-paren 6373 . 6374) (close-paren 6371 . 6372) (symbol 6336 . 6353) (open-paren 6335 . 6336) (close-paren 6333 . 6334) (symbol 6298 . 6315) (open-paren 6297 . 6298)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lisp-shadow" customgroup (:user-visible-flag t) nil [1935 2046])
            ("define-obsolete-variable-alias" code nil nil [2048 2145])
            ("load-path-shadows-compare-text" variable nil nil [2147 2368])
            ("load-path-shadows-find" function (:arguments ("path")) nil [2370 6024])
            ("define-obsolete-function-alias" code nil nil [6026 6116])
            ("load-path-shadows-same-file-or-nonexistent" function (:arguments ("f1" "f2")) nil [6206 6668])
            ("load-path-shadows-font-lock-keywords" variable (:default-value (\` (((\, (format "hides \\(%s.*\\)" (file-name-directory (or (locate-library "simple") (file-name-as-directory (expand-file-name "../lisp" data-directory)))))) 1 font-lock-warning-face)))) nil [6670 7139])
            ("define-derived-mode" code nil nil [7141 7407])
            ("button" include nil nil [7458 7475])
            ("define-button-type" code nil nil [7476 7880])
            ("list-load-path-shadows" function
               (:user-visible-flag t
                :arguments ("stringp"))
                nil [7899 11664])
            ("shadow" package nil nil [11666 11683]))          
      :file "shadow.el.gz"
      :pointmax 11709
      :fsize 4711
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1646 1663])
            ("syntax-propertize-function" variable nil nil [1718 2986])
            ("syntax-propertize-chunk-size" variable (:default-value 500) nil [2988 3029])
            ("syntax-propertize-extend-region-functions" variable (:default-value (quote (syntax-propertize-wholelines))) nil [3031 3841])
            ("make-variable-buffer-local" code nil nil [3972 4043])
            ("syntax-propertize-wholelines" function (:arguments ("start" "end")) nil [4045 4243])
            ("syntax-propertize-multiline" function (:arguments ("beg" "end")) nil [4245 4722])
            ("syntax-propertize--shift-groups" function (:arguments ("re" "n")) nil [4724 4956])
            ("syntax-propertize-precompile-rules" function (:arguments ("rules")) nil [4958 5734])
            ("syntax-propertize-rules" function (:arguments ("rules")) nil [5736 12947])
            ("syntax-propertize-via-font-lock" function (:arguments ("keywords")) nil [12949 13486])
            ("syntax-propertize" function (:arguments ("pos")) nil [13488 16422])
            ("syntax-propertize-chunks" variable (:default-value 2000) nil [16467 16790])
            ("internal--syntax-propertize" function (:arguments ("charpos")) nil [16792 16972])
            ("syntax-ppss-depth" function (:arguments ("ppss")) nil [17027 17077])
            ("syntax-ppss-toplevel-pos" function (:arguments ("ppss")) nil [17079 17589])
            ("syntax-ppss-context" function (:arguments ("ppss")) nil [17591 17701])
            ("syntax-ppss-max-span" variable (:default-value 20000) nil [17703 17922])
            ("syntax-begin-function" variable nil nil [17924 18135])
            ("make-obsolete-variable" code nil nil [18136 18194])
            ("defvar-local" code nil nil [18635 18902])
            ("defvar-local" code nil nil [18904 18999])
            ("defvar-local" code nil nil [19001 19106])
            ("defalias" code nil nil [19108 19178])
            ("syntax-ppss-flush-cache" function (:arguments ("beg" "ignored")) nil [19179 20530])
            ("syntax-ppss-stats" variable (:default-value [(0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (1 . 2500.0)]) nil [20532 20625])
            ("syntax-ppss-stats" function nil nil [20626 20792])
            ("defvar-local" code nil nil [20794 20884])
            ("syntax-ppss--data" function nil nil [20886 21237])
            ("syntax-ppss" function (:arguments ("pos")) nil [21239 27708])
            ("syntax-ppss-debug" function nil nil [27734 27966])
            ("syntax" package nil nil [28548 28565]))          
      :file "syntax.el.gz"
      :pointmax 28591
      :fsize 8999
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1663 . 1664) (symbol 1628 . 1645) (open-paren 1627 . 1628)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1327 1344])
            ("internal--thread-argument" function (:arguments ("first?" "forms")) nil [1348 1830])
            ("thread-first" function (:arguments ("forms")) nil [1832 2265])
            ("thread-last" function (:arguments ("forms")) nil [2267 2656])
            ("internal--listify" function (:arguments ("elt")) nil [2658 2916])
            ("internal--check-binding" function (:arguments ("binding")) nil [2918 3133])
            ("internal--build-binding-value-form" function (:arguments ("binding" "prev-var")) nil [3135 3338])
            ("internal--build-binding" function (:arguments ("binding" "prev-var")) nil [3340 3573])
            ("internal--build-bindings" function (:arguments ("bindings")) nil [3575 3897])
            ("if-let*" function (:arguments ("varlist" "then" "else")) nil [3899 4396])
            ("when-let*" function (:arguments ("varlist" "body")) nil [4398 4695])
            ("and-let*" function (:arguments ("varlist" "body")) nil [4697 5243])
            ("if-let" function (:arguments ("spec" "then" "else")) nil [5245 6378])
            ("when-let" function (:arguments ("spec" "body")) nil [6380 6751])
            ("hash-table-empty-p" function (:arguments ("hash-table")) nil [6753 6891])
            ("hash-table-keys" function (:arguments ("hash-table")) nil [6893 7035])
            ("hash-table-values" function (:arguments ("hash-table")) nil [7037 7185])
            ("string-empty-p" function (:arguments ("string")) nil [7187 7278])
            ("string-join" function (:arguments ("strings" "separator")) nil [7280 7412])
            ("define-obsolete-function-alias" code nil nil [7414 7478])
            ("string-trim-left" function (:arguments ("string" "regexp")) nil [7480 7750])
            ("string-trim-right" function (:arguments ("string" "regexp")) nil [7752 8025])
            ("string-trim" function (:arguments ("string" "trim-left" "trim-right")) nil [8027 8297])
            ("string-blank-p" function (:arguments ("string")) nil [8299 8439])
            ("string-remove-prefix" function (:arguments ("prefix" "string")) nil [8441 8621])
            ("string-remove-suffix" function (:arguments ("suffix" "string")) nil [8623 8825])
            ("subr-x" package nil nil [8827 8844]))          
      :file "subr-x.el.gz"
      :pointmax 8870
      :fsize 3017
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1344 . 1345) (symbol 1309 . 1326) (open-paren 1308 . 1309)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1121 1571])
            ("function-put" code nil nil [1572 1614])
            ("function-put" code nil nil [1615 1663])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1784 2116])
            ("defalias" code nil nil [2118 3260])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3516 6460])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6462 7237])
            ("defalias" code nil nil [7239 9492])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9541 12124])
            ("defalias" code nil nil [12206 12392])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13403 13875])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13877 13955])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13957 14327])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [14329 15222])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [15224 16191])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [16193 17024])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [17027 18868])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [19198 19634])
            ("dont-compile" function (:arguments ("body")) nil [19636 19945])
            ("eval-when-compile" function (:arguments ("body")) nil [20188 20681])
            ("eval-and-compile" function (:arguments ("body")) nil [20683 21269])
            ("with-no-warnings" function (:arguments ("body")) nil [21271 21479])
            ("make-obsolete-variable" code nil nil [22774 22883])
            ("make-obsolete" code nil nil [22884 22975]))          
      :file "byte-run.el.gz"
      :pointmax 23003
      :fsize 6757
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexpand-all-environment" variable nil nil [1213 1253])
            ("macroexp--cons" function (:arguments ("car" "cdr" "original-cons")) nil [1255 1468])
            ("macroexp--accumulate" function (:arguments ("var+list" "body")) nil [1702 2758])
            ("macroexp--all-forms" function (:arguments ("forms" "skip")) nil [2760 3101])
            ("macroexp--all-clauses" function (:arguments ("clauses" "skip")) nil [3103 3476])
            ("macroexp--compiler-macro" function (:arguments ("handler" "form")) nil [3478 3678])
            ("macroexp--funcall-if-compiled" function (:arguments ("_form")) nil [3680 4001])
            ("put" code nil nil [4002 4144])
            ("macroexp--compiling-p" function nil nil [4146 4524])
            ("macroexp--warned" variable (:default-value (make-hash-table :test (function equal) :weakness (quote key))) nil [4526 4598])
            ("macroexp--warn-and-return" function (:arguments ("msg" "form" "compile-only")) nil [4600 5440])
            ("macroexp--obsolete-warning" function (:arguments ("fun" "obsolescence-data" "type")) nil [5442 5868])
            ("macroexpand-1" function (:arguments ("form" "environment")) nil [5870 6774])
            ("macroexp-macroexpand" function (:arguments ("form" "env")) nil [6776 7530])
            ("macroexp--expand-all" function (:arguments ("form")) nil [7532 12456])
            ("macroexpand-all" function (:arguments ("form" "environment")) nil [12473 12867])
            ("macroexp-parse-body" function (:arguments ("body")) nil [12908 13302])
            ("macroexp-progn" function (:arguments ("exps")) nil [13304 13437])
            ("macroexp-unprogn" function (:arguments ("exp")) nil [13439 13629])
            ("macroexp-let*" function (:arguments ("bindings" "exp")) nil [13631 13875])
            ("macroexp-if" function (:arguments ("test" "then" "else")) nil [13877 15226])
            ("macroexp-let2" function (:arguments ("test" "sym" "exp" "body")) nil [15228 16855])
            ("macroexp-let2*" function (:arguments ("test" "bindings" "body")) nil [16857 17201])
            ("macroexp--maxsize" function (:arguments ("exp" "size")) nil [17203 17809])
            ("macroexp-small-p" function (:arguments ("exp")) nil [17811 17927])
            ("macroexp--const-symbol-p" function (:arguments ("symbol" "any-value")) nil [17929 18490])
            ("macroexp-const-p" function (:arguments ("exp")) nil [18492 18996])
            ("macroexp-copyable-p" function (:arguments ("exp")) nil [18998 19135])
            ("macroexp-quote" function (:arguments ("v")) nil [19137 19427])
            ("macroexp--backtrace" function nil nil [19868 20141])
            ("macroexp--trim-backtrace-frame" function (:arguments ("frame")) nil [20143 20630])
            ("macroexp--pending-eager-loads" variable nil nil [20632 20737])
            ("macroexp--debug-eager" variable nil nil [20739 20773])
            ("internal-macroexpand-for-load" function (:arguments ("form" "full-p")) nil [20775 22377])
            ("add-hook" code nil nil [22810 23065])
            ("macroexp" package nil nil [23068 23087]))          
      :file "macroexp.el.gz"
      :pointmax 23115
      :fsize 7628
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 23065 . 23066) (symbol 22790 . 22807) (open-paren 22789 . 22790)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1074 1091])
            ("cl-defstruct" code nil nil [1094 1846])
            ("timerp" function (:arguments ("object")) nil [1848 1953])
            ("timer--check" function (:arguments ("timer")) nil [1955 2060])
            ("timer--time-setter" function (:arguments ("timer" "time")) nil [2062 2496])
            ("timer--time" function (:arguments ("timer")) nil [2522 2708])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2710 3105])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [3107 3606])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3608 4613])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4615 4968])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [4970 5112])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [5114 5446])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [5448 6101])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [6103 6333])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [6336 7335])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7337 7853])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7855 8732])
            ("defalias" code nil nil [8734 8775])
            ("cancel-timer" function (:arguments ("timer")) nil [8777 8981])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8983 9405])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9407 9945])
            ("timer-event-last" variable nil nil [9994 10052])
            ("timer-event-last-1" variable nil nil [10053 10121])
            ("timer-event-last-2" variable nil nil [10122 10191])
            ("timer-max-repeats" variable (:default-value 10) nil [10193 10570])
            ("timer-until" function (:arguments ("timer" "time")) nil [10572 10829])
            ("timer-event-handler" function (:arguments ("timer")) nil [10831 13779])
            ("timeout-event-p" function (:arguments ("event")) nil [13842 13966])
            ("declare-function" code nil nil [13970 14021])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [14023 16444])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [16446 16932])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [16934 17313])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [17315 18466])
            ("with-timeout-timers" variable nil nil [18469 18572])
            ("with-timeout" function (:arguments ("list" "body")) nil [18574 20053])
            ("with-timeout-suspend" function nil nil [20055 20507])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [20509 20841])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [20843 21083])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-06) (cons "microsecond" 1e-06) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [21086 21602])
            ("timer-duration" function (:arguments ("string")) nil [21604 22306])
            ("internal-timer-start-idle" function nil nil [22308 22535])
            ("timer" package nil nil [22538 22554]))          
      :file "timer.el.gz"
      :pointmax 22579
      :fsize 7272
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1091 . 1092) (symbol 1056 . 1073) (open-paren 1055 . 1056)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1423 1440])
            ("cl--parsing-keywords" function (:arguments ("kwords" "other-keys" "body")) nil [1555 3308])
            ("cl--check-key" function (:arguments ("x")) nil [3310 3461])
            ("cl--check-test-nokey" function (:arguments ("item" "x")) nil [3463 3740])
            ("cl--check-test" function (:arguments ("item" "x")) nil [3742 3885])
            ("cl--check-match" function (:arguments ("x" "y")) nil [3887 4128])
            ("cl-test" variable nil nil [4355 4371])
            ("cl-test-not" variable nil nil [4372 4392])
            ("cl-if" variable nil nil [4393 4407])
            ("cl-if-not" variable nil nil [4408 4426])
            ("cl-key" variable nil nil [4427 4442])
            ("cl-reduce" function (:arguments ("cl-func" "cl-seq" "cl-keys")) nil [4459 5629])
            ("cl-fill" function (:arguments ("cl-seq" "cl-item" "cl-keys")) nil [5646 6296])
            ("cl-replace" function (:arguments ("cl-seq1" "cl-seq2" "cl-keys")) nil [6313 8272])
            ("cl-remove" function (:arguments ("cl-item" "cl-seq" "cl-keys")) nil [8289 10086])
            ("cl-remove-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [10103 10465])
            ("cl-remove-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [10482 10856])
            ("cl-delete" function (:arguments ("cl-item" "cl-seq" "cl-keys")) nil [10873 12516])
            ("cl-delete-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [12533 12865])
            ("cl-delete-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [12882 13226])
            ("cl-remove-duplicates" function (:arguments ("cl-seq" "cl-keys")) nil [13243 13495])
            ("cl-delete-duplicates" function (:arguments ("cl-seq" "cl-keys")) nil [13512 13764])
            ("cl--delete-duplicates" function (:arguments ("cl-seq" "cl-keys" "cl-copy")) nil [13766 15598])
            ("cl-substitute" function (:arguments ("cl-new" "cl-old" "cl-seq" "cl-keys")) nil [15615 16477])
            ("cl-substitute-if" function (:arguments ("cl-new" "cl-pred" "cl-list" "cl-keys")) nil [16494 16894])
            ("cl-substitute-if-not" function (:arguments ("cl-new" "cl-pred" "cl-list" "cl-keys")) nil [16911 17323])
            ("cl-nsubstitute" function (:arguments ("cl-new" "cl-old" "cl-seq" "cl-keys")) nil [17340 18749])
            ("cl-nsubstitute-if" function (:arguments ("cl-new" "cl-pred" "cl-list" "cl-keys")) nil [18766 19138])
            ("cl-nsubstitute-if-not" function (:arguments ("cl-new" "cl-pred" "cl-list" "cl-keys")) nil [19155 19539])
            ("cl-find" function (:arguments ("cl-item" "cl-seq" "cl-keys")) nil [19556 19896])
            ("cl-find-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [19913 20204])
            ("cl-find-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [20221 20524])
            ("cl-position" function (:arguments ("cl-item" "cl-seq" "cl-keys")) nil [20541 20952])
            ("cl--position" function (:arguments ("cl-item" "cl-seq" "cl-start" "cl-end" "cl-from-end")) nil [20954 21729])
            ("cl-position-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [21746 22058])
            ("cl-position-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [22075 22399])
            ("cl-count" function (:arguments ("cl-item" "cl-seq" "cl-keys")) nil [22416 23043])
            ("cl-count-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [23060 23302])
            ("cl-count-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [23319 23573])
            ("cl-mismatch" function (:arguments ("cl-seq1" "cl-seq2" "cl-keys")) nil [23590 24990])
            ("cl-search" function (:arguments ("cl-seq1" "cl-seq2" "cl-keys")) nil [25007 26194])
            ("cl-sort" function (:arguments ("cl-seq" "cl-pred" "cl-keys")) nil [26211 26775])
            ("cl-stable-sort" function (:arguments ("cl-seq" "cl-pred" "cl-keys")) nil [26792 27086])
            ("cl-merge" function (:arguments ("cl-type" "cl-seq1" "cl-seq2" "cl-pred" "cl-keys")) nil [27103 27893])
            ("cl-member" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [27910 28491])
            ("cl--compiler-macro-member" function (:prototype-flag t) nil [28492 28539])
            ("cl-member-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [28556 28830])
            ("cl-member-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [28847 29133])
            ("cl--adjoin" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [29150 29340])
            ("cl-assoc" function (:arguments ("cl-item" "cl-alist" "cl-keys")) nil [29357 29976])
            ("cl--compiler-macro-assoc" function (:prototype-flag t) nil [29977 30023])
            ("cl-assoc-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [30040 30275])
            ("cl-assoc-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [30292 30542])
            ("cl-rassoc" function (:arguments ("cl-item" "cl-alist" "cl-keys")) nil [30559 31063])
            ("cl-rassoc-if" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [31080 31317])
            ("cl-rassoc-if-not" function (:arguments ("cl-pred" "cl-list" "cl-keys")) nil [31334 31586])
            ("cl-union" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [31603 32501])
            ("cl-nunion" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [32518 32988])
            ("cl-intersection" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [33005 33943])
            ("cl-nintersection" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [33960 34408])
            ("cl-set-difference" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [34425 35218])
            ("cl-nset-difference" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [35235 35715])
            ("cl-set-exclusive-or" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [35732 36367])
            ("cl-nset-exclusive-or" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [36384 36985])
            ("cl-subsetp" function (:arguments ("cl-list1" "cl-list2" "cl-keys")) nil [37002 37522])
            ("cl-subst-if" function (:arguments ("cl-new" "cl-pred" "cl-tree" "cl-keys")) nil [37539 37890])
            ("cl-subst-if-not" function (:arguments ("cl-new" "cl-pred" "cl-tree" "cl-keys")) nil [37907 38270])
            ("cl-nsubst" function (:arguments ("cl-new" "cl-old" "cl-tree" "cl-keys")) nil [38287 38640])
            ("cl-nsubst-if" function (:arguments ("cl-new" "cl-pred" "cl-tree" "cl-keys")) nil [38657 39018])
            ("cl-nsubst-if-not" function (:arguments ("cl-new" "cl-pred" "cl-tree" "cl-keys")) nil [39035 39408])
            ("cl--alist" variable nil nil [39410 39428])
            ("cl-sublis" function (:arguments ("cl-alist" "cl-tree" "cl-keys")) nil [39445 39836])
            ("cl--sublis-rec" function (:arguments ("cl-tree")) nil [39838 40327])
            ("cl-nsublis" function (:arguments ("cl-alist" "cl-tree" "cl-keys")) nil [40344 40793])
            ("cl--nsublis-rec" function (:arguments ("cl-tree")) nil [40795 41451])
            ("cl-tree-equal" function (:arguments ("cl-x" "cl-y" "cl-keys")) nil [41468 41806])
            ("cl--tree-equal-rec" function (:arguments ("cl-x" "cl-y")) nil [41808 42077])
            ("run-hooks" code nil nil [42080 42109])
            ("cl-seq" package nil nil [42212 42229]))          
      :file "cl-seq.el.gz"
      :pointmax 42255
      :fsize 7445
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("checkdoc-version" variable (:default-value "0.6.1") nil [7569 7661])
            ("help-mode" include nil nil [7663 7683])
            ("thingatpt" include nil nil [7713 7733])
            ("compilation-error-regexp-alist" variable nil nil [7774 7813])
            ("compilation-mode-font-lock-keywords" variable nil nil [7814 7858])
            ("checkdoc" customgroup (:user-visible-flag t) nil [7860 7988])
            ("checkdoc-minor-mode-string" variable (:default-value " CDoc") nil [7990 8183])
            ("checkdoc-autofix-flag" variable (:default-value (quote semiautomatic)) nil [8185 8838])
            ("checkdoc-bouncy-flag" variable (:default-value t) nil [8840 9079])
            ("checkdoc-force-docstrings-flag" variable (:default-value t) nil [9081 9385])
            ("checkdoc-force-history-flag" variable nil nil [9471 9683])
            ("checkdoc-permit-comma-termination-flag" variable nil nil [9766 10166])
            ("checkdoc-spellcheck-documentation-flag" variable nil nil [10260 10875])
            ("checkdoc-ispell-lisp-words" variable (:default-value (quote ("alist" "emacs" "etags" "keymap" "paren" "regexp" "sexp" "xemacs"))) nil [10969 11150])
            ("checkdoc-max-keyref-before-warn" variable (:default-value 10) nil [11250 11494])
            ("checkdoc-arguments-in-order-flag" variable nil nil [11496 11882])
            ("checkdoc-package-keywords-flag" variable nil nil [11970 12197])
            ("define-obsolete-variable-alias" code nil nil [12199 12288])
            ("checkdoc-style-functions" variable nil nil [12289 12687])
            ("define-obsolete-variable-alias" code nil nil [12689 12794])
            ("checkdoc-comment-style-functions" variable nil nil [12795 13039])
            ("checkdoc-diagnostic-buffer" variable (:default-value "*Style Warnings*") nil [13041 13131])
            ("checkdoc-verb-check-experimental-flag" variable (:default-value t) nil [13133 13410])
            ("checkdoc-generate-compile-warnings-flag" variable nil nil [13503 13715])
            ("checkdoc-symbol-words" variable nil nil [13717 13992])
            ("checkdoc-list-of-strings-p" function (:arguments ("obj")) nil [14102 14381])
            ("checkdoc-proper-noun-list" variable (:default-value (quote ("ispell" "xemacs" "emacs" "lisp"))) nil [14383 14520])
            ("checkdoc-proper-noun-regexp" variable (:default-value (concat "\\_<" (regexp-opt checkdoc-proper-noun-list t) "\\(\\_>\\|[.!?][ 	
\"]\\)")) nil [14522 14918])
            ("checkdoc-common-verbs-regexp" variable nil nil [14999 15108])
            ("checkdoc-common-verbs-wrong-voice" variable (:default-value (quote (("adds" . "add") ("allows" . "allow") ("appends" . "append") ("applies" . "apply") ("arranges" . "arrange") ("brings" . "bring") ("calls" . "call") ("catches" . "catch") ("changes" . "change") ("checks" . "check") ("contains" . "contain") ("converts" . "convert") ("creates" . "create") ("destroys" . "destroy") ("disables" . "disable") ("executes" . "execute") ("evals" . "evaluate") ("evaluates" . "evaluate") ("finds" . "find") ("forces" . "force") ("gathers" . "gather") ("generates" . "generate") ("goes" . "go") ("guesses" . "guess") ("highlights" . "highlight") ("holds" . "hold") ("ignores" . "ignore") ("indents" . "indent") ("initializes" . "initialize") ("inserts" . "insert") ("installs" . "install") ("investigates" . "investigate") ("keeps" . "keep") ("kills" . "kill") ("leaves" . "leave") ("lets" . "let") ("loads" . "load") ("looks" . "look") ("makes" . "make") ("marks" . "mark") ("matches" . "match") ("moves" . "move") ("notifies" . "notify") ("offers" . "offer") ("parses" . "parse") ("performs" . "perform") ("prepares" . "prepare") ("prepends" . "prepend") ("reads" . "read") ("raises" . "raise") ("removes" . "remove") ("replaces" . "replace") ("resets" . "reset") ("restores" . "restore") ("returns" . "return") ("runs" . "run") ("saves" . "save") ("says" . "say") ("searches" . "search") ("selects" . "select") ("sets" . "set") ("sex" . "s*x") ("shows" . "show") ("signifies" . "signify") ("sorts" . "sort") ("starts" . "start") ("stores" . "store") ("switches" . "switch") ("tells" . "tell") ("tests" . "test") ("toggles" . "toggle") ("tries" . "try") ("turns" . "turn") ("undoes" . "undo") ("unloads" . "unload") ("unmarks" . "unmark") ("updates" . "update") ("uses" . "use") ("yanks" . "yank")))) nil [15190 17576])
            ("checkdoc-syntax-table" variable (:default-value (let ((st (make-syntax-table emacs-lisp-mode-syntax-table))) (modify-syntax-entry 45 "w" st) st)) nil [17578 17967])
            ("defalias" code nil nil [17990 18078])
            ("defalias" code nil nil [18079 18173])
            ("defalias" code nil nil [18174 18268])
            ("defalias" code nil nil [18269 18360])
            ("defalias" code nil nil [18361 18446])
            ("defalias" code nil nil [18447 18553])
            ("defalias" code nil nil [18554 18618])
            ("checkdoc" function (:user-visible-flag t) nil [18662 20466])
            ("checkdoc-display-status-buffer" function (:arguments ("check")) nil [20468 21187])
            ("checkdoc-interactive" function
               (:user-visible-flag t
                :arguments ("start-here" "showstatus"))
                nil [21204 22188])
            ("checkdoc-message-interactive" function
               (:user-visible-flag t
                :arguments ("start-here" "showstatus"))
                nil [22205 23204])
            ("checkdoc-interactive-loop" function (:arguments ("start-here" "showstatus" "findfunc")) nil [23206 29579])
            ("checkdoc-interactive-ispell-loop" function (:arguments ("start-here")) nil [29581 30459])
            ("checkdoc-message-interactive-ispell-loop" function (:arguments ("start-here")) nil [30461 31377])
            ("checkdoc-next-error" function (:arguments ("enable-fix")) nil [31380 32420])
            ("checkdoc-next-message-error" function (:arguments ("enable-fix")) nil [32422 33333])
            ("checkdoc-recursive-edit" function (:arguments ("msg")) nil [33335 34044])
            ("checkdoc-eval-current-buffer" function (:user-visible-flag t) nil [34061 34391])
            ("checkdoc-current-buffer" function
               (:user-visible-flag t
                :arguments ("take-notes"))
                nil [34408 35657])
            ("checkdoc-file" function (:arguments ("file")) nil [35674 35905])
            ("checkdoc-start" function
               (:user-visible-flag t
                :arguments ("take-notes"))
                nil [35922 36550])
            ("checkdoc-continue" function
               (:user-visible-flag t
                :arguments ("take-notes"))
                nil [36567 37743])
            ("checkdoc-next-docstring" function nil nil [37745 38013])
            ("checkdoc--next-docstring" function nil nil [38015 38898])
            ("checkdoc-comments" function
               (:user-visible-flag t
                :arguments ("take-notes"))
                nil [38915 39806])
            ("checkdoc-rogue-spaces" function
               (:user-visible-flag t
                :arguments ("take-notes" "interact"))
                nil [39823 40671])
            ("checkdoc-message-text" function
               (:user-visible-flag t
                :arguments ("take-notes"))
                nil [40688 41473])
            ("checkdoc-eval-defun" function (:user-visible-flag t) nil [41490 41877])
            ("checkdoc-defun" function
               (:user-visible-flag t
                :arguments ("no-error"))
                nil [41894 43128])
            ("checkdoc-ispell" function (:user-visible-flag t) nil [43196 43483])
            ("checkdoc-ispell-current-buffer" function (:user-visible-flag t) nil [43500 43841])
            ("checkdoc-ispell-interactive" function (:user-visible-flag t) nil [43858 44201])
            ("checkdoc-ispell-message-interactive" function (:user-visible-flag t) nil [44218 44634])
            ("checkdoc-ispell-message-text" function (:user-visible-flag t) nil [44651 44992])
            ("checkdoc-ispell-start" function (:user-visible-flag t) nil [45009 45314])
            ("checkdoc-ispell-continue" function (:user-visible-flag t) nil [45331 45660])
            ("checkdoc-ispell-comments" function (:user-visible-flag t) nil [45677 46005])
            ("checkdoc-ispell-defun" function (:user-visible-flag t) nil [46022 46338])
            ("checkdoc-create-error-function" variable (:default-value (function checkdoc--create-error-for-checkdoc)) nil [46579 47097])
            ("checkdoc-create-error" function (:arguments ("text" "start" "end" "unfixable")) nil [47099 47388])
            ("checkdoc--create-error-for-checkdoc" function (:arguments ("text" "start" "end" "unfixable")) nil [47390 47726])
            ("checkdoc-error-text" function (:arguments ("err")) nil [47728 47897])
            ("checkdoc-error-start" function (:arguments ("err")) nil [47899 48078])
            ("checkdoc-error-end" function (:arguments ("err")) nil [48080 48255])
            ("checkdoc-error-unfixable" function (:arguments ("err")) nil [48257 48461])
            ("checkdoc-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (pmap (make-sparse-keymap))) (define-key map "\230" (quote checkdoc-eval-defun)) (define-key map "`" (quote checkdoc-continue)) (if (not (featurep (quote xemacs))) (define-key map [menu-bar emacs-lisp eval-buffer] (quote checkdoc-eval-current-buffer))) (define-key pmap "x" (quote checkdoc-defun)) (define-key pmap "X" (quote checkdoc-ispell-defun)) (define-key pmap "`" (quote checkdoc-continue)) (define-key pmap "~" (quote checkdoc-ispell-continue)) (define-key pmap "s" (quote checkdoc-start)) (define-key pmap "S" (quote checkdoc-ispell-start)) (define-key pmap "d" (quote checkdoc)) (define-key pmap "D" (quote checkdoc-ispell)) (define-key pmap "b" (quote checkdoc-current-buffer)) (define-key pmap "B" (quote checkdoc-ispell-current-buffer)) (define-key pmap "e" (quote checkdoc-eval-current-buffer)) (define-key pmap "m" (quote checkdoc-message-text)) (define-key pmap "M" (quote checkdoc-ispell-message-text)) (define-key pmap "c" (quote checkdoc-comments)) (define-key pmap "C" (quote checkdoc-ispell-comments)) (define-key pmap " " (quote checkdoc-rogue-spaces)) (define-key map "?" pmap) map)) nil [48496 49813])
            ("easy-menu-define" code nil nil [49851 51267])
            ("define-minor-mode" code nil nil [51369 51947])
            ("checkdoc-run-hooks" function (:arguments ("hookvar" "args")) nil [51968 52338])
            ("checkdoc-create-common-verbs-regexp" function nil nil [52340 52663])
            ("checkdoc-this-string-valid" function nil nil [53384 56661])
            ("checkdoc-this-string-valid-engine" function (:arguments ("fp")) nil [56663 76541])
            ("checkdoc-defun-info" function nil nil [76543 79622])
            ("checkdoc-in-sample-code-p" function (:arguments ("start" "limit")) nil [79624 80787])
            ("checkdoc-in-example-string-p" function (:arguments ("start" "limit")) nil [80789 81235])
            ("checkdoc-proper-noun-region-engine" function (:arguments ("begin" "end")) nil [81237 83605])
            ("checkdoc-sentencespace-region-engine" function (:arguments ("begin" "end")) nil [83607 85536])
            ("ispell-process" variable nil nil [85559 85582])
            ("declare-function" code nil nil [85583 85639])
            ("checkdoc-ispell-init" function nil nil [85641 86218])
            ("checkdoc-ispell-docstring-engine" function (:arguments ("end")) nil [86220 87871])
            ("checkdoc-rogue-space-check-engine" function (:arguments ("start" "end" "interact")) nil [87908 89858])
            ("generate-autoload-cookie" variable nil nil [89891 89924])
            ("lisp-mnt" include nil nil [89945 89964])
            ("declare-function" code nil nil [89991 90048])
            ("declare-function" code nil nil [90049 90120])
            ("declare-function" code nil nil [90121 90174])
            ("checkdoc-file-comments-engine" function nil nil [90176 95980])
            ("checkdoc-outside-major-sexp" function nil nil [95982 96232])
            ("checkdoc-message-text-search" function (:arguments ("beg" "end")) nil [96278 96751])
            ("checkdoc-message-text-next-string" function (:arguments ("end")) nil [96753 97596])
            ("checkdoc-message-text-engine" function (:arguments ("type")) nil [97598 101634])
            ("checkdoc-y-or-n-p" function (:arguments ("question")) nil [101669 102045])
            ("checkdoc-autofix-ask-replace" function (:arguments ("start" "end" "question" "replacewith" "complex")) nil [102047 103821])
            ("checkdoc-output-font-lock-keywords" variable (:default-value (quote (("^\\*\\*\\* \\(.+\\.el\\): \\([^ 
]+\\)" (1 font-lock-function-name-face) (2 font-lock-comment-face))))) nil [103849 104072])
            ("checkdoc-output-error-regex-alist" variable (:default-value (quote (("^\\(.+\\.el\\):\\([0-9]+\\): " 1 2)))) nil [104074 104159])
            ("checkdoc-pending-errors" variable nil nil [104161 104265])
            ("define-derived-mode" code nil nil [104267 104603])
            ("checkdoc-buffer-label" function nil nil [104605 104812])
            ("checkdoc-start-section" function (:arguments ("check-type")) nil [104814 105388])
            ("checkdoc-error" function (:arguments ("point" "msg")) nil [105390 106014])
            ("checkdoc-show-diagnostics" function nil nil [106016 106511])
            ("checkdoc-get-keywords" function nil nil [106513 106774])
            ("finder-known-keywords" variable nil nil [106776 106806])
            ("checkdoc-package-keywords" function (:user-visible-flag t) nil [106823 107770])
            ("custom-add-option" code nil nil [107772 107834])
            ("checkdoc" package nil nil [107836 107855]))          
      :file "checkdoc.el.gz"
      :pointmax 107883
      :fsize 29097
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 89964 . 89965) (symbol 89927 . 89944) (open-paren 89926 . 89927)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1402 1419])
            ("cl-coerce" function (:arguments ("x" "type")) nil [1456 2039])
            ("cl-equalp" function (:arguments ("x" "y")) nil [2074 2891])
            ("cl--mapcar-many" function (:arguments ("cl-func" "cl-seqs" "acc")) nil [2934 4024])
            ("cl-map" function (:arguments ("cl-type" "cl-func" "cl-seq" "cl-rest")) nil [4041 4341])
            ("cl-maplist" function (:arguments ("cl-func" "cl-list" "cl-rest")) nil [4358 4993])
            ("cl-mapc" function (:arguments ("cl-func" "cl-seq" "cl-rest")) nil [5010 5524])
            ("cl-mapl" function (:arguments ("cl-func" "cl-list" "cl-rest")) nil [5541 6020])
            ("cl-mapcan" function (:arguments ("cl-func" "cl-seq" "cl-rest")) nil [6037 6299])
            ("cl-mapcon" function (:arguments ("cl-func" "cl-list" "cl-rest")) nil [6316 6531])
            ("cl-some" function (:arguments ("cl-pred" "cl-seq" "cl-rest")) nil [6548 7094])
            ("cl-every" function (:arguments ("cl-pred" "cl-seq" "cl-rest")) nil [7111 7560])
            ("cl-notany" function (:arguments ("cl-pred" "cl-seq" "cl-rest")) nil [7577 7768])
            ("cl-notevery" function (:arguments ("cl-pred" "cl-seq" "cl-rest")) nil [7785 7978])
            ("cl--map-keymap-recursively" function (:arguments ("cl-func-rec" "cl-map" "cl-base")) nil [7995 8398])
            ("cl--map-intervals" function (:arguments ("cl-func" "cl-what" "cl-prop" "cl-start" "cl-end")) nil [8415 9601])
            ("cl--map-overlays" function (:arguments ("cl-func" "cl-buffer" "cl-start" "cl-end" "cl-arg")) nil [9618 10355])
            ("cl--set-frame-visible-p" function (:arguments ("frame" "val")) nil [10396 10568])
            ("cl-gcd" function (:arguments ("args")) nil [10600 10807])
            ("cl-lcm" function (:arguments ("args")) nil [10824 11049])
            ("cl-isqrt" function (:arguments ("x")) nil [11066 11384])
            ("cl-floor" function (:arguments ("x" "y")) nil [11401 11627])
            ("cl-ceiling" function (:arguments ("x" "y")) nil [11644 11937])
            ("cl-truncate" function (:arguments ("x" "y")) nil [11954 12215])
            ("cl-round" function (:arguments ("x" "y")) nil [12232 12813])
            ("cl-mod" function (:arguments ("x" "y")) nil [12830 12937])
            ("cl-rem" function (:arguments ("x" "y")) nil [12954 13064])
            ("cl-signum" function (:arguments ("x")) nil [13081 13200])
            ("cl-defun" code nil nil [13217 14547])
            ("cl--random-time" function nil nil [14570 14748])
            ("cl-defstruct" code nil nil [14806 15026])
            ("cl--random-state" variable (:default-value (cl--make-random-state (cl--random-time))) nil [15028 15095])
            ("cl-random" function (:arguments ("lim" "state")) nil [15112 16319])
            ("cl-make-random-state" function (:arguments ("state")) nil [16336 16712])
            ("cl--finite-do" function (:arguments ("func" "a" "b")) nil [16741 16927])
            ("cl-float-limits" function nil nil [16944 18524])
            ("cl-subseq" function (:arguments ("seq" "start" "end")) nil [18567 19958])
            ("cl-concatenate" function (:arguments ("type" "sequences")) nil [19975 20320])
            ("cl-revappend" function (:arguments ("x" "y")) nil [20358 20450])
            ("cl-nreconc" function (:arguments ("x" "y")) nil [20467 20558])
            ("cl-list-length" function (:arguments ("x")) nil [20575 20869])
            ("cl-tailp" function (:arguments ("sublist" "list")) nil [20886 21107])
            ("cl-get" function (:arguments ("sym" "tag" "def")) nil [21145 21464])
            ("cl--compiler-macro-get" function (:prototype-flag t) nil [21465 21509])
            ("cl-getf" function (:arguments ("plist" "tag" "def")) nil [21526 22196])
            ("cl--set-getf" function (:arguments ("plist" "tag" "val")) nil [22213 22391])
            ("cl--do-remf" function (:arguments ("plist" "tag")) nil [22408 22714])
            ("cl-remprop" function (:arguments ("sym" "tag")) nil [22731 23003])
            ("cl-fresh-line" function (:arguments ("stream")) nil [23034 23164])
            ("cl-prettyprint" function (:arguments ("form")) nil [23192 23595])
            ("cl--do-prettyprint" function nil nil [23597 24503])
            ("cl-prettyexpand" function (:arguments ("form" "full")) nil [24520 25030])
            ("cl-macs" include nil nil [25097 25115])
            ("help-mode" include nil nil [25151 25171])
            ("add-to-list" code nil nil [25315 25432])
            ("cl--typedef-regexp" variable
               (:constant-flag t
                :default-value (concat "(" (regexp-opt (quote ("defclass" "defstruct" "cl-defstruct" "cl-deftype" "deftype"))) "[ 	
]+%s[ 	
]+"))
                nil [25434 25618])
            ("with-eval-after-load" code nil nil [25619 25785])
            ("define-button-type" code nil nil [25787 25948])
            ("define-button-type" code nil nil [25950 26083])
            ("declare-function" code nil nil [26085 26149])
            ("cl-find-class" function (:arguments ("type")) nil [26166 26216])
            ("cl-describe-type" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [26233 27085])
            ("cl--describe-class" function (:arguments ("type" "class")) nil [27087 29674])
            ("cl--describe-class-slot" function (:arguments ("slot")) nil [29676 30773])
            ("cl--print-table" function (:arguments ("header" "rows")) nil [30775 32071])
            ("cl--describe-class-slots" function (:arguments ("class")) nil [32073 33437])
            ("run-hooks" code nil nil [33440 33471])
            ("cl-extra" package nil nil [33574 33593]))          
      :file "cl-extra.el.gz"
      :pointmax 33620
      :fsize 9990
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 25115 . 25116) (symbol 25079 . 25096) (open-paren 25078 . 25079)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1547 1564])
            ("macroexp" include nil nil [1565 1584])
            ("gv" include nil nil [1660 1673])
            ("cl--pop2" function (:arguments ("place")) nil [1675 1803])
            ("cl--optimize-safety" variable nil nil [1805 1833])
            ("cl--optimize-speed" variable nil nil [1834 1861])
            ("cl--compiler-macro-list*" function (:arguments ("_form" "arg" "others")) nil [2068 2279])
            ("define-obsolete-function-alias" code nil nil [2464 2561])
            ("cl--simple-funcs" variable
               (:constant-flag t
                :default-value (quote (car cdr nth aref elt if and or + - 1+ 1- min max car-safe cdr-safe progn prog1 prog2)))
                nil [2707 2829])
            ("cl--safe-funcs" variable
               (:constant-flag t
                :default-value (quote (* / % length memq list vector vectorp < > <= >= = error)))
                nil [2830 2919])
            ("cl--simple-expr-p" function (:arguments ("x" "size")) nil [2921 3424])
            ("cl--simple-exprs-p" function (:arguments ("xs")) nil [3426 3539])
            ("cl--safe-expr-p" function (:arguments ("x")) nil [3541 3917])
            ("cl--const-expr-p" function (:arguments ("x")) nil [3982 4240])
            ("cl--const-expr-val" function (:arguments ("x")) nil [4242 4607])
            ("cl--expr-contains" function (:arguments ("x" "y")) nil [4609 5254])
            ("cl--expr-contains-any" function (:arguments ("x" "y")) nil [5256 5357])
            ("cl--expr-depends-p" function (:arguments ("x" "y")) nil [5359 5551])
            ("cl--gensym-counter" variable nil nil [5567 5596])
            ("cl-gensym" function (:arguments ("prefix")) nil [5612 5969])
            ("cl--gentemp-counter" variable nil nil [5971 6001])
            ("cl-gentemp" function (:arguments ("prefix")) nil [6017 6385])
            ("def-edebug-spec" code nil nil [6412 6481])
            ("def-edebug-spec" code nil nil [6483 6561])
            ("def-edebug-spec" code nil nil [6563 6916])
            ("def-edebug-spec" code nil nil [6918 7003])
            ("def-edebug-spec" code nil nil [7005 7105])
            ("def-edebug-spec" code nil nil [7107 7166])
            ("def-edebug-spec" code nil nil [7168 7612])
            ("def-edebug-spec" code nil nil [7614 7649])
            ("cl--lambda-list-keywords" variable
               (:constant-flag t
                :default-value (quote (&optional &rest &key &allow-other-keys &aux &whole &body &environment)))
                nil [7651 7761])
            ("cl--bind-block" variable nil nil [8409 8432])
            ("cl--bind-defs" variable nil nil [8489 8511])
            ("cl--bind-enquote" variable nil nil [8568 8593])
            ("cl--bind-lets" variable nil nil [8648 8670])
            ("cl--bind-forms" variable nil nil [8671 8694])
            ("cl--transform-lambda" function (:arguments ("form" "bind-block")) nil [8696 13463])
            ("cl-defun" function (:arguments ("name" "args" "body")) nil [13480 14730])
            ("cl-iter-defun" function (:arguments ("name" "args" "body")) nil [14747 15552])
            ("def-edebug-spec" code nil nil [15718 16233])
            ("def-edebug-spec" code nil nil [16235 16292])
            ("def-edebug-spec" code nil nil [16294 16817])
            ("cl-defmacro" function (:arguments ("name" "args" "body")) nil [16834 17901])
            ("def-edebug-spec" code nil nil [17903 18063])
            ("def-edebug-spec" code nil nil [18117 18371])
            ("cl-function" function (:arguments ("func")) nil [18388 18829])
            ("cl--make-usage-var" function (:arguments ("x")) nil [18831 19027])
            ("cl--make-usage-args" function (:arguments ("arglist")) nil [19029 20890])
            ("cl--do-&aux" function (:arguments ("args")) nil [20892 21381])
            ("cl--do-arglist" function (:arguments ("args" "expr" "num")) nil [21383 27004])
            ("cl--arglist-args" function (:arguments ("args")) nil [27006 27465])
            ("cl-destructuring-bind" function (:arguments ("args" "expr" "body")) nil [27482 27997])
            ("cl--not-toplevel" variable nil nil [28030 28059])
            ("cl-eval-when" function (:arguments ("when" "body")) nil [28076 28961])
            ("cl--compile-time-too" function (:arguments ("form")) nil [28963 29479])
            ("cl-load-time-value" function (:arguments ("form" "_read-only")) nil [29496 30671])
            ("cl-case" function (:arguments ("expr" "clauses")) nil [30726 32209])
            ("cl-ecase" function (:arguments ("expr" "clauses")) nil [32226 32474])
            ("cl-typecase" function (:arguments ("expr" "clauses")) nil [32491 33559])
            ("cl-etypecase" function (:arguments ("expr" "clauses")) nil [33576 33837])
            ("cl-block" function (:arguments ("name" "body")) nil [33878 34625])
            ("cl-return" function (:arguments ("result")) nil [34642 34840])
            ("cl-return-from" function (:arguments ("name" "result")) nil [34857 35362])
            ("cl--loop-args" variable nil nil [35391 35413])
            ("cl--loop-accum-var" variable nil nil [35414 35441])
            ("cl--loop-accum-vars" variable nil nil [35442 35470])
            ("cl--loop-bindings" variable nil nil [35471 35497])
            ("cl--loop-body" variable nil nil [35498 35520])
            ("cl--loop-finally" variable nil nil [35521 35546])
            ("cl--loop-finish-flag" variable nil nil [35547 35576])
            ("cl--loop-first-flag" variable nil nil [35624 35652])
            ("cl--loop-initially" variable nil nil [35653 35680])
            ("cl--loop-iterator-function" variable nil nil [35681 35716])
            ("cl--loop-name" variable nil nil [35717 35739])
            ("cl--loop-result" variable nil nil [35740 35764])
            ("cl--loop-result-explicit" variable nil nil [35765 35798])
            ("cl--loop-result-var" variable nil nil [35799 35827])
            ("cl--loop-steps" variable nil nil [35828 35851])
            ("cl--loop-symbol-macs" variable nil nil [35852 35881])
            ("cl--loop-set-iterator-function" function (:arguments ("kind" "iterator")) nil [35883 36155])
            ("cl-loop" function (:arguments ("loop-args")) nil [36172 42217])
            ("cl--parse-loop-clause" function nil nil [46786 65806])
            ("cl--unused-var-p" function (:arguments ("sym")) nil [65808 65891])
            ("cl--loop-let" function (:arguments ("specs" "body" "par")) nil [65893 68251])
            ("cl--loop-handle-accum" function (:arguments ("def" "func")) nil [68253 68878])
            ("cl--loop-build-ands" function (:arguments ("clauses")) nil [68880 70075])
            ("cl-do" function (:arguments ("steps" "endtest" "body")) nil [70134 71328])
            ("cl-do*" function (:arguments ("steps" "endtest" "body")) nil [71345 72454])
            ("cl--expand-do-loop" function (:arguments ("steps" "endtest" "body" "star")) nil [72456 73163])
            ("cl-dolist" function (:arguments ("spec" "body")) nil [73180 73675])
            ("cl-dotimes" function (:arguments ("spec" "body")) nil [73692 74127])
            ("cl--tagbody-alist" variable nil nil [74129 74159])
            ("cl-tagbody" function (:arguments ("labels-or-stmts")) nil [74176 76332])
            ("cl--prog" function (:arguments ("binder" "bindings" "body")) nil [76334 76572])
            ("cl-prog" function (:arguments ("bindings" "body")) nil [76589 76787])
            ("cl-prog*" function (:arguments ("bindings" "body")) nil [76804 77005])
            ("cl-do-symbols" function (:arguments ("spec" "body")) nil [77022 77535])
            ("cl-do-all-symbols" function (:arguments ("spec" "body")) nil [77552 77819])
            ("cl-psetq" function (:arguments ("args")) nil [77855 78142])
            ("cl-progv" function (:arguments ("symbols" "values" "body")) nil [78193 79161])
            ("cl--labels-magic" variable
               (:constant-flag t
                :default-value (make-symbol "cl--labels-magic"))
                nil [79163 79223])
            ("cl--labels-convert-cache" variable nil nil [79225 79262])
            ("cl--labels-convert" function (:arguments ("f")) nil [79264 80162])
            ("cl-flet" function (:arguments ("bindings" "body")) nil [80179 82031])
            ("cl-flet*" function (:arguments ("bindings" "body")) nil [82048 82443])
            ("cl-labels" function (:arguments ("bindings" "body")) nil [82460 83704])
            ("cl-macrolet" function (:arguments ("bindings" "body")) nil [83810 84627])
            ("cl--old-macroexpand" variable
               (:constant-flag t
                :default-value (if (and (boundp (quote cl--old-macroexpand)) (eq (symbol-function (quote macroexpand)) (function cl--sm-macroexpand))) cl--old-macroexpand (symbol-function (quote macroexpand))))
                nil [84629 84846])
            ("cl--sm-macroexpand" function (:arguments ("exp" "env")) nil [84848 89178])
            ("cl-symbol-macrolet" function (:arguments ("bindings" "body")) nil [89195 90622])
            ("cl-multiple-value-bind" function (:arguments ("vars" "form" "body")) nil [90661 91392])
            ("cl-multiple-value-setq" function (:arguments ("vars" "form")) nil [91409 92364])
            ("cl-locally" function (:arguments ("body")) nil [92401 92505])
            ("cl-the" function (:arguments ("type" "form")) nil [92521 93027])
            ("cl--proclaim-history" variable (:default-value t) nil [93029 93060])
            ("cl--declare-stack" variable (:default-value t) nil [93087 93115])
            ("cl--do-proclaim" function (:arguments ("spec" "hist")) nil [93146 94654])
            ("cl--proclaims-deferred" variable nil nil [94718 94749])
            ("let" code nil nil [94750 94870])
            ("cl-declare" function (:arguments ("specs")) nil [94887 95280])
            ("cl-psetf" function (:arguments ("args")) nil [95386 96235])
            ("cl-remf" function (:arguments ("place" "tag")) nil [96252 96719])
            ("cl-shiftf" function (:arguments ("place" "args")) nil [96736 97223])
            ("cl-rotatef" function (:arguments ("args")) nil [97240 98152])
            ("cl--letf" function (:arguments ("bindings" "simplebinds" "binds" "body")) nil [98322 100593])
            ("cl-letf" function (:arguments ("bindings" "body")) nil [100610 101496])
            ("cl-letf*" function (:arguments ("bindings" "body")) nil [101513 101878])
            ("cl-callf" function (:arguments ("func" "place" "args")) nil [101895 102350])
            ("cl-callf2" function (:arguments ("func" "arg1" "place" "args")) nil [102367 103015])
            ("cl-defsubst" function (:arguments ("name" "args" "body")) nil [103032 104534])
            ("cl--defsubst-expand" function (:arguments ("argns" "body" "simple" "whole" "_unsafe" "argvs")) nil [104536 105662])
            ("cl--sublis" function (:arguments ("alist" "tree")) nil [105664 105936])
            ("cl--find-class" function (:arguments ("type")) nil [105955 106013])
            ("cl--struct-default-parent" variable nil nil [106125 106163])
            ("cl-defstruct" function (:arguments ("struct" "descs")) nil [106180 119504])
            ("cl--struct-all-parents" function (:arguments ("class")) nil [119542 119915])
            ("pcase-defmacro" code nil nil [119932 120768])
            ("cl--defstruct-predicate" function (:arguments ("type")) nil [120770 121028])
            ("cl--pcase-mutually-exclusive-p" function (:arguments ("orig" "pred1" "pred2")) nil [121030 122387])
            ("advice-add" code nil nil [122388 122482])
            ("cl-struct-sequence-type" function (:arguments ("struct-type")) nil [122485 122816])
            ("cl-struct-slot-info" function (:arguments ("struct-type")) nil [122818 123797])
            ("define-error" code nil nil [123799 123864])
            ("cl-struct-slot-offset" function (:arguments ("struct-type" "slot-name")) nil [123866 124403])
            ("byte-compile-function-environment" variable nil nil [124405 124447])
            ("byte-compile-macro-environment" variable nil nil [124448 124487])
            ("cl--macroexp-fboundp" function (:arguments ("sym")) nil [124489 124842])
            ("put" code nil nil [124844 124884])
            ("put" code nil nil [124885 124925])
            ("put" code nil nil [124926 124969])
            ("put" code nil nil [124970 125016])
            ("put" code nil nil [125017 125068])
            ("put" code nil nil [125069 125117])
            ("define-inline" code nil nil [125135 127643])
            ("cl-check-type" function (:arguments ("form" "type" "string")) nil [127661 128227])
            ("cl-assert" function (:arguments ("form" "show-args" "string" "args")) nil [128244 129328])
            ("cl-define-compiler-macro" function (:arguments ("func" "args" "body")) nil [129367 130891])
            ("cl-compiler-macroexpand" function (:arguments ("form")) nil [130908 131562])
            ("cl--active-block-names" variable nil nil [131605 131640])
            ("cl-define-compiler-macro" code nil nil [131642 132246])
            ("cl-define-compiler-macro" code nil nil [132248 132441])
            ("cl--compiler-macro-member" function (:arguments ("form" "a" "list" "keys")) nil [132518 132832])
            ("cl--compiler-macro-assoc" function (:arguments ("form" "a" "list" "keys")) nil [132834 133239])
            ("cl--compiler-macro-adjoin" function (:arguments ("form" "a" "list" "keys")) nil [133256 133473])
            ("cl--compiler-macro-get" function (:arguments ("_form" "sym" "prop" "def")) nil [133475 133617])
            ("dolist" code nil nil [133619 134169])
            ("cl-proclaim" code nil nil [134199 134322])
            ("mapc" code nil nil [134362 134621])
            ("mapc" code nil nil [134671 134833])
            ("cl-deftype" function (:arguments ("name" "arglist" "body")) nil [134877 135231])
            ("cl-deftype" code nil nil [135233 135295])
            ("define-inline" code nil nil [135402 136203])
            ("run-hooks" code nil nil [136205 136235])
            ("cl-macs" package nil nil [136338 136356]))          
      :file "cl-macs.el.gz"
      :pointmax 136383
      :fsize 34514
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1755 1772])
            ("cl-macs" include nil nil [1793 1811])
            ("define-error" code nil nil [1945 2010])
            ("cl--assertion-failed" function (:arguments ("form" "string" "sargs" "args")) nil [2012 2296])
            ("cl-struct-cl-structure-object-tags" variable nil nil [2581 2628])
            ("unless" code nil nil [2629 2729])
            ("fset" code nil nil [2731 3134])
            ("cl--struct-get-class" function (:arguments ("name")) nil [3136 4380])
            ("cl--plist-remove" function (:arguments ("plist" "member")) nil [4382 4591])
            ("cl--struct-register-child" function (:arguments ("parent" "tag")) nil [4593 5021])
            ("cl-struct-define" function (:arguments ("name" "docstring" "parent" "type" "named" "slots" "children-sym" "tag" "print")) nil [5038 8578])
            ("cl-defstruct" code nil nil [8580 9774])
            ("cl-defstruct" code nil nil [9776 9964])
            ("setq" code nil nil [9966 10019])
            ("cl-defstruct" code nil nil [10021 10635])
            ("cl--copy-slot-descriptor" function (:arguments ("slot")) nil [10637 10792])
            ("cl-defstruct" code nil nil [10794 11348])
            ("cl-assert" code nil nil [11350 11777])
            ("setf" code nil nil [11854 11965])
            ("cl--struct-register-child" code nil nil [11966 12083])
            ("cl-assert" code nil nil [12085 12133])
            ("cl-assert" code nil nil [12134 12183])
            ("cl-assert" code nil nil [12184 12246])
            ("cl-assert" code nil nil [12247 12310])
            ("cl-assert" code nil nil [12311 12373])
            ("cl-assert" code nil nil [12374 12437])
            ("cl--defsubst-expand" function (:prototype-flag t) nil [12654 12695])
            ("put" code nil nil [12780 12816])
            ("put" code nil nil [12817 12853])
            ("put" code nil nil [12854 12890])
            ("put" code nil nil [12891 12928])
            ("cl-preloaded" package nil nil [12930 12953]))          
      :file "cl-preloaded.el.gz"
      :pointmax 12984
      :fsize 4271
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1811 . 1812) (symbol 1775 . 1792) (open-paren 1774 . 1775) (close-paren 1772 . 1773) (symbol 1737 . 1754) (open-paren 1736 . 1737)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("check-declare-warning-buffer" variable
               (:constant-flag t
                :default-value "*Check Declarations Warnings*")
                nil [1507 1643])
            ("check-declare-locate" function (:arguments ("file" "basefile")) nil [1645 3034])
            ("check-declare-scan" function (:arguments ("file")) nil [3036 5121])
            ("byte-compile-arglist-signature" function (:prototype-flag t) nil [5123 5176])
            ("check-declare" customgroup (:user-visible-flag t) nil [5178 5261])
            ("check-declare-ext-errors" variable nil nil [5263 5396])
            ("check-declare-verify" function (:arguments ("fnfile" "fnlist")) nil [5398 10534])
            ("check-declare-sort" function (:arguments ("alist")) nil [10536 11012])
            ("check-declare-warn" function (:arguments ("file" "fn" "fnfile" "type" "line")) nil [11014 12065])
            ("declare-function" code nil nil [12067 12124])
            ("check-declare-files" function (:arguments ("files")) nil [12126 13564])
            ("check-declare-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [13581 13864])
            ("check-declare-directory" function
               (:user-visible-flag t
                :arguments ("root"))
                nil [13881 14505])
            ("check-declare" package nil nil [14507 14531]))          
      :file "check-declare.el.gz"
      :pointmax 14565
      :fsize 4452
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [1138 1155])
            ("cl-print-readably" variable nil nil [1157 1247])
            ("cl-print--number-table" variable nil nil [1249 1284])
            ("cl-print--currently-printing" variable nil nil [1285 1326])
            ("cl-print--depth" variable nil nil [1327 1468])
            ("cl-defgeneric" code nil nil [1486 1936])
            ("cl-defmethod" code nil nil [1938 3346])
            ("cl-defmethod" code nil nil [3348 3758])
            ("cl-defmethod" code nil nil [3760 4092])
            ("define-button-type" code nil nil [4094 4307])
            ("cl-print-compiled" variable nil nil [4309 4566])
            ("cl-print-compiled-button" variable (:default-value t) nil [4568 4793])
            ("disassemble-1" function (:prototype-flag t) nil [4795 4829])
            ("cl-defmethod" code nil nil [4831 6608])
            ("cl-defmethod" code nil nil [6872 7448])
            ("cl-defmethod" code nil nil [7450 8131])
            ("cl-defmethod" code nil nil [8356 9460])
            ("cl-print--number-index" variable nil nil [9462 9497])
            ("cl-print--find-sharing" function (:arguments ("object" "table")) nil [9499 11134])
            ("cl-print--preprocess" function (:arguments ("object")) nil [11136 11535])
            ("cl-prin1" function (:arguments ("object" "stream")) nil [11552 12061])
            ("cl-prin1-to-string" function (:arguments ("object")) nil [12078 12273])
            ("cl-print" package nil nil [12275 12294]))          
      :file "cl-print.el.gz"
      :pointmax 12321
      :fsize 3939
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("copyright" customgroup (:user-visible-flag t) nil [1144 1235])
            ("copyright-limit" variable (:default-value 2000) nil [1237 1477])
            ("copyright-at-end-flag" variable nil nil [1479 1682])
            ("copyright-regexp" variable (:default-value "\\(©\\|@copyright{}\\|[Cc]opyright\\s *:?\\s *\\(?:(C)\\)?\\|[Cc]opyright\\s *:?\\s *©\\)\\s *\\(?:[^0-9
]*\\s *\\)?\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [1758 2099])
            ("copyright-names-regexp" variable nil nil [2101 2434])
            ("copyright-years-regexp" variable (:default-value "\\(\\s *\\)\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [2703 2940])
            ("copyright-year-ranges" variable nil nil [3092 3462])
            ("copyright-query" variable (:default-value (quote function)) nil [3539 3831])
            ("copyright-current-gpl-version" variable
               (:constant-flag t
                :default-value "3")
                nil [3909 4016])
            ("copyright-update" variable (:default-value t) nil [4018 4123])
            ("copyright-current-year" variable (:default-value (format-time-string "%Y")) nil [4226 4325])
            ("copyright-limit" function nil nil [4327 4513])
            ("copyright-re-search" function (:arguments ("regexp" "bound" "noerror" "count")) nil [4515 4787])
            ("copyright-start-point" function nil nil [4789 4957])
            ("copyright-offset-too-large-p" function nil nil [4959 5217])
            ("copyright-find-copyright" function nil nil [5219 6036])
            ("copyright-find-end" function nil nil [6038 6794])
            ("copyright-update-year" function (:arguments ("replace" "noquery")) nil [6796 8419])
            ("copyright-update" function
               (:user-visible-flag t
                :arguments ("arg" "interactivep"))
                nil [8436 10358])
            ("copyright-fix-years" function (:user-visible-flag t) nil [10447 13047])
            ("define-skeleton" code nil nil [13064 13427])
            ("copyright-update-directory" function
               (:user-visible-flag t
                :arguments ("directory" "match" "fix"))
                nil [13483 14172])
            ("copyright" package nil nil [14174 14194]))          
      :file "copyright.el.gz"
      :pointmax 14223
      :fsize 5047
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.3!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
